From ctrueden at wisc.edu  Tue Nov  1 09:39:20 2011
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Tue, 1 Nov 2011 09:39:20 -0500
Subject: [ImageJ-devel] [PATCH] Do not import com.apple.mrj.* in
	MacAdapter
In-Reply-To: <C061EFD5-FD47-4A8B-AB0E-8DB18864419A@nih.gov>
References: <alpine.DEB.1.00.1110141237280.32316@s15462909.onlinehome-server.info>
	<CADN69ykn1m+WqH2wRV9hKbL=Z89qNP9p5BZ0MDx0wdf0XZhs-Q@mail.gmail.com>
	<C061EFD5-FD47-4A8B-AB0E-8DB18864419A@nih.gov>
Message-ID: <CADN69ykDKZUEsYE6zT5JtEJ7oj=CFcig9zCLp0xHPyUU4baZbw@mail.gmail.com>

>
> I removed the problematic import statement from MacAdapter.source in
> ImageJ 1.46a.
>

Thanks Wayne!

Regards,
Curtis
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20111101/6d173f76/attachment.html>

From schindelin at wisc.edu  Fri Nov  4 09:26:50 2011
From: schindelin at wisc.edu (Johannes Schindelin)
Date: Fri, 04 Nov 2011 09:26:50 -0500 (CDT)
Subject: [ImageJ-devel] [fiji-devel] [Fwd: bug in
 IntervalIndexer.indexToPositionWithOffset with solution] (fwd)
Message-ID: <alpine.DEB.1.00.1111040926290.32316@s15462909.onlinehome-server.info>

FYI

---------- Forwarded message ----------
Date: Fri, 04 Nov 2011 10:39:52 +0100
From: Stephan Saalfeld <saalfeld at mpi-cbg.de>
To: Christian Dietz <christian.dietz at uni-konstanz.de>,
    Martin Horn <Martin.Horn at uni-konstanz.de>,
    fiji-devel <fiji-devel at googlegroups.com>
Cc: Albert Cardona <acardona at ini.phys.ethz.ch>,
    Tobias Pietzsch <pietzsch at mpi-cbg.de>,
    Stephan Preibisch <preibisch at mpi-cbg.de>
Subject: [fiji-devel] [Fwd: bug in IntervalIndexer.indexToPositionWithOffset
    with solution]

Hi ImgLib2ers,

in the last master commit Albert has found and fixed the first half of
the long standing quirk in IntervalIndexer at calculating indices and
positions with offsets (identified and reported a few weeks ago by
Christion and Martin).  IntervalIndexer was consistently(!) treating
offsets as negative offsets which was correct but unhandy using the
positive min property in Intervals.  It is clear that inverting the
logic in IntervalIndexer is a good idea.   To (hopefully) complete the
process and get consistency back, I pushed the second half of the
inversion now.  Either of both commits will break the KNIME code!  May
be it will break other code too that is using IntervalIndexer.  I beg
your pardon for being short in time and therefore not able to do
extensive testings.  Please check your code and sorry for the
inconvenience.  It's a short inconvenience for a better solution.

Best regards,
Stephan





-- 
You received this message because you are subscribed to the Google Groups "Fiji-devel" group.
To post to this group, send email to fiji-devel at googlegroups.com.
To unsubscribe from this group, send email to fiji-devel+unsubscribe at googlegroups.com.
For more options, visit this group at http://groups.google.com/group/fiji-devel?hl=en.
-------------- next part --------------
An embedded message was scrubbed...
From: Albert Cardona <acardona at ini.phys.ethz.ch>
Subject: bug in IntervalIndexer.indexToPositionWithOffset with solution
Date: Thu, 03 Nov 2011 09:56:13 -0400
Size: 2188
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20111104/6188a616/attachment.mht>

From ctrueden at wisc.edu  Tue Nov  8 15:32:48 2011
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Tue, 8 Nov 2011 15:32:48 -0600
Subject: [ImageJ-devel] Proposed web site domain changes
Message-ID: <CADN69ymK=Nmw70PZeXVBhk-8ZqNqMbcbz+SSvgcmCm68p+Pe6A@mail.gmail.com>

Hi everyone,

As you know, we are currently documenting the ImageJ2 development work at:
  http://imagejdev.org/

However, we do have the domain imagej.net. Currently, it is in use as
follows:
  imagej.net -> imagej.nih.gov/ij
  developer.imagej.net -> imagejdev.org
  fiji.imagej.net -> fiji.sc
  test.imagej.net -> a test website, not populated with anything

I think that moving forward, we should phase out the imagejdev.org domain,
which has been more targeted toward our initial 2-year effort than to the
ImageJ project as a whole. The content from imagejdev.org would remain in
place, but served under developer.imagej.net instead (with an automatic
redirect from the old imagejdev.org of course). This is in line with other
organizations having a "developer" subdomain or similar:
developer.mozilla.org, developer.amazon.com, developers.google.com, etc.

For source code repositories, Trac, Jenkins, Maven and other resources, we
could have a new subdomain such as code.imagej.net that would serve the
purpose of the current dev.imagejdev.org. (We could call it "dev.imagej.net"
but that might be confusing since there would also be a "
developer.imagej.net" that is something else.)

So, in summary, my proposal for updating the web resources is:
  imagej.net = Top level ImageJ portal. About ImageJ, downloads, plugins,
etc.
  developer.imagej.net = Documentation for developers coding against ImageJ.
  code.image.net = Project management tools: VCS, Trac, Jenkins, Maven

Thoughts? Suggestions?

-Curtis
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20111108/44df4d1a/attachment.html>

From leek at broadinstitute.org  Tue Nov 15 07:32:32 2011
From: leek at broadinstitute.org (Lee Kamentsky)
Date: Tue, 15 Nov 2011 08:32:32 -0500
Subject: [ImageJ-devel] Encoding 2-d plane information in a URL
Message-ID: <4ec269f1.271e340a.2d3f.ffffe05b@mx.google.com>

Hi Curtis,
Sorry about being AWOL for the last two checkins - the last one was the 
Broad Retreat so I was away. I've been sort of roped into a standards 
committee for a file format for storing measurements (ISAC ICEFormat). 
One of the problems we're having is selecting a single plane from a TIFF 
stack or movie using a URL - you'd like to have some way to specify a 
monochrome 2-d plane (or more generally, an N-d hypercube from a stack).

I'm thinking about something like:

file:///path-to/myimage.tif?series=5&index=15 (reads a whole plane)

file:///path-to/myimage.tif?series=5&index=15&x=200&y=200&height=400&width=400 
(reads a 200x200 partial image).

Is that general enough for movie, flex, tif and other formats? Any 
precedents for this? Useful in other contexts?

Thanks,
--Lee



From gharris at mbl.edu  Tue Nov 15 11:01:44 2011
From: gharris at mbl.edu (Grant B. Harris)
Date: Tue, 15 Nov 2011 12:01:44 -0500
Subject: [ImageJ-devel] Encoding 2-d plane information in a URL
In-Reply-To: <4ec269f1.271e340a.2d3f.ffffe05b@mx.google.com>
References: <4ec269f1.271e340a.2d3f.ffffe05b@mx.google.com>
Message-ID: <4EC29AF8.9000100@mbl.edu>

An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20111115/dfcd7eff/attachment.html>

From will at lifesci.dundee.ac.uk  Tue Nov 22 10:40:45 2011
From: will at lifesci.dundee.ac.uk (Will Moore)
Date: Tue, 22 Nov 2011 16:40:45 +0000
Subject: [ImageJ-devel] ImageJ-devel Digest, Vol 25, Issue 4
In-Reply-To: <mailman.1.1321380001.12849.imagej-devel@imagejdev.org>
References: <mailman.1.1321380001.12849.imagej-devel@imagejdev.org>
Message-ID: <65F021CB-FF98-4AD5-80E0-09D4493F0944@lifesci.dundee.ac.uk>

Hi Lee,

Just to let you know what we've done, in relation to this discussion:

In OMERO, we have a web client and have urls to define the rendered images. 
The urls encode plane (imageId, Z, T) as well as a number of optional rendering attributes.

E.g. 
http://gretzky.openmicroscopy.org.uk/webclient/render_image/26930/8/0/?c=1|204:4095$FF0000,2|204:3736$00FF00&m=c&p=normal&ia=0&q=0.9&zm=100&x=0&y=0

This is described in more detail here
http://trac.openmicroscopy.org.uk/ome/wiki/OmeroWeb/WebGateway

We also have attributes for tiling: either 'tile' zoom-level, col, row, w, h,	 E.g. tile=0,14,6,256,256
or 'region': x, y, w, h.	 E.g.  region=512,512,256,256

 Cheers,

  Will. 



> Date: Tue, 15 Nov 2011 08:32:32 -0500
> From: Lee Kamentsky <leek at broadinstitute.org>
> To: Curtis Rueden <ctrueden at wisc.edu>, imagej-devel at imagejdev.org
> Subject: [ImageJ-devel] Encoding 2-d plane information in a URL
> Message-ID: <4ec269f1.271e340a.2d3f.ffffe05b at mx.google.com>
> Content-Type: text/plain; charset=ISO-8859-1; format=flowed
> 
> Hi Curtis,
> Sorry about being AWOL for the last two checkins - the last one was the 
> Broad Retreat so I was away. I've been sort of roped into a standards 
> committee for a file format for storing measurements (ISAC ICEFormat). 
> One of the problems we're having is selecting a single plane from a TIFF 
> stack or movie using a URL - you'd like to have some way to specify a 
> monochrome 2-d plane (or more generally, an N-d hypercube from a stack).
> 
> I'm thinking about something like:
> 
> file:///path-to/myimage.tif?series=5&index=15 (reads a whole plane)
> 
> file:///path-to/myimage.tif?series=5&index=15&x=200&y=200&height=400&width=400 
> (reads a 200x200 partial image).
> 
> Is that general enough for movie, flex, tif and other formats? Any 
> precedents for this? Useful in other contexts?
> 
> Thanks,
> --Lee



From pietzsch at mpi-cbg.de  Mon Nov 28 09:24:27 2011
From: pietzsch at mpi-cbg.de (Tobias Pietzsch)
Date: Mon, 28 Nov 2011 16:24:27 +0100
Subject: [ImageJ-devel] ImgLib2 algorithm ComponentTree / Maximally Stable
	Extremal Regions
Message-ID: <4ED3A7AB.20000@mpi-cbg.de>

Hi,

I just pushed the branch mser to the imglib repository.
It contains an implementation of the linear (in the number of pixels) 
algorithm to build the component tree of an image, as described in the 
paper by D. Nister and H. Stewenius "Linear Time Maximally Stable 
Extremal Regions".

The generic algorithm is in net.imglib2.algorithm.componenttree.

In net.imglib2.algorithm.componenttree.pixellist there is an 
instantiation that stores the complete tree where all components share a 
single linked list to represent their respective pixel sets (This idea 
is from Jan Funke's MSER implementation).

In net.imglib2.algorithm.componenttree.mser there is an instantiation 
which builds the MSER tree (respectively forrest) of an image.

See imglib2-tests 
net.imglib2.algorithm.componenttree.pixellist.PixelListComponentTreeTest 
and net.imglib2.algorithm.componenttree.mser.MserTreeTest for examples 
of how to use.

best regards,
Tobias



From preibisch at mpi-cbg.de  Mon Nov 28 09:26:23 2011
From: preibisch at mpi-cbg.de (Stephan Preibisch)
Date: Mon, 28 Nov 2011 10:26:23 -0500
Subject: [ImageJ-devel] ImgLib2 algorithm ComponentTree / Maximally
	Stable Extremal Regions
In-Reply-To: <4ED3A7AB.20000@mpi-cbg.de>
References: <4ED3A7AB.20000@mpi-cbg.de>
Message-ID: <EE3FB24F-13BB-4222-B73B-376056FE4B9F@mpi-cbg.de>

Awesome Tobias! :)

On Nov 28, 2011, at 10:24 AM, Tobias Pietzsch wrote:

> Hi,
> 
> I just pushed the branch mser to the imglib repository.
> It contains an implementation of the linear (in the number of pixels) algorithm to build the component tree of an image, as described in the paper by D. Nister and H. Stewenius "Linear Time Maximally Stable Extremal Regions".
> 
> The generic algorithm is in net.imglib2.algorithm.componenttree.
> 
> In net.imglib2.algorithm.componenttree.pixellist there is an instantiation that stores the complete tree where all components share a single linked list to represent their respective pixel sets (This idea is from Jan Funke's MSER implementation).
> 
> In net.imglib2.algorithm.componenttree.mser there is an instantiation which builds the MSER tree (respectively forrest) of an image.
> 
> See imglib2-tests net.imglib2.algorithm.componenttree.pixellist.PixelListComponentTreeTest and net.imglib2.algorithm.componenttree.mser.MserTreeTest for examples of how to use.
> 
> best regards,
> Tobias
> 
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagejdev.org
> http://imagejdev.org/mailman/listinfo/imagej-devel




From pietzsch at mpi-cbg.de  Mon Nov 28 11:49:06 2011
From: pietzsch at mpi-cbg.de (Tobias Pietzsch)
Date: Mon, 28 Nov 2011 18:49:06 +0100
Subject: [ImageJ-devel] (ImgLib2) operations on two or more images with
	differing calibrations
Message-ID: <4ED3C992.60908@mpi-cbg.de>

Hi ImgLib2 people,

A while ago, Johannes asked about whether I had any thoughts on how this 
(see subject) should be done.  I finally had the time to look at
it now and found, that the ideas to do it are mostly in place (in my
opinion, at least) though implementation is not.

I wrote a few thoughts on the wiki
http://fiji.sc/wiki/index.php/ImgLib2_Discussion#RealViews
What do you think?

best regards,
Tobias



From leek at broadinstitute.org  Mon Nov 28 12:16:33 2011
From: leek at broadinstitute.org (Lee Kamentsky)
Date: Mon, 28 Nov 2011 13:16:33 -0500
Subject: [ImageJ-devel] (ImgLib2) operations on two or more images with
 differing calibrations
In-Reply-To: <4ED3C992.60908@mpi-cbg.de>
References: <4ED3C992.60908@mpi-cbg.de>
Message-ID: <4ed3d002.ea22340a.7b37.ffffa3c7@mx.google.com>

All so cool - my preference would be to have a CoordinateAffineTransform 
class that implemented RealRandomAccessible. It would take another 
RealRandomAccessible as input as well as the affine transform matrix. 
That's very general and it separates interpolation from transformation 
so that you can choose the interpolation method you want to use (e.g. 
InterpolatedRandomAccessible) and you can use the 
CoordinateAffineTransform class for other sorts of 
RealRandomAccessibles. For scaling, it's just a question of populating 
the diagonal of the matrix appropriately, right?

There are a lot of times when I'd like to treat images as functions that 
I could sample in a real space. For instance, in CellProfiler, we have a 
technique that uses spline interpolation to estimate variances in 
illumination. I'd like to divide my raw image by the spline  
interpolation and operate downstream on the result. I'm guessing that 
things like SIFT could be implemented very elegantly using 
RealRandomAccessibles whose output was a Gaussian transformation  of a 
RandomAccessible input.

OK, this is a joke, but I can see a slippery slope here to imglib3 where 
RandomAccessible is an artifact of images being stored using pixels and 
everything is done in a real space.

--Lee

On 11/28/2011 12:49 PM, Tobias Pietzsch wrote:
> Hi ImgLib2 people,
>
> A while ago, Johannes asked about whether I had any thoughts on how 
> this (see subject) should be done.  I finally had the time to look at
> it now and found, that the ideas to do it are mostly in place (in my
> opinion, at least) though implementation is not.
>
> I wrote a few thoughts on the wiki
> http://fiji.sc/wiki/index.php/ImgLib2_Discussion#RealViews
> What do you think?
>
> best regards,
> Tobias
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagejdev.org
> http://imagejdev.org/mailman/listinfo/imagej-devel




From G.Landini at bham.ac.uk  Tue Nov 29 03:17:34 2011
From: G.Landini at bham.ac.uk (Gabriel Landini)
Date: Tue, 29 Nov 2011 09:17:34 +0000
Subject: [ImageJ-devel] (ImgLib2) operations on two or more images with
	differing calibrations
In-Reply-To: <4ED3C992.60908@mpi-cbg.de>
References: <4ED3C992.60908@mpi-cbg.de>
Message-ID: <1929075.IIhJe1Jmey@ds170>

On Monday 28 Nov 2011 17:49:06 Tobias Pietzsch wrote:
> A while ago, Johannes asked about whether I had any thoughts on how this
> (see subject) should be done.  I finally had the time to look at
> it now and found, that the ideas to do it are mostly in place (in my
> opinion, at least) though implementation is not.

Suppose that you want to operate on 2 images with different calibrations. 
Would it be desirable to allow keeping one of the images "as is" and only  
interpolate/transform the other to match the calibration? I mean is there user 
control over which image gets interpolated to fit the calibration of the 
other?

Cheers
Gabriel




From pietzsch at mpi-cbg.de  Tue Nov 29 07:09:23 2011
From: pietzsch at mpi-cbg.de (Tobias Pietzsch)
Date: Tue, 29 Nov 2011 14:09:23 +0100
Subject: [ImageJ-devel] (ImgLib2) operations on two or more images with
 differing calibrations
In-Reply-To: <4ed3d002.ea22340a.7b37.ffffa3c7@mx.google.com>
References: <4ED3C992.60908@mpi-cbg.de>
	<4ed3d002.ea22340a.7b37.ffffa3c7@mx.google.com>
Message-ID: <4ED4D983.2000904@mpi-cbg.de>

Hi Lee,

In analogy to integer transforms & views we should have AffineTransform, 
which maps (coordinate) vectors to vectors.

Then we would have a view class that implements RealRandomAccessible. 
This view class is what you referred to as CoordinateAffineTransform. 
It would take another RealRandomAccessible and an AffineTransform, as 
you described.

The AffineTransform in turn would tie into a transform hierarchy: 
Affine is probably the most general transform we would support.  So 
there will be an interface Affine which extends RealTransform. 
Interface Rigid would derive from Affine and so on.  This interface 
hierarchy specifies the transform hierarchy, e.g., a Rigid is also an 
Affine.  Then on the implementation side we have
public class AffineTransform implements Affine, Concatenable< Affine >, 
PreConcatenable< Affine > {...}.

Lets assume, we implement a restricted transform like scaling within the 
transform hierarchy.  Then the Scale (?) interface would derive from 
Affine and a ScaleTransform can be treated as an Affine.  This nicely 
separates the transforms from the implementation of the views, which 
will require implementing a RealRandomAccess that applies a transform to 
its position, etc. We can first do a general view implementation like 
your CoordinateAffineTransform.  You can naturally pass a Scale as the 
view transform.  This will be treated as a full Affine for the time 
being, doing a bit more work than necessary.  Later it is easy to write 
special cases for special transforms.  (For example, for the integer 
views there is a TranslationRandomAccess which is more efficient than 
the general MixedRandomAccess.)

Tobias

On 11/28/2011 07:16 PM, Lee Kamentsky wrote:
> All so cool - my preference would be to have a CoordinateAffineTransform
> class that implemented RealRandomAccessible. It would take another
> RealRandomAccessible as input as well as the affine transform matrix.
> That's very general and it separates interpolation from transformation
> so that you can choose the interpolation method you want to use (e.g.
> InterpolatedRandomAccessible) and you can use the
> CoordinateAffineTransform class for other sorts of
> RealRandomAccessibles. For scaling, it's just a question of populating
> the diagonal of the matrix appropriately, right?
>
> There are a lot of times when I'd like to treat images as functions that
> I could sample in a real space. For instance, in CellProfiler, we have a
> technique that uses spline interpolation to estimate variances in
> illumination. I'd like to divide my raw image by the spline
> interpolation and operate downstream on the result. I'm guessing that
> things like SIFT could be implemented very elegantly using
> RealRandomAccessibles whose output was a Gaussian transformation of a
> RandomAccessible input.
>
> OK, this is a joke, but I can see a slippery slope here to imglib3 where
> RandomAccessible is an artifact of images being stored using pixels and
> everything is done in a real space.
>
> --Lee
>
> On 11/28/2011 12:49 PM, Tobias Pietzsch wrote:
>> Hi ImgLib2 people,
>>
>> A while ago, Johannes asked about whether I had any thoughts on how
>> this (see subject) should be done. I finally had the time to look at
>> it now and found, that the ideas to do it are mostly in place (in my
>> opinion, at least) though implementation is not.
>>
>> I wrote a few thoughts on the wiki
>> http://fiji.sc/wiki/index.php/ImgLib2_Discussion#RealViews
>> What do you think?
>>
>> best regards,
>> Tobias
>>
>> _______________________________________________
>> ImageJ-devel mailing list
>> ImageJ-devel at imagejdev.org
>> http://imagejdev.org/mailman/listinfo/imagej-devel
>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagejdev.org
> http://imagejdev.org/mailman/listinfo/imagej-devel




From tobias.pietzsch at gmail.com  Tue Nov 29 07:43:08 2011
From: tobias.pietzsch at gmail.com (Tobias Pietzsch)
Date: Tue, 29 Nov 2011 14:43:08 +0100
Subject: [ImageJ-devel] (ImgLib2) operations on two or more images with
 differing calibrations
In-Reply-To: <4ED4E081.9070605@gmail.com>
References: <4ED3C992.60908@mpi-cbg.de> <1929075.IIhJe1Jmey@ds170>
	<4ED4E081.9070605@gmail.com>
Message-ID: <CADpKeS5mpSJG205UjtZ9ZLpHrJPGy-YF9QQVw8WMU3AMBNOPHg@mail.gmail.com>

On 11/29/2011 10:17 AM, Gabriel Landini wrote:
>
> On Monday 28 Nov 2011 17:49:06 Tobias Pietzsch wrote:
>>
>> A while ago, Johannes asked about whether I had any thoughts on how this
>> (see subject) should be done. ?I finally had the time to look at
>> it now and found, that the ideas to do it are mostly in place (in my
>> opinion, at least) though implementation is not.
>
> Suppose that you want to operate on 2 images with different calibrations.
> Would it be desirable to allow keeping one of the images "as is" and only
> interpolate/transform the other to match the calibration? I mean is there user
> control over which image gets interpolated to fit the calibration of the
> other?

Hi Gabriel,

This is possible, though with a bit of (writing) effort.

Assume that we have input (raster) image A and B with differing
calibrations. ?We want to add them to obtain (raster) image C which
has the same calibration as A. ?So we would create an interpolated
view of B which brings it to the same calibration as A and C.

Then to add the images, we would iterate through the pixels of C,
obtaining an integer position for each. We can just pick pixels at
integer positions in A using a RandomAccess. We can also pick pixels
at integer positions in Interpolated(B) using a RealRandomAccess.
After all, a RealRandomAccess implements RealPositionable, which
extends Positionable.

Unfortunately, we cannot just treat RealRandomAccess as RandomAccess,
because it is not Localizable (but only RealLocalizable). ?So we have
to be a bit more specific in our algorithm implementation: ?For the
input accessors we want something that is Positionable and is a
Sampler. ?Both RealRandomAccess and RandomAccess fulfill this
requirement ?(Usually, for writing raster image algorithm we would be
lazy and just take a RandomAccess for our input although we don't
really care about it being Localizable...)

I've attached code for the above example. Compiles and would
presumably work just fine if it weren't for the absence of RealViews
right now...

Tobias

>
> Cheers
> Gabriel
>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: AddRealOrIntegerExample.java
Type: text/x-java
Size: 915 bytes
Desc: not available
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20111129/90d98432/attachment.java>

From schindelin at wisc.edu  Wed Nov 30 17:13:21 2011
From: schindelin at wisc.edu (Johannes Schindelin)
Date: Wed, 30 Nov 2011 17:13:21 -0600 (CST)
Subject: [ImageJ-devel] Priorities
Message-ID: <alpine.DEB.1.00.1111301708140.24478@s15462909.onlinehome-server.info>

Hi all,

I see that the top priority in imagej.ext.plugin.Plugin is defined as
negative infinity. That's a bit counter-intuitive to me. I'd like to
change the priorities so that the higher the number, the greater the
priority.

Then I'd like to define a new class which has constants for these
priorities. I am thinking about imagej.util.Priorities.

Then I'd like to introduce a SortByPriority helper class that takes an
Iterator<T> as parameter to the constructor and a helper class that
determines a priority (type "double") given an instance of T. The
SortByPriority class then presents itself as an Iterable<T> and outputs
the items in order of the priority.

Objections?

Ciao,
Johannes



From ctrueden at wisc.edu  Wed Nov 30 22:13:06 2011
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Wed, 30 Nov 2011 22:13:06 -0600
Subject: [ImageJ-devel] Priorities
In-Reply-To: <alpine.DEB.1.00.1111301708140.24478@s15462909.onlinehome-server.info>
References: <alpine.DEB.1.00.1111301708140.24478@s15462909.onlinehome-server.info>
Message-ID: <CADN69yku1fy-jGKmK1iXZCZOQG+SSB6eMGR0saFURT8WxDu_KQ@mail.gmail.com>

Hi Johannes,

I'd like to change the priorities so that the higher the number, the
> greater the priority.
>

Sounds good. We'll just have to invert the compareTo method in the
AbstractUIDetails class. (All modules and tools are sorted that way.)

I am thinking about imagej.util.Priorities.
>

Maybe imagej.util.Priority, to match some of the enums like WidgetStyle and
ItemVisibility? (Though admittedly, the Priority class wouldn't be an
enum...)

Then I'd like to introduce a SortByPriority helper class that takes an
> Iterator<T> as parameter to the constructor and a helper class that
> determines a priority (type "double") given an instance of T. The
> SortByPriority class then presents itself as an Iterable<T> and outputs
> the items in order of the priority.
>

I was going to say it seemed a bit on the YAGNI side, but we would benefit
from a way to sort IPluginFinders without complicating the interface.
However, I don't understand how that second helper class would determine a
priority from the instance of T. Maybe T must extend a Prioritized
interface with a getPriority method?but that would require IPluginFinder to
implement it, hence complicating the interface. Perhaps your proposed patch
to PluginService is good enough?

Regards,
Curtis


On Wed, Nov 30, 2011 at 5:13 PM, Johannes Schindelin <schindelin at wisc.edu>wrote:

> Hi all,
>
> I see that the top priority in imagej.ext.plugin.Plugin is defined as
> negative infinity. That's a bit counter-intuitive to me. I'd like to
> change the priorities so that the higher the number, the greater the
> priority.
>
> Then I'd like to define a new class which has constants for these
> priorities. I am thinking about imagej.util.Priorities.
>
> Then I'd like to introduce a SortByPriority helper class that takes an
> Iterator<T> as parameter to the constructor and a helper class that
> determines a priority (type "double") given an instance of T. The
> SortByPriority class then presents itself as an Iterable<T> and outputs
> the items in order of the priority.
>
> Objections?
>
> Ciao,
> Johannes
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagejdev.org
> http://imagejdev.org/mailman/listinfo/imagej-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20111130/a4d46673/attachment.html>

