From ctrueden at wisc.edu  Fri Jun  1 11:48:04 2012
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Fri, 1 Jun 2012 11:48:04 -0500
Subject: [ImageJ-devel] Mailing list for ImgLib?
Message-ID: <CADN69ynJmKMiSEgr6Bv63BFsLJoXf2SOV=BS1HsSjXqOjA_9oA@mail.gmail.com>

Hi everyone,

There has been an increasing amount of discussion of ImgLib lately, which
is great. However, the discussions have been spread across fiji-devel,
imagej-devel and private mails. I noticed people have been adding an
"[imglib]" or similar prefix to some mails, but not others.

Would people prefer a dedicated imglib-devel mailing list? It would be easy
to create one. It could live on imagej.net (imglib-devel at imagej.net), or on
Google Groups like fiji-devel does, or even imglib-devel at imglib2.net if the
owner of that domain is willing to add an MX entry to imagej.net, similar
to fiji.sc now (run "host fiji.sc" from the console to see what I mean).

I think a dedicated mailing list would be good as people are increasingly
using ImgLib2 in non-ImageJ contexts.

Thoughts?

Regards,
Curtis
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120601/f9a93d0a/attachment.html>

From gharris at mbl.edu  Fri Jun  1 11:52:21 2012
From: gharris at mbl.edu (Grant B. Harris)
Date: Fri, 01 Jun 2012 12:52:21 -0400
Subject: [ImageJ-devel] Mailing list for ImgLib?
In-Reply-To: <CADN69ynJmKMiSEgr6Bv63BFsLJoXf2SOV=BS1HsSjXqOjA_9oA@mail.gmail.com>
References: <CADN69ynJmKMiSEgr6Bv63BFsLJoXf2SOV=BS1HsSjXqOjA_9oA@mail.gmail.com>
Message-ID: <4FC8F345.9030404@mbl.edu>

I think a separate list is appropriate.
-- Grant



From Johannes.Schindelin at gmx.de  Fri Jun  1 12:16:48 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Fri, 1 Jun 2012 19:16:48 +0200 (CEST)
Subject: [ImageJ-devel] Mailing list for ImgLib?
In-Reply-To: <CADN69ynJmKMiSEgr6Bv63BFsLJoXf2SOV=BS1HsSjXqOjA_9oA@mail.gmail.com>
References: <CADN69ynJmKMiSEgr6Bv63BFsLJoXf2SOV=BS1HsSjXqOjA_9oA@mail.gmail.com>
Message-ID: <alpine.DEB.1.00.1206011913460.32117@s15462909.onlinehome-server.info>

Hi Curtis,

On Fri, 1 Jun 2012, Curtis Rueden wrote:

> There has been an increasing amount of discussion of ImgLib lately,
> which is great. However, the discussions have been spread across
> fiji-devel, imagej-devel and private mails. I noticed people have been
> adding an "[imglib]" or similar prefix to some mails, but not others.
> 
> Would people prefer a dedicated imglib-devel mailing list? It would be
> easy to create one. It could live on imagej.net
> (imglib-devel at imagej.net), or on Google Groups like fiji-devel does, or
> even imglib-devel at imglib2.net if the owner of that domain is willing to
> add an MX entry to imagej.net, similar to fiji.sc now (run "host
> fiji.sc" from the console to see what I mean).
> 
> I think a dedicated mailing list would be good as people are
> increasingly using ImgLib2 in non-ImageJ contexts.
> 
> Thoughts?

Heh. I just sent a mail to fiji-users and imagej in the opposite
direction.

I often see that discussions fail to reach the target audience because we
have too many mailing lists, not too few. Also, quite a few people get
dropped from discussions because the "Reply-to-all" button is too hard to
find.

So I'd suggest not to split the lists even further.

But I am pragmatic about it, if you really want to have another mailing
list, go for it. I'd suggest to use our own mail server. Google Groups
sound nice but have so many shortcomings and nobody fixing them.

Ciao,
Dscho


From sapristi at gmail.com  Fri Jun  1 12:37:33 2012
From: sapristi at gmail.com (Albert Cardona)
Date: Fri, 1 Jun 2012 13:37:33 -0400
Subject: [ImageJ-devel] [fiji-devel] Re:  Mailing list for ImgLib?
In-Reply-To: <alpine.DEB.1.00.1206011913460.32117@s15462909.onlinehome-server.info>
References: <CADN69ynJmKMiSEgr6Bv63BFsLJoXf2SOV=BS1HsSjXqOjA_9oA@mail.gmail.com>
	<alpine.DEB.1.00.1206011913460.32117@s15462909.onlinehome-server.info>
Message-ID: <CAJj13_-6XdnP=dyAtU9eCx44Gh=Ke_6PeZaxn05YSt_99xggSw@mail.gmail.com>

2012/6/1 Johannes Schindelin <Johannes.Schindelin at gmx.de>:
> Hi Curtis,
>
> On Fri, 1 Jun 2012, Curtis Rueden wrote:
>
>> There has been an increasing amount of discussion of ImgLib lately,
>> which is great. However, the discussions have been spread across
>> fiji-devel, imagej-devel and private mails. I noticed people have been
>> adding an "[imglib]" or similar prefix to some mails, but not others.
>>
>> Would people prefer a dedicated imglib-devel mailing list? It would be
>> easy to create one. It could live on imagej.net
>> (imglib-devel at imagej.net), or on Google Groups like fiji-devel does, or
>> even imglib-devel at imglib2.net if the owner of that domain is willing to
>> add an MX entry to imagej.net, similar to fiji.sc now (run "host
>> fiji.sc" from the console to see what I mean).
>>
>> I think a dedicated mailing list would be good as people are
>> increasingly using ImgLib2 in non-ImageJ contexts.
>>
>> Thoughts?
>
> Heh. I just sent a mail to fiji-users and imagej in the opposite
> direction.
>
> I often see that discussions fail to reach the target audience because we
> have too many mailing lists, not too few. Also, quite a few people get
> dropped from discussions because the "Reply-to-all" button is too hard to
> find.
>
> So I'd suggest not to split the lists even further.
>
> But I am pragmatic about it, if you really want to have another mailing
> list, go for it. I'd suggest to use our own mail server. Google Groups
> sound nice but have so many shortcomings and nobody fixing them.
>
> Ciao,
> Dscho


I second Johannes. No benefits from splitting the mailing lists.

Albert


-- 
http://albert.rierol.net
http://www.ini.uzh.ch/~acardona/


From ctrueden at wisc.edu  Fri Jun  1 12:53:11 2012
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Fri, 1 Jun 2012 12:53:11 -0500
Subject: [ImageJ-devel] [fiji-devel] Re:  Mailing list for ImgLib?
In-Reply-To: <CAJj13_-6XdnP=dyAtU9eCx44Gh=Ke_6PeZaxn05YSt_99xggSw@mail.gmail.com>
References: <CADN69ynJmKMiSEgr6Bv63BFsLJoXf2SOV=BS1HsSjXqOjA_9oA@mail.gmail.com>
	<alpine.DEB.1.00.1206011913460.32117@s15462909.onlinehome-server.info>
	<CAJj13_-6XdnP=dyAtU9eCx44Gh=Ke_6PeZaxn05YSt_99xggSw@mail.gmail.com>
Message-ID: <CADN69ykPFd2BF77m-1PFaH1KOLp4AB-FO_41TQ3MXgwbGPwdaA@mail.gmail.com>

Hi everyone,

I second Johannes. No benefits from splitting the mailing lists.


Fair enough. Do you have a preference on "best practice" when discussing
ImgLib issues then? Use fiji-devel? Use imagej-devel? Always cross-post?
Other?

-Curtis


On Fri, Jun 1, 2012 at 12:37 PM, Albert Cardona <sapristi at gmail.com> wrote:

> 2012/6/1 Johannes Schindelin <Johannes.Schindelin at gmx.de>:
> > Hi Curtis,
> >
> > On Fri, 1 Jun 2012, Curtis Rueden wrote:
> >
> >> There has been an increasing amount of discussion of ImgLib lately,
> >> which is great. However, the discussions have been spread across
> >> fiji-devel, imagej-devel and private mails. I noticed people have been
> >> adding an "[imglib]" or similar prefix to some mails, but not others.
> >>
> >> Would people prefer a dedicated imglib-devel mailing list? It would be
> >> easy to create one. It could live on imagej.net
> >> (imglib-devel at imagej.net), or on Google Groups like fiji-devel does, or
> >> even imglib-devel at imglib2.net if the owner of that domain is willing to
> >> add an MX entry to imagej.net, similar to fiji.sc now (run "host
> >> fiji.sc" from the console to see what I mean).
> >>
> >> I think a dedicated mailing list would be good as people are
> >> increasingly using ImgLib2 in non-ImageJ contexts.
> >>
> >> Thoughts?
> >
> > Heh. I just sent a mail to fiji-users and imagej in the opposite
> > direction.
> >
> > I often see that discussions fail to reach the target audience because we
> > have too many mailing lists, not too few. Also, quite a few people get
> > dropped from discussions because the "Reply-to-all" button is too hard to
> > find.
> >
> > So I'd suggest not to split the lists even further.
> >
> > But I am pragmatic about it, if you really want to have another mailing
> > list, go for it. I'd suggest to use our own mail server. Google Groups
> > sound nice but have so many shortcomings and nobody fixing them.
> >
> > Ciao,
> > Dscho
>
>
> I second Johannes. No benefits from splitting the mailing lists.
>
> Albert
>
>
> --
> http://albert.rierol.net
> http://www.ini.uzh.ch/~acardona/
>
> --
> Please avoid top-posting, and please make sure to reply-to-all!
>
> Mailing list web interface: http://groups.google.com/group/fiji-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120601/42622cec/attachment.html>

From jenkins at imagej.net  Fri Jun  1 13:30:54 2012
From: jenkins at imagej.net (jenkins at imagej.net)
Date: Fri, 01 Jun 2012 13:30:54 -0500 (CDT)
Subject: [ImageJ-devel] Build failed in Jenkins: ImgLib-synchronizer #29081
Message-ID: <32740397.5.1338575454979.JavaMail.jenkins@dev>

See <http://jenkins.imagej.net/job/ImgLib-synchronizer/29081/>

------------------------------------------
Started by timer
Building on master
[workspace] $ /bin/sh -xe /tmp/hudson5179290357056380812.sh
+ SYNC=../../Fiji-minimal/workspace/fiji/bin/git-synchronizer.sh
+ ../../Fiji-minimal/workspace/fiji/bin/git-synchronizer.sh git://fiji.sc/imglib.git=hudson-imagej at fiji.sc:/srv/git/imglib.git git://github.com/imagej/imglib=imglib-github:imagej/imglib git at code.imagej.net:imglib.git
Getting updates from git://fiji.sc/imglib.git...
Getting updates from git://github.com/imagej/imglib...
>From git://github.com/imagej/imglib
 + 6e2b26c...a99c9e1 pixlib-update -> git___github.com_imagej_imglib/pixlib-update  (forced update)
Updates from git://github.com/imagej/imglib:
+a99c9e11a3a996368a940f1af8cde6174761add9 commit	pixlib-update
Getting updates from git at code.imagej.net:imglib.git...
To hudson-imagej at fiji.sc:/srv/git/imglib.git
 + 6e2b26c...a99c9e1 a99c9e11a3a996368a940f1af8cde6174761add9 -> pixlib-update (forced update)
remote: + refs/heads/pixlib-update imglib jenkins DENIED by fallthru[K
remote: error: hook declined to update refs/heads/pixlib-update[K
To git at code.imagej.net:imglib.git
 ! [remote rejected] a99c9e11a3a996368a940f1af8cde6174761add9 -> pixlib-update (hook declined)
error: failed to push some refs to 'git at code.imagej.net:imglib.git'


Errors:


Could not push to git at code.imagej.net:imglib.git
Build step 'Execute shell' marked build as failure


From jenkins at imagej.net  Fri Jun  1 13:32:38 2012
From: jenkins at imagej.net (jenkins at imagej.net)
Date: Fri, 01 Jun 2012 13:32:38 -0500 (CDT)
Subject: [ImageJ-devel] Build failed in Jenkins: ImgLib-synchronizer #29082
In-Reply-To: <32740397.5.1338575454979.JavaMail.jenkins@dev>
References: <32740397.5.1338575454979.JavaMail.jenkins@dev>
Message-ID: <483037340.6.1338575558505.JavaMail.jenkins@dev>

See <http://jenkins.imagej.net/job/ImgLib-synchronizer/29082/>

------------------------------------------
Started by timer
Building on master
[workspace] $ /bin/sh -xe /tmp/hudson8254853524572885107.sh
+ SYNC=../../Fiji-minimal/workspace/fiji/bin/git-synchronizer.sh
+ ../../Fiji-minimal/workspace/fiji/bin/git-synchronizer.sh git://fiji.sc/imglib.git=hudson-imagej at fiji.sc:/srv/git/imglib.git git://github.com/imagej/imglib=imglib-github:imagej/imglib git at code.imagej.net:imglib.git
Getting updates from git://fiji.sc/imglib.git...
Getting updates from git://github.com/imagej/imglib...
Getting updates from git at code.imagej.net:imglib.git...


Errors:


Ref pixlib-update is diverging:
git___fiji.sc_imglib.git a99c9e11a3a996368a940f1af8cde6174761add9 commit pixlib-update
git___github.com_imagej_imglib a99c9e11a3a996368a940f1af8cde6174761add9 commit pixlib-update
git_code.imagej.net_imglib.git 6e2b26c01801ee6aa097e1ca8508ede75102c3ac commit pixlib-update
Build step 'Execute shell' marked build as failure


From sapristi at gmail.com  Fri Jun  1 13:36:23 2012
From: sapristi at gmail.com (Albert Cardona)
Date: Fri, 1 Jun 2012 14:36:23 -0400
Subject: [ImageJ-devel] [fiji-devel] Re:  Mailing list for ImgLib?
In-Reply-To: <CADN69ykPFd2BF77m-1PFaH1KOLp4AB-FO_41TQ3MXgwbGPwdaA@mail.gmail.com>
References: <CADN69ynJmKMiSEgr6Bv63BFsLJoXf2SOV=BS1HsSjXqOjA_9oA@mail.gmail.com>
	<alpine.DEB.1.00.1206011913460.32117@s15462909.onlinehome-server.info>
	<CAJj13_-6XdnP=dyAtU9eCx44Gh=Ke_6PeZaxn05YSt_99xggSw@mail.gmail.com>
	<CADN69ykPFd2BF77m-1PFaH1KOLp4AB-FO_41TQ3MXgwbGPwdaA@mail.gmail.com>
Message-ID: <CAJj13_98SaSqX18spLyKr6hDk2_rhpAGub=jm6pObkeE_BbuWA@mail.gmail.com>

2012/6/1 Curtis Rueden <ctrueden at wisc.edu>:
> Hi everyone,
>
>> I second Johannes. No benefits from splitting the mailing lists.
>
>
> Fair enough. Do you have a preference on "best practice" when discussing
> ImgLib issues then? Use fiji-devel? Use imagej-devel? Always cross-post?
> Other?


fiji-devel and imagej-devel have come to be the same thing, but not
quite, so I would leave them separate. Cross-posting is pointless
because all interested are like 10 people at this point, and almost
all belong to both mailing lists. I gather that most members of
fiji-devel are not interested in the discussion of the internals of
the new imagej (at least not yet), or in hearing about jenkins. ImgLib
originated in the fiji community, seems easiest to leave imglib
discussion there.

Albert

-- 
http://albert.rierol.net
http://www.ini.uzh.ch/~acardona/


From jenkins at imagej.net  Fri Jun  1 13:37:38 2012
From: jenkins at imagej.net (jenkins at imagej.net)
Date: Fri, 01 Jun 2012 13:37:38 -0500 (CDT)
Subject: [ImageJ-devel] Build failed in Jenkins: ImgLib-synchronizer #29083
In-Reply-To: <483037340.6.1338575558505.JavaMail.jenkins@dev>
References: <483037340.6.1338575558505.JavaMail.jenkins@dev>
Message-ID: <1184924622.7.1338575858443.JavaMail.jenkins@dev>

See <http://jenkins.imagej.net/job/ImgLib-synchronizer/29083/>

------------------------------------------
Started by timer
Building on master
[workspace] $ /bin/sh -xe /tmp/hudson174115086694327483.sh
+ SYNC=../../Fiji-minimal/workspace/fiji/bin/git-synchronizer.sh
+ ../../Fiji-minimal/workspace/fiji/bin/git-synchronizer.sh git://fiji.sc/imglib.git=hudson-imagej at fiji.sc:/srv/git/imglib.git git://github.com/imagej/imglib=imglib-github:imagej/imglib git at code.imagej.net:imglib.git
Getting updates from git://fiji.sc/imglib.git...
Getting updates from git://github.com/imagej/imglib...
Getting updates from git at code.imagej.net:imglib.git...


Errors:


Ref pixlib-update is diverging:
git___fiji.sc_imglib.git a99c9e11a3a996368a940f1af8cde6174761add9 commit pixlib-update
git___github.com_imagej_imglib a99c9e11a3a996368a940f1af8cde6174761add9 commit pixlib-update
git_code.imagej.net_imglib.git 6e2b26c01801ee6aa097e1ca8508ede75102c3ac commit pixlib-update
Build step 'Execute shell' marked build as failure


From jenkins at imagej.net  Fri Jun  1 13:42:38 2012
From: jenkins at imagej.net (jenkins at imagej.net)
Date: Fri, 01 Jun 2012 13:42:38 -0500 (CDT)
Subject: [ImageJ-devel] Build failed in Jenkins: ImgLib-synchronizer #29084
In-Reply-To: <1184924622.7.1338575858443.JavaMail.jenkins@dev>
References: <1184924622.7.1338575858443.JavaMail.jenkins@dev>
Message-ID: <1312527262.8.1338576158441.JavaMail.jenkins@dev>

See <http://jenkins.imagej.net/job/ImgLib-synchronizer/29084/>

------------------------------------------
Started by timer
Building on master
[workspace] $ /bin/sh -xe /tmp/hudson1436050379471870143.sh
+ SYNC=../../Fiji-minimal/workspace/fiji/bin/git-synchronizer.sh
+ ../../Fiji-minimal/workspace/fiji/bin/git-synchronizer.sh git://fiji.sc/imglib.git=hudson-imagej at fiji.sc:/srv/git/imglib.git git://github.com/imagej/imglib=imglib-github:imagej/imglib git at code.imagej.net:imglib.git
Getting updates from git://fiji.sc/imglib.git...
Getting updates from git://github.com/imagej/imglib...
Getting updates from git at code.imagej.net:imglib.git...


Errors:


Ref pixlib-update is diverging:
git___fiji.sc_imglib.git a99c9e11a3a996368a940f1af8cde6174761add9 commit pixlib-update
git___github.com_imagej_imglib a99c9e11a3a996368a940f1af8cde6174761add9 commit pixlib-update
git_code.imagej.net_imglib.git 6e2b26c01801ee6aa097e1ca8508ede75102c3ac commit pixlib-update
Build step 'Execute shell' marked build as failure


From jenkins at imagej.net  Fri Jun  1 13:47:38 2012
From: jenkins at imagej.net (jenkins at imagej.net)
Date: Fri, 01 Jun 2012 13:47:38 -0500 (CDT)
Subject: [ImageJ-devel] Build failed in Jenkins: ImgLib-synchronizer #29085
In-Reply-To: <1312527262.8.1338576158441.JavaMail.jenkins@dev>
References: <1312527262.8.1338576158441.JavaMail.jenkins@dev>
Message-ID: <2138523964.9.1338576458348.JavaMail.jenkins@dev>

See <http://jenkins.imagej.net/job/ImgLib-synchronizer/29085/>

------------------------------------------
Started by timer
Building on master
[workspace] $ /bin/sh -xe /tmp/hudson618307191531399481.sh
+ SYNC=../../Fiji-minimal/workspace/fiji/bin/git-synchronizer.sh
+ ../../Fiji-minimal/workspace/fiji/bin/git-synchronizer.sh git://fiji.sc/imglib.git=hudson-imagej at fiji.sc:/srv/git/imglib.git git://github.com/imagej/imglib=imglib-github:imagej/imglib git at code.imagej.net:imglib.git
Getting updates from git://fiji.sc/imglib.git...
Getting updates from git://github.com/imagej/imglib...
Getting updates from git at code.imagej.net:imglib.git...


Errors:


Ref pixlib-update is diverging:
git___fiji.sc_imglib.git a99c9e11a3a996368a940f1af8cde6174761add9 commit pixlib-update
git___github.com_imagej_imglib a99c9e11a3a996368a940f1af8cde6174761add9 commit pixlib-update
git_code.imagej.net_imglib.git 6e2b26c01801ee6aa097e1ca8508ede75102c3ac commit pixlib-update
Build step 'Execute shell' marked build as failure


From jenkins at imagej.net  Fri Jun  1 13:52:38 2012
From: jenkins at imagej.net (jenkins at imagej.net)
Date: Fri, 01 Jun 2012 13:52:38 -0500 (CDT)
Subject: [ImageJ-devel] Build failed in Jenkins: ImgLib-synchronizer #29086
In-Reply-To: <2138523964.9.1338576458348.JavaMail.jenkins@dev>
References: <2138523964.9.1338576458348.JavaMail.jenkins@dev>
Message-ID: <876787330.10.1338576758391.JavaMail.jenkins@dev>

See <http://jenkins.imagej.net/job/ImgLib-synchronizer/29086/>

------------------------------------------
Started by timer
Building on master
[workspace] $ /bin/sh -xe /tmp/hudson7171464122621913064.sh
+ SYNC=../../Fiji-minimal/workspace/fiji/bin/git-synchronizer.sh
+ ../../Fiji-minimal/workspace/fiji/bin/git-synchronizer.sh git://fiji.sc/imglib.git=hudson-imagej at fiji.sc:/srv/git/imglib.git git://github.com/imagej/imglib=imglib-github:imagej/imglib git at code.imagej.net:imglib.git
Getting updates from git://fiji.sc/imglib.git...
Getting updates from git://github.com/imagej/imglib...
Getting updates from git at code.imagej.net:imglib.git...


Errors:


Ref pixlib-update is diverging:
git___fiji.sc_imglib.git a99c9e11a3a996368a940f1af8cde6174761add9 commit pixlib-update
git___github.com_imagej_imglib a99c9e11a3a996368a940f1af8cde6174761add9 commit pixlib-update
git_code.imagej.net_imglib.git 6e2b26c01801ee6aa097e1ca8508ede75102c3ac commit pixlib-update
Build step 'Execute shell' marked build as failure


From jenkins at imagej.net  Fri Jun  1 13:57:38 2012
From: jenkins at imagej.net (jenkins at imagej.net)
Date: Fri, 01 Jun 2012 13:57:38 -0500 (CDT)
Subject: [ImageJ-devel] Build failed in Jenkins: ImgLib-synchronizer #29087
In-Reply-To: <876787330.10.1338576758391.JavaMail.jenkins@dev>
References: <876787330.10.1338576758391.JavaMail.jenkins@dev>
Message-ID: <1460551239.11.1338577058482.JavaMail.jenkins@dev>

See <http://jenkins.imagej.net/job/ImgLib-synchronizer/29087/>

------------------------------------------
Started by timer
Building on master
[workspace] $ /bin/sh -xe /tmp/hudson194123240269314848.sh
+ SYNC=../../Fiji-minimal/workspace/fiji/bin/git-synchronizer.sh
+ ../../Fiji-minimal/workspace/fiji/bin/git-synchronizer.sh git://fiji.sc/imglib.git=hudson-imagej at fiji.sc:/srv/git/imglib.git git://github.com/imagej/imglib=imglib-github:imagej/imglib git at code.imagej.net:imglib.git
Getting updates from git://fiji.sc/imglib.git...
Getting updates from git://github.com/imagej/imglib...
Getting updates from git at code.imagej.net:imglib.git...


Errors:


Ref pixlib-update is diverging:
git___fiji.sc_imglib.git a99c9e11a3a996368a940f1af8cde6174761add9 commit pixlib-update
git___github.com_imagej_imglib a99c9e11a3a996368a940f1af8cde6174761add9 commit pixlib-update
git_code.imagej.net_imglib.git 6e2b26c01801ee6aa097e1ca8508ede75102c3ac commit pixlib-update
Build step 'Execute shell' marked build as failure


From mohler.william at gmail.com  Fri Jun  1 14:16:39 2012
From: mohler.william at gmail.com (Bill Mohler)
Date: Fri, 1 Jun 2012 15:16:39 -0400
Subject: [ImageJ-devel] [fiji-devel] Re:  Mailing list for ImgLib?
In-Reply-To: <CAJj13_98SaSqX18spLyKr6hDk2_rhpAGub=jm6pObkeE_BbuWA@mail.gmail.com>
Message-ID: <4fc9151c.4cbce00a.5b57.ffffa79d@mx.google.com>

My email server is loving all the exercize, however you decide to proceed ;)



On Jun 1, 2012 2:36 PM, Albert Cardona &lt;sapristi at gmail.com&gt; wrote: 

2012/6/1 Curtis Rueden &lt;ctrueden at wisc.edu&gt;:

&gt; Hi everyone,

&gt;

&gt;&gt; I second Johannes. No benefits from splitting the mailing lists.

&gt;

&gt;

&gt; Fair enough. Do you have a preference on "best practice" when discussing

&gt; ImgLib issues then? Use fiji-devel? Use imagej-devel? Always cross-post?

&gt; Other?





fiji-devel and imagej-devel have come to be the same thing, but not

quite, so I would leave them separate. Cross-posting is pointless

because all interested are like 10 people at this point, and almost

all belong to both mailing lists. I gather that most members of

fiji-devel are not interested in the discussion of the internals of

the new imagej (at least not yet), or in hearing about jenkins. ImgLib

originated in the fiji community, seems easiest to leave imglib

discussion there.



Albert



-- 

http://albert.rierol.net

http://www.ini.uzh.ch/~acardona/



_______________________________________________

ImageJ-devel mailing list

ImageJ-devel at imagej.net

http://imagej.net/mailman/listinfo/imagej-devel


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120601/b77bdf6d/attachment.html>

From jenkins at imagej.net  Fri Jun  1 14:18:17 2012
From: jenkins at imagej.net (jenkins at imagej.net)
Date: Fri, 01 Jun 2012 14:18:17 -0500 (CDT)
Subject: [ImageJ-devel] Jenkins build is back to normal :
	ImgLib-synchronizer #29088
In-Reply-To: <1460551239.11.1338577058482.JavaMail.jenkins@dev>
References: <1460551239.11.1338577058482.JavaMail.jenkins@dev>
Message-ID: <1178741134.12.1338578297985.JavaMail.jenkins@dev>

See <http://jenkins.imagej.net/job/ImgLib-synchronizer/29088/>



From ctrueden at wisc.edu  Tue Jun  5 15:33:58 2012
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Tue, 5 Jun 2012 15:33:58 -0500
Subject: [ImageJ-devel] KNIP dynamic ImageJ plugin loading
In-Reply-To: <4FB217E8.3090309@gmx.de>
References: <4FB217E8.3090309@gmx.de>
Message-ID: <CADN69ymNn=UJT9BCHR=9NDB9ExS=ymj7+Poyxk_JDeJbwgTi6w@mail.gmail.com>

Hi Michael,

I apologize for the delay in my reply; I was on vacation recently and am
still a bit behind on email.


> Do you currently plan to support user defined Plugin folders in ImageJ2?
>

Yes, we plan to support specification of an ij.plugins.path system
property, similar to Java classpath, that defines the folder(s) where
ImageJ plugins can be found. Actually, discovery of plugins will not be
limited to this path either, but ImageJ2 will be more thorough in scanning
those folders, versus other classpath elements.

I filed a ticket for this: http://trac.imagej.net/ticket/1208


> Furthermore I had some trouble while creating a test plugin for ImageJ2
> with Eclipse and I wrote down the learned lessons because this might be
> usefull for other users as well.


Yes, we need to make it easier to develop plugins in Eclipse. We have a
feature ticket covering these issues:
   http://trac.imagej.net/ticket/1207

The main idea is to generate an Eclipse project from ImageJ, so you don't
have to worry about getting these configuration settings right. And also
for ImageJ to automatically update your SezPoz metadata for you, since
Eclipse only does it when you clean the project.

The Eclipse problems have been the subject of many discussions but there is
still much work to do to iron it all out.

Sorry,
Curtis


On Tue, May 15, 2012 at 3:46 AM, Michael Zinsmaier <michael.zinsmaier at gmx.de
> wrote:

> Dear Curtis and Barry,
>
> I am the new guy at KNIP and I am currently working on the ImageJ2
> integration. For KNIP it would be very useful
> if we could load Plugins/(Runnable Modules) during runtime such that a
> user could select a ImageJ2 Plugin directory and KNIP browses this
> directory and loads the respective plugins.
>
> To my knowledge this could basically be implemented by either manipulating
> the classpath or with ClassLoaders to
> make the additional jar files visible for the PluginFinder. However due to
> the eclipse plugin based KNIME architecture and the class.forName calls in
> ImageJ2 I don't get either of these options to work.
>
> Do you currently plan to support user defined Plugin folders in ImageJ2?
>
> I attached a sample of my ClassLoader code in case that there exists a
> simple solution that I missed (-:
> Furthermore I had some trouble while creating a test plugin for ImageJ2
> with Eclipse and I wrote down the learned lessons because this might be
> usefull for other users as well.
>
> regards Michael
>
>
> ClassLoader based sample Code:
> ------------------------------**--------------------
>
> I experimented with code like this:
>
> File f = new File("MySmallPlugin.jar");
>
> ClassLoader cl = null;
> try {
>       ClassLoader prev = IJ2Modules.class.**getClassLoader();
>       cl = new URLClassLoader(new URL[] { f.toURI().toURL() }, prev);
> } catch (MalformedURLException e) {
>        e.printStackTrace();
> }
>
> final ArrayList<PluginInfo<?>> plugins = new ArrayList<PluginInfo<?>>();
> PluginFinder pf = new PluginFinder(cl);
> pf.findPlugins(plugins);
>
> I can find my new plugin like this however the ImageJ2 classes belong as
> far as I understand to the "prev" classloader and class.forName will thus
> not work in subsequent calls.
>
>
> Plugin creation with Eclipse:
> ------------------------------**----------------------------
> To do the experiments I created a simple Plugin with Eclipse and there are
> some pitfalls
>
>  - one has to consider the Eclipse-specific notes of sezpoz (
> sezpoz.java.net ->  Notes)
>  - it seems that the sezpoz library has to be included in the buildpath of
> the pluginproject although eclipse will never ask for it (I think it might
> be used during the jar creation to generate the annotations folder in the
> jar file but this is just a guess)
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120605/99eec3bd/attachment.html>

From michael at doube.net  Wed Jun  6 04:09:12 2012
From: michael at doube.net (Michael Doube)
Date: Wed, 06 Jun 2012 11:09:12 +0200
Subject: [ImageJ-devel] KNIP dynamic ImageJ plugin loading
In-Reply-To: <CADN69ymNn=UJT9BCHR=9NDB9ExS=ymj7+Poyxk_JDeJbwgTi6w@mail.gmail.com>
References: <4FB217E8.3090309@gmx.de>
	<CADN69ymNn=UJT9BCHR=9NDB9ExS=ymj7+Poyxk_JDeJbwgTi6w@mail.gmail.com>
Message-ID: <4FCF1E38.1080606@doube.net>

Hi Michael,

>     Furthermore I had some trouble while creating a test plugin for
>     ImageJ2 with Eclipse and I wrote down the learned lessons because
>     this might be usefull for other users as well.

I started a document at the last hackathon but have lacked time to work
on it since then: please feel free to add your insight to it:

http://developer.imagej.net/writing-imagej-plugins

The idea is to make it as easy as possible to start writing plugins in
Eclipse: ideally there should be minimal stuff to configure so you can
concentrate on learning the new APIs. Because most plugin developers
won't be ImageJ developers, there's no sense in forcing them to have
full repositories of those projects. It's much leaner to have the
snapshot JAR to develop against.

Michael


From ctrueden at wisc.edu  Mon Jun 11 14:14:08 2012
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Mon, 11 Jun 2012 14:14:08 -0500
Subject: [ImageJ-devel] Menuing system discussion
Message-ID: <CADN69y=N4ctPqO=FA1QDGaKzxQ6Jvj0_N88mWpJyvz1WFTqakg@mail.gmail.com>

Hi everyone,

Today Barry and I had a brief meeting about the ImageJ2 menuing system.
(For a brief description of how it works, I posted a write-up on the
ImageJ2 site at: http://developer.imagej.net/menuing-system).

There are currently three issues with it:

1) Correctness. There are currently bugs syncing multiple copies of a menu
bar linked to the same ShadowMenu, as well as with checkbox menu items; see
http://trac.imagej.net/ticket/1162 for details.

2) Performance. Currently, on Mac OS X, we maintain one copy of the menus
(i.e., one JMenuBar) per UI window. Constructing these copies is slow
enough that there is a noticeable delay when a new image window pops up. We
have a potential solution using the Application default menu bar (see
http://trac.imagej.net/ticket/1161) on the fix-menus branch, which avoids
making these copies.

3) Capabilities. The current philosophy is that each menu root exists only
once with all of its state, including which menu items are checked, grayed
out, etc. This could be a problem in certain circumstances, if the menu is
supposed to reflect a different context per image, per script editor
window, etc. For example, if the Image > Type > 8-bit menu item is supposed
to be checked for an 8-bit image, but the 16-bit menu item should be
checked for a 16-bit image, only one of those items will *really* be
checked at any given time. Something (in this case, the TypeChangeService)
must react to the active image being changed, updating the selection state
for the modules in the Image > Type menu, and then *all* copies of the menu
change over accordingly. For non-top-level menu items, the user is
blissfully ignorant of this process, but they would notice if e.g. a
top-level menu item needed to be enabled or disabled based on the current
context.

Barry & I agreed that solving issue #2 above is good enough for beta3,
especially since it "papers over" the main issues with #1. That is, by
avoiding clones of the menu bar, it matters less whether syncing between
copies of the menu is working completely correctly?because we won't ever
have copies of the menu to sync. But at some point, we should reconsider
the issues mentioned in #3 above, and decide on whether the current
approach is sufficient for everyone's needs. Two good candidates for
testing the limits of the menuing system are the script editor, and context
(i.e., right-click) menus.

Regards,
Curtis
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120611/77eba4db/attachment.html>

From bdezonia at gmail.com  Tue Jun 12 10:42:52 2012
From: bdezonia at gmail.com (Barry DeZonia)
Date: Tue, 12 Jun 2012 10:42:52 -0500
Subject: [ImageJ-devel] Menuing system discussion
In-Reply-To: <CADN69y=N4ctPqO=FA1QDGaKzxQ6Jvj0_N88mWpJyvz1WFTqakg@mail.gmail.com>
References: <CADN69y=N4ctPqO=FA1QDGaKzxQ6Jvj0_N88mWpJyvz1WFTqakg@mail.gmail.com>
Message-ID: <CAKcvfuRjtSwmKjsNQonhxYSH4Nfca9mppXO3+K4JGWPgr54cqg@mail.gmail.com>

Note: please ignore the fix-menus branch. It was an incomplete
implementation. The latest implementation is coming soon but needs a little
debugging and currently lives in the double-plugin-launch branch.

On Mon, Jun 11, 2012 at 2:14 PM, Curtis Rueden <ctrueden at wisc.edu> wrote:

> Hi everyone,
>
> Today Barry and I had a brief meeting about the ImageJ2 menuing system.
> (For a brief description of how it works, I posted a write-up on the
> ImageJ2 site at: http://developer.imagej.net/menuing-system).
>
> There are currently three issues with it:
>
> 1) Correctness. There are currently bugs syncing multiple copies of a menu
> bar linked to the same ShadowMenu, as well as with checkbox menu items; see
> http://trac.imagej.net/ticket/1162 for details.
>
> 2) Performance. Currently, on Mac OS X, we maintain one copy of the menus
> (i.e., one JMenuBar) per UI window. Constructing these copies is slow
> enough that there is a noticeable delay when a new image window pops up. We
> have a potential solution using the Application default menu bar (see
> http://trac.imagej.net/ticket/1161) on the fix-menus branch, which avoids
> making these copies.
>
> 3) Capabilities. The current philosophy is that each menu root exists only
> once with all of its state, including which menu items are checked, grayed
> out, etc. This could be a problem in certain circumstances, if the menu is
> supposed to reflect a different context per image, per script editor
> window, etc. For example, if the Image > Type > 8-bit menu item is supposed
> to be checked for an 8-bit image, but the 16-bit menu item should be
> checked for a 16-bit image, only one of those items will *really* be
> checked at any given time. Something (in this case, the TypeChangeService)
> must react to the active image being changed, updating the selection state
> for the modules in the Image > Type menu, and then *all* copies of the menu
> change over accordingly. For non-top-level menu items, the user is
> blissfully ignorant of this process, but they would notice if e.g. a
> top-level menu item needed to be enabled or disabled based on the current
> context.
>
> Barry & I agreed that solving issue #2 above is good enough for beta3,
> especially since it "papers over" the main issues with #1. That is, by
> avoiding clones of the menu bar, it matters less whether syncing between
> copies of the menu is working completely correctly?because we won't ever
> have copies of the menu to sync. But at some point, we should reconsider
> the issues mentioned in #3 above, and decide on whether the current
> approach is sufficient for everyone's needs. Two good candidates for
> testing the limits of the menuing system are the script editor, and context
> (i.e., right-click) menus.
>
> Regards,
> Curtis
>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120612/fe0f9b08/attachment.html>

From bdezonia at gmail.com  Tue Jun 12 11:26:36 2012
From: bdezonia at gmail.com (Barry DeZonia)
Date: Tue, 12 Jun 2012 11:26:36 -0500
Subject: [ImageJ-devel] Menuing system discussion
In-Reply-To: <CAKcvfuRjtSwmKjsNQonhxYSH4Nfca9mppXO3+K4JGWPgr54cqg@mail.gmail.com>
References: <CADN69y=N4ctPqO=FA1QDGaKzxQ6Jvj0_N88mWpJyvz1WFTqakg@mail.gmail.com>
	<CAKcvfuRjtSwmKjsNQonhxYSH4Nfca9mppXO3+K4JGWPgr54cqg@mail.gmail.com>
Message-ID: <CAKcvfuTEcVGAa=Jk29KeDZjEqBbQ3Zr0ziHD-bN+u6t2AwtxiA@mail.gmail.com>

The double-plugin-launch branch has been merged to master and the branch
deleted. There is still some debugging to do.

On Tue, Jun 12, 2012 at 10:42 AM, Barry DeZonia <bdezonia at gmail.com> wrote:

> Note: please ignore the fix-menus branch. It was an incomplete
> implementation. The latest implementation is coming soon but needs a little
> debugging and currently lives in the double-plugin-launch branch.
>
> On Mon, Jun 11, 2012 at 2:14 PM, Curtis Rueden <ctrueden at wisc.edu> wrote:
>
>> Hi everyone,
>>
>> Today Barry and I had a brief meeting about the ImageJ2 menuing system.
>> (For a brief description of how it works, I posted a write-up on the
>> ImageJ2 site at: http://developer.imagej.net/menuing-system).
>>
>> There are currently three issues with it:
>>
>> 1) Correctness. There are currently bugs syncing multiple copies of a
>> menu bar linked to the same ShadowMenu, as well as with checkbox menu
>> items; see http://trac.imagej.net/ticket/1162 for details.
>>
>> 2) Performance. Currently, on Mac OS X, we maintain one copy of the menus
>> (i.e., one JMenuBar) per UI window. Constructing these copies is slow
>> enough that there is a noticeable delay when a new image window pops up. We
>> have a potential solution using the Application default menu bar (see
>> http://trac.imagej.net/ticket/1161) on the fix-menus branch, which
>> avoids making these copies.
>>
>> 3) Capabilities. The current philosophy is that each menu root exists
>> only once with all of its state, including which menu items are checked,
>> grayed out, etc. This could be a problem in certain circumstances, if the
>> menu is supposed to reflect a different context per image, per script
>> editor window, etc. For example, if the Image > Type > 8-bit menu item is
>> supposed to be checked for an 8-bit image, but the 16-bit menu item should
>> be checked for a 16-bit image, only one of those items will *really* be
>> checked at any given time. Something (in this case, the TypeChangeService)
>> must react to the active image being changed, updating the selection state
>> for the modules in the Image > Type menu, and then *all* copies of the menu
>> change over accordingly. For non-top-level menu items, the user is
>> blissfully ignorant of this process, but they would notice if e.g. a
>> top-level menu item needed to be enabled or disabled based on the current
>> context.
>>
>> Barry & I agreed that solving issue #2 above is good enough for beta3,
>> especially since it "papers over" the main issues with #1. That is, by
>> avoiding clones of the menu bar, it matters less whether syncing between
>> copies of the menu is working completely correctly?because we won't ever
>> have copies of the menu to sync. But at some point, we should reconsider
>> the issues mentioned in #3 above, and decide on whether the current
>> approach is sufficient for everyone's needs. Two good candidates for
>> testing the limits of the menuing system are the script editor, and context
>> (i.e., right-click) menus.
>>
>> Regards,
>> Curtis
>>
>>
>> _______________________________________________
>> ImageJ-devel mailing list
>> ImageJ-devel at imagej.net
>> http://imagej.net/mailman/listinfo/imagej-devel
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120612/9070e982/attachment.html>

From ctrueden at wisc.edu  Tue Jun 12 14:50:32 2012
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Tue, 12 Jun 2012 14:50:32 -0500
Subject: [ImageJ-devel] Crop behavior (was Re: Changes to the overlay
	support)
In-Reply-To: <CAKcvfuRWWzT-JwswZAV898JWop2uEWOF=hXgqV65=kCaBuggLg@mail.gmail.com>
References: <CAKcvfuSwjqU-xo7=YpDqnTOe=xPYu0c4qRy8Ei5EfzNWncTgQA@mail.gmail.com>
	<4fc4f6f8.c2bae00a.169c.ffffaf94@mx.google.com>
	<CAKcvfuQ-sxp32nFcUP_a5QM-AN5vdrSCU=ELshB7+t0==1vaBg@mail.gmail.com>
	<4fc65f8f.946fe00a.3c1e.3fa4@mx.google.com>
	<CAKcvfuRQ8ix9XSXfFmH1n2f8mY8L=eAMyVRcTaXV5_MqX9WOXw@mail.gmail.com>
	<4fc76711.48c5e00a.3e8b.ffffa2ee@mx.google.com>
	<CAKcvfuRWWzT-JwswZAV898JWop2uEWOF=hXgqV65=kCaBuggLg@mail.gmail.com>
Message-ID: <CADN69y=zMJ=T1ST28zK7mUb5SBh36i3SfQ3q-gkiK+otJOJe+w@mail.gmail.com>

Hi all,

I think this discussion should be on imagej-devel, in case anyone else is
interested, and also for archival purposes, so I have CCed it.

Regarding removal of clipped overlays... the other option is to leave in
any overlay that partially overlaps the cropped region. Our image windows
will become less ImageJ1-like once we fully support multiple datasets in
the same display. There is no reason an overlay cannot occupy a part of the
aggregate coordinate space outside of a particular dataset, after all.

But Barry also has a good point that undo will fix any problems.

Perhaps we could have two separate commands "Quick Crop" (with shortcut
key) and "Crop..." which has the advanced options such as what to do with
questionable overlays.

-Curtis


On Mon, Jun 11, 2012 at 10:32 PM, Barry DeZonia <bdezonia at gmail.com> wrote:

> Lee, after reviewing your comments I think the most straightforward
> approach for crop is to only keep overlays completely contained in the crop
> region. If an important overlay is clipped and removed it should be
> restorable via undo. This of course requires that we have a fully
> functional undo capability.
>
>
> On Thu, May 31, 2012 at 7:41 AM, Lee Kamentsky <leek at broadinstitute.org>wrote:
>
>>  On 5/30/2012 5:44 PM, Barry DeZonia wrote:
>>
>> Thanks for looking at this Lee.
>>
>>  Whether to use your crop image branch or not depends upon how we want
>> crop to behave. Should it maintain all current overlays (picture a full
>> size window with overlay outlines all across it but a small image inside
>> it)? Or do we just want all overlays that are contained in the user
>> specified region? Or all those that are contained or cross the user
>> specified region (and the crossing overlays would be permanently edited to
>> be clipped)? Anyone feel free to chime in here.
>>
>> I am guessing that there's not much use for an overlay that falls
>> completely outside of the cropped region. Overlays that span the clipping
>> region are a problem, especially for display. If they aren't cropped, the
>> window has to expand / scroll to show their edit handles (and calculations
>> of the viewing extent have to be done over the interval of the image and
>> overlays). If the overlays are cropped, then they change shape - difficult
>> to implement and possibly frustrating to many users. I think that users
>> might be a little upset if a cropping cut off a small corner of an
>> important overlay and the overlay was removed because of that - so IMHO
>> that's not a good behavior.
>>
>> Related - an IterableRegionOfInterest.getIterableIntervalOverROI returns
>> an IterableInterval. If you feed it a cropped image (a
>> RandomAccessibleInterval), then the Interval of the IterableInterval should
>> be the intersection of the interval of the cropped image
>> and the IterableRegionOfInterest and the cursor should not throw an
>> exception when it tries to set the position on the RandomAccessible outside
>> of its interval. I'll file a bug for that and assign it to myself.
>>
>>
>>
>> On Wed, May 30, 2012 at 12:57 PM, Lee Kamentsky <leek at broadinstitute.org>wrote:
>>
>>>  Hi Barry,
>>> For AbstractOverlay.min() and .max(), I intended for the interval to be
>>> from the pixel with the minimum coordinate value to the pixel with the
>>> maximum coordinate value (there's reasonable arguments for other
>>> definitions, though). IMHO, the default for min in AbstractOverlay should
>>> probably return the ceiling of the realMin and the max should return the
>>> floor of the realMax so that when you iterate through the pixels, all pixel
>>> coordinates will fall between the min and max. Otherwise, filling in the
>>> unsupported operations with reasonable defaults is a good idea - thanks for
>>> doing that.
>>>
>>> In BinaryMaskOverlay, I think the default constructor has to be there if
>>> deserialization is to work. I guess you need to do things in two steps and
>>> set the context after deserialization. The new format is perfectly ok and
>>> it's ok to break backward compatibility.
>>> BinaryMaskRegionOfInterest.duplicate() looks like it has an error. The
>>> original ROI might have an origin other than 0, so I think you need
>>> something like:
>>> newRoi.move(getRegionOfInterest().getOrigin());
>>> around line # 220
>>>
>>> The comment in CompositeOverlay "I think ROIS must have .duplicate()"...
>>> That's not the worst idea, but it seems to me that you could implement
>>> duplicate() in the abstract base class by serializing yourself and then
>>> deserializing. You can always override it in some class where that's
>>> inefficient, but I'm guessing that the use case for .duplicate() is that
>>> the user is copying a handful of overlays from one place to another - the
>>> overhead for marshalling to and from a byte representation should be
>>> imperceptible. You definitely want to optimize the bitmask overlays to
>>> handle things like many particles.
>>>
>>> CropImage - that really stinks having to delete the overlays and then
>>> recreate them. I am guessing that you did this because JHotDraw doesn't
>>> move the handles for the currently selected object. I made a branch,
>>> "lee_figure_selection_bugfix", and I modified
>>> OverlayFigureView.doUpdateFigure() to deselect the figure, modify it, then
>>> reselect it if appropriate. I changed CropImage to just move the overlays
>>> and it all seems to work. If you all want to take the change, fine, if not,
>>> go ahead and delete the branch.
>>>
>>> Otherwise, thanks for taking over for me... let me know if you have any
>>> questions.
>>>
>>>
>>>
>>> On 5/29/2012 1:32 PM, Barry DeZonia wrote:
>>>
>>> Made a few more commits this morning to improve consistency.
>>>
>>> On Tue, May 29, 2012 at 11:19 AM, Lee Kamentsky <leek at broadinstitute.org
>>> > wrote:
>>>
>>>> On 5/29/2012 11:42 AM, Barry DeZonia wrote:
>>>>
>>>>> Hi guys,
>>>>>
>>>>> FYI on Friday of last week I updated the RegionOfInterest classes to
>>>>> allow them to be moved. You can see the related changes at
>>>>> https://github.com/imagej/imglib/commit/7ad99450980ec0b73e1258ff80e65a23338f11d3
>>>>> .
>>>>>
>>>>> And Lee I also updated the IJ2 Overlay classes to support this kind of
>>>>> functionality. See
>>>>> https://github.com/imagej/imagej/commit/192365bdbc3b77c02b348bfb1be6e8c18e03705d.
>>>>> Note the duplicate() implementation needs to be improved but it is
>>>>> functional.
>>>>>
>>>>> Lee, one thing to note is that the BinaryMaskOverlay's writeExternal()
>>>>> code has been modified. The order of saved items is now different. Since we
>>>>> have yet to release IJ2 I assume I am able to change it. If not we may need
>>>>> to alter the order and do version checking on readExternal(). Please let me
>>>>> know if you think updating this implementation as it has been is
>>>>> problematic.
>>>>>
>>>>  I don't have any dependencies on the format yet, so now is the time to
>>>> change the format, at least for me.
>>>>
>>>>
>>>>> Also if either of you know of ways these changes violate original
>>>>> design constraints of the RegionOfInterest contract let me know. Thanks.
>>>>>
>>>>>  I'll see if I can review the changes today or tomorrow
>>>>
>>>> --Lee
>>>>
>>>
>>>
>>>
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120612/1158f5c9/attachment.html>

From Johannes.Schindelin at gmx.de  Wed Jun 13 16:30:32 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Wed, 13 Jun 2012 22:30:32 +0100 (IST)
Subject: [ImageJ-devel] KNIP dynamic ImageJ plugin loading
In-Reply-To: <4FCF1E38.1080606@doube.net>
References: <4FB217E8.3090309@gmx.de>
	<CADN69ymNn=UJT9BCHR=9NDB9ExS=ymj7+Poyxk_JDeJbwgTi6w@mail.gmail.com>
	<4FCF1E38.1080606@doube.net>
Message-ID: <alpine.DEB.1.00.1206131221310.16012@bonsai2>

Hi Mike,

On Wed, 6 Jun 2012, Michael Doube wrote:

> I started a document at the last hackathon but have lacked time to work
> on it since then: please feel free to add your insight to it:
> 
> http://developer.imagej.net/writing-imagej-plugins
> 
> The idea is to make it as easy as possible to start writing plugins in
> Eclipse: ideally there should be minimal stuff to configure so you can
> concentrate on learning the new APIs. Because most plugin developers
> won't be ImageJ developers, there's no sense in forcing them to have
> full repositories of those projects. It's much leaner to have the
> snapshot JAR to develop against.

To keep you updated on the progress in this regard:

1) To solve the issue with Eclipse not running the annotation processors
as mandated by the Java specification, I managed to get code working that
can quickly detect at startup when the annotation processor needs to be
run. The last part I need to finish is to edit the Eclipse configuration
(if it is detected that we're really running inside Eclipse) to at least
trigger the annotation processing after a Project>Clean. The progress can
be seen in the 'eclipse-helper' branch in our repository.

2) Since Eclipse 3.7, Maven support is shipped by default. Netbeans and
IntelliJ already do that, so I think the way we'll go forward is to have
File>New Plugin write a pom.xml and set up a .java file from a template.
This pom.xml will have the scijava pom as parent so you do not need to
bother downloading .jar files or setting up Git submodules or some such at
all; this is what Maven excels at.

3) There is a ticket (sorry, I cannot look it up, am offline on an airport
writing this) for File>New Plugin (Eclipse). I am tending now to have a
unified user interface for all ways to make a new plugin; the dialog will
not only ask for the class name but also whether to open this in Eclipse,
Netbeans, IntelliJ or the Script Editor (or any other program which can
cope with Maven configurations). A first stab at opening stuff in Eclipse
can be seen attached to this mail (a Beanshell script that can start
Eclipse given its path from Java); hopefully I'll manage to tell Eclipse
to add a project to the current workspace and to open a given file right
away.

4) it should be easy to start the JVM (and by extension, ImageJ) with
options so that Eclipse's debugger can attach to it. I still have to find
out which those options are and I need to figure out a good UI to
configure ImageJ so that it restarts in that mode (I do think that a
restart is required, though).

If you can help me with any of this, I will be very thankful.

Ciao,
Johannes
-------------- next part --------------
import java.io.File;
eclipseRoot = new File(System.getProperty("user.home") + "/eclipse/");
addClassPath(new File(eclipseRoot, "plugins/org.eclipse.osgi_3.7.2.v20120110-1415.jar").getPath());

/*
for (File file : new File(eclipseRoot, "plugins").listFiles())
	if (file.getName().endsWith(".jar"))
		addClassPath(file.getAbsolutePath());
	else if (file.isDirectory())
		for (File file2 : file.listFiles())
			if (file2.getName().endsWith(".jar"))
				addClassPath(file2.getAbsolutePath());
*/

import org.eclipse.core.runtime.adaptor.EclipseStarter;
import java.util.HashMap;
import java.util.Map;

Map properties = new HashMap();
properties.put("osgi.install.area", eclipseRoot.getPath());
properties.put("osgi.syspath", eclipseRoot.getPath() + "/plugins");
properties.put("osgi.configuration.area", eclipseRoot.getPath() + "/configuration");
properties.put("osgi.parentClassloader", "fwk");
EclipseStarter.setInitialProperties(properties );

EclipseStarter.startup(new String[] {}, null);
c = EclipseStarter.run(null);
print(c);
// todo: EclipseStarter.shutdown();

From michael at doube.net  Fri Jun 15 08:48:10 2012
From: michael at doube.net (Michael Doube)
Date: Fri, 15 Jun 2012 15:48:10 +0200
Subject: [ImageJ-devel] KNIP dynamic ImageJ plugin loading
In-Reply-To: <alpine.DEB.1.00.1206131221310.16012@bonsai2>
References: <4FB217E8.3090309@gmx.de>
	<CADN69ymNn=UJT9BCHR=9NDB9ExS=ymj7+Poyxk_JDeJbwgTi6w@mail.gmail.com>
	<4FCF1E38.1080606@doube.net>
	<alpine.DEB.1.00.1206131221310.16012@bonsai2>
Message-ID: <4FDB3D1A.9080004@doube.net>

> If you can help me with any of this, I will be very thankful.

I am a willing but slightly time-limited guinea-pig. What I would really
like to see is:

1. For users: easy (few, hard to break steps) installation of a plugin
that has dependencies on other third-party plugins and optional ImageJ
components. We discussed this earlier with respect to JAMA - your
response was that JAMA could be specified in an update site and ImageJ
would take care of ensuring that JAMA would be available at runtime.
This helps code reuse and avoids the current bundling situation in
BoneJ. However, I have to be sure that the other plugins don't change in
the meantime in a way that breaks an API that I'm using, and screws
things up for my users. So there has to be a versioning system that
ensures compatibility between packages. Something like Debian's APT
system is what I have in mind. Until then, I have to bundle code which I
know works, and hope like hell that the rest of the ImageJ universe
doesn't break things for users.

2. For developers: easy (few, hard to break steps, passes the 'can my
undergrad project student do it' test) to configure Eclipse to create
plugins that have dependencies on plugins from other sources. Maven does
this, right? What would be super-neat would be for this to loop back to
1. above: when Eclipse builds a release version, the plugin and all the
dependency info gets published to the update site.

Looking forward to the new developments,

Michael


From Johannes.Schindelin at gmx.de  Sun Jun 17 01:25:19 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Sun, 17 Jun 2012 08:25:19 +0200 (CEST)
Subject: [ImageJ-devel] KNIP dynamic ImageJ plugin loading
In-Reply-To: <4FDB3D1A.9080004@doube.net>
References: <4FB217E8.3090309@gmx.de>
	<CADN69ymNn=UJT9BCHR=9NDB9ExS=ymj7+Poyxk_JDeJbwgTi6w@mail.gmail.com>
	<4FCF1E38.1080606@doube.net>
	<alpine.DEB.1.00.1206131221310.16012@bonsai2>
	<4FDB3D1A.9080004@doube.net>
Message-ID: <alpine.DEB.1.00.1206170811020.16012@bonsai2>

Hi,

On Fri, 15 Jun 2012, Michael Doube wrote:

> > If you can help me with any of this, I will be very thankful.
> 
> I am a willing but slightly time-limited guinea-pig.

Thank you.

> What I would really like to see is:
> 
> 1. For users: easy (few, hard to break steps) installation of a plugin
> that has dependencies on other third-party plugins and optional ImageJ
> components.

I cannot stress enough that you are more likely to get what you want when
you participate in the process of developing things, even if you are
"just" testing things thoroughly.

That is why I am thankful that you volunteered.

Having said that, it seems that most other Fiji developers can cope with
the current Updater...

> We discussed this earlier with respect to JAMA - your response was that
> JAMA could be specified in an update site and ImageJ would take care of
> ensuring that JAMA would be available at runtime.  This helps code reuse
> and avoids the current bundling situation in BoneJ. However, I have to
> be sure that the other plugins don't change in the meantime in a way
> that breaks an API that I'm using, and screws things up for my users. So
> there has to be a versioning system that ensures compatibility between
> packages. Something like Debian's APT system is what I have in mind.
> Until then, I have to bundle code which I know works, and hope like hell
> that the rest of the ImageJ universe doesn't break things for users.

The biggest problem is that we must not make things so difficult that we
lose the developers who contribute their plugins to the community.

Yes, a situation can arise (such as with MassiveStitcher) where plugins
are incompatible with other plugins (and may even break them simply
because they are installed concurrently).

Such situations are annoying, but happily, they are also rare: there are
many more plugins which do _not_ interfer with each other, even if
depending on the same 3rd-party libraries.

In the particular case of Jama: we provide that from the main Fiji Update
site already. Since Jama has not been updated in ages, I believe that it
is safe to assume that everybody and her dog is stuck with version 1.0.2
(which we ship with one fix for a nasty JVM side effect).

> 2. For developers: easy (few, hard to break steps, passes the 'can my
> undergrad project student do it' test) to configure Eclipse to create
> plugins that have dependencies on plugins from other sources.

I am afraid that everybody I know who works with Eclipse regularly says
that it is not possible to configure Eclipse easily.

Having said that...

> Maven does this, right?

This is what I experienced. If you install Eclipse for Java developers
(_not_ Eclipse classic where they forgot to include the m2e Maven
connector), all of a sudden, configuration is pretty easy:
File>Import>Existing Maven Project...

My hope is that I'll manage to remote control Eclipse via Java to perform
that action automatically with a given path, but I did not have time to
research this yet.

> What would be super-neat would be for this to loop back to 1. above:
> when Eclipse builds a release version, the plugin and all the dependency
> info gets published to the update site.

I am of two minds there. While it would be super-convenient to upload (in
Maven speak: deploy) the build automatically as a part of the Eclipse
build (in fact, more like the Maven build steps because Eclipse is not
able to build .jar files except manually; Maven is, however, able to
perform this function automatically), it encourages a workflow where the
developer uploads _untested_ code. That would be rather dangerous, don't
you agree?

Ciao,
Johannes


From michael at doube.net  Sun Jun 17 03:55:28 2012
From: michael at doube.net (Michael Doube)
Date: Sun, 17 Jun 2012 10:55:28 +0200
Subject: [ImageJ-devel] was: KNIP dynamic ImageJ plugin loading
In-Reply-To: <alpine.DEB.1.00.1206170811020.16012@bonsai2>
References: <4FB217E8.3090309@gmx.de>
	<CADN69ymNn=UJT9BCHR=9NDB9ExS=ymj7+Poyxk_JDeJbwgTi6w@mail.gmail.com>
	<4FCF1E38.1080606@doube.net>
	<alpine.DEB.1.00.1206131221310.16012@bonsai2>
	<4FDB3D1A.9080004@doube.net>
	<alpine.DEB.1.00.1206170811020.16012@bonsai2>
Message-ID: <4FDD9B80.7050401@doube.net>

Hi Johannes,

> Having said that, it seems that most other Fiji developers can cope with
> the current Updater...

This section was about ImageJ users, who are a different
super-population than Fiji developers. The updater as it stands works
fine for users. Except when it downloads updates which break their setup
and then I have to go and fix the installations on all our microscopes.
The easier and less broken it can be for users, the easier our lives as
maintainers and developers gets. Does the updater do any version
checking, or does it just download the newest of everything? What does
that mean for stability?

The point is that if I can specify that I have tested BoneJ against some
particular version of e.g. ImageJ or the 3D Viewer, then my users can
safely update those components and they can continue with their science
without some code weirdness changing their results. Otherwise they are
stuck in the assumption that newer is better - which sometimes it is not
- or they have to not update and freeze the rest of their ImageJ
installation (maybe missing out on new stuff which really is better).

> The biggest problem is that we must not make things so difficult that we
> lose the developers who contribute their plugins to the community.

I agree, the community has to be as inclusive as possible. But mistakes
do make it into computer programs and it would be good to protect our
users against that as far as we can.

> In the particular case of Jama: we provide that from the main Fiji Update
> site already. Since Jama has not been updated in ages, I believe that it
> is safe to assume that everybody and her dog is stuck with version 1.0.2
> (which we ship with one fix for a nasty JVM side effect).

You're right, JAMA wasn't a great example for the point of API changes.
I made some other examples above where API changes really have broken
things occasionally.

>> 2. For developers: easy (few, hard to break steps, passes the 'can my
>> undergrad project student do it' test) to configure Eclipse to create
>> plugins that have dependencies on plugins from other sources.
> 
> I am afraid that everybody I know who works with Eclipse regularly says
> that it is not possible to configure Eclipse easily.

That's my experience too, hence the detailed instructions I've had to
write and attempt to keep updated. It gets easier with practice ;-)

> My hope is that I'll manage to remote control Eclipse via Java to perform
> that action automatically with a given path, but I did not have time to
> research this yet.

That would be cool. And has a high chance of passing my student test.
(Note, this is not the same as Student's t-test).

> perform this function automatically), it encourages a workflow where the
> developer uploads _untested_ code. That would be rather dangerous, don't
> you agree?

Not necessarily any worse than the current situation. I can easily
publish code and forget to test it, without the help of Maven. But
having a "Test and Deploy" button which runs unit tests and only
publishes if they pass is one way to deal with it. Or, a warning - "this
code is going to get deployed, by hitting OK you certify that it's
tested" and then a digital signature or something like that.

I hope these comments help in some way. I'm bracing myself for the
infrastructure changes I'll have to do but looking forward to a
streamlined result.

Michael





From ctrueden at wisc.edu  Tue Jun 19 13:29:21 2012
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Tue, 19 Jun 2012 13:29:21 -0500
Subject: [ImageJ-devel] Fwd: CompositeOverlay
In-Reply-To: <4fdf928d.42c5e00a.5d8b.6d7e@mx.google.com>
References: <CAKcvfuSXfXZhxyT5wiCW7pdEVQ1XMgGgYbZb7Y-pUOtgPB9inw@mail.gmail.com>
	<4fdf928d.42c5e00a.5d8b.6d7e@mx.google.com>
Message-ID: <CADN69ymSd2Fta7jUqW9CJXR50B+QvTBRYEkNDVvnBRbeCxcsiA@mail.gmail.com>

Thanks for your comments, Lee. I am forwarding this thread to imagej-devel,
since the discussion is of general interest.


---------- Forwarded message ----------
From: Lee Kamentsky <leek at broadinstitute.org>
Date: Mon, Jun 18, 2012 at 3:41 PM
Subject: Re: CompositeOverlay
To: Barry DeZonia <bdezonia at gmail.com>
Cc: Curtis Rueden <ctrueden at wisc.edu>, Lee Kamentsky <
leek at broadinstitute.org>


Hi Barry,

On 6/18/2012 4:06 PM, Barry DeZonia wrote:

> Hey guys,
>
> I am wondering if the current CompositeOverlays approach is broken.
> Originally we had CompositeOverlay only be defined by a
> CompositeRegionOfInterest (defined in Imglib). This makes sense but we want
> to be able to serialize overlays and in order to serialize
> CompositeOverlays we need to either push the serializing code down into
> Imglib's RegionOfInterest code or we need to have CompositeOverlays
> maintain the state of multiple overlays.
>
> Currently we've started down the second road. But looking at the API for
> Overlay I can see things that are tricky to deal with. For instance getting
> well defined axes and ranges from the Overlays making up a Composite (e.g.
> what if axes of two overlays are different?).
>

I think the problem here is similar to the issues we have when combining
any two objects - the EuclideanSpace of the objects might be different and
the "meaning" of the composite is ambiguous: does a 2-d overlay select a
plane in a 3-d space or does it project through all of the planes? So part
of the problem with the overlays as I wrote them was that they only handled
the trivial case and they made assumptions about the user's intent when
mapping onto higher-dimension spaces.


 We could make and(), or(), not(), etc. check that the referenced overlay
> is compatible with the current definition. But before I write a bunch of
> code I'd like to see what you guys think the best approach is. Any
> suggestions?
>
>
In Barcelona, we talked briefly about strategies for melding objects in
different spaces using space-space mappings to project everything into a
common space. That's useful not only for overlays, but for multi-image
alignment and other problems. My gut reaction is that this is another
flavor of the same problem. When creating a composite, you need both the
overlay and a mapping object that translates the coordinates of the
composite space into those of the overlay space (or that executes an
out-of-bounds strategy for coordinates that don't map). We talked about
drawing overlays in a 3-d viewer where the view plane might not be X-Y
plane - there, the space-space mapping lets you rotate our 2-d overlays in
the 3-d space.

I think there's a lot of value in making the composite manage individual
overlays. I have a feeling people will want to ungroup the composites and
adjust the individual shapes, then group them again. I'm also guessing that
people might want each of the sub-objects to have its own line and fill.

Pragmatically, it's possible to take baby steps. You could create a single
identity mapping and have the current code either throw an exception if
axes didn't match or use the identity mapping if they did. Then, you could
add different flavors of and(), or()... to take both an overlay and a
mapping. The mappings themselves would need to be serializable and the
serialization of the composite would wrap the serializations of the overlay
/ mapping pairs.

Hope this helps,
--Lee
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120619/201495fb/attachment.html>

From Johannes.Schindelin at gmx.de  Mon Jun 25 13:19:11 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Mon, 25 Jun 2012 20:19:11 +0200 (CEST)
Subject: [ImageJ-devel] ImageJ User and Developer Conference 201: Only three
 days left (fwd)
Message-ID: <alpine.DEB.1.00.1206252018500.32117@s15462909.onlinehome-server.info>

FYI

---------- Forwarded message ----------
Date: Mon, 25 Jun 2012 16:08:47 +0200
From: Christian Moll <christian.moll at TUDOR.LU>
Reply-To: imagej at LIST.NIH.GOV
To: IMAGEJ at LIST.NIH.GOV
Subject: ImageJ User and Developer Conference 201: Only three days left

Dear ImageJ Community,

we just like to remind you about the deadline for the call for paper of 
the upcoming ImageJ User and Developer Conference in Luxembourg on 24th to 
26th of October this year.
There are three days left to submit a paper until 27th of June 2012.
 
Visit http://imagejconf.tudor.lu/call_for_paper for more details about the 
call.

To submit a paper, please register (if not already registered for one of 
the last conferences)  to the conference page. After you logged in the 
first time a private area for your submission will be created and you will 
be redirected to your private submission page. You can access this page 
also by using the Submit link in the top right of the page near by the 
Login/Logout button.

We are looking forward to receive your contribution to the conference.

Kind regards,

The Organization Committee

P.S. Again. Apologizing for cross posting. 

--
ImageJ mailing list: http://imagej.nih.gov/ij/list.html


