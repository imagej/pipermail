From gharris at mbl.edu  Thu Mar  3 10:05:00 2011
From: gharris at mbl.edu (Grant B. Harris)
Date: Thu, 03 Mar 2011 11:05:00 -0500
Subject: [ImageJ-devel] WidgetStyle & incompatible types javac bug.
Message-ID: <4D6FBC2C.1090606@mbl.edu>

An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20110303/aace6fd8/attachment.html>

From Johannes.Schindelin at gmx.de  Mon Mar  7 10:36:10 2011
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Mon, 7 Mar 2011 17:36:10 +0100 (CET)
Subject: [ImageJ-devel] New release: Fiji Madison
Message-ID: <alpine.DEB.1.00.1103071732580.15247@pacific.mpi-cbg.de>

Dear all!

I proudly announce a new version of Fiji (Fiji Is Just ImageJ -- batteries
included).

So: what is Fiji? It is just a distribution of ImageJ, i.e. putting a nice
and convenient infrastructure around ImageJ such as: automatic updates,
extensive documentation, a powerful yet small Script Editor, reusable
components for users and developers, bug tracking, etc.

For details and downloads, see: http://pacific.mpi-cbg.de/.

Note: if you already have a Fiji installation, you can use the Fiji
Updater to upgrade; no need to download and install from scratch. Just
make sure that you update just the Updater first if you have not updated
in a long time, and update Java in the advanced mode (unless you are using
MacOSX).

In our beloved tradition, the current version is named after the location
of a big hackathon: Madison. It was not strictly a Fiji hackathon, but
the first ImageJ2 hackathon, made possible by Kevin Eliceiri and Curtis
Rueden. Nevertheless, quite some work on Fiji and its plugins got done,
so here goes "Fiji Madison".

There have been more than 150 thousand lines added and 40 thousand removed,
with the help of (in alphabetical order):

Albert Cardona, Benjamin Schmid, Christian Tischer, Curtis Rueden, Daniel
James White, Daniel Sage, David Hovis, Francisco Jim?nez Hern?ndez, Gregory
Jefferis, Ignacio Arganda Carreras, Jacques Pecreaux, Jan Eglinger, Jan
Funke, Jean-Yves Tinevez, Johannes Schindelin, Kota Miura, Mark Longair,
Michael Doube, Philippe Th?venaz, pogo, Robert Bryson-Richardson, Stephan
Preibisch, Stephan Saalfeld, Tobias Pietzsch, Tom Kazimiers, Wilhelm Burger,
Yili Zhao, and many other helpers.

Changes since Fiji Heidelberg:

New plugins
===========

The Time Stamper plugin was much enhanced and eventually renamed into
Series Labeler, thanks to Daniel James White and Tom Kazimiers.

The plugin "TopoJ" was added, thanks to David Hovis.

A simple Graph Cut segmentation plugin was added, thanks to Jan Funke.

Two "Macro Examples" were added to demonstrate optical illusions which should
convince everybody that quantitative analysis of biological images is really
much better than looking at a red-green picture and convincing oneself that
there might be colocalized signals. Thanks to Daniel James White and
Gabriel Landini.

Thanks to a generous license by Michael Unser of the Biomedical Imaging Group
at the EPFL, the Differentials plugin, MosaicJ, Philippe Thevenaz' PointPicker,
his Shepp-Logan Phantom plugin, the StackReg plugin and the Snakuscule plugin
and Daniel Sage's plugin "Extended Depth Field" are distributed with Fiji now.

Thanks to the generous license by Erik Meijering to distribute the source code
for a few of his plugins with Fiji, FeatureJ, RandomJ and TransformJ are
available in Fiji now, too.

The Linear Kuwahara plugin was contributed by Christian Tischer.

Daniel Sage's MIJ library to use Fiji/ImageJ from within Matlab is included
with Fiji now. Just add Fiji.app/scripts/ to the search path and call 'Miji'.

Kota Miura contributed the Temporal Color Coder which makes a t-projection
color-coding the original time points.

Bio-Format's bfopen.m was added to use Fiji's Bio-Formats from Matlab. Thanks
to Curtis Rueden.

The new 3D Blob Segmentation plugin allows interactive 3D segmentation in
the 3D Viewer backed by Fiji's level sets framework. Thanks to Erwin Frise,
Albert Cardona and Benjamin Schmid.

Mark Longair contributed plugins to calculate the curvature of n-dimensional
images, and to detect vessels according to Frangi's method.

The Correct 3D drift script registers time frames using the Stitching 3D
plugin. Thanks to Stephan Preibisch, Robert Bryson-Richardson and Albert
Cardona.

The Retinex plugin was added by Francisco Jim?nez Hern?ndez and Gabriel
Landini.

There is now a plugin calculating the 'Shape Index Map', a per-pixel value
describing the shape of the height-field corresponding to the image.

It is now possible to turn a binary image of points into a point selection,
by starting Edit>Selection>Points from Mask.

There is now a plugin that saves the current image in EPS (Encapsulated
PostScript) format. Thanks to Wilhelm Burger.

Use "Plugins>Transform>Panorama equirectangular view" to look at 360? panorama
photographs and pan around. Thanks to Stephan Saalfeld.

User-visible changes
====================

On Linux, the Fiji launcher will run even with older setups than the launcher
was compiled on.

The Bio-Formats plugins were updated frequently to include bug fixes and
improvements, e.h. support for the new LSM 710 format. Thanks to the LOCI
& Glencoe team.

The Debian packages are being rebuilt on a weekly basis now. This was a lot
of work competently completed by Mark Longair.

In the course of Debianization, a number of licenses have been clarified.

On Linux, RAM will not be overcommitted anymore (this used to lead to serious
paging delays in multi-user environments).

Fiji will now correctly identify 64-bit Intel CPUs on MacOSX.

The Fiji launcher accepts --edit without paths now, opening the Script Editor
with a new, empty file.

With newer MacOSX versions, the absence of the SECURITYSESSIONID does not
imply headless operation.

When calling Fiji from a multi-platform Fiji.app/ directory, it will not
try to use the Java Runtime environment for another architecture.

The Fiji launcher will interpret jvm.cfg before command line options so that
the user has a chance to override faulty settings. Thanks to Jacques Pecreaux.

On MacOSX, when the user specified "Open in 32-bit mode", Fiji will no longer
ignore the user's wish. Thanks to Erwin Frise and Arthur Edelstein.

Since many parts of Fiji's source code rely on Java 1.6 or better now, the
retrotranslator is activated automatically on MacOSX when only Java 1.5 or
earlier is available. Thanks to Mark Longair.

Fiji will be able to use native libraries put into Fiji.app/lib/<platform>/.

Calling "fiji-<platform> --updater" calls a command-line version of the Fiji
Updater; this is useful in headless setups.

Any script or macro can now live in any menu, by putting it into
Fiji.app/plugins/Scripts/. For example, if you want to have a macro in
File>Import, you might save it to Fiji.app/plugins/Scripts/File/Import/.

As always, Fiji was synchronized frequently with ImageJ, and a few bug fixes
were contributed to ImageJ through Fiji. Thanks to Wayne Rasband.

Fiji's bundled Java Runtime Environment is now at version 1.6u24 (to update,
run "Update Java" from Fiji Updater's "Advanced mode").

Too many bug fixes and improvements to count in the TrakEM2 components. Thanks
Albert Cardona and Stephan Saalfeld.

Add the Plugins>Examples>Extended Profile Plot script to get profile plots
of closed polygons.

Add "Scale to DPI" function to Image>Adjust menu, thanks to Curtis Rueden.

Lots of bug fixes and improvements in the 3D Viewer. To name just a few:
orthoslice changes are now recordable, the animation axis can be specified,
the rotation step is adjustable, import/export for .stl files was added (for
3D printers), the bounding box now has ticks, the transfer function is
adjustable, single objects are auto-selected, the current image is added
by default, ImageJ is no longer allowed to intercept key presses, multiple
3D Viewers can be synchronized, there is now a "Take snapshot" menu item,
fullscreen mode, colorize meshes from given images, load/save landmarks
for all timepoints, make color of landmarks adjustable, etc. Thanks to
Benjamin Schmid.

The Analyze Skeleton plugin underwent many bug fixes and improvements, thanks
to Peter C. Marks, Huub Hovens, Michael Doube and Ignacio Arganda-Carreras.

Fiji's Arrow Tool is now recordable and -- as was intended originally,
before ImageJ grew its own version of the tool -- gave rise to a generic
tool infrastructure allowing new tools to be developed more easily (and
using proper Java instead of macros).

The Auto Threshold plugin supports 16-bit images now, too. This mode respects
the true 16-bit histogram rather than taking shortcuts. While at it, the
Huang method has been accelerated tremendously.

Scripting with the scripting languages is quicker now because ImageJ, Java
and ImgLib classes are imported by default when running scripts from the
Script Editor.

The Bug Submitter plugin collects more information in the bug report
automatically, to help developers understand the environment better. Thanks
to Mark Longair.

Some bugs were fixed with Clojure scripting, thanks to Albert Cardona.

Some errors were fixed in the Colocalisation_Analysis plugins, thanks to
Daniel James White.

Macro recording of the Directionality plugin was fixed, thanks to Jan
Eglinger.

Fiji's handling of Help>Refresh Menus has seen a number of bug fixes, as
well as Fiji's headless mode (which will stop being a clever hack with
ImageJ2, but instead be a proper solution).

For teachers' and instructors' convenience, Fiji can cache sample images
locally, avoiding huge network traffic during courses.

When using the Recent Commands (available via the '9' key), the Recorder
properly records which action was chosen.

In addition to macros available as menu items, scripts are also opened
in the Script Editor rather than executed when holding down the Shift key
prior to opening the menu. While at it, the status of the main window tells
the user what is currently happening.

The Fiji Updater now uses the system-wide proxy settings.

By caching the checksums of the files, the Updater was speeded up dramatically.

The Updater is disabled when Fiji was installed via the Debian packages.

The Fiji Updater supports multiple Update sites now. If you have a web server
which you can access via SSH, you can publish your own plugin suites.

The Image Expression Parser was fixed for a regression in ImageJ 1.44n and
later, as well as two bugs related to filename detection. Thanks to Albert
Cardona and Jean-Yves Tinevez.

The extra file type handling when opening images was fixed with regard to
the Bio-Formats plugin. Thanks to Curtis Rueden and Gregory Jefferis.

Thanks to Albert Cardona, the Jython Interpreter now prints the last evaluated
expression return value.

The Lasso/Blow Tool is more robust now, using the new AbstractTool framework
(thereby avoiding timing issues due to a macro handling all the mouse input).

The Multiple Image Processor now resets Escape before starting, and it handles
.pgm files as claimed in the documentation.

The Compile & Run command no longer needs write access to Fiji.app/plugins/,
and it offers to unlock images when appropriate.

A bug was fixed which prevented MBF plugins from being compiled and run on
the fly when a .java file was present in a subdirectoy of Fiji.app/plugins/.

Register>Transform Virtual Stack Slices got a checkbox to toggle interpolation.
Thanks to Stephan Saalfeld.

The Script_Editor can export scripts bundled in .jar files for other Fiji users
to install and run.

A couple of templates have been added to the Script Editor.

In the script editor, the font and tab size can be adjusted. Thank you, Yili
Zhao.

The Script Editor can auto-save before compiling now. Thanks to Philippe
Th?venaz.

The output of multiple scripts in the Script Editor is now separate; you will
see the output only when the corresponding script's tab is active. Likewise,
the script interpreters running the scripts are now independent of each other.

When the Script Editor is asked to open images, it lets ImageJ open them
rather than opening gibberish in a new tab. Thanks to Thomas Julou.

The Script Editor is now usable even if the user updated ImageJ to the
daily version. Thanks to Wayne Rasband.

The Script Editor offers to File>Open Recent. Thanks to Albert Cardona.

The startup time of the Script Editor was reduced dramatically.

In the Script Editor, File>Open will no longer offer to open .class or .jar
files.

For interoperability, the Script Editor now enforces UTF-8 encoding for both
reading and writing files.

When saving a new file, the Script Editor will default to the Fiji.app/
directory. This helps when trying to save macros on MacOSX, where the Save
Dialog does not allow switching into .app directories.

You can ask the Script Editor to wrap the lines around instead of showing
a horizontal scrollbar. Additionally, it can label whitespace and zap gremlins,
thanks to Albert Cardona.

The Simple Neurite Tracer can perform Sholl analysis and export the graphs as
.svg or .csv files now. Additionally, there were many fixes and improvements,
including an export as .swc option, or being able to select the path nearest
to the mouse pointer with the 'g' key. Further, selecting a path in the 3D
Viewer selects it in the Neurite Tracer, too. For convenience, there is a
button to run Fiji's "Analyze Skeleton (2D/3D)" plugin on the paths. The
user interface was converted to the nicer Swing look.  Thanks to Mark Longair.

The SPIM Registration can now handle multi-channel files, too. It provides
the cosine blending option and has many more improvements. Thanks to
Stephan Preibisch.

The Stitching plugins were speeded up, and it uses calibration info by
default now. Thanks to Stephan Preibisch.

The Thread Killer now unlock all images, and it is more careful about
what it offers to kill.

The Trainable Segmentation plugin can handle image stacks now. Thanks to
Verena Kaynig, Ignacio Arganda-Carreras and Albert Cardona.

The Particle Analyzer (3D) handles the case when there are less than 3 objects
now.

The Align image plugin uses the target image's dimensions for the result.

The Segmentation Editor can be controllable by ImageJ macros. Thanks to
Benjamin Schmid.

When zooming in the Three Panes, the right center point is used in all panes.
Thanks to Mark Longair.

When scripting, you can accelerate crucial parts by inserting Java code
snippets using the new Weaver.inline(...) method in any scripting language.
Thanks to Albert Cardona.

Several fixes and improvements in the mpicbg submodule for feature extraction
and transformation, e.g.:  Feature matching can be performed without geometric
consensus filter.  Geometric consensus filter got a new parameter, minimal
absolute number of inliers.  Added robust regression outlier filter to
TileConfiguration.  Several fixes and improvements to the CLAHE local contrast
enhancer, e.g.: Added a fast (real-time) version of the filter.  Fixed
selection handling.  Fixed transfer of values beyond the current min/max range.
Support CompositeImages in variable ways.  Added homogeneous least squares fit
for perspective transformations using Jama SVD.  Interactive transforms can
handle Composites, Stacks and HyperStacks.  Added a simple but comparably
fast Optic Flow variant based on the sum of square differences in a Gaussian
weighted neighborhood of a pixel.  Thanks to Stephan Saalfeld.


Developer-visible changes
=========================

There have been quite a few cleanups of the project structure; the sources
for plugins and libraries which are not contained in submodules are supposed
to live in src-plugins/<jarname>/<package>/<classname>.java, where <jarname>
is the base name of the generated .jar file.

There is now a script to compile and cross-compile ITK.

JNA was extracted from Jython and JRuby so that a newer jna.jar can be used
without being shadowed by Jython's or JRuby's idea of JNA.

There is a helper now to compile a few ImageJ versions.

We have helper scripts to build cross-compilers on Linux 64-bit to target
win32, win64, MacOSX (32-bit and 64-bit Intel, 32-bit PowerPC).

There is a Fiji launcher for MacOSX PowerPC again, sadly not met with any
feedback from the complaining person, let alone positive one.

We have a script now to generate Eclipse, Netbeans and IntelliJ projects
from the master Fakefile.

FreeBSD is supported for developers, for now.

There is a fall-back shell script -- fiji-other.sh -- for otherwise
unsupported platforms.

The get-sample-images script supports headless operations now.

To prevent long waiting times with "git status" when a number of submodules
are checked out, gitignore-in-submodules now understands an 'ignoredirty'
subcommand.

bin/identify-commit.py can be used on the precompiled Fiji launchers, too.

In developer mode, the Updater's "Show changes" also lists changes for
the Fiji launchers and the .jar file's manifest.

When samples/ is present, it is included in generated Fiji.app bundles.

A convenience script was added to use Maven.

There is a helper now to find all dependencees (even transitive ones) of
a given .jar file.

The nightly build generates a stable WebStart (reflecting the current version
according to the Fiji Updater) and the PluginList on the Wiki.

A simple script to reverse the page order of a .pdf file was added, as an
example how to use iText.

The helper script bin/ready-for-upload.bsh can determine whether all
prerequisite steps prior to uploading have been completed.

The commons-math library from the Apache project is now available.

Fiji Build can now build JNI-backed plugins; just add .c or .cxx files to
a .jar rule, and a shared library of the same name as the .jar file will
be generated from the native sources. Use fiji.JNI.loadLibrary("<name>") to
load the shared library.

Upgrade jfreechart to 1.0.13 (from 1.0.9).

Update JNA to version 3.2.7.

Fiji contains a base class fiji.tool.AbstractTool which makes it easy to add
tools to the toolbar that are not backed by polling macros, but by a proper
event-driven Java class.

To generate tool icons from 16x16 pictures, use Plugins>Examples>Image To
Tool Icon.

The Auto Threshold plugin has an API usable by developers of other plugins
now.

The Fiji Build system handles rules involving Jython or Beanshell more
efficiently now. It avoids to include unwanted files such as .DS_Store into
.jar targets. The code uses generics now, and is more accessible to scripts
and plugins. Fiji Build can use multiple CPU cores simultaneously now.
A target can be force-rebuilt by appending "-rebuild" to the parameter.
Building rules depending on Java3D is now possible even on MacOSX.
Thanks to Mark Longair, Jacques Pecreaux and Curtis Rueden.

There is an easy way for developers to run external programs now:
fiji.SimpleExecuter. This class offers a number of convenience functions
to execute programs with specified parameters in a given working directory,
and it offers several modes how the output should be handled: print to
ImageJ's Log window, print to a stream, or save into Strings.

For Fiji Developer, adding documentation to the Fiji Wiki has been made
even more convenient with enhancements to Plugins>Utilities>Fiji>New Fiji
Tutorial and New Fiji Wiki Screenshot in the same menu.

The file and directory fields in the GenericDialogPlus class have been
improved, and the methods addImageChoice() and getNextImage() have been
added.

fiji-lib now offers a class to split command lines and macro option strings,
and a TicToc helper for simple performance benchmarking.

If you want to add functionality similar to ImageJ's Command Finder to your
own code, you can use fiji.util.gui.CommandFinderBase. If you have a JMenuBar
you want to make accessible, you can use the JFrameCommandFinder class in
the same package straight away. Thanks to Benjamin Schmid.

When looking at a specific file and number in a developer checkout of Fiji,
the Script Editor offers to open that particular location via gitweb in
the web browser (this helps collaboration via IRC, for example).

The submodules have been moved into the modules/ directory.

You can use the short-cut URL http://pacific.mpi-cbg.de/<filename> for
source files in Fiji's Git-managed repositories.

Added IntegralImages as library components to the mpicbg submodule for
rapid box-filter operations (mean, scale, difference of mean, ...).  Thanks
to Stephan Saalfeld.

From white at mpi-cbg.de  Mon Mar  7 13:55:17 2011
From: white at mpi-cbg.de (Dan White)
Date: Mon, 7 Mar 2011 20:55:17 +0100
Subject: [ImageJ-devel] [fiji-devel] New release: Fiji Madison
In-Reply-To: <alpine.DEB.1.00.1103071732580.15247@pacific.mpi-cbg.de>
References: <alpine.DEB.1.00.1103071732580.15247@pacific.mpi-cbg.de>
Message-ID: <943C991D-FE9A-415F-8110-8973ACADD222@mpi-cbg.de>

:-) !!!


D


On Mar 7, 2011, at 5:36 PM, Johannes Schindelin wrote:

> Dear all!
> 
> I proudly announce a new version of Fiji (Fiji Is Just ImageJ -- batteries
> included).
> 
> So: what is Fiji? It is just a distribution of ImageJ, i.e. putting a nice
> and convenient infrastructure around ImageJ such as: automatic updates,
> extensive documentation, a powerful yet small Script Editor, reusable
> components for users and developers, bug tracking, etc.
> 
> For details and downloads, see: http://pacific.mpi-cbg.de/.
> 
> Note: if you already have a Fiji installation, you can use the Fiji
> Updater to upgrade; no need to download and install from scratch. Just
> make sure that you update just the Updater first if you have not updated
> in a long time, and update Java in the advanced mode (unless you are using
> MacOSX).
> 
> In our beloved tradition, the current version is named after the location
> of a big hackathon: Madison. It was not strictly a Fiji hackathon, but
> the first ImageJ2 hackathon, made possible by Kevin Eliceiri and Curtis
> Rueden. Nevertheless, quite some work on Fiji and its plugins got done,
> so here goes "Fiji Madison".
> 
> There have been more than 150 thousand lines added and 40 thousand removed,
> with the help of (in alphabetical order):
> 
> Albert Cardona, Benjamin Schmid, Christian Tischer, Curtis Rueden, Daniel
> James White, Daniel Sage, David Hovis, Francisco Jim?nez Hern?ndez, Gregory
> Jefferis, Ignacio Arganda Carreras, Jacques Pecreaux, Jan Eglinger, Jan
> Funke, Jean-Yves Tinevez, Johannes Schindelin, Kota Miura, Mark Longair,
> Michael Doube, Philippe Th?venaz, pogo, Robert Bryson-Richardson, Stephan
> Preibisch, Stephan Saalfeld, Tobias Pietzsch, Tom Kazimiers, Wilhelm Burger,
> Yili Zhao, and many other helpers.
> 
> Changes since Fiji Heidelberg:
> 
> New plugins
> ===========
> 
> The Time Stamper plugin was much enhanced and eventually renamed into
> Series Labeler, thanks to Daniel James White and Tom Kazimiers.
> 
> The plugin "TopoJ" was added, thanks to David Hovis.
> 
> A simple Graph Cut segmentation plugin was added, thanks to Jan Funke.
> 
> Two "Macro Examples" were added to demonstrate optical illusions which should
> convince everybody that quantitative analysis of biological images is really
> much better than looking at a red-green picture and convincing oneself that
> there might be colocalized signals. Thanks to Daniel James White and
> Gabriel Landini.
> 
> Thanks to a generous license by Michael Unser of the Biomedical Imaging Group
> at the EPFL, the Differentials plugin, MosaicJ, Philippe Thevenaz' PointPicker,
> his Shepp-Logan Phantom plugin, the StackReg plugin and the Snakuscule plugin
> and Daniel Sage's plugin "Extended Depth Field" are distributed with Fiji now.
> 
> Thanks to the generous license by Erik Meijering to distribute the source code
> for a few of his plugins with Fiji, FeatureJ, RandomJ and TransformJ are
> available in Fiji now, too.
> 
> The Linear Kuwahara plugin was contributed by Christian Tischer.
> 
> Daniel Sage's MIJ library to use Fiji/ImageJ from within Matlab is included
> with Fiji now. Just add Fiji.app/scripts/ to the search path and call 'Miji'.
> 
> Kota Miura contributed the Temporal Color Coder which makes a t-projection
> color-coding the original time points.
> 
> Bio-Format's bfopen.m was added to use Fiji's Bio-Formats from Matlab. Thanks
> to Curtis Rueden.
> 
> The new 3D Blob Segmentation plugin allows interactive 3D segmentation in
> the 3D Viewer backed by Fiji's level sets framework. Thanks to Erwin Frise,
> Albert Cardona and Benjamin Schmid.
> 
> Mark Longair contributed plugins to calculate the curvature of n-dimensional
> images, and to detect vessels according to Frangi's method.
> 
> The Correct 3D drift script registers time frames using the Stitching 3D
> plugin. Thanks to Stephan Preibisch, Robert Bryson-Richardson and Albert
> Cardona.
> 
> The Retinex plugin was added by Francisco Jim?nez Hern?ndez and Gabriel
> Landini.
> 
> There is now a plugin calculating the 'Shape Index Map', a per-pixel value
> describing the shape of the height-field corresponding to the image.
> 
> It is now possible to turn a binary image of points into a point selection,
> by starting Edit>Selection>Points from Mask.
> 
> There is now a plugin that saves the current image in EPS (Encapsulated
> PostScript) format. Thanks to Wilhelm Burger.
> 
> Use "Plugins>Transform>Panorama equirectangular view" to look at 360? panorama
> photographs and pan around. Thanks to Stephan Saalfeld.
> 
> User-visible changes
> ====================
> 
> On Linux, the Fiji launcher will run even with older setups than the launcher
> was compiled on.
> 
> The Bio-Formats plugins were updated frequently to include bug fixes and
> improvements, e.h. support for the new LSM 710 format. Thanks to the LOCI
> & Glencoe team.
> 
> The Debian packages are being rebuilt on a weekly basis now. This was a lot
> of work competently completed by Mark Longair.
> 
> In the course of Debianization, a number of licenses have been clarified.
> 
> On Linux, RAM will not be overcommitted anymore (this used to lead to serious
> paging delays in multi-user environments).
> 
> Fiji will now correctly identify 64-bit Intel CPUs on MacOSX.
> 
> The Fiji launcher accepts --edit without paths now, opening the Script Editor
> with a new, empty file.
> 
> With newer MacOSX versions, the absence of the SECURITYSESSIONID does not
> imply headless operation.
> 
> When calling Fiji from a multi-platform Fiji.app/ directory, it will not
> try to use the Java Runtime environment for another architecture.
> 
> The Fiji launcher will interpret jvm.cfg before command line options so that
> the user has a chance to override faulty settings. Thanks to Jacques Pecreaux.
> 
> On MacOSX, when the user specified "Open in 32-bit mode", Fiji will no longer
> ignore the user's wish. Thanks to Erwin Frise and Arthur Edelstein.
> 
> Since many parts of Fiji's source code rely on Java 1.6 or better now, the
> retrotranslator is activated automatically on MacOSX when only Java 1.5 or
> earlier is available. Thanks to Mark Longair.
> 
> Fiji will be able to use native libraries put into Fiji.app/lib/<platform>/.
> 
> Calling "fiji-<platform> --updater" calls a command-line version of the Fiji
> Updater; this is useful in headless setups.
> 
> Any script or macro can now live in any menu, by putting it into
> Fiji.app/plugins/Scripts/. For example, if you want to have a macro in
> File>Import, you might save it to Fiji.app/plugins/Scripts/File/Import/.
> 
> As always, Fiji was synchronized frequently with ImageJ, and a few bug fixes
> were contributed to ImageJ through Fiji. Thanks to Wayne Rasband.
> 
> Fiji's bundled Java Runtime Environment is now at version 1.6u24 (to update,
> run "Update Java" from Fiji Updater's "Advanced mode").
> 
> Too many bug fixes and improvements to count in the TrakEM2 components. Thanks
> Albert Cardona and Stephan Saalfeld.
> 
> Add the Plugins>Examples>Extended Profile Plot script to get profile plots
> of closed polygons.
> 
> Add "Scale to DPI" function to Image>Adjust menu, thanks to Curtis Rueden.
> 
> Lots of bug fixes and improvements in the 3D Viewer. To name just a few:
> orthoslice changes are now recordable, the animation axis can be specified,
> the rotation step is adjustable, import/export for .stl files was added (for
> 3D printers), the bounding box now has ticks, the transfer function is
> adjustable, single objects are auto-selected, the current image is added
> by default, ImageJ is no longer allowed to intercept key presses, multiple
> 3D Viewers can be synchronized, there is now a "Take snapshot" menu item,
> fullscreen mode, colorize meshes from given images, load/save landmarks
> for all timepoints, make color of landmarks adjustable, etc. Thanks to
> Benjamin Schmid.
> 
> The Analyze Skeleton plugin underwent many bug fixes and improvements, thanks
> to Peter C. Marks, Huub Hovens, Michael Doube and Ignacio Arganda-Carreras.
> 
> Fiji's Arrow Tool is now recordable and -- as was intended originally,
> before ImageJ grew its own version of the tool -- gave rise to a generic
> tool infrastructure allowing new tools to be developed more easily (and
> using proper Java instead of macros).
> 
> The Auto Threshold plugin supports 16-bit images now, too. This mode respects
> the true 16-bit histogram rather than taking shortcuts. While at it, the
> Huang method has been accelerated tremendously.
> 
> Scripting with the scripting languages is quicker now because ImageJ, Java
> and ImgLib classes are imported by default when running scripts from the
> Script Editor.
> 
> The Bug Submitter plugin collects more information in the bug report
> automatically, to help developers understand the environment better. Thanks
> to Mark Longair.
> 
> Some bugs were fixed with Clojure scripting, thanks to Albert Cardona.
> 
> Some errors were fixed in the Colocalisation_Analysis plugins, thanks to
> Daniel James White.
> 
> Macro recording of the Directionality plugin was fixed, thanks to Jan
> Eglinger.
> 
> Fiji's handling of Help>Refresh Menus has seen a number of bug fixes, as
> well as Fiji's headless mode (which will stop being a clever hack with
> ImageJ2, but instead be a proper solution).
> 
> For teachers' and instructors' convenience, Fiji can cache sample images
> locally, avoiding huge network traffic during courses.
> 
> When using the Recent Commands (available via the '9' key), the Recorder
> properly records which action was chosen.
> 
> In addition to macros available as menu items, scripts are also opened
> in the Script Editor rather than executed when holding down the Shift key
> prior to opening the menu. While at it, the status of the main window tells
> the user what is currently happening.
> 
> The Fiji Updater now uses the system-wide proxy settings.
> 
> By caching the checksums of the files, the Updater was speeded up dramatically.
> 
> The Updater is disabled when Fiji was installed via the Debian packages.
> 
> The Fiji Updater supports multiple Update sites now. If you have a web server
> which you can access via SSH, you can publish your own plugin suites.
> 
> The Image Expression Parser was fixed for a regression in ImageJ 1.44n and
> later, as well as two bugs related to filename detection. Thanks to Albert
> Cardona and Jean-Yves Tinevez.
> 
> The extra file type handling when opening images was fixed with regard to
> the Bio-Formats plugin. Thanks to Curtis Rueden and Gregory Jefferis.
> 
> Thanks to Albert Cardona, the Jython Interpreter now prints the last evaluated
> expression return value.
> 
> The Lasso/Blow Tool is more robust now, using the new AbstractTool framework
> (thereby avoiding timing issues due to a macro handling all the mouse input).
> 
> The Multiple Image Processor now resets Escape before starting, and it handles
> .pgm files as claimed in the documentation.
> 
> The Compile & Run command no longer needs write access to Fiji.app/plugins/,
> and it offers to unlock images when appropriate.
> 
> A bug was fixed which prevented MBF plugins from being compiled and run on
> the fly when a .java file was present in a subdirectoy of Fiji.app/plugins/.
> 
> Register>Transform Virtual Stack Slices got a checkbox to toggle interpolation.
> Thanks to Stephan Saalfeld.
> 
> The Script_Editor can export scripts bundled in .jar files for other Fiji users
> to install and run.
> 
> A couple of templates have been added to the Script Editor.
> 
> In the script editor, the font and tab size can be adjusted. Thank you, Yili
> Zhao.
> 
> The Script Editor can auto-save before compiling now. Thanks to Philippe
> Th?venaz.
> 
> The output of multiple scripts in the Script Editor is now separate; you will
> see the output only when the corresponding script's tab is active. Likewise,
> the script interpreters running the scripts are now independent of each other.
> 
> When the Script Editor is asked to open images, it lets ImageJ open them
> rather than opening gibberish in a new tab. Thanks to Thomas Julou.
> 
> The Script Editor is now usable even if the user updated ImageJ to the
> daily version. Thanks to Wayne Rasband.
> 
> The Script Editor offers to File>Open Recent. Thanks to Albert Cardona.
> 
> The startup time of the Script Editor was reduced dramatically.
> 
> In the Script Editor, File>Open will no longer offer to open .class or .jar
> files.
> 
> For interoperability, the Script Editor now enforces UTF-8 encoding for both
> reading and writing files.
> 
> When saving a new file, the Script Editor will default to the Fiji.app/
> directory. This helps when trying to save macros on MacOSX, where the Save
> Dialog does not allow switching into .app directories.
> 
> You can ask the Script Editor to wrap the lines around instead of showing
> a horizontal scrollbar. Additionally, it can label whitespace and zap gremlins,
> thanks to Albert Cardona.
> 
> The Simple Neurite Tracer can perform Sholl analysis and export the graphs as
> .svg or .csv files now. Additionally, there were many fixes and improvements,
> including an export as .swc option, or being able to select the path nearest
> to the mouse pointer with the 'g' key. Further, selecting a path in the 3D
> Viewer selects it in the Neurite Tracer, too. For convenience, there is a
> button to run Fiji's "Analyze Skeleton (2D/3D)" plugin on the paths. The
> user interface was converted to the nicer Swing look.  Thanks to Mark Longair.
> 
> The SPIM Registration can now handle multi-channel files, too. It provides
> the cosine blending option and has many more improvements. Thanks to
> Stephan Preibisch.
> 
> The Stitching plugins were speeded up, and it uses calibration info by
> default now. Thanks to Stephan Preibisch.
> 
> The Thread Killer now unlock all images, and it is more careful about
> what it offers to kill.
> 
> The Trainable Segmentation plugin can handle image stacks now. Thanks to
> Verena Kaynig, Ignacio Arganda-Carreras and Albert Cardona.
> 
> The Particle Analyzer (3D) handles the case when there are less than 3 objects
> now.
> 
> The Align image plugin uses the target image's dimensions for the result.
> 
> The Segmentation Editor can be controllable by ImageJ macros. Thanks to
> Benjamin Schmid.
> 
> When zooming in the Three Panes, the right center point is used in all panes.
> Thanks to Mark Longair.
> 
> When scripting, you can accelerate crucial parts by inserting Java code
> snippets using the new Weaver.inline(...) method in any scripting language.
> Thanks to Albert Cardona.
> 
> Several fixes and improvements in the mpicbg submodule for feature extraction
> and transformation, e.g.:  Feature matching can be performed without geometric
> consensus filter.  Geometric consensus filter got a new parameter, minimal
> absolute number of inliers.  Added robust regression outlier filter to
> TileConfiguration.  Several fixes and improvements to the CLAHE local contrast
> enhancer, e.g.: Added a fast (real-time) version of the filter.  Fixed
> selection handling.  Fixed transfer of values beyond the current min/max range.
> Support CompositeImages in variable ways.  Added homogeneous least squares fit
> for perspective transformations using Jama SVD.  Interactive transforms can
> handle Composites, Stacks and HyperStacks.  Added a simple but comparably
> fast Optic Flow variant based on the sum of square differences in a Gaussian
> weighted neighborhood of a pixel.  Thanks to Stephan Saalfeld.
> 
> 
> Developer-visible changes
> =========================
> 
> There have been quite a few cleanups of the project structure; the sources
> for plugins and libraries which are not contained in submodules are supposed
> to live in src-plugins/<jarname>/<package>/<classname>.java, where <jarname>
> is the base name of the generated .jar file.
> 
> There is now a script to compile and cross-compile ITK.
> 
> JNA was extracted from Jython and JRuby so that a newer jna.jar can be used
> without being shadowed by Jython's or JRuby's idea of JNA.
> 
> There is a helper now to compile a few ImageJ versions.
> 
> We have helper scripts to build cross-compilers on Linux 64-bit to target
> win32, win64, MacOSX (32-bit and 64-bit Intel, 32-bit PowerPC).
> 
> There is a Fiji launcher for MacOSX PowerPC again, sadly not met with any
> feedback from the complaining person, let alone positive one.
> 
> We have a script now to generate Eclipse, Netbeans and IntelliJ projects
> from the master Fakefile.
> 
> FreeBSD is supported for developers, for now.
> 
> There is a fall-back shell script -- fiji-other.sh -- for otherwise
> unsupported platforms.
> 
> The get-sample-images script supports headless operations now.
> 
> To prevent long waiting times with "git status" when a number of submodules
> are checked out, gitignore-in-submodules now understands an 'ignoredirty'
> subcommand.
> 
> bin/identify-commit.py can be used on the precompiled Fiji launchers, too.
> 
> In developer mode, the Updater's "Show changes" also lists changes for
> the Fiji launchers and the .jar file's manifest.
> 
> When samples/ is present, it is included in generated Fiji.app bundles.
> 
> A convenience script was added to use Maven.
> 
> There is a helper now to find all dependencees (even transitive ones) of
> a given .jar file.
> 
> The nightly build generates a stable WebStart (reflecting the current version
> according to the Fiji Updater) and the PluginList on the Wiki.
> 
> A simple script to reverse the page order of a .pdf file was added, as an
> example how to use iText.
> 
> The helper script bin/ready-for-upload.bsh can determine whether all
> prerequisite steps prior to uploading have been completed.
> 
> The commons-math library from the Apache project is now available.
> 
> Fiji Build can now build JNI-backed plugins; just add .c or .cxx files to
> a .jar rule, and a shared library of the same name as the .jar file will
> be generated from the native sources. Use fiji.JNI.loadLibrary("<name>") to
> load the shared library.
> 
> Upgrade jfreechart to 1.0.13 (from 1.0.9).
> 
> Update JNA to version 3.2.7.
> 
> Fiji contains a base class fiji.tool.AbstractTool which makes it easy to add
> tools to the toolbar that are not backed by polling macros, but by a proper
> event-driven Java class.
> 
> To generate tool icons from 16x16 pictures, use Plugins>Examples>Image To
> Tool Icon.
> 
> The Auto Threshold plugin has an API usable by developers of other plugins
> now.
> 
> The Fiji Build system handles rules involving Jython or Beanshell more
> efficiently now. It avoids to include unwanted files such as .DS_Store into
> .jar targets. The code uses generics now, and is more accessible to scripts
> and plugins. Fiji Build can use multiple CPU cores simultaneously now.
> A target can be force-rebuilt by appending "-rebuild" to the parameter.
> Building rules depending on Java3D is now possible even on MacOSX.
> Thanks to Mark Longair, Jacques Pecreaux and Curtis Rueden.
> 
> There is an easy way for developers to run external programs now:
> fiji.SimpleExecuter. This class offers a number of convenience functions
> to execute programs with specified parameters in a given working directory,
> and it offers several modes how the output should be handled: print to
> ImageJ's Log window, print to a stream, or save into Strings.
> 
> For Fiji Developer, adding documentation to the Fiji Wiki has been made
> even more convenient with enhancements to Plugins>Utilities>Fiji>New Fiji
> Tutorial and New Fiji Wiki Screenshot in the same menu.
> 
> The file and directory fields in the GenericDialogPlus class have been
> improved, and the methods addImageChoice() and getNextImage() have been
> added.
> 
> fiji-lib now offers a class to split command lines and macro option strings,
> and a TicToc helper for simple performance benchmarking.
> 
> If you want to add functionality similar to ImageJ's Command Finder to your
> own code, you can use fiji.util.gui.CommandFinderBase. If you have a JMenuBar
> you want to make accessible, you can use the JFrameCommandFinder class in
> the same package straight away. Thanks to Benjamin Schmid.
> 
> When looking at a specific file and number in a developer checkout of Fiji,
> the Script Editor offers to open that particular location via gitweb in
> the web browser (this helps collaboration via IRC, for example).
> 
> The submodules have been moved into the modules/ directory.
> 
> You can use the short-cut URL http://pacific.mpi-cbg.de/<filename> for
> source files in Fiji's Git-managed repositories.
> 
> Added IntegralImages as library components to the mpicbg submodule for
> rapid box-filter operations (mean, scale, difference of mean, ...).  Thanks
> to Stephan Saalfeld.
> 
> -- 
> You received this message because you are subscribed to the Google Groups "Fiji-devel" group.
> To post to this group, send email to fiji-devel at googlegroups.com.
> To unsubscribe from this group, send email to fiji-devel+unsubscribe at googlegroups.com.
> For more options, visit this group at http://groups.google.com/group/fiji-devel?hl=en.
> 

Dr. Daniel James White BSc. (Hons.) PhD
Senior Microscopist / Image Processing and Analysis
Light Microscopy Facility
Max Planck Institute of Molecular Cell Biology and Genetics
Pfotenhauerstrasse 108
01307 DRESDEN
Germany

+49 (0)15114966933 (German Mobile)
+49  (0)351 210 2627 (Work phone at MPI-CBG)
+49  (0)351 210 1078 (Fax MPI-CBG LMF)

http://www.bioimagexd.net		BioImageXD
http://pacific.mpi-cbg.de		Fiji (is just ImageJ - batteries included)
http://www.chalkie.org.uk
dan at chalkie.org.uk
( white at mpi-cbg.de )









From oliver.gress at informatik.uni-halle.de  Tue Mar  8 06:26:22 2011
From: oliver.gress at informatik.uni-halle.de (Oliver Gress)
Date: Tue, 08 Mar 2011 13:26:22 +0100
Subject: [ImageJ-devel] Auto-Documentation of Processing Chain: Extension of
 @Parameter Annotation
Message-ID: <1299587182.1868.373.camel@localhost>

Hi all,

we have developed a way for automatic documentation of the processing
chain of an image or other results in ImageJ. 
For improved integration with IJ, we would like to discuss a
modification/extension of the @Parameter annotation in IJ-Dev.

The basic concept is to consider each processing step as an "operator",
that takes some input and computes results, which might become input to
another operator. Such an operator may be an ImageJ plugin or any java
class that satisfies the specification.

The specific interface of such an operator is described by inputs,
parameters, supplementals and outputs. 
Inputs and outputs are used to trace the processing chain, from which a
"history" graph is created.
Parameters are inputs that are not traced but recorded. Supplementals
are not recorded at all and are intended for parameters that have no
effect on the results (e.g. a verbose flag).

We employ java annotations to determine the above interpretation of the
fields of a class and thus the interface of an operator.
At the moment, we use our own annotation class, because @Parameter from
IJ-Dev does not allow the detailed categorization of arguments that
would be required by our concept. It only allows to specify if an
argument is output or not. 
I know that @Parameter is intended to describe the parameters of a
plugin, e.g. to create a parameter dialog automatically. 
I'd like to ask if the idea of @Parameter could be extended to a more
general point of view:

Would it be possible to extend or modify the @Parameter annotation to
categorize a field as input, output, parameter or supplemental?
Our annotation also takes an "explanation" string to describe the
parameter in human-readable form, but it is not essential for the
automatic documentation.

We would really like to merge these annotations, because the processing
chain documentation could be easily employed by IJ plugins that use the
@Parameter annotation and no additional annotation would be necessary.

Another question: Is there any interest in an automatic documentation of
the processing chain?


I have uploaded an excerpt of our manual for further reading on the
operator and history concept:
http://users.informatik.uni-halle.de/~gress/mitobo_manual_excerpt.pdf
The manual is rewritten at the moment, therefore only an excerpt. If you
find a link to our website, please don't refer to the resources that can
be found there because they are outdated. There will be a new version
soon (depending on the annotation issue).

Our annotation can be found here:
http://users.informatik.uni-halle.de/~gress/MTBArgumentAnnotation.java


Best regards
Oliver







From G.Landini at bham.ac.uk  Tue Mar  8 07:04:16 2011
From: G.Landini at bham.ac.uk (Gabriel Landini)
Date: Tue, 8 Mar 2011 13:04:16 +0000
Subject: [ImageJ-devel] Auto-Documentation of Processing Chain:
	Extension of @Parameter Annotation
In-Reply-To: <1299587182.1868.373.camel@localhost>
References: <1299587182.1868.373.camel@localhost>
Message-ID: <201103081304.16745.G.Landini@bham.ac.uk>

On Tuesday 08 Mar 2011 12:26:22 Oliver Gress wrote:
> The specific interface of such an operator is described by inputs,
> parameters, supplementals and outputs.
> Inputs and outputs are used to trace the processing chain, from which a
> "history" graph is created.

Hi Oliver,

I had a brief look at the pdf. I am not clear (but this is just me) how the 
history graph differs from a macro/script recorded sequence.
The nature of processing (or workflow) is sequential and I guess that from a 
recorded script a human readable form might be created, no?

I presume that implementing something like this would require that all current 
commands in ImageJ should output something to create the history graph?

You might be interested in http://imageflow.danielsenff.de/

Regards

Gabriel



From oliver.gress at informatik.uni-halle.de  Tue Mar  8 08:50:36 2011
From: oliver.gress at informatik.uni-halle.de (Oliver Gress)
Date: Tue, 08 Mar 2011 15:50:36 +0100
Subject: [ImageJ-devel] Auto-Documentation of Processing Chain:
 Extension of @Parameter Annotation
In-Reply-To: <mailman.7.1299589317.29320.imagej-devel@imagejdev.org>
References: <mailman.7.1299589317.29320.imagej-devel@imagejdev.org>
Message-ID: <1299595836.1868.547.camel@localhost>

Hi Gabriel,

> I had a brief look at the pdf. I am not clear (but this is just me) how the 
> history graph differs from a macro/script recorded sequence.
> The nature of processing (or workflow) is sequential and I guess that from a 
> recorded script a human readable form might be created, no?
You are right, you could reconstruct the history of a result by the
script/macro. But there are some pitfalls like modification of a script
or changes in software version of IJ or some plugins, which you would
need to record manually.
I have to admit that we barely use macros, but write plugins for IJ,
operator classes and standalone java applications.
The history concept was therefore developed to work beyond the level of
plugins to keep track of input parameters, how results were computed,
i.e. which operators were involved, and which versions of the involved
operators were used in a completely automatic way. This history is
firmly associated with a result, while a script/macro is not.

> I presume that implementing something like this would require that all current 
> commands in ImageJ should output something to create the history graph?
Yes that's true. We are not able to record ImageJ-operations. Using
these standard IJ-operations would break the recording of the processing
chain. We currently can only wrap IJ-plugins to be used with our history
concept. A modification of the @Parameter annotation would therefore be
a step towards better integration at least with IJ2.

> You might be interested in http://imageflow.danielsenff.de/
We already had a short look at imageflow. We were thinking about visual
programming using our concept, because every operator's interface can be
inquired. Imageflow has a great visual representation, but as far as I
know needs manual configuration (xml-specifications?). We need to check
if we could create these specifications automatically.


Best regards
Oliver




From ctrueden at wisc.edu  Thu Mar 10 00:35:09 2011
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Thu, 10 Mar 2011 00:35:09 -0600
Subject: [ImageJ-devel] Project directory structure updated
Message-ID: <AANLkTimGkLZm6OYcTpF9QF3FvMsUK5pYZNuq82B-Jpy1@mail.gmail.com>

Hi everyone,

Please note that the directory structure in SVN has been updated. Many
directory names have been simplified, mostly by removing the "ij-" prefixes.
(The project names, and hence JAR files, still have the "ij-" prefix.) If
you are developing in Eclipse, it will probably be easiest to delete all
ImageJDev-related projects and reimport them (Import > Existing Maven
Projects, or Import > Check out Maven Projects from SCM). For details, see:
http://imagejdev.org/ides

It is likely that the directory structure and project names will be more
stable now, as we have made good progress on the ImageJ2 project design in
recent weeks.

-Curtis
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20110310/d37e248d/attachment.html>

From Johannes.Schindelin at gmx.de  Sat Mar 12 03:48:14 2011
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Sat, 12 Mar 2011 10:48:14 +0100 (CET)
Subject: [ImageJ-devel] BNM vs Maven
Message-ID: <alpine.DEB.1.00.1103121044070.1561@bonsai2>

Hi,

I just got aware of BNM (http://www.bebbosoft.de/#java/bnm/index.wiki). 
>From the freshmeat.net description:

    BNM is a build system that uses Maven pom.xml files and implements 
    replacements for the core Maven system and its most important plugins. 
    BNM is a proof that Maven could run much faster. This version is able 
    to build itself and might also fit other projects

It got my attentions because BNM does something about the speed of 
Maven (from the project's home page):

    BNM is able to build its own project tree and is more than 3 times 
    faster than Maven 2. And it is still faster than Maven 3.

    Not everything is implemented yet, but BNM can build itself :-)
    build tool	command line 		  build time (best of 3 repeated runs)
    Maven 2 	mvn.bat clean install 	  -- failes to resolve org.eclipse versions
    Maven 3 	mvn.bat clean install 	  25.8s
    Maven 3 	mvn.bat -T2 clean install 17.7s
    BNM 0.1.0 	bnm clean install 	  11.7s 

Ciao,
Dscho




From ctrueden at wisc.edu  Sun Mar 13 01:02:39 2011
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Sun, 13 Mar 2011 01:02:39 -0600
Subject: [ImageJ-devel] BNM vs Maven
In-Reply-To: <alpine.DEB.1.00.1103121044070.1561@bonsai2>
References: <alpine.DEB.1.00.1103121044070.1561@bonsai2>
Message-ID: <AANLkTimC6Yi6n-Z8NnhfRdoW+FwdO-ptKzGA3p5zHyZa@mail.gmail.com>

Hi Dscho,

Great, maybe it will help to speed up Maven as well?either by inspiring
competition, or through shared code between the projects.

-Curtis

On Sat, Mar 12, 2011 at 3:48 AM, Johannes Schindelin <
Johannes.Schindelin at gmx.de> wrote:

> Hi,
>
> I just got aware of BNM (http://www.bebbosoft.de/#java/bnm/index.wiki).
> From the freshmeat.net description:
>
>    BNM is a build system that uses Maven pom.xml files and implements
>    replacements for the core Maven system and its most important plugins.
>    BNM is a proof that Maven could run much faster. This version is able
>    to build itself and might also fit other projects
>
> It got my attentions because BNM does something about the speed of
> Maven (from the project's home page):
>
>    BNM is able to build its own project tree and is more than 3 times
>    faster than Maven 2. And it is still faster than Maven 3.
>
>    Not everything is implemented yet, but BNM can build itself :-)
>    build tool  command line              build time (best of 3 repeated
> runs)
>    Maven 2     mvn.bat clean install     -- failes to resolve org.eclipse
> versions
>    Maven 3     mvn.bat clean install     25.8s
>    Maven 3     mvn.bat -T2 clean install 17.7s
>    BNM 0.1.0   bnm clean install         11.7s
>
> Ciao,
> Dscho
>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagejdev.org
> http://imagejdev.org/mailman/listinfo/imagej-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20110313/36ad3f1c/attachment.html>

From ctrueden at wisc.edu  Sun Mar 13 13:30:47 2011
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Sun, 13 Mar 2011 13:30:47 -0500
Subject: [ImageJ-devel] FW: Next generation imageJ
In-Reply-To: <3201CF51728F6048A24FA3AFFFEEF1D318846109DE@JHEMTEXVS3.win.ad.jhu.edu>
References: <3201CF51728F6048A24FA3AFFFEEF1D318846109DE@JHEMTEXVS3.win.ad.jhu.edu>
Message-ID: <AANLkTimk9JUeeOtpxx=r9M-Pxzi0LJe6KWzJ9J9=4-xt@mail.gmail.com>

Hi Toby,

Probably I should send this to the mailing list
>

Sure, I am CCing the list.

It looks like they put the wrong classname in the bat file.
>

Thanks for letting me know. The problem was that we were accidentally
linking to an obsolete location of the application build (and hence an older
version). I have updated the downloads page to point to the latest code now,
so the ZIP file should work again out of the box.

I was able to open the blobs file and do thresholding, but I was unable to
> open up  a  jpeg file.
>

Right now, File > Open does not handle color images properly. If you do File
> Import > Bio-Formats you will be able to import the color images as
grayscale with a slider for channel. Note that any menu icon with the ImageJ
microscope item (e.g., File > Open) is an ImageJ 1.x plugin being run in
compatibility mode, while menu icons without it are IJ2 plugins (e.g., File
> Import > Bio-Formats).

We will try to have the color image problem addressed by the April 1st
release of 2.0alpha1.

Regards,
Curtis

On Fri, Mar 11, 2011 at 12:03 PM, Toby Cornish <tcornis3 at jhmi.edu> wrote:

> Curtis,
>
>
>
> We are very excited about developments on the imagejdev.  Probably I should
> send this to the mailing list, but the bat file that comes with the
> pre-alpha doesn?t seem to work without modification (see below)
>
>
>
> Toby
>
>
>
> *From:* James Morgan [mailto:jmorgan at jhmi.edu]
> *Sent:* Friday, March 11, 2011 12:30 PM
> *To:* Toby Cornish; demarzo.angelo at gmail.com
> *Cc:* 'Bora Gurel'; Angelo Demarzo
> *Subject:* RE: Next generation imageJ
>
>
>
> Toby,
>
>
> It looks like they put the wrong classname in the bat file.  Change the
> text in image.bat to say:
> @echo off java -mx512m -cp "jar\*" imagej.gui.swing.MainFrame $@
>
>
>
> This will allow you to at least start the application.  I was able to open
> the blobs file and do thresholding, but I was unable to open up  a  jpeg
> file.   This is even after I updated my jar files to get the latest daily
> build.  But they are a pre-alpha version.  This development looks really
> promising.
>
>
>
> Jim
>
>
>
>
>
> *From:* Toby Cornish [mailto:tcornis3 at jhmi.edu]
> *Sent:* Friday, March 11, 2011 12:08 PM
> *To:* 'demarzo.angelo at gmail.com'
> *Cc:* James Morgan; Bora Gurel; Angelo Demarzo
> *Subject:* RE: Next generation imageJ
>
>
>
> I tried installing and running their pre-alpha, but I got this error.  Jim,
> any thoughts on this error?
>
>
>
> C:\Users\tcornis3\bin\imagejdev>imagej.bat
>
> Exception in thread "main" java.lang.NoClassDefFoundError:
> imagej/gui/MainFrame
>
> Caused by: java.lang.ClassNotFoundException: imagej.gui.MainFrame
>
>         at java.net.URLClassLoader$1.run(Unknown Source)
>
>         at java.security.AccessController.doPrivileged(Native Method)
>
>         at java.net.URLClassLoader.findClass(Unknown Source)
>
>         at java.lang.ClassLoader.loadClass(Unknown Source)
>
>         at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)
>
>         at java.lang.ClassLoader.loadClass(Unknown Source)
>
> Could not find the main class: imagej.gui.MainFrame.  Program will exit.
>
>
>
> Toby
>
>
>
> *From:* Angelo De Marzo [mailto:demarzo.angelo at gmail.com]
> *Sent:* Friday, March 11, 2011 12:00 PM
> *To:* Toby Cornish
> *Cc:* James Morgan; Bora Gurel; Angelo Demarzo
> *Subject:* Re: Next generation imageJ
>
>
>
> very cool indeed! thanks
>
> On Thu, Mar 10, 2011 at 3:30 PM, Toby Cornish <tcornis3 at jhmi.edu> wrote:
>
> Looks very promising
>
>
>
> http://imagejdev.org/
>
>
>
> Toby C. Cornish, M.D., Ph.D.
>
> Gastrointestinal and Liver Pathology
>
>
>
> Johns Hopkins University
>
> Department of Pathology
>
> 401 N. Broadway
>
> Weinberg Rm. 2242
>
> Baltimore, MD 21231
>
>
>
> <410-955-3580>410-955-3580 Phone
>
> <410-955-0115>410-955-0115 Fax
>
> <410-434-2824>410-434-2824 Pager
>
>
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20110313/b4ce781a/attachment.html>

From Johannes.Schindelin at gmx.de  Tue Mar 15 01:49:24 2011
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Tue, 15 Mar 2011 07:49:24 +0100 (CET)
Subject: [ImageJ-devel] Auto-Documentation of Processing Chain:
 Extension of @Parameter Annotation
In-Reply-To: <1299587182.1868.373.camel@localhost>
References: <1299587182.1868.373.camel@localhost>
Message-ID: <alpine.DEB.1.00.1103150747340.1561@bonsai2>

Hi,

On Tue, 8 Mar 2011, Oliver Gress wrote:

> we have developed a way for automatic documentation of the processing 
> chain of an image or other results in ImageJ. For improved integration 
> with IJ, we would like to discuss a modification/extension of the 
> @Parameter annotation in IJ-Dev.

Great!

Somebody made a similar thing (chaining plugins) on top of the Parameter 
framework, but unfortunately did so in a manner that cannot be merged back 
easily. So I appreciate very much your willingness to work on getting your 
enhancements included!

> The basic concept is to consider each processing step as an "operator", 
> that takes some input and computes results, which might become input to 
> another operator. Such an operator may be an ImageJ plugin or any java 
> class that satisfies the specification.
> 
> The specific interface of such an operator is described by inputs,
> parameters, supplementals and outputs. 
>
> Inputs and outputs are used to trace the processing chain, from which a
> "history" graph is created.
>
> Parameters are inputs that are not traced but recorded. Supplementals
> are not recorded at all and are intended for parameters that have no
> effect on the results (e.g. a verbose flag).

Sounds good!

> We employ java annotations to determine the above interpretation of the 
> fields of a class and thus the interface of an operator. At the moment, 
> we use our own annotation class, because @Parameter from IJ-Dev does not 
> allow the detailed categorization of arguments that would be required by 
> our concept. It only allows to specify if an argument is output or not.
>
> I know that @Parameter is intended to describe the parameters of a
> plugin, e.g. to create a parameter dialog automatically. 

Yes, but also more:

http://pacific.mpi-cbg.de/cgi-bin/gitweb.cgi?p=imagej2/.git;a=blob;f=core/plugin/src/main/java/imagej/plugin/Parameter.java;h=fcf73c23565abd8a359a0422bfd8f4503f450154;hb=83c6c9241723d64c3c97ea2e9c150548f568771b

> I'd like to ask if the idea of @Parameter could be extended to a more 
> general point of view:
> 
> Would it be possible to extend or modify the @Parameter annotation to 
> categorize a field as input, output, parameter or supplemental? Our 
> annotation also takes an "explanation" string to describe the parameter 
> in human-readable form, but it is not essential for the automatic 
> documentation.

Sure, as long as you make those fields optional, the @Parameter can be 
enhanced. If you're working with Git, you might use our mirror at 
git://pacific.mpi-cbg.de/imagej2/.git, otherwise work with with Subversion 
on http://dev.imagejdev.org/svn/imagej/trunk.

> We would really like to merge these annotations, because the processing 
> chain documentation could be easily employed by IJ plugins that use the 
> @Parameter annotation and no additional annotation would be necessary.
> 
> Another question: Is there any interest in an automatic documentation of 
> the processing chain?

I think that this is a good idea, but it can be taken a bit further:

	http://imageflow.danielsenff.de/

Note that ImageFlow is only intended for macros, and as such is not easily 
extended to real script languages or on-the-fly construction of Java 
classes. But it is a start.

> I have uploaded an excerpt of our manual for further reading on the
> operator and history concept:
> http://users.informatik.uni-halle.de/~gress/mitobo_manual_excerpt.pdf
> The manual is rewritten at the moment, therefore only an excerpt. If you
> find a link to our website, please don't refer to the resources that can
> be found there because they are outdated. There will be a new version
> soon (depending on the annotation issue).

This is interesting. Any chance that all components become Open Source? I 
am especially intrigued by the mention of CellSegmentation in the 
manual...

BTW you might also be interested in having a look at Imglib. It is still 
in a stabilizing phase, but the base concepts are described here:

http://pacific.mpi-cbg.de/cgi-bin/gitweb.cgi?p=imglib.git;a=blob_plain;f=imglib/doc/imglib2.svg;hb=imglib2

Basically, you will never need 4-nested loops to do neighborhood 
operations again :-)

Ciao,
Johannes




From Johannes.Schindelin at gmx.de  Wed Mar 16 17:57:23 2011
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Wed, 16 Mar 2011 23:57:23 +0100 (CET)
Subject: [ImageJ-devel] [fiji-devel] Imglib2 ??? (fwd)
Message-ID: <alpine.DEB.1.00.1103162357050.1561@bonsai2>

FYI

---------- Forwarded message ----------
Date: Wed, 16 Mar 2011 19:15:49 +0100
From: Tobias Pietzsch <tobias.pietzsch at gmail.com>
To: fiji-devel at googlegroups.com
Subject: Re: [fiji-devel] Imglib2 ???

Hi,

to do something about the lacking-documentation problem we have started a page
on the Fiji-wiki where we will report on our thoughts and
discussions regarding imglib, as well as progress in the implementation.

http://pacific.mpi-cbg.de/wiki/index.php/ImgLib2_Discussion

If we manage to keep this up, it might be relatively easy to turn this into
tutorials afterwards.

Cheers,
Tobias

-- 
You received this message because you are subscribed to the Google Groups
"Fiji-devel" group.
To post to this group, send email to fiji-devel at googlegroups.com.
To unsubscribe from this group, send email to
fiji-devel+unsubscribe at googlegroups.com.
For more options, visit this group at
http://groups.google.com/group/fiji-devel?hl=en.





From ctrueden at wisc.edu  Thu Mar 17 16:18:01 2011
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Thu, 17 Mar 2011 16:18:01 -0500
Subject: [ImageJ-devel] Auto-Documentation of Processing Chain:
 Extension of @Parameter Annotation
In-Reply-To: <1299587182.1868.373.camel@localhost>
References: <1299587182.1868.373.camel@localhost>
Message-ID: <AANLkTin-FPgW0ixG5C7s_ZmwW-2uz7JHPu3oNn5aAPpF@mail.gmail.com>

Hi Oliver,

Good to hear from you again. Sorry for the long delay in reply, and thanks
for checking out the ImageJ2 plugin framework.

First, a little background: as Johannes mentioned, there has been initial
development of a "workflow engine" for ImageJ2:


http://dev.imagejdev.org/trac/imagej/browser/trunk/extra/workflow/src/main/java/imagej/workflow

We have begun a reconciliation of the workflow engine with the plugin
framework. Essentially, the toplevel idea is that of a "module" with inputs
and outputs; see:


http://dev.imagejdev.org/trac/imagej/browser/trunk/core/plugin/src/main/java/imagej/module

The plugin framework implements the module interfaces, while providing the
annotations needed to make writing standalone plugins easy:


http://dev.imagejdev.org/trac/imagej/browser/trunk/core/plugin/src/main/java/imagej/plugin

The workflow engine was used to create a proof-of-concept UI called Workflow
Pipes (similar to the ImageFlow project mentioned by Johannes) for
graphically connecting together plugins into a directed object graph. In the
future, we hope to flesh out this UI further and include with core ImageJ.

Anyway, none of this work precludes your implementation from being useful as
well, since our focus was not on data provenance at all yet (though we are
very interested in supporting it).

Would it be possible to extend or modify the @Parameter annotation to
> categorize a field as input, output, parameter or supplemental?
>

Certainly! How about a "visibility" enum with values: NORMAL (default),
TRANSIENT (for no history), and INVISIBLE (for no recording nor history). If
anyone has an idea for better names, I'm all ears. In the meantime, I have
committed an initial version of this enum to SVN and updated the Parameter
class:

  http://dev.imagejdev.org/trac/imagej/changeset/2413

Our annotation also takes an "explanation" string to describe the
> parameter in human-readable form, but it is not essential for the
> automatic documentation.
>

Sure, I have added a "String description" field to @Parameter, which should
serve:

  http://dev.imagejdev.org/trac/imagej/changeset/2412

We would really like to merge these annotations, because the processing
> chain documentation could be easily employed by IJ plugins that use the
> @Parameter annotation and no additional annotation would be necessary.
>

Great, please let us know what else you need to make this happen!

Another question: Is there any interest in an automatic documentation of
> the processing chain?
>

I think so, but am not sure what you mean. Could you elaborate? What I would
like to see is a way for plugins to self-document their parameters more
thoroughly (tooltips etc.), similar to how the Bio-Formats Importer plugin
works in ImageJ 1.x now. This would reduce the need for external wiki pages
about plugins in many cases.

Lastly, I will second Johannes's question: are you planning to open source
this work? Or is it already available somewhere? Would you be interested in
integrating it into ImageJ2 core?

Regards,
Curtis

P.S. Sorry I have not had time to read over your manual. As we pursue this
functionality further, hopefully I'll learn more about your data provenance
model.

On Tue, Mar 8, 2011 at 6:26 AM, Oliver Gress <
oliver.gress at informatik.uni-halle.de> wrote:

> Hi all,
>
> we have developed a way for automatic documentation of the processing
> chain of an image or other results in ImageJ.
> For improved integration with IJ, we would like to discuss a
> modification/extension of the @Parameter annotation in IJ-Dev.
>
> The basic concept is to consider each processing step as an "operator",
> that takes some input and computes results, which might become input to
> another operator. Such an operator may be an ImageJ plugin or any java
> class that satisfies the specification.
>
> The specific interface of such an operator is described by inputs,
> parameters, supplementals and outputs.
> Inputs and outputs are used to trace the processing chain, from which a
> "history" graph is created.
> Parameters are inputs that are not traced but recorded. Supplementals
> are not recorded at all and are intended for parameters that have no
> effect on the results (e.g. a verbose flag).
>
> We employ java annotations to determine the above interpretation of the
> fields of a class and thus the interface of an operator.
> At the moment, we use our own annotation class, because @Parameter from
> IJ-Dev does not allow the detailed categorization of arguments that
> would be required by our concept. It only allows to specify if an
> argument is output or not.
> I know that @Parameter is intended to describe the parameters of a
> plugin, e.g. to create a parameter dialog automatically.
> I'd like to ask if the idea of @Parameter could be extended to a more
> general point of view:
>
> Would it be possible to extend or modify the @Parameter annotation to
> categorize a field as input, output, parameter or supplemental?
> Our annotation also takes an "explanation" string to describe the
> parameter in human-readable form, but it is not essential for the
> automatic documentation.
>
> We would really like to merge these annotations, because the processing
> chain documentation could be easily employed by IJ plugins that use the
> @Parameter annotation and no additional annotation would be necessary.
>
> Another question: Is there any interest in an automatic documentation of
> the processing chain?
>
>
> I have uploaded an excerpt of our manual for further reading on the
> operator and history concept:
> http://users.informatik.uni-halle.de/~gress/mitobo_manual_excerpt.pdf
> The manual is rewritten at the moment, therefore only an excerpt. If you
> find a link to our website, please don't refer to the resources that can
> be found there because they are outdated. There will be a new version
> soon (depending on the annotation issue).
>
> Our annotation can be found here:
> http://users.informatik.uni-halle.de/~gress/MTBArgumentAnnotation.java
>
>
> Best regards
> Oliver
>
>
>
>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagejdev.org
> http://imagejdev.org/mailman/listinfo/imagej-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20110317/a924b08d/attachment.html>

From ctrueden at wisc.edu  Mon Mar 21 14:11:49 2011
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Mon, 21 Mar 2011 14:11:49 -0500
Subject: [ImageJ-devel] [fiji-devel] Linking to Fiji/Plugins
In-Reply-To: <c170a242-2dbe-4782-b9cf-e7ef149b6195@dn9g2000vbb.googlegroups.com>
References: <c170a242-2dbe-4782-b9cf-e7ef149b6195@dn9g2000vbb.googlegroups.com>
Message-ID: <AANLkTimr=Un0KHfhjBc8V5BgnO91eyo2SeO4MxtP3KGx@mail.gmail.com>

Hi Brad,

I have a general question about how to utilize ImageJ/Fiji...  Is it
> possible (and if so, what is the best way) to use ImageJ/Fiji as a
> general image processing framework?  Specifically, can it be
> incorporated into other Java applications?
>

The short answer is yes, you can use Fiji as a library, but with certain
limits. Unfortunately, you have encountered many of the major limitations of
ImageJ 1.x.

The good news is that we are striving to address these shortcomings with the
ImageJDev project (http://imagejdev.org/), with the first alpha of ImageJ
2.0 due on April 1, and the final release due October 1. There is still much
to be done but large portions of the core architecture are in
place?particularly UI-independent frameworks for plugins, tools and events.

  - a fair amount of plugins assume a UI interface (e.g. don't
> provide a simple method with which you can pass all the relevant
> parameters, instead they have a run() that pops up dialogs, etc
>

Fiji contains some hacks to enable headless operation in many cases, but as
you point out, if a plugin makes direct use of GUI code, then it will
generally not be usable headless.

To avoid this problem in ImageJ2, we have created an annotated plugin
framework where inputs and output parameters are labeled and automatically
harvested based on the application context (prompt user with a dialog,
collect from a configuration file if run on the command line, etc.). For
details, see: http://imagejdev.org/extensibility

Some ImageJ1 plugins running in compatibility mode will still not be usable
headless, but new IJ2 plugins will be much more flexible.

  - I haven't found a clean way to reference code that's under the
> Java default package in code that is not in the default package.  This
> could be mitigated if folks would put the computational logic in a
> named package, and make the plugin in the default package lightweight
> (e.g. just a run method that calls the class in the named package)
>

Hmm, I am not too familiar with this issue. It may continue to be a problem
with ImageJ2, unless someone knows a way around it.

  - it's been hard to get seamless image I/O, i.e., I haven't been
> able to get a seamless I/O class - for example, getting a simple
> ImageReader that would do either native file formats or seamlessly
> link to bioformats and create the relevant ImagePlus
>

We plan to add I/O extensibility to ImageJ2, as a particular subclass of
plugin. This will eliminate the need for HandleExtraFileTypes, and other
complicated centralized I/O logic present in ImageJ1. This work is not yet
complete, but you can track our progress at:
http://imagejdev.org/input-and-output

In the meantime, the LOCI plugins (http://loci.wisc.edu/bio-formats/imagej)
provide a very simple class for extracting an ImagePlus using Bio-Formats.
See:
http://dev.loci.wisc.edu:8080/job/Bio-Formats/javadoc/loci/plugins/BF.html--
in particular, BF.openImagePlus(String) and
BF.openImagePlus(ImporterOptions).

HTH,
Curtis

On Fri, Mar 18, 2011 at 9:27 AM, Brad <brad.t.moore at gmail.com> wrote:

> Hey all,
>
> I have a general question about how to utilize ImageJ/Fiji...  Is it
> possible (and if so, what is the best way) to use ImageJ/Fiji as a
> general image processing framework?  Specifically, can it be
> incorporated into other Java applications?
>
> That might be sound like a simple question (and an easy answer), but
> here's what I've tried:
> 1.  Executing Fiji via the command-line with --headless, -eval, -batch
>   + I could utilize Fiji plugins that were setup to work as a macro
>   - overhead with calling these operations as a separate process
>   - working in --headless mode produced odd results for some plugins
>
> 2.  Linking to various ImageJ/Fiji .jars
>   + could use it like a regular library
>   + speed
>   - a fair amount of plugins assume a UI interface (e.g. don't
> provide a simple method with which you can pass all the relevant
> parameters, instead they have a run() that pops up dialogs, etc
>   - I haven't found a clean way to reference code that's under the
> Java default package in code that is not in the default package.  This
> could be mitigated if folks would put the computational logic in a
> named package, and make the plugin in the default package lightweight
> (e.g. just a run method that calls the class in the named package)
>   - it's been hard to get seamless image I/O, i.e., I haven't been
> able to get a seamless I/O class - for example, getting a simple
> ImageReader that would do either native file formats or seamlessly
> link to bioformats and create the relevant ImagePlus
>
> I'd appreciate folks' input.  Is there something I should change about
> my basic approach...  Is there a doc/code/example I can be pointed to
> that successfully does this?  Intuitively, I'm trying to compare
> ImageJ/Fiji to a library/framework like OpenCV or ITK.  Can I use it
> like this?
>
> Cheers,
> -Brad
>
> --
> You received this message because you are subscribed to the Google Groups
> "Fiji-devel" group.
> To post to this group, send email to fiji-devel at googlegroups.com.
> To unsubscribe from this group, send email to
> fiji-devel+unsubscribe at googlegroups.com.
> For more options, visit this group at
> http://groups.google.com/group/fiji-devel?hl=en.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20110321/2443c72b/attachment.html>

From oliver.gress at informatik.uni-halle.de  Tue Mar 22 11:24:58 2011
From: oliver.gress at informatik.uni-halle.de (Oliver =?ISO-8859-1?Q?Gre=DF?=)
Date: Tue, 22 Mar 2011 17:24:58 +0100
Subject: [ImageJ-devel] Auto-Documentation of Processing Chain:
 Extension of @Parameter Annotation
In-Reply-To: <AANLkTin-FPgW0ixG5C7s_ZmwW-2uz7JHPu3oNn5aAPpF@mail.gmail.com>
References: <1299587182.1868.373.camel@localhost>
	<AANLkTin-FPgW0ixG5C7s_ZmwW-2uz7JHPu3oNn5aAPpF@mail.gmail.com>
Message-ID: <1300811098.2396.345.camel@blindpad>

Hi Curtis and Johannes,

at first, thanks for your replies and openness to extend the @Parameter
annotation.

I didn't want to respond to your mails separately, thus I copied some
parts and added my comments:


>         Would it be possible to extend or modify the @Parameter
>         annotation to
>         categorize a field as input, output, parameter or
>         supplemental?
> 
> Certainly! How about a "visibility" enum with values: NORMAL
> (default), TRANSIENT (for no history), and INVISIBLE (for no recording
> nor history). If anyone has an idea for better names, I'm all ears. In
> the meantime, I have committed an initial version of this enum to SVN
> and updated the Parameter class:
> 
>   http://dev.imagejdev.org/trac/imagej/changeset/2413

Great, I think that's sufficient for our needs in conjunction with the
"output" field. I'll have to discuss it with our group and let you know
if we need anything else.



>         Our annotation also takes an "explanation" string to describe
>         the
>         parameter in human-readable form, but it is not essential for
>         the
>         automatic documentation.
> 
> Sure, I have added a "String description" field to @Parameter, which
> should serve:
> 
>   http://dev.imagejdev.org/trac/imagej/changeset/2412

I think this description field is a good thing anyway, e.g. to show
tooltips (as you mentioned below) in the GUI or to create
plugin/module/operator description in any other way.



>         Another question: Is there any interest in an automatic
>         documentation of
>         the processing chain?
> 
> I think so, but am not sure what you mean. Could you elaborate? What I
> would like to see is a way for plugins to self-document their
> parameters more thoroughly (tooltips etc.), similar to how the
> Bio-Formats Importer plugin works in ImageJ 1.x now. This would reduce
> the need for external wiki pages about plugins in many cases.

Our framework was not intended to give a description of a plugin, but to
record, which plugins/operators were run to create certain results. For
the visualization of that processing chain we wanted of course some
description for better interpretation of the resulting graphs.
The interface of operators (e.g a plugin) is well defined by the
operator's annotated fields. The use of reflections makes it possible to
obtain an operator's interface whenever required. We use it to record
the provenance of resulting data, but it could also be used to tell a
tool like your module framework or ImageFlow, which plugins/operators
can be connected in which way.



> Lastly, I will second Johannes's question: are you planning to open
> source this work? Or is it already available somewhere? Would you be
> interested in integrating it into ImageJ2 core?

We are planning to release a new version by the end of March. 
We have a version online, which is very outdated. We changed a lot since
that version like use of annotations etc. I'd rather wait for the new
version to make it public. I'm going to announce it here as soon as we
have all the resources updated and online.
The code is open source (GPL 3) and we tried to develop it with a
possible integration with IJ2 in mind.



> BTW you might also be interested in having a look at Imglib. It is
still 
> in a stabilizing phase, but the base concepts are described here:
> 
>
http://pacific.mpi-cbg.de/cgi-bin/gitweb.cgi?p=imglib.git;a=blob_plain;f=imglib/doc/imglib2.svg;hb=imglib2
> 
> Basically, you will never need 4-nested loops to do neighborhood 
> operations again :-)

We are really interested in Imglib and I attended the corresponding
workshop at the IJ conference last year. I talked to Stephan Preibisch
and he told me, that the lib is still under heavy development. Therefore
we decided to stick with the extension of IJ image types that we
developed.
But that happened last autumn, we should definitely get an update on the
Imglib project.
Anyway, our framework is capable of recording the data provenance of
almost any object, it does not depend on any fixed image
representations. 



Best regards,
Oliver




From gharris at mbl.edu  Tue Mar 22 11:41:33 2011
From: gharris at mbl.edu (Grant B. Harris)
Date: Tue, 22 Mar 2011 12:41:33 -0400
Subject: [ImageJ-devel] javac Compiler error in imglib
	mpicbg.imglib.util.Utils
Message-ID: <4D88D13D.3080801@mbl.edu>

An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20110322/ba67560b/attachment.html>

From ctrueden at wisc.edu  Tue Mar 22 11:50:21 2011
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Tue, 22 Mar 2011 11:50:21 -0500
Subject: [ImageJ-devel] javac Compiler error in imglib
	mpicbg.imglib.util.Utils
In-Reply-To: <4D88D13D.3080801@mbl.edu>
References: <4D88D13D.3080801@mbl.edu>
Message-ID: <AANLkTi=F2uJTpu4Ab8Mqd=Fiw77vmLKSAakCNp_qzvcm@mail.gmail.com>

Hi all,

This is fixed on the imglib2 branch now.

-Curtis

On Tue, Mar 22, 2011 at 11:41 AM, Grant B. Harris <gharris at mbl.edu> wrote:

>  There is a javac compiler error in imglib mpicbg.imglib.util.Utils.
>
> It spits out this: ?type parameters of T cannot be determined; no unique
> maximal instance exists for type variable T with upper bounds
> T,java.lang.Object?
>
> The fix seems to be to add explicit casts (T[]) in the method
> createGaussianKernel1D:
>
> At line 525:
>
> gaussianKernel =  (T[]) genericArray( 3 ); //zero.createArray1D( 3 );
>
> and at line 551:
>
> gaussianKernel = (T[]) genericArray( kernelSize ); //zero.createArray1D(
> kernelSize );
>
> I keep my hands off imglib, so if someone would like to make this change
> and check that it is also OK with the Eclipse compiler, that would be great.
>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagejdev.org
> http://imagejdev.org/mailman/listinfo/imagej-devel
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20110322/1ad0cb9c/attachment.html>

From ctrueden at wisc.edu  Thu Mar 24 15:15:17 2011
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Thu, 24 Mar 2011 15:15:17 -0500
Subject: [ImageJ-devel] How to write a good commit message
Message-ID: <AANLkTik4061PQdBDWHJG2K4fz9Dc=7xce3B2_YQj_7dx@mail.gmail.com>

Hi everyone,

For those working on the ImageJ codebase, here is a nice article on how to
right good commit messages:

  http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html

Same advice applies to SVN too; especially since anyone using git-svn will
see commit messages formatted according to git conventions.

Also, because we use Trac, you can use Trac markup in the messages. In
particular, if you want to use bullet points, you can use two spaces
followed by an asterisk, with hanging indent after that.

For example:

Add several features to facilitate foobar support:
>
>   * Delintify the fizzwidget.
>   * Unscramble the thingamawhatsit.
>

When done this way, the message will look nice from both command line tools,
and the Trac web interface.

Regards,
Curtis
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20110324/2b272ea5/attachment.html>

