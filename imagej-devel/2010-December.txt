From preibisch at mpi-cbg.de  Mon Dec  6 11:47:48 2010
From: preibisch at mpi-cbg.de (Stephan Preibisch)
Date: Mon, 6 Dec 2010 18:47:48 +0100
Subject: [ImageJ-devel] ImageOpener optimization
Message-ID: <000901cb956d$b2cec3e0$186c4ba0$@de>

Hi guys,

 

I committed a  patch to imglib-io ImageOpener to fill up non-planar
containers much faster. The new method is called populatePlaneFast and it
makes use of the more efficient LocalizablePlaneCursors.

 

Nice greetings,

Steffi

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101206/4611d429/attachment.html>

From ctrueden at wisc.edu  Mon Dec  6 14:58:37 2010
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Mon, 6 Dec 2010 14:58:37 -0600
Subject: [ImageJ-devel] [fiji-devel] ImageOpener optimization
In-Reply-To: <000901cb956d$b2cec3e0$186c4ba0$@de>
References: <000901cb956d$b2cec3e0$186c4ba0$@de>
Message-ID: <AANLkTinkOD-cVu3_ogsQV46QPYzmntzFsm5=Vdrd7eXo@mail.gmail.com>

Hi Steffi,

I committed a  patch to imglib-io ImageOpener to fill up non-planar
> containers much faster. The new method is called populatePlaneFast and it
> makes use of the more efficient LocalizablePlaneCursors.
>

Great, I appreciate it. I'll remove the old slow populatePlane method since
it is no longer used.

-Curtis

On Mon, Dec 6, 2010 at 11:47 AM, Stephan Preibisch <preibisch at mpi-cbg.de>wrote:

>  Hi guys,
>
>
>
> I committed a  patch to imglib-io ImageOpener to fill up non-planar
> containers much faster. The new method is called populatePlaneFast and it
> makes use of the more efficient LocalizablePlaneCursors.
>
>
>
> Nice greetings,
>
> Steffi
>
> --
> You received this message because you are subscribed to the Google Groups
> "Fiji-devel" group.
> To post to this group, send email to fiji-devel at googlegroups.com.
> To unsubscribe from this group, send email to
> fiji-devel+unsubscribe at googlegroups.com<fiji-devel%2Bunsubscribe at googlegroups.com>
> .
> For more options, visit this group at
> http://groups.google.com/group/fiji-devel?hl=en.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101206/4283da2c/attachment.html>

From gharris at mbl.edu  Tue Dec  7 15:30:56 2010
From: gharris at mbl.edu (Grant B. Harris)
Date: Tue, 07 Dec 2010 16:30:56 -0500
Subject: [ImageJ-devel] IJ1 PluginFinder
Message-ID: <4CFEA790.8090900@mbl.edu>

An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101207/286be5cc/attachment.html>

From ctrueden at wisc.edu  Tue Dec  7 16:43:32 2010
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Tue, 7 Dec 2010 16:43:32 -0600
Subject: [ImageJ-devel] IJ1 PluginFinder
In-Reply-To: <4CFEA790.8090900@mbl.edu>
References: <4CFEA790.8090900@mbl.edu>
Message-ID: <AANLkTimKkPcieNT7YAcS2H9H_9onFWgrL+bSuFBmG-eY@mail.gmail.com>

Hi Grant,

Thanks for the update. Please move this logic into the
imagej.ij1bridge.plugin.ij1PluginFinder class of the ij1bridge project,
since that is where it belongs.

Thanks,
Curtis

On Tue, Dec 7, 2010 at 3:30 PM, Grant B. Harris <gharris at mbl.edu> wrote:

>  Curtis --
>
> There is no way to discriminate between plugins which are commands and user
> plugins from the menus (the approach taken in
> imagej.ij1bridge.plugin.Ij1PluginFinder).  So I have adapted the code from
> ij.Menu to find the underscored .jar/.zip and .class files in plugins
> directory (plus one level down) and parse the plugin.config file from the
> jars into a class: ijx.ij1.PluginLoader.
>
> At the moment it is a Plugin for testing.  Try  File|RunTest  (a menu item
> I added for testing.)  All the PluginEntries it finds are listed in a
> TextWindow.
>
> I committed this to svn just now.
>
> Next step is to create the actual menus... For now I'll put all of the user
> plugins in a Plugins menu.  For jar files that have a plugin.config,
> "Plugins can be installed in the File>Import, File>Save As, Edit>Options,
> Analyze>Tools, Help>About Plugins and Plugins menu and submenus"   For the
> time being, I will add a submenu in the Plugins menu (eg.
> Plugins>File>Import) for these.
>
> -- Grant
>
>
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101207/1db1e881/attachment.html>

From preibisch at mpi-cbg.de  Wed Dec  8 10:12:28 2010
From: preibisch at mpi-cbg.de (Stephan Preibisch)
Date: Wed, 8 Dec 2010 17:12:28 +0100
Subject: [ImageJ-devel] ImgLib ImageOpener
Message-ID: <005201cb96f2$b587f7b0$2097e710$@de>

Hi guys,

 

in the process of migrating to the new opener class I added functionality so
that ImageOpener also reads the calibration from the Image. I am not sure if
I am doing it the right way, but at least it works.

 

Nice greetings,

Steffi

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101208/c7d502ee/attachment.html>

From ctrueden at wisc.edu  Wed Dec  8 10:22:52 2010
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Wed, 8 Dec 2010 10:22:52 -0600
Subject: [ImageJ-devel] ImgLib ImageOpener
In-Reply-To: <005201cb96f2$b587f7b0$2097e710$@de>
References: <005201cb96f2$b587f7b0$2097e710$@de>
Message-ID: <AANLkTik=46nDd3O9tjdvjkZk1EnJtghnC87Xd6hSG0Ww@mail.gmail.com>

Hi Steffi,

Oops, I forgot about the calibration. Your implementation of getCalibration
looks great.

Cheers,
Curtis

On Wed, Dec 8, 2010 at 10:12 AM, Stephan Preibisch <preibisch at mpi-cbg.de>wrote:

>  Hi guys,
>
>
>
> in the process of migrating to the new opener class I added functionality
> so that ImageOpener also reads the calibration from the Image. I am not sure
> if I am doing it the right way, but at least it works.
>
>
>
> Nice greetings,
>
> Steffi
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagejdev.org
> http://imagejdev.org/mailman/listinfo/imagej-devel
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101208/fe51d1d7/attachment.html>

From gharris at mbl.edu  Sun Dec 12 13:22:09 2010
From: gharris at mbl.edu (Grant B. Harris)
Date: Sun, 12 Dec 2010 14:22:09 -0500
Subject: [ImageJ-devel] ImageOpener always giving me three channels when
	these is only one.
Message-ID: <4D0520E1.5000501@mbl.edu>

I'm having a problem with opening an imglib.Image...

I'm testing with an image: Cells.tif is an unsigned 8-bit image.
The Image created by ImageOpener.openImage(file) has 3 channels when it 
should have only one.
(http://dev.imagejdev.org/svn/imagej/trunk/ijx/Cells.tif)

The code I am using is:

         String filename = "Cells.tif";
         final ImageOpener imageOpener = new ImageOpener();
         Image<T> inImg = imageOpener.openImage(filename);
         reportInformation(inImg);

This outputs:

         Image 'Cells.tif [X Y Channel]', dim=(617, 460, 3)
         Type = mpicbg.imglib.type.numeric.integer.UnsignedByteType
         Container = mpicbg.imglib.container.planar.PlanarContainer

And when I do ImageJFunctions.displayAsVirtualStack(inImg).show()
I get an ImageWindow with a slider for 3 channels...

Is this a bug?  Or am I doing something wrong?

-- Grant



From ctrueden at wisc.edu  Sun Dec 12 15:58:08 2010
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Sun, 12 Dec 2010 15:58:08 -0600
Subject: [ImageJ-devel] ImageOpener always giving me three channels when
 these is only one.
In-Reply-To: <4D0520E1.5000501@mbl.edu>
References: <4D0520E1.5000501@mbl.edu>
Message-ID: <AANLkTi=4Xyd0c68Kna0bgxSbEnF0upZGHEd0cRODpVkd@mail.gmail.com>

Hi Grant,

The image has an 8-bit LUT, which is why it's being read as 3 channels.
Currently ImageOpener expands such lookup tables, since ImgLib does not
explicitly support indexed color. So the behavior is expected.

Also, it's fine to use ImageJFunctions.displayAsVirtualStack(inImg).show()
for testing, but presumably you are not using it in IJX for production? The
work Barry has been doing in ij1bridge is the direction we want to go.

-Curtis

On Sun, Dec 12, 2010 at 1:22 PM, Grant B. Harris <gharris at mbl.edu> wrote:

> I'm having a problem with opening an imglib.Image...
>
> I'm testing with an image: Cells.tif is an unsigned 8-bit image.
> The Image created by ImageOpener.openImage(file) has 3 channels when it
> should have only one.
> (http://dev.imagejdev.org/svn/imagej/trunk/ijx/Cells.tif)
>
> The code I am using is:
>
>        String filename = "Cells.tif";
>        final ImageOpener imageOpener = new ImageOpener();
>        Image<T> inImg = imageOpener.openImage(filename);
>        reportInformation(inImg);
>
> This outputs:
>
>        Image 'Cells.tif [X Y Channel]', dim=(617, 460, 3)
>        Type = mpicbg.imglib.type.numeric.integer.UnsignedByteType
>        Container = mpicbg.imglib.container.planar.PlanarContainer
>
> And when I do ImageJFunctions.displayAsVirtualStack(inImg).show()
> I get an ImageWindow with a slider for 3 channels...
>
> Is this a bug?  Or am I doing something wrong?
>
> -- Grant
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagejdev.org
> http://imagejdev.org/mailman/listinfo/imagej-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101212/e9b7817f/attachment.html>

From gharris at mbl.edu  Sun Dec 12 20:49:16 2010
From: gharris at mbl.edu (Grant B. Harris)
Date: Sun, 12 Dec 2010 21:49:16 -0500
Subject: [ImageJ-devel] ImageOpener always giving me three channels when
 these is only one.
In-Reply-To: <AANLkTi=4Xyd0c68Kna0bgxSbEnF0upZGHEd0cRODpVkd@mail.gmail.com>
References: <4D0520E1.5000501@mbl.edu>
	<AANLkTi=4Xyd0c68Kna0bgxSbEnF0upZGHEd0cRODpVkd@mail.gmail.com>
Message-ID: <4D0589AC.3030301@mbl.edu>

An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101212/4fba545b/attachment.html>

From ctrueden at wisc.edu  Sun Dec 12 21:33:55 2010
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Sun, 12 Dec 2010 22:33:55 -0500
Subject: [ImageJ-devel] ImageOpener always giving me three channels when
 these is only one.
In-Reply-To: <4D0589AC.3030301@mbl.edu>
References: <4D0520E1.5000501@mbl.edu>
	<AANLkTi=4Xyd0c68Kna0bgxSbEnF0upZGHEd0cRODpVkd@mail.gmail.com>
	<4D0589AC.3030301@mbl.edu>
Message-ID: <AANLkTimoHeK+eP7DzwvDO6Q9b_p0GRDN3CVHeKcz29CL@mail.gmail.com>

Hi Grant,

FYI, ImageJ has a "feature" where if the LUT is totally grayscale, ImageJ
ignores it and declares the file to be a regular 8-bit image, rather than
"RGB color." Unfortunately, this makes it difficult to tell if the image has
a "hidden" color table. Still, you could probably eliminate the LUT by
resaving as TIFF again from ImageJ.

-Curtis

On Sun, Dec 12, 2010 at 9:49 PM, Grant B. Harris <gharris at mbl.edu> wrote:

>  Not intending to use ImageJFunctions.displayAsVirtualStack... just was
> seeing if I got the same result.
> I finally found another tiff image that loads with one channel...
> Thanks.
> - GBH
>
>
> On 12/12/2010 4:58 PM, Curtis Rueden wrote:
>
> Hi Grant,
>
> The image has an 8-bit LUT, which is why it's being read as 3 channels.
> Currently ImageOpener expands such lookup tables, since ImgLib does not
> explicitly support indexed color. So the behavior is expected.
>
> Also, it's fine to use ImageJFunctions.displayAsVirtualStack(inImg).show()
> for testing, but presumably you are not using it in IJX for production? The
> work Barry has been doing in ij1bridge is the direction we want to go.
>
> -Curtis
>
> On Sun, Dec 12, 2010 at 1:22 PM, Grant B. Harris <gharris at mbl.edu> wrote:
>
>> I'm having a problem with opening an imglib.Image...
>>
>> I'm testing with an image: Cells.tif is an unsigned 8-bit image.
>> The Image created by ImageOpener.openImage(file) has 3 channels when it
>> should have only one.
>> (http://dev.imagejdev.org/svn/imagej/trunk/ijx/Cells.tif)
>>
>> The code I am using is:
>>
>>        String filename = "Cells.tif";
>>        final ImageOpener imageOpener = new ImageOpener();
>>        Image<T> inImg = imageOpener.openImage(filename);
>>        reportInformation(inImg);
>>
>> This outputs:
>>
>>        Image 'Cells.tif [X Y Channel]', dim=(617, 460, 3)
>>        Type = mpicbg.imglib.type.numeric.integer.UnsignedByteType
>>        Container = mpicbg.imglib.container.planar.PlanarContainer
>>
>> And when I do ImageJFunctions.displayAsVirtualStack(inImg).show()
>> I get an ImageWindow with a slider for 3 channels...
>>
>> Is this a bug?  Or am I doing something wrong?
>>
>> -- Grant
>>
>> _______________________________________________
>> ImageJ-devel mailing list
>> ImageJ-devel at imagejdev.org
>> http://imagejdev.org/mailman/listinfo/imagej-devel
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101212/bb2d046b/attachment.html>

From G.Landini at bham.ac.uk  Mon Dec 13 03:37:55 2010
From: G.Landini at bham.ac.uk (Gabriel Landini)
Date: Mon, 13 Dec 2010 09:37:55 +0000
Subject: [ImageJ-devel] ImageOpener always giving me three channels when
	these is only one.
In-Reply-To: <AANLkTimoHeK+eP7DzwvDO6Q9b_p0GRDN3CVHeKcz29CL@mail.gmail.com>
References: <4D0520E1.5000501@mbl.edu> <4D0589AC.3030301@mbl.edu>
	<AANLkTimoHeK+eP7DzwvDO6Q9b_p0GRDN3CVHeKcz29CL@mail.gmail.com>
Message-ID: <mailman.0.1331227893.26564.imagej-devel@imagej.net>

On Sunday 12 December 2010 22:33:55 Curtis Rueden wrote:
> FYI, ImageJ has a "feature" where if the LUT is totally grayscale, ImageJ
> ignores it and declares the file to be a regular 8-bit image, rather than
> "RGB color." Unfortunately, this makes it difficult to tell if the image has
> a "hidden" color table. Still, you could probably eliminate the LUT by
> resaving as TIFF again from ImageJ.

Hi, 
Just imagine you are working with an 8 bit image, then you want to see some 
contrast enhanced and apply a false colour LUT and then go back to the 
greyscale LUT.
If I saved this image which is now greyscale with the grey.lut, would this be 
re-opened as RGB? Maybe this is not such a good idea.

I do not know how IJ tests the LUT, but I guess it would be trivial: loop 
through the 256 entries and see if they are r=g=b in the expected sequential 
order. If so, then treat as 8bit greyscale image. Checking the table would 
tell you if there are any hidden colours.

Cheers

Gabriel




From Johannes.Schindelin at gmx.de  Mon Dec 13 03:52:34 2010
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Mon, 13 Dec 2010 10:52:34 +0100 (CET)
Subject: [ImageJ-devel] ImageOpener always giving me three channels when
 these is only one.
In-Reply-To: <E1PS4r0-0002sl-Vw@skynet.loci.wisc.edu>
References: <4D0520E1.5000501@mbl.edu> <4D0589AC.3030301@mbl.edu>
	<AANLkTimoHeK+eP7DzwvDO6Q9b_p0GRDN3CVHeKcz29CL@mail.gmail.com>
	<E1PS4r0-0002sl-Vw@skynet.loci.wisc.edu>
Message-ID: <alpine.DEB.1.00.1012131042590.1461@bonsai2>

Hi,

On Mon, 13 Dec 2010, Gabriel Landini wrote:

> On Sunday 12 December 2010 22:33:55 Curtis Rueden wrote:
> > FYI, ImageJ has a "feature" where if the LUT is totally grayscale, 
> > ImageJ ignores it and declares the file to be a regular 8-bit image, 
> > rather than "RGB color." Unfortunately, this makes it difficult to 
> > tell if the image has a "hidden" color table. Still, you could 
> > probably eliminate the LUT by resaving as TIFF again from ImageJ.
> 
> Just imagine you are working with an 8 bit image, then you want to see 
> some contrast enhanced and apply a false colour LUT and then go back to 
> the greyscale LUT. If I saved this image which is now greyscale with the 
> grey.lut, would this be re-opened as RGB? Maybe this is not such a good 
> idea.
> 
> I do not know how IJ tests the LUT, but I guess it would be trivial: 
> loop through the 256 entries and see if they are r=g=b in the expected 
> sequential order. If so, then treat as 8bit greyscale image. Checking 
> the table would tell you if there are any hidden colours.

IMHO an index-color image is _not_ of a numeric type. So to properly 
support index-color images, one would need to make a "CategoricalType" 
that still uses bytes or shorts, but that cannot add/multiply/whatever.

OTOH if the LUT is just a view mode (as it should always be seen in 
scientific imaging), then the LUT is not part of the image and should not 
be saved in the first place. I often catch users insisting on the DAPI 
channel being colored blue, when they should know fully well (because I 
told them) that the DAPI channel is the result of a range of frequencies, 
not blue.

In short: in most cases I hear people want index-color images, it turns 
out that they really want numeric images with lookup tables instead. Since 
we want to analyze the samples of which those images were taken, it is 
really, really important to keep the distinction in mind.

Ciao,
Johannes




From G.Landini at bham.ac.uk  Mon Dec 13 04:35:05 2010
From: G.Landini at bham.ac.uk (Gabriel Landini)
Date: Mon, 13 Dec 2010 10:35:05 +0000
Subject: [ImageJ-devel] ImageOpener always giving me three channels when
	these is only one.
In-Reply-To: <alpine.DEB.1.00.1012131042590.1461@bonsai2>
References: <4D0520E1.5000501@mbl.edu> <E1PS4r0-0002sl-Vw@skynet.loci.wisc.edu>
	<alpine.DEB.1.00.1012131042590.1461@bonsai2>
Message-ID: <mailman.1.1331227893.26564.imagej-devel@imagej.net>

On Monday 13 December 2010 10:52:34 Johannes Schindelin wrote:
> IMHO an index-color image is _not_ of a numeric type. So to properly
> support index-color images, one would need to make a "CategoricalType"
> that still uses bytes or shorts, but that cannot add/multiply/whatever.
 
Sure.

> OTOH if the LUT is just a view mode (as it should always be seen in
> scientific imaging), then the LUT is not part of the image and should not
> be saved in the first place.

I agree here too, but most people will want to save greyscale images with a 
viewing palette while preserving the underlying data.

The problem is how to tell apart a greyscale with a viewing LUT (underlying 
numeric, indexing a palette) from one with an unordered palette (indexed).
One way could be to implicitly record this at creation time (let's say if 
saved as GIF, or after applying some colour reduction) by adding a flag 
indicating so. But of course, all externally created images would not have 
this tag.

But going back to the original problem, if the palette -at file creation time- 
is the Grays.lut, then it should be saved without a palette. I wonder if this 
would solve the reported problem.

Cheers

Gabriel




From leek at broadinstitute.org  Mon Dec 13 07:44:17 2010
From: leek at broadinstitute.org (Lee Kamentsky)
Date: Mon, 13 Dec 2010 08:44:17 -0500
Subject: [ImageJ-devel] ImageOpener always giving me three channels when
 these is only one.
In-Reply-To: <alpine.DEB.1.00.1012131042590.1461@bonsai2>
References: <4D0520E1.5000501@mbl.edu>
	<4D0589AC.3030301@mbl.edu>	<AANLkTimoHeK+eP7DzwvDO6Q9b_p0GRDN3CVHeKcz29CL@mail.gmail.com>	<E1PS4r0-0002sl-Vw@skynet.loci.wisc.edu>
	<alpine.DEB.1.00.1012131042590.1461@bonsai2>
Message-ID: <4D062331.1020406@broadinstitute.org>

Hi all,
It would be nice, I suppose, to save the LUT in the spirit of not 
destroying information, but I agree that the primary objects of interest 
are the color indices. I have a feeling that people will save 
segmentation results this way, designating one color as background 
(typically zero = black) and then assigning colors from a color map to 
each value in the indexing range. One interesting possibility is to pick 
a handful of colors that are distant from each other and assign each to 
several possible index values (imagine 4 color theorem, but there are 
easy algorithms if you're allowed to use a few more - don't assign 
nearby or touching objects to the same color). The significant 
information in that case is the index, not the color.

Obviously, this scheme would fall apart if you had 256 or more objects 
in a 256-color indexed image; perhaps it's up to "segmentation" to 
interpret an image a segmentation result and reconstruct a labeling by 
identifying the unique colors in an image and assigning all pixels with 
the same color to the same object. This highlights one of the problems - 
the image opener doesn't have information on the use of the image, so it 
can't make the proper interpretation for the derived format and, in my 
opinion, it should not make any interpretation and instead try to 
preserve the information in the image file with as much fidelity as is 
possible and leave the interpretation to code downstream.

--Lee

On 12/13/2010 4:52 AM, Johannes Schindelin wrote:
> Hi,
>
> On Mon, 13 Dec 2010, Gabriel Landini wrote:
>
>> On Sunday 12 December 2010 22:33:55 Curtis Rueden wrote:
>>> FYI, ImageJ has a "feature" where if the LUT is totally grayscale,
>>> ImageJ ignores it and declares the file to be a regular 8-bit image,
>>> rather than "RGB color." Unfortunately, this makes it difficult to
>>> tell if the image has a "hidden" color table. Still, you could
>>> probably eliminate the LUT by resaving as TIFF again from ImageJ.
>> Just imagine you are working with an 8 bit image, then you want to see
>> some contrast enhanced and apply a false colour LUT and then go back to
>> the greyscale LUT. If I saved this image which is now greyscale with the
>> grey.lut, would this be re-opened as RGB? Maybe this is not such a good
>> idea.
>>
>> I do not know how IJ tests the LUT, but I guess it would be trivial:
>> loop through the 256 entries and see if they are r=g=b in the expected
>> sequential order. If so, then treat as 8bit greyscale image. Checking
>> the table would tell you if there are any hidden colours.
> IMHO an index-color image is _not_ of a numeric type. So to properly
> support index-color images, one would need to make a "CategoricalType"
> that still uses bytes or shorts, but that cannot add/multiply/whatever.
>
> OTOH if the LUT is just a view mode (as it should always be seen in
> scientific imaging), then the LUT is not part of the image and should not
> be saved in the first place. I often catch users insisting on the DAPI
> channel being colored blue, when they should know fully well (because I
> told them) that the DAPI channel is the result of a range of frequencies,
> not blue.
>
> In short: in most cases I hear people want index-color images, it turns
> out that they really want numeric images with lookup tables instead. Since
> we want to analyze the samples of which those images were taken, it is
> really, really important to keep the distinction in mind.
>
> Ciao,
> Johannes
>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagejdev.org
> http://imagejdev.org/mailman/listinfo/imagej-devel




From G.Landini at bham.ac.uk  Mon Dec 13 08:04:23 2010
From: G.Landini at bham.ac.uk (Gabriel Landini)
Date: Mon, 13 Dec 2010 14:04:23 +0000
Subject: [ImageJ-devel] ImageOpener always giving me three channels when
	these is only one.
In-Reply-To: <4D062331.1020406@broadinstitute.org>
References: <4D0520E1.5000501@mbl.edu>
	<alpine.DEB.1.00.1012131042590.1461@bonsai2>
	<4D062331.1020406@broadinstitute.org>
Message-ID: <mailman.2.1331227893.26564.imagej-devel@imagej.net>

On Monday 13 December 2010 08:44:17 Lee Kamentsky wrote:
> Hi all,
> It would be nice, I suppose, to save the LUT in the spirit of not
> destroying information, but I agree that the primary objects of interest
> are the color indices. I have a feeling that people will save
> segmentation results this way, designating one color as background
> (typically zero = black) and then assigning colors from a color map to
> each value in the indexing range. One interesting possibility is to pick
> a handful of colors that are distant from each other and assign each to
> several possible index values (imagine 4 color theorem, but there are
> easy algorithms if you're allowed to use a few more - don't assign
> nearby or touching objects to the same color). The significant
> information in that case is the index, not the color.

I am happy (this happy:  :-)  ) to report that this already exists, it is the 
Glasbey LUT. He wrote a paper on this as well, and I produced a similar LUT 
that maximises the distances between colour for red-green colour blind 
individuals. (I have to upload this soon)

> Obviously, this scheme would fall apart if you had 256 or more objects
> in a 256-color indexed image;

Yes, it does, specially if you happen to have 4-connected segmented particles 
that touch (actually they do not touch) by their corners. They look like an 8 
connected particle.

Two ways of labelling: one is by changing the index MOD the number of colours, 
the other is to use all the indexes and let the LUT distribute the colours. 
Both have problems. The first one I already mentioned, and there are not 
unique particle indexes as they might be shared, but this is the one that 
looks least confusing: the next particle in the scan is of a different colour.

The other: one can index increasingly in a 32 bit image, but because the LUT 
is stretched to fit the data range, many consecutive particles look the same 
colour (but have a different index). I use that in one of the morphology 
plugins (I think it is called Binary_Label)

> This highlights one of the problems -
> the image opener doesn't have information on the use of the image, so it
> can't make the proper interpretation for the derived format and, in my
> opinion, it should not make any interpretation and instead try to
> preserve the information in the image file with as much fidelity as is
> possible and leave the interpretation to code downstream.

Well, as mentioned, one can add a tag for that purpose and let IJ handle it.

Regards

Gabriel




From leek at broadinstitute.org  Mon Dec 13 08:13:44 2010
From: leek at broadinstitute.org (Lee Kamentsky)
Date: Mon, 13 Dec 2010 09:13:44 -0500
Subject: [ImageJ-devel] ImageOpener always giving me three channels when
 these is only one.
In-Reply-To: <20101213140426.C1CCD18250@smtp.broadinstitute.org>
References: <4D0520E1.5000501@mbl.edu>
	<alpine.DEB.1.00.1012131042590.1461@bonsai2>
	<4D062331.1020406@broadinstitute.org>
	<20101213140426.C1CCD18250@smtp.broadinstitute.org>
Message-ID: <4D062A18.10308@broadinstitute.org>

On 12/13/2010 9:04 AM, Gabriel Landini wrote:
>
> Two ways of labelling: one is by changing the index MOD the number of colours,
> the other is to use all the indexes and let the LUT distribute the colours.
> Both have problems. The first one I already mentioned, and there are not
> unique particle indexes as they might be shared, but this is the one that
> looks least confusing: the next particle in the scan is of a different colour.
>
> The other: one can index increasingly in a 32 bit image, but because the LUT
> is stretched to fit the data range, many consecutive particles look the same
> colour (but have a different index). I use that in one of the morphology
> plugins (I think it is called Binary_Label)
CellProfiler uses greedy coloring: 
http://en.wikipedia.org/wiki/Greedy_coloring . I construct a graph of 
adjacent objects (and you can do things like distance transforms to 
create an array where all objects are expanded to fill the background to 
make them all adjacent so that nearby objects are colored differently). 
I order objects from most connected to least and make sure the color I 
assign is different from any of their connections - you're guaranteed to 
use as few colors as the most connected object + 1. Perhaps this is a 
way of recoloring any arbitrary image to make it colorblind-accessible 
(and possibly very ugly ;-)   ).

--Lee



From preibisch at mpi-cbg.de  Wed Dec 15 19:09:42 2010
From: preibisch at mpi-cbg.de (Stephan Preibisch)
Date: Thu, 16 Dec 2010 02:09:42 +0100
Subject: [ImageJ-devel] IMPORTANT: Developing with Windows
Message-ID: <000901cb9cbd$ebd751a0$c385f4e0$@de>

Hi guys,

 

we ran into a serious issue that we accumulated a mixture of Windows and
Linux line ending in the git repositories. At the moment this mainly
concerns me and Lee Kamentsky. We will face major problems once we have to
merge things. There is a very simple solution to it that, that I use now:

 

a)      In eclipse go to Window -> Preferences -> General -> Workspace

b)      On the lower right you will find the section "New text file line
delimiter", set it to UNIX.

c)       Select all YOUR source code files in the project

d)      Go to File -> Convert Line Delemiters To -> Unix

 

Now commit the new files with Unix line endings and the problem will be
contained in the future!

 

Nice greetings,

Steffi

 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101216/13fdb632/attachment.html>

From leek at broadinstitute.org  Thu Dec 16 07:50:55 2010
From: leek at broadinstitute.org (Lee Kamentsky)
Date: Thu, 16 Dec 2010 08:50:55 -0500
Subject: [ImageJ-devel] IMPORTANT: Developing with Windows
In-Reply-To: <000901cb9cbd$ebd751a0$c385f4e0$@de>
References: <000901cb9cbd$ebd751a0$c385f4e0$@de>
Message-ID: <4D0A193F.4010500@broadinstitute.org>

Oops - sorry. Will fix this and I'll run the dos to unix linefeed 
fixer-upper on the files.

On 12/15/2010 8:09 PM, Stephan Preibisch wrote:
>
> Hi guys,
>
> we ran into a serious issue that we accumulated a mixture of Windows 
> and Linux line ending in the git repositories. At the moment this 
> mainly  concerns me and Lee Kamentsky. We will face major problems 
> once we have to merge things. There is a very simple solution to it 
> that, that I use now:
>
> a)In eclipse go to Window -> Preferences -> General -> Workspace
>
> b)On the lower right you will find the section "New text file line 
> delimiter", set it to UNIX.
>
> c)Select all YOUR source code files in the project
>
> d)Go to File -> Convert Line Delemiters To -> Unix
>
> Now commit the new files with Unix line endings and the problem will 
> be contained in the future!
>
> Nice greetings,
>
> Steffi
>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagejdev.org
> http://imagejdev.org/mailman/listinfo/imagej-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101216/225f6513/attachment.html>

From ctrueden at wisc.edu  Mon Dec 27 00:15:03 2010
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Mon, 27 Dec 2010 00:15:03 -0600
Subject: [ImageJ-devel] ImageJDev project update
Message-ID: <AANLkTi=O8raSrNWB3uayp1d+iH80XhTraZWm24F7Jrex@mail.gmail.com>

Hi everyone,

For those who haven't already heard, ImageJDev is a project to create the
next generation version of ImageJ.

I gave a talk at the ImageJ 2010 conference describing the project; for
those who missed it, the slides are online with speaker notes at:
   http://imagejdev.org/2010/10/29/imagejdev-presentation-imagejconf

We also recently updated the ImageJDev web site (http://imagejdev.org/) to
reflect our latest work (http://imagejdev.org/current-status), describe the
software architecture as it develops (http://imagejdev.org/design), and
more.

We have been making steady progress, but the project is still under heavy
development, with nothing ready for end users to try yet. We plan to release
an alpha version next month, a beta next summer, and a stable release next
fall.

For those interested in participating in the project's development, we
suggest signing up for the ImageJX mailing list for general future
directions and software architecture discussions about ImageJ, and/or the
ImageJ-devel list for day-to-day discussion of the ImageJDev project?see
http://imagejdev.org/mailing-lists for more details.

Happy holidays!

-Curtis
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101227/da59b3da/attachment.html>

From sapristi at gmail.com  Thu Dec 30 14:31:06 2010
From: sapristi at gmail.com (Albert Cardona)
Date: Thu, 30 Dec 2010 15:31:06 -0500
Subject: [ImageJ-devel] ImageJDev project update
In-Reply-To: <AANLkTi=O8raSrNWB3uayp1d+iH80XhTraZWm24F7Jrex@mail.gmail.com>
References: <AANLkTi=O8raSrNWB3uayp1d+iH80XhTraZWm24F7Jrex@mail.gmail.com>
Message-ID: <AANLkTimwPFna-D_0rHWQWcmPyiouB2rQQ0S62VD_08Un@mail.gmail.com>

Curtis,

Thanks for the update. It's missing one key explanation: how to launch it.

I managed to figure out the following:

$ java -classpath $(find -name "*.jar" -printf "%h/%f:"). imagej.gui.MainFrame

or:

$ java -classpath $(find -name "*.jar" -printf "%h/%f:"). ijx.ImageJX

... but they are both very broken.

Is there any way to launch the program?

With maven, I get:

$ mvn -e exec:java -Dexec.mainClass="ijx.ImageJX"

org.apache.maven.lifecycle.LifecycleExecutionException: An exception
occured while executing the Java class. ijx.ImageJX
...
Caused by: java.lang.ClassNotFoundException: ijx.ImageJX
	at java.net.URLClassLoader$1.run(URLClassLoader.java:202)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:190)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:307)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:248)
	at org.codehaus.mojo.exec.ExecJavaMojo$1.run(ExecJavaMojo.java:284)
	at java.lang.Thread.run(Thread.java:619)


Surely there is an incantation to run ImageJ 2.0 ?


Albert
-- 
http://albert.rierol.net



