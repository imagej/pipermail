From gharris at mbl.edu  Wed Nov 10 08:55:51 2010
From: gharris at mbl.edu (Grant B. Harris)
Date: Wed, 10 Nov 2010 09:55:51 -0500
Subject: [ImageJ-devel] ThreadContextClassLoader Article
Message-ID: <4CDAB277.8010508@mbl.edu>

An interesting article on classloading and modules.

http://wiki.apidesign.org/wiki/ThreadContextClassLoader

- Grant




From ctrueden at wisc.edu  Wed Nov 10 13:37:42 2010
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Wed, 10 Nov 2010 13:37:42 -0600
Subject: [ImageJ-devel] ThreadContextClassLoader Article
In-Reply-To: <4CDAB277.8010508@mbl.edu>
References: <4CDAB277.8010508@mbl.edu>
Message-ID: <AANLkTim6PYN46BA0ZeF42J96Adng6VTm7NtiCDqHe2Tu@mail.gmail.com>

Hi Grant,

An interesting article on classloading and modules.
>
> http://wiki.apidesign.org/wiki/ThreadContextClassLoader
>

So, this article would only be relevant if we deploy ImageJ via an OSGi
framework, right?

I am wary of embracing the OSGi class loading mechanism, since I don't know
many compelling reasons to do so in our case?bundle-level visibility is the
only one I can think of at the moment. In general, I think multiple class
loaders are often unnecessary. Ultimately I would like to use the system
class loader as much as possible, rather than custom class loaders.

However, one big reason for multiple class loaders is to allow reloading of
plugins on the fly, without restarting the JVM. My understanding is that
this is the main reason ImageJ has a custom class loader
(ij.io.PluginClassLoader).

Out of curiosity, does anyone here have experience using JarClassLoader
(JCL)? On first glance it looks like it might be able to solve the class
reloading issue.
  http://jcloader.sourceforge.net/index.html

-Curtis

On Wed, Nov 10, 2010 at 8:55 AM, Grant B. Harris <gharris at mbl.edu> wrote:

> An interesting article on classloading and modules.
>
> http://wiki.apidesign.org/wiki/ThreadContextClassLoader
>
> - Grant
>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagejdev.org
> http://imagejdev.org/mailman/listinfo/imagej-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101110/6575bb5d/attachment.html>

From ctrueden at wisc.edu  Wed Nov 10 14:11:48 2010
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Wed, 10 Nov 2010 14:11:48 -0600
Subject: [ImageJ-devel] Bio7 source code
Message-ID: <AANLkTim0jWzjY8ARwSzA=h+8zhpLKo2Y36NwWrrt9RR=@mail.gmail.com>

Hi Marcel,

It was great meeting you at the ImageJ conference this year, and thanks
again for your Bio7 presentation. From an end user standpoint, there are
some scientists in my lab who can make good use of the ImageJ/R integration.
And regarding software development, the ImageJDev team is excited to see
what you've done with the Eclipse RCP.

Unfortunately, we are having trouble accessing the source code from the
SourceForge web site at:
  http://sourceforge.net/projects/bio7/develop

Browsing the CVS repository via the web shows only an empty FFmpeg project,
and running "cvs co -c" to list available modules yields no results. The
commit messages also mention a git repository ("bio7 pushed 1 commit(s) to
refs/heads/master in the bio7 Git repository of the Bio7 project.") but we
were unable to locate it.

Could you please point us in the right direction?

Thanks,
Curtis
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101110/7ad0dd9a/attachment.html>

From Johannes.Schindelin at gmx.de  Wed Nov 10 15:33:17 2010
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Wed, 10 Nov 2010 22:33:17 +0100 (CET)
Subject: [ImageJ-devel] Bio7 source code
In-Reply-To: <AANLkTim0jWzjY8ARwSzA=h+8zhpLKo2Y36NwWrrt9RR=@mail.gmail.com>
References: <AANLkTim0jWzjY8ARwSzA=h+8zhpLKo2Y36NwWrrt9RR=@mail.gmail.com>
Message-ID: <alpine.DEB.1.00.1011102230340.2226@bonsai2>

Hi,

On Wed, 10 Nov 2010, Curtis Rueden wrote:

> The commit messages also mention a git repository ("bio7 pushed 1 
> commit(s) to refs/heads/master in the bio7 Git repository of the Bio7 
> project.") but we were unable to locate it.

The Git repository will not give you the source code either:

http://bio7.git.sourceforge.net/git/gitweb.cgi?p=bio7/bio7;a=commitdiff;h=53dd625df5322e1a03df5adb79312fb5b01772ee

But I recall having seen some massive source downloads (while this is not 
as fine-grained as a source code repository, it is a start...) -- maybe 
the sources are included in that 121MB download?

Ciao,
Johannes



From Johannes.Schindelin at gmx.de  Wed Nov 10 15:37:01 2010
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Wed, 10 Nov 2010 22:37:01 +0100 (CET)
Subject: [ImageJ-devel] ThreadContextClassLoader Article
In-Reply-To: <AANLkTim6PYN46BA0ZeF42J96Adng6VTm7NtiCDqHe2Tu@mail.gmail.com>
References: <4CDAB277.8010508@mbl.edu>
	<AANLkTim6PYN46BA0ZeF42J96Adng6VTm7NtiCDqHe2Tu@mail.gmail.com>
Message-ID: <alpine.DEB.1.00.1011102234190.2226@bonsai2>

Hi,

On Wed, 10 Nov 2010, Curtis Rueden wrote:

> Out of curiosity, does anyone here have experience using JarClassLoader 
> (JCL)? On first glance it looks like it might be able to solve the class 
> reloading issue.
>   http://jcloader.sourceforge.net/index.html

Why not use the URLClassLoader directly? You might want to subclass it to 
access the addURL() method, but it should be plenty enough.

BTW what is the status on sezpos? Is there a compelling example yet, 
showing that it can be integrated into the compilation easily, and that 
the annotations can be read without hassle (and without actually loading 
the class)?

Ciao,
Johannes




From ctrueden at wisc.edu  Wed Nov 10 15:52:13 2010
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Wed, 10 Nov 2010 15:52:13 -0600
Subject: [ImageJ-devel] ThreadContextClassLoader Article
In-Reply-To: <alpine.DEB.1.00.1011102234190.2226@bonsai2>
References: <4CDAB277.8010508@mbl.edu>
	<AANLkTim6PYN46BA0ZeF42J96Adng6VTm7NtiCDqHe2Tu@mail.gmail.com>
	<alpine.DEB.1.00.1011102234190.2226@bonsai2>
Message-ID: <AANLkTim5HAPu=P42sZ6OqkgCtAYeiE771zYWmNhC80yM@mail.gmail.com>

Hi Dscho,

Why not use the URLClassLoader directly? You might want to subclass it to
> access the addURL() method, but it should be plenty enough.
>

Right, I was thinking about that. The cool thing about JCL is that
supposedly it can unload classes without needing to create a new class
loader every time. Maybe it's not such a big deal, though.

BTW what is the status on sezpos? Is there a compelling example yet,
> showing that it can be integrated into the compilation easily, and that
> the annotations can be read without hassle (and without actually loading
> the class)?
>

Soon! Yesterday and today we rearranged the ImageJ2 project modules in the
SVN repository. The new layout is:

1) ij1-bridge: Code containing "compatibility layer" between IJ2 and IJ1.
This project contains the ImgLibProcessor extension of ImageProcessor, for
example, that allows us to wrap an imglib Image as an ImagePlus. Classes in
this project start with package prefix "imagej.ij1."

2) ij1-patches: Code overriding vanilla IJ1 classes. This project is
intended to be a temporary place where we put changes to the ImageJ1 core
classes (i.e., classes of package "ij."). We had made quite a few changes to
the core ImageJ classes before when we were pursuing the "delegation"
development plan, and we are now going through and backing them out whenever
possible. However, sometimes changes to core ImageJ1 will be needed. The
idea is to absolutely minimize them, and when we need a change, to place it
in ij1-patches.jar on the classpath before the stock ij.jar. That way our
modified classes take precedence. Then we can discuss why we needed each
change with Wayne and others, and work together to integrate the changes
into the main IJ1 codebase as needed.

3) imagej2: Code defining the new ImageJ2 architecture and user interface.
After feedback from the conference, it seems clear that people (particularly
Wayne) want an alpha release as soon as possible. Hence, we are creating a
minimal ImageJ2 project that replicates the existing IJ1 user interface and
functionality, according to the adaptation development plan I outlined in my
talk. I am referring to this as the "bootstrapping" phase of the project.
Once we have the minimal IJ2 alpha in place, we can begin to make iterative
changes. Also, this project will be renamed back to "imagej" from "imagej2"
once the bootstrapping is complete.

4) imagej: This project contains the previous ImageJ2 code, with many
changes to the ij.* packages, and is what was demoed at the conference. It
is now obsolete, as we migrate various portions of the code into the other
projects mentioned above.

So, regarding SezPoz, as part of #3, we need to have an updated plugin
loading mechanism. Step 1 is to lift ImageJ1's mechanism wholesale. Step 2
is to add SezPoz and/or NetBeans Lookup to show how they would benefit the
plugin discovery process. I will send another update once that is working
(hopefully within 1-3 weeks).

Please let us know if anything described above is unclear, and I can
clarify.

-Curtis

On Wed, Nov 10, 2010 at 3:37 PM, Johannes Schindelin <
Johannes.Schindelin at gmx.de> wrote:

> Hi,
>
> On Wed, 10 Nov 2010, Curtis Rueden wrote:
>
> > Out of curiosity, does anyone here have experience using JarClassLoader
> > (JCL)? On first glance it looks like it might be able to solve the class
> > reloading issue.
> >   http://jcloader.sourceforge.net/index.html
>
> Why not use the URLClassLoader directly? You might want to subclass it to
> access the addURL() method, but it should be plenty enough.
>
> BTW what is the status on sezpos? Is there a compelling example yet,
> showing that it can be integrated into the compilation easily, and that
> the annotations can be read without hassle (and without actually loading
> the class)?
>
> Ciao,
> Johannes
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101110/afcc44f5/attachment.html>

From ctrueden at wisc.edu  Wed Nov 10 16:02:05 2010
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Wed, 10 Nov 2010 16:02:05 -0600
Subject: [ImageJ-devel] ImageJ Dev
In-Reply-To: <4CCE8B23.3020301@informatik.uni-halle.de>
References: <4CCE8B23.3020301@informatik.uni-halle.de>
Message-ID: <AANLkTinFg=iCXXx_p2O4j58uubDbhaVQUPEcycjdrpNF@mail.gmail.com>

Hi Danny,

Sorry for the delay in my reply; I just returned from my EU trip and have
been catching up on email. I am CCing the ImageJDev list in case anyone else
had a similar question.

In the new concept it will be possible, that an plugin can get more than one
> inputs, like an image and maybe a number value, or whatever. How this
> will be realized out of the ImageJ GUI?
>
> At the moment it is not possible to pass two open images to an plugin,
> for example.
>

Sure. Actually, it is possible to pass multiple open images to a plugin now.
For example, try opening two images and then run Process > Image
Calculator... You'll notice that there are combo boxes for "Image1" and
"Image2" where you can select the images to use.

The declarative plugin mechanism I described in my talk will allow you to
annotate any number of ImagePlus objects as input parameters, and will show
a dialog with a similar interface, using combo boxes to allow selection of
available ImagePlus objects. So it should make it easier to have multiple
ImagePluses as input.

Does that answer your question?

-Curtis

On Mon, Nov 1, 2010 at 4:40 AM, Danny Misiak <
danny.misiak at informatik.uni-halle.de> wrote:

> Hello Mr. Rueden,
>
> we met at the ImageJ Conference last week. I missed to ask a short
> question about the new annotation concept of ImageJ2.0. In the new
> concept it will be possible, that an plugin can get more than one
> inputs, like an image and maybe a number value, or whatever. How this
> will be realized out of the ImageJ GUI?
>
> At the moment it is not possible to pass two open images to an plugin,
> for example.
>
> It would be nice, if you can answer this question and give me some
> hints, how it will work in the new ImageJ version.
>
> Best,
>  Danny.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101110/a1730ebf/attachment.html>

From ctrueden at wisc.edu  Wed Nov 10 16:11:04 2010
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Wed, 10 Nov 2010 16:11:04 -0600
Subject: [ImageJ-devel] Bio7 source code
In-Reply-To: <alpine.DEB.1.00.1011102230340.2226@bonsai2>
References: <AANLkTim0jWzjY8ARwSzA=h+8zhpLKo2Y36NwWrrt9RR=@mail.gmail.com>
	<alpine.DEB.1.00.1011102230340.2226@bonsai2>
Message-ID: <AANLkTi=Hzzj-wJJPrLQCwe5RzoCrbzz1QFERfjM3YNrs@mail.gmail.com>

Hi Johannes,

http://bio7.git.sourceforge.net/git/gitweb.cgi?p=bio7/bio7;a=commitdiff;h=53dd625df5322e1a03df5adb79312fb5b01772ee
>

Thanks.

But I recall having seen some massive source downloads (while this is not
> as fine-grained as a source code repository, it is a start...) -- maybe
> the sources are included in that 121MB download?
>

Yep, it looks like much of the source code is included in the plugins
folder. However, it appears there is not source code for all relevant
components. For example, com.eco.bio7.albireo_1.2.0.jar contains class
com/eco/bio7/albireo/Activator.class, but there is no corresponding
Activator.java in the distribution that I could find. Hopefully Marcel can
shed some light on it.

-Curtis

On Wed, Nov 10, 2010 at 3:33 PM, Johannes Schindelin <
Johannes.Schindelin at gmx.de> wrote:

> Hi,
>
> On Wed, 10 Nov 2010, Curtis Rueden wrote:
>
> > The commit messages also mention a git repository ("bio7 pushed 1
> > commit(s) to refs/heads/master in the bio7 Git repository of the Bio7
> > project.") but we were unable to locate it.
>
> The Git repository will not give you the source code either:
>
>
> http://bio7.git.sourceforge.net/git/gitweb.cgi?p=bio7/bio7;a=commitdiff;h=53dd625df5322e1a03df5adb79312fb5b01772ee
>
> But I recall having seen some massive source downloads (while this is not
> as fine-grained as a source code repository, it is a start...) -- maybe
> the sources are included in that 121MB download?
>
> Ciao,
> Johannes
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101110/930a787c/attachment.html>

From Johannes.Schindelin at gmx.de  Wed Nov 10 16:15:29 2010
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Wed, 10 Nov 2010 23:15:29 +0100 (CET)
Subject: [ImageJ-devel] ThreadContextClassLoader Article
In-Reply-To: <AANLkTim5HAPu=P42sZ6OqkgCtAYeiE771zYWmNhC80yM@mail.gmail.com>
References: <4CDAB277.8010508@mbl.edu>
	<AANLkTim6PYN46BA0ZeF42J96Adng6VTm7NtiCDqHe2Tu@mail.gmail.com>
	<alpine.DEB.1.00.1011102234190.2226@bonsai2>
	<AANLkTim5HAPu=P42sZ6OqkgCtAYeiE771zYWmNhC80yM@mail.gmail.com>
Message-ID: <alpine.DEB.1.00.1011102314520.2226@bonsai2>

Hi,

On Wed, 10 Nov 2010, Curtis Rueden wrote:

> [...]
> 
> Please let us know if anything described above is unclear, and I can 
> clarify.

Nice write-up! No questions, just a thumbs-up!

Ciao,
Dscho



From gharris at mbl.edu  Fri Nov 12 17:30:17 2010
From: gharris at mbl.edu (Grant B. Harris)
Date: Fri, 12 Nov 2010 18:30:17 -0500
Subject: [ImageJ-devel] Monday's meeting - resched?
Message-ID: <4CDDCE09.1050801@mbl.edu>

Hi, all.

I just got a message about a meeting on Monday at noon - 1pm at the MBL 
that I would like to attend.  Could we adjust the time of the meeting, 
for perhaps later in the day?  If not, go ahead without me, and I can 
catch up with folks as necessary later in the day.

Sorry about the late notice.

- Grant



From ctrueden at wisc.edu  Sat Nov 13 13:07:51 2010
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Sat, 13 Nov 2010 13:07:51 -0600
Subject: [ImageJ-devel] Monday's meeting - resched?
In-Reply-To: <4CDDCE09.1050801@mbl.edu>
References: <4CDDCE09.1050801@mbl.edu>
Message-ID: <AANLkTimn7pkOQC8D+onv-KsVE4tnLb7jAK9vn+rmSkc4@mail.gmail.com>

Hi Grant,

Could we adjust the time of the meeting, for perhaps later in the day?
>

It's fine with me. Shall we say 3pm CST / 4pm EST?

Lee & Adam, does that work for you?

-Curtis

On Fri, Nov 12, 2010 at 5:30 PM, Grant B. Harris <gharris at mbl.edu> wrote:

> Hi, all.
>
> I just got a message about a meeting on Monday at noon - 1pm at the MBL
> that I would like to attend.  Could we adjust the time of the meeting, for
> perhaps later in the day?  If not, go ahead without me, and I can catch up
> with folks as necessary later in the day.
>
> Sorry about the late notice.
>
> - Grant
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagejdev.org
> http://imagejdev.org/mailman/listinfo/imagej-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101113/ea8f9954/attachment.html>

From eliceiri at wisc.edu  Sat Nov 13 22:55:07 2010
From: eliceiri at wisc.edu (Kevin W Eliceiri)
Date: Sat, 13 Nov 2010 22:55:07 -0600
Subject: [ImageJ-devel] Apple joins OpenJDK project
In-Reply-To: <AANLkTimn7pkOQC8D+onv-KsVE4tnLb7jAK9vn+rmSkc4@mail.gmail.com>
References: <4CDDCE09.1050801@mbl.edu>
	<AANLkTimn7pkOQC8D+onv-KsVE4tnLb7jAK9vn+rmSkc4@mail.gmail.com>
Message-ID: <7390e5233262.4cdf174b@wiscmail.wisc.edu>

For those who didn't hear news from yesterday:

http://www.apple.com/pr/library/2010/11/12openjdk.html
http://www.finanznachrichten.de/18537066
http://blogs.oracle.com/henrik/2010/11/oracle_and_apple_announce_openjdk_project_for_osx.html

best
kevin
-- 
Kevin W. Eliceiri
Director
Laboratory for Optical and Computational Instrumentation
http://www.loci.wisc.edu
Room 271 Animal Sciences
1675 Observatory Drive
Madison, WI 53706
Phone: 608-263-6288
Fax: 608-262-4570



From gharris at mbl.edu  Sun Nov 14 10:13:29 2010
From: gharris at mbl.edu (Grant B. Harris)
Date: Sun, 14 Nov 2010 11:13:29 -0500
Subject: [ImageJ-devel] Monday's meeting - resched?
In-Reply-To: <AANLkTimn7pkOQC8D+onv-KsVE4tnLb7jAK9vn+rmSkc4@mail.gmail.com>
References: <4CDDCE09.1050801@mbl.edu>
	<AANLkTimn7pkOQC8D+onv-KsVE4tnLb7jAK9vn+rmSkc4@mail.gmail.com>
Message-ID: <4CE00AA9.8000301@mbl.edu>

An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101114/15a13554/attachment.html>

From gharris at mbl.edu  Sun Nov 14 10:18:01 2010
From: gharris at mbl.edu (Grant B. Harris)
Date: Sun, 14 Nov 2010 11:18:01 -0500
Subject: [ImageJ-devel] Apple joins OpenJDK project
In-Reply-To: <7390e5233262.4cdf174b@wiscmail.wisc.edu>
References: <4CDDCE09.1050801@mbl.edu>	<AANLkTimn7pkOQC8D+onv-KsVE4tnLb7jAK9vn+rmSkc4@mail.gmail.com>
	<7390e5233262.4cdf174b@wiscmail.wisc.edu>
Message-ID: <4CE00BB9.7040205@mbl.edu>

Yes, this is encouraging, or at least less discouraging !
-- Grant

On 11/13/2010 11:55 PM, Kevin W Eliceiri wrote:
> For those who didn't hear news from yesterday:
>
> http://www.apple.com/pr/library/2010/11/12openjdk.html
> http://www.finanznachrichten.de/18537066
> http://blogs.oracle.com/henrik/2010/11/oracle_and_apple_announce_openjdk_project_for_osx.html
>
> best
> kevin



From leek at broadinstitute.org  Mon Nov 15 07:17:47 2010
From: leek at broadinstitute.org (Lee Kamentsky)
Date: Mon, 15 Nov 2010 08:17:47 -0500
Subject: [ImageJ-devel] Monday's meeting - resched?
In-Reply-To: <AANLkTimn7pkOQC8D+onv-KsVE4tnLb7jAK9vn+rmSkc4@mail.gmail.com>
References: <4CDDCE09.1050801@mbl.edu>
	<AANLkTimn7pkOQC8D+onv-KsVE4tnLb7jAK9vn+rmSkc4@mail.gmail.com>
Message-ID: <4CE132FB.4030307@broadinstitute.org>

That's good for me as long as it doesn't run too long.

On 11/13/2010 2:07 PM, Curtis Rueden wrote:
> Hi Grant,
>
>     Could we adjust the time of the meeting, for perhaps later in the day?
>
>
> It's fine with me. Shall we say 3pm CST / 4pm EST?
>
> Lee & Adam, does that work for you?
>
> -Curtis
>
> On Fri, Nov 12, 2010 at 5:30 PM, Grant B. Harris <gharris at mbl.edu 
> <mailto:gharris at mbl.edu>> wrote:
>
>     Hi, all.
>
>     I just got a message about a meeting on Monday at noon - 1pm at
>     the MBL that I would like to attend.  Could we adjust the time of
>     the meeting, for perhaps later in the day?  If not, go ahead
>     without me, and I can catch up with folks as necessary later in
>     the day.
>
>     Sorry about the late notice.
>
>     - Grant
>
>     _______________________________________________
>     ImageJ-devel mailing list
>     ImageJ-devel at imagejdev.org <mailto:ImageJ-devel at imagejdev.org>
>     http://imagejdev.org/mailman/listinfo/imagej-devel
>
>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagejdev.org
> http://imagejdev.org/mailman/listinfo/imagej-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101115/ab7aa1e7/attachment.html>

From bdezonia at wisc.edu  Mon Nov 15 08:59:52 2010
From: bdezonia at wisc.edu (Barry DeZonia)
Date: Mon, 15 Nov 2010 08:59:52 -0600
Subject: [ImageJ-devel] Monday's meeting - resched?
In-Reply-To: <4CE132FB.4030307@broadinstitute.org>
References: <4CDDCE09.1050801@mbl.edu>
	<AANLkTimn7pkOQC8D+onv-KsVE4tnLb7jAK9vn+rmSkc4@mail.gmail.com>
	<4CE132FB.4030307@broadinstitute.org>
Message-ID: <AANLkTimxHOns67PXzf6w4su=Ke297mk2X=koP5gqcHUZ@mail.gmail.com>

All,

I forgot to check my calendar and I am out this afternoon. You shouldn't
allow that to alter your plans. I'll try to write up a summary that I can
pass to Curtis and he can share if necessary.

On Mon, Nov 15, 2010 at 7:17 AM, Lee Kamentsky <leek at broadinstitute.org>wrote:

>  That's good for me as long as it doesn't run too long.
>
>
> On 11/13/2010 2:07 PM, Curtis Rueden wrote:
>
> Hi Grant,
>
> Could we adjust the time of the meeting, for perhaps later in the day?
>>
>
> It's fine with me. Shall we say 3pm CST / 4pm EST?
>
> Lee & Adam, does that work for you?
>
> -Curtis
>
> On Fri, Nov 12, 2010 at 5:30 PM, Grant B. Harris <gharris at mbl.edu> wrote:
>
>> Hi, all.
>>
>> I just got a message about a meeting on Monday at noon - 1pm at the MBL
>> that I would like to attend.  Could we adjust the time of the meeting, for
>> perhaps later in the day?  If not, go ahead without me, and I can catch up
>> with folks as necessary later in the day.
>>
>> Sorry about the late notice.
>>
>> - Grant
>>
>> _______________________________________________
>> ImageJ-devel mailing list
>> ImageJ-devel at imagejdev.org
>> http://imagejdev.org/mailman/listinfo/imagej-devel
>>
>
>
> _______________________________________________
> ImageJ-devel mailing listImageJ-devel at imagejdev.orghttp://imagejdev.org/mailman/listinfo/imagej-devel
>
>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagejdev.org
> http://imagejdev.org/mailman/listinfo/imagej-devel
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101115/59b3a597/attachment.html>

From ctrueden at wisc.edu  Mon Nov 15 09:08:19 2010
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Mon, 15 Nov 2010 09:08:19 -0600
Subject: [ImageJ-devel] Monday's meeting - resched?
In-Reply-To: <AANLkTimxHOns67PXzf6w4su=Ke297mk2X=koP5gqcHUZ@mail.gmail.com>
References: <4CDDCE09.1050801@mbl.edu>
	<AANLkTimn7pkOQC8D+onv-KsVE4tnLb7jAK9vn+rmSkc4@mail.gmail.com>
	<4CE132FB.4030307@broadinstitute.org>
	<AANLkTimxHOns67PXzf6w4su=Ke297mk2X=koP5gqcHUZ@mail.gmail.com>
Message-ID: <AANLkTimUhY36mUqSVT_ZHCn9HFN00dkYjHB2_csa=m+d@mail.gmail.com>

Hi everyone,

Sounds like 3pm CST / 4pm EST is fine as long as it's short?except for Barry
who will miss.

Please look over your tickets in advance and be ready to summarize the last
two cycles and next cycle as briefly as you can.

In the future, we will not reschedule this meeting unless several people
have a conflict, since there are too many of us to reliably settle on a
backup time.

-Curtis

On Mon, Nov 15, 2010 at 8:59 AM, Barry DeZonia <bdezonia at wisc.edu> wrote:

> All,
>
> I forgot to check my calendar and I am out this afternoon. You shouldn't
> allow that to alter your plans. I'll try to write up a summary that I can
> pass to Curtis and he can share if necessary.
>
>
> On Mon, Nov 15, 2010 at 7:17 AM, Lee Kamentsky <leek at broadinstitute.org>wrote:
>
>>  That's good for me as long as it doesn't run too long.
>>
>>
>> On 11/13/2010 2:07 PM, Curtis Rueden wrote:
>>
>> Hi Grant,
>>
>> Could we adjust the time of the meeting, for perhaps later in the day?
>>>
>>
>> It's fine with me. Shall we say 3pm CST / 4pm EST?
>>
>> Lee & Adam, does that work for you?
>>
>> -Curtis
>>
>> On Fri, Nov 12, 2010 at 5:30 PM, Grant B. Harris <gharris at mbl.edu> wrote:
>>
>>> Hi, all.
>>>
>>> I just got a message about a meeting on Monday at noon - 1pm at the MBL
>>> that I would like to attend.  Could we adjust the time of the meeting, for
>>> perhaps later in the day?  If not, go ahead without me, and I can catch up
>>> with folks as necessary later in the day.
>>>
>>> Sorry about the late notice.
>>>
>>> - Grant
>>>
>>> _______________________________________________
>>> ImageJ-devel mailing list
>>> ImageJ-devel at imagejdev.org
>>> http://imagejdev.org/mailman/listinfo/imagej-devel
>>>
>>
>>
>> _______________________________________________
>> ImageJ-devel mailing listImageJ-devel at imagejdev.orghttp://imagejdev.org/mailman/listinfo/imagej-devel
>>
>>
>>
>> _______________________________________________
>> ImageJ-devel mailing list
>> ImageJ-devel at imagejdev.org
>> http://imagejdev.org/mailman/listinfo/imagej-devel
>>
>>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagejdev.org
> http://imagejdev.org/mailman/listinfo/imagej-devel
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101115/7bf50be7/attachment.html>

From ctrueden at wisc.edu  Mon Nov 15 11:36:43 2010
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Mon, 15 Nov 2010 11:36:43 -0600
Subject: [ImageJ-devel] Imglib benchmarks
Message-ID: <AANLkTikq1w7eTtiaK=qsjkuLFVXQNDF6DEuXfnpZs6e6@mail.gmail.com>

Hi everyone,

For those interested, we have posted some benchmarks comparing ImageJ,
imglib (http://pacific.mpi-cbg.de/wiki/index.php/Imglib) and PixLib (
http://sourceforge.net/projects/pixlib/) with raw byte array performance:

  http://imagejdev.org/imglib-benchmarks

Comments and questions welcome!

Regards,
Curtis
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101115/2cc02813/attachment.html>

From leek at broadinstitute.org  Tue Nov 16 14:26:13 2010
From: leek at broadinstitute.org (Lee Kamentsky)
Date: Tue, 16 Nov 2010 15:26:13 -0500
Subject: [ImageJ-devel] Labeling / segmentation proposal for imglib
Message-ID: <4CE2E8E5.1070004@broadinstitute.org>

Hi all,
I'm looking to possibly add some support for representing segmentation 
results in ImageJ 2.0 / imglib. The enclosed document discusses the 
rationale for labeling as something distinct from ROI and proposes an 
implementation strategy; I'd like comments.

--Lee
-------------- next part --------------
A non-text attachment was scrubbed...
Name: Segmentation and labeling in ImageJ.doc
Type: application/msword
Size: 53760 bytes
Desc: not available
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101116/1f639165/attachment.doc>

From sapristi at gmail.com  Tue Nov 16 15:44:35 2010
From: sapristi at gmail.com (Albert Cardona)
Date: Tue, 16 Nov 2010 22:44:35 +0100
Subject: [ImageJ-devel] Labeling / segmentation proposal for imglib
In-Reply-To: <4CE2E8E5.1070004@broadinstitute.org>
References: <4CE2E8E5.1070004@broadinstitute.org>
Message-ID: <AANLkTinY3VwPDi07dHvwFpi47AivYhj64ZTo_uCv3g+A@mail.gmail.com>

Lee,

You know about the ShapeImage container, right?

http://pacific.mpi-cbg.de/cgi-bin/gitweb.cgi?p=imglib.git;a=tree;f=imglib/src/main/java/mpicbg/imglib/container/shapelist;hb=HEAD

Just checking.

Albert

2010/11/16 Lee Kamentsky <leek at broadinstitute.org>:
> Hi all,
> I'm looking to possibly add some support for representing segmentation
> results in ImageJ 2.0 / imglib. The enclosed document discusses the
> rationale for labeling as something distinct from ROI and proposes an
> implementation strategy; I'd like comments.
>
> --Lee
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagejdev.org
> http://imagejdev.org/mailman/listinfo/imagej-devel
>
>



-- 
http://albert.rierol.net



From leek at broadinstitute.org  Tue Nov 16 15:56:14 2010
From: leek at broadinstitute.org (Lee Kamentsky)
Date: Tue, 16 Nov 2010 16:56:14 -0500
Subject: [ImageJ-devel] Labeling / segmentation proposal for imglib
In-Reply-To: <AANLkTinY3VwPDi07dHvwFpi47AivYhj64ZTo_uCv3g+A@mail.gmail.com>
References: <4CE2E8E5.1070004@broadinstitute.org>
	<AANLkTinY3VwPDi07dHvwFpi47AivYhj64ZTo_uCv3g+A@mail.gmail.com>
Message-ID: <4CE2FDFE.9080202@broadinstitute.org>

Now I do ;-)

I think the ShapeImage container is not appropriate since it's based on 
java.awt.Shape - I think that segmentation results are too general to be 
represented by shapes, the ShapeListCache doesn't scale to hundreds of 
labels per image, and the typical algorithms used on these sorts of 
results might not be efficient. Also, using java.awt on the Mac will 
cause difficulties for CellProfiler and others because of some 
unfortunate implementation decisions in awt and Mac OS beyond our control.

--Lee

On 11/16/2010 4:44 PM, Albert Cardona wrote:
> Lee,
>
> You know about the ShapeImage container, right?
>
> http://pacific.mpi-cbg.de/cgi-bin/gitweb.cgi?p=imglib.git;a=tree;f=imglib/src/main/java/mpicbg/imglib/container/shapelist;hb=HEAD
>
> Just checking.
>
> Albert
>
> 2010/11/16 Lee Kamentsky<leek at broadinstitute.org>:
>> Hi all,
>> I'm looking to possibly add some support for representing segmentation
>> results in ImageJ 2.0 / imglib. The enclosed document discusses the
>> rationale for labeling as something distinct from ROI and proposes an
>> implementation strategy; I'd like comments.
>>
>> --Lee
>>
>> _______________________________________________
>> ImageJ-devel mailing list
>> ImageJ-devel at imagejdev.org
>> http://imagejdev.org/mailman/listinfo/imagej-devel
>>
>>
>
>




From sapristi at gmail.com  Tue Nov 16 16:02:44 2010
From: sapristi at gmail.com (Albert Cardona)
Date: Tue, 16 Nov 2010 23:02:44 +0100
Subject: [ImageJ-devel] Labeling / segmentation proposal for imglib
In-Reply-To: <4CE2FDFE.9080202@broadinstitute.org>
References: <4CE2E8E5.1070004@broadinstitute.org>
	<AANLkTinY3VwPDi07dHvwFpi47AivYhj64ZTo_uCv3g+A@mail.gmail.com>
	<4CE2FDFE.9080202@broadinstitute.org>
Message-ID: <AANLkTimkoCvxdcKs7Ob6iMqzjOojmLDNWDcFa7=KhqRr@mail.gmail.com>

2010/11/16 Lee Kamentsky <leek at broadinstitute.org>:
> Now I do ;-)
>
> I think the ShapeImage container is not appropriate since it's based on
> java.awt.Shape - I think that segmentation results are too general to be
> represented by shapes, the ShapeListCache doesn't scale to hundreds of
> labels per image,


The cache is per cursor, and simply stores the last N desired visited locations.


> and the typical algorithms used on these sorts of results
> might not be efficient.


Have you tried it? I have. Currently, giant (>5000) areas are rendered
in 3D using marching cubes and it works great.


> Also, using java.awt on the Mac will cause
> difficulties for CellProfiler and others because of some unfortunate
> implementation decisions in awt and Mac OS beyond our control.


java.awt.Shape is an interface. That shouldn't cause any problems.
java.awt.geom.Area, java.awt.Rectangle, and others, are in the
java.awt package but have nothing to do with the GUI awt classes. They
can be used cleanly.


You may want to give it a second look and run some tests.

Albert

-- 
http://albert.rierol.net



From G.Landini at bham.ac.uk  Tue Nov 16 16:14:23 2010
From: G.Landini at bham.ac.uk (Gabriel Landini)
Date: Tue, 16 Nov 2010 22:14:23 +0000
Subject: [ImageJ-devel] Labeling / segmentation proposal for imglib
In-Reply-To: <4CE2E8E5.1070004@broadinstitute.org>
References: <4CE2E8E5.1070004@broadinstitute.org>
Message-ID: <201011162214.23332.G.Landini@bham.ac.uk>

On Tuesday 16 November 2010 20:26:13 Lee Kamentsky wrote:
> Hi all,
> I'm looking to possibly add some support for representing segmentation
> results in ImageJ 2.0 / imglib. The enclosed document discusses the
> rationale for labeling as something distinct from ROI and proposes an
> implementation strategy; I'd like comments.

Unless I missed it, one also wants to have the StartX StartY (and StartZ?)  
coordinates as these are necessary for blob binary reconstruction. I use this 
extensively. This pixel is the one that gets detected first for each blob 
during a raster scan of the image.

Sorry I cannot provide it right now (I have it at work, will do tomorrow) but 
the other day I found a relatively "new" reference of an alternative approach 
to blob labelling "as you go along" that has some advantages (speed) over the 
traditional labelling algorithm (label first, extract geometric descriptors 
later). Funnily this "new" approach is what I use in Particles4 and Particles8 
plugins. I originally wrote the algorithm in N88-BASIC in 1988 during my phd 
work running on a 286 cpu on 16 colours(!).

Note that one can be quite creative to produce efficient algorithms when 
analysing blob morphological descriptors because many of these descriptors 
depend on other descriptors, so there are advantages on computing the 
labelling and parameters in certain order (I mentioned this in my talk at the 
2008 Lux conference, including a table of related parameters).
So my suggestion (if this is to be implemented in ImgLib or similar) is to 
compute certain sets of parameters in blocks and only then display those set 
in a Set Measurements dialog rather than branching for each blob which 
parameters to compute.

For example, if one computes the perimeter of the blob (and for this I would 
strongly suggest to use Freeman's algorithm) then the convex hull and then the 
Feret diameter and breadth can be computed with very little further effort (eg 
it is faster to compute the Feret from the convex hull than from the 
perimeter). Also the area of the polygon defined by the perimeter (which 
!=number of pixels) can be computed in the loop that goes around the blob 
perimeter by just adding 1 further line of code.

I can expand on this if required.

Regards

Gabriel



From G.Landini at bham.ac.uk  Wed Nov 17 03:19:26 2010
From: G.Landini at bham.ac.uk (Gabriel Landini)
Date: Wed, 17 Nov 2010 09:19:26 +0000
Subject: [ImageJ-devel] Labeling / segmentation proposal for imglib
In-Reply-To: <201011162214.23332.G.Landini@bham.ac.uk>
References: <4CE2E8E5.1070004@broadinstitute.org>
	<201011162214.23332.G.Landini@bham.ac.uk>
Message-ID: <201011170919.26705.G.Landini@bham.ac.uk>

I said:
> Sorry I cannot provide it right now (I have it at work, will do tomorrow)

The paper is by Chang F, and Chen Ch-J: A Component-Labeling Algorithm Using 
Contour Tracing Technique. Proceedings of the Seventh International Conference 
on Document Analysis and Recognition (ICDAR?03)

http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.95.6330&rep=rep1&type=pdf

I hope this is useful.
Cheers

Gabriel



From leek at broadinstitute.org  Wed Nov 17 08:14:32 2010
From: leek at broadinstitute.org (Lee Kamentsky)
Date: Wed, 17 Nov 2010 09:14:32 -0500
Subject: [ImageJ-devel] Labeling / segmentation proposal for imglib
In-Reply-To: <AANLkTimkoCvxdcKs7Ob6iMqzjOojmLDNWDcFa7=KhqRr@mail.gmail.com>
References: <4CE2E8E5.1070004@broadinstitute.org>
	<AANLkTinY3VwPDi07dHvwFpi47AivYhj64ZTo_uCv3g+A@mail.gmail.com>
	<4CE2FDFE.9080202@broadinstitute.org>
	<AANLkTimkoCvxdcKs7Ob6iMqzjOojmLDNWDcFa7=KhqRr@mail.gmail.com>
Message-ID: <4CE3E348.9010201@broadinstitute.org>

Hi Albert,

I could see how using ShapeLists could work well for us for most cases 
seeing that we mostly use 2-d. It looks to me like you need one shape 
per z-plane in 3-d? I am thinking that there is still some utility in 
having something that represents the segmentation or labeling as a 
whole. In that scheme, the shapes would be views into the underlying 
representation of the labeling. Finally, I think there is some utility 
to a localizable cursor that doesn't use shapes as an intermediate 
because that sort of cursor would only visit labeled pixels whereas the 
shape cursor, at best, visits all pixels in the shape's bounding box 
(and for naive uses, might visit all pixels in the image). Some 
labelings, such as those on neurons, are sparse within their bounding 
boxes and, it seems to me, would require many calls to 
java.awt.Shape.contains(x,y).

--Lee

On 11/16/2010 5:02 PM, Albert Cardona wrote:
> 2010/11/16 Lee Kamentsky<leek at broadinstitute.org>:
>> Now I do ;-)
>>
>> I think the ShapeImage container is not appropriate since it's based on
>> java.awt.Shape - I think that segmentation results are too general to be
>> represented by shapes, the ShapeListCache doesn't scale to hundreds of
>> labels per image,
>
> The cache is per cursor, and simply stores the last N desired visited locations.
>
>
>> and the typical algorithms used on these sorts of results
>> might not be efficient.
>
> Have you tried it? I have. Currently, giant (>5000) areas are rendered
> in 3D using marching cubes and it works great.
>
>
>> Also, using java.awt on the Mac will cause
>> difficulties for CellProfiler and others because of some unfortunate
>> implementation decisions in awt and Mac OS beyond our control.
>
> java.awt.Shape is an interface. That shouldn't cause any problems.
> java.awt.geom.Area, java.awt.Rectangle, and others, are in the
> java.awt package but have nothing to do with the GUI awt classes. They
> can be used cleanly.
>
>
> You may want to give it a second look and run some tests.
>
> Albert
>




From leek at broadinstitute.org  Wed Nov 17 08:43:38 2010
From: leek at broadinstitute.org (Lee Kamentsky)
Date: Wed, 17 Nov 2010 09:43:38 -0500
Subject: [ImageJ-devel] Labeling / segmentation proposal for imglib
In-Reply-To: <201011170919.26705.G.Landini@bham.ac.uk>
References: <4CE2E8E5.1070004@broadinstitute.org>	<201011162214.23332.G.Landini@bham.ac.uk>
	<201011170919.26705.G.Landini@bham.ac.uk>
Message-ID: <4CE3EA1A.2010408@broadinstitute.org>

All very interesting, Gabriel, thank you.

Do you think the specification should include a cursor that iterates 
along the pixels on the perimeter? That would save everyone the trouble 
of reimplementing Chang. It's somewhat trivial for me to include the 
start coordinates in the interface (I'm guessing something like "int [] 
Start(T label);" or "int Start(T label, int dim) instead of or in 
addition to "int Start[X,Y,Z](T label)" to align to the imglib spirit) 
if they're of general use.

The outline pixels can be recovered from a list of pixel coordinates for 
each label by sorting the coordinates by x then y and finding the ones 
without y neighbors on either side, and then sorting by y, then x and 
repeating, although labeling using Chang is clearly more efficient if 
you have a binary thresholding of the image.

We do have a use case in which pixels are multiply labeled (current 
research has images of objects that cross and share pixels) which means 
that the most general case can't use reconstruction of a binary image to 
recover the labeling.

--Lee

On 11/17/2010 4:19 AM, Gabriel Landini wrote:
> I said:
>> Sorry I cannot provide it right now (I have it at work, will do tomorrow)
> The paper is by Chang F, and Chen Ch-J: A Component-Labeling Algorithm Using
> Contour Tracing Technique. Proceedings of the Seventh International Conference
> on Document Analysis and Recognition (ICDAR?03)
>
> http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.95.6330&rep=rep1&type=pdf
>
> I hope this is useful.
> Cheers
>
> Gabriel
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagejdev.org
> http://imagejdev.org/mailman/listinfo/imagej-devel




From sapristi at gmail.com  Wed Nov 17 09:53:42 2010
From: sapristi at gmail.com (Albert Cardona)
Date: Wed, 17 Nov 2010 16:53:42 +0100
Subject: [ImageJ-devel] Labeling / segmentation proposal for imglib
In-Reply-To: <4CE3E348.9010201@broadinstitute.org>
References: <4CE2E8E5.1070004@broadinstitute.org>
	<AANLkTinY3VwPDi07dHvwFpi47AivYhj64ZTo_uCv3g+A@mail.gmail.com>
	<4CE2FDFE.9080202@broadinstitute.org>
	<AANLkTimkoCvxdcKs7Ob6iMqzjOojmLDNWDcFa7=KhqRr@mail.gmail.com>
	<4CE3E348.9010201@broadinstitute.org>
Message-ID: <AANLkTiktE70rOR2o5hkH1QseN7zn9+cQ58JPtf1X3cHb@mail.gmail.com>

2010/11/17 Lee Kamentsky <leek at broadinstitute.org>:
> Hi Albert,
>
> I could see how using ShapeLists could work well for us for most cases
> seeing that we mostly use 2-d. It looks to me like you need one shape per
> z-plane in 3-d? I am thinking that there is still some utility in having
> something that represents the segmentation or labeling as a whole. In that
> scheme, the shapes would be views into the underlying representation of the
> labeling. Finally, I think there is some utility to a localizable cursor
> that doesn't use shapes as an intermediate because that sort of cursor would
> only visit labeled pixels whereas the shape cursor, at best, visits all
> pixels in the shape's bounding box (and for naive uses, might visit all
> pixels in the image). Some labelings, such as those on neurons, are sparse
> within their bounding boxes and, it seems to me, would require many calls to
> java.awt.Shape.contains(x,y).

Hi Lee,

I am glad you found out the good and the bad parts of ShapeList. That
was all I inteded with my replies.

Best,

Albert
-- 
http://albert.rierol.net



From G.Landini at bham.ac.uk  Wed Nov 17 10:35:44 2010
From: G.Landini at bham.ac.uk (Gabriel Landini)
Date: Wed, 17 Nov 2010 16:35:44 +0000
Subject: [ImageJ-devel] Labeling / segmentation proposal for imglib
In-Reply-To: <4CE3EA1A.2010408@broadinstitute.org>
References: <4CE2E8E5.1070004@broadinstitute.org>
	<201011170919.26705.G.Landini@bham.ac.uk>
	<4CE3EA1A.2010408@broadinstitute.org>
Message-ID: <201011171635.44197.G.Landini@bham.ac.uk>

Hi Lee,

On Wednesday 17 Nov 2010  14:48:03 Lee Kamentsky wrote:
> Do you think the specification should include a cursor that iterates
> along the pixels on the perimeter? That would save everyone the trouble
> of reimplementing Chang. 

Do you mean to: given an XStart YStart, this cursor would go round the blob 
and compute a collection of parameters?
If so, yes it might be a really good idea.

> It's somewhat trivial for me to include the
> start coordinates in the interface (I'm guessing something like "int []
> Start(T label);" or "int Start(T label, int dim) instead of or in
> addition to "int Start[X,Y,Z](T label)" to align to the imglib spirit)
> if they're of general use.

Good. Yes, there is a definite advantage one has all the blobs labelled to be 
able to target each one from a table of positions rather than going all over 
the image. I mentioned StartZ (I realised now that in IJ these are called 
XStart, etc) but currently there is no native method to isolate 3D blobs.

> The outline pixels can be recovered from a list of pixel coordinates for
> each label by sorting the coordinates by x then y and finding the ones
> without y neighbors on either side, and then sorting by y, then x and
> repeating, although labeling using Chang is clearly more efficient if
> you have a binary thresholding of the image.

Here is where Freeman's algorithm (walking around each blob) is efficient 
because it gives the boundary already sorted in the sequence along of the 
walk. Currently IJ uses a different algorithm to compute the perimeter length. 
(results for large blobs are similar to Freeman's but if I recall correctly 
there is some discrepancy for small ones). Also IJ uses the number of pixels 
as "area". While some might not bother too much about this detail, others 
might think differently (me included :-) ). If a pixel is a point, the area 
cannot be 1 and it should have no perimeter and no circularity, etc. Freeman's 
encoding solves this, I think, a bit better and we should try to provide both, 
area inside the bounding perimeter and number of pixels in the blob.

Also one wants that perimeter sorted for a number of other reasons. For 
example one can compute the yardstick fractal dimension using this sorted list 
of coordinates. And one can also use this list and save the blob outlines as a 
chain encoded profile (this is used by some imaging systems). The file size is 
minuscule as it encodes one of the 8 possible positions of the next pixel and 
one can pack several "next positions" per byte).
After going round the profile and one reaches the starting pixel (plus 
checking that the pixel at x-1, y+1 is either visited or empty, if not one 
still has some boundary to walk) one already has the perimeter and the area 
under the enclosed perimeter. So one can compute circularity in one operation.  
The cursor could return the perimeter length and the area enclosed by the 
perimeter. But now that the perimeter has been computer, one can also extract 
the convex hull from the sorted list, and the convex area, and once you have 
the convex hull, the feret diameter is computed easily, and its angle with the 
horizontal frame, and the breadth. Furthermore, the centroid can be computed 
as the average of all the coordinates in one of those passes too.
The other family of morphological parameters relates to the labelling of the 
pixels. These include the number of pixels, and all the greyscale statistics 
of the blob (for example via redirection to an image holding the greyscale 
values) and the centre of mass. There is an advantage in computing this whole 
block together too, as the code for computing the mean grey level is already 
almost there to allow computing the standard deviation, skewness, kurtosis, 
etc. One accesses each pixel in the blob only once.

> We do have a use case in which pixels are multiply labeled (current
> research has images of objects that cross and share pixels) which means
> that the most general case can't use reconstruction of a binary image to
> recover the labeling.

I see, well yes that brings in new issues. Perhaps one could implement a 
cursor that processes binary images and which is very fast, while multi-label 
images require some special treatment?

We might want to keep in mind that it is useful to have both 8- and 4-
connected particle encodings for the analysis of blobs.

Thanks for listening! 
Regards

Gabriel



From leek at broadinstitute.org  Wed Nov 17 11:07:36 2010
From: leek at broadinstitute.org (Lee Kamentsky)
Date: Wed, 17 Nov 2010 12:07:36 -0500
Subject: [ImageJ-devel] Labeling / segmentation proposal for imglib
In-Reply-To: <201011171635.44197.G.Landini@bham.ac.uk>
References: <4CE2E8E5.1070004@broadinstitute.org>
	<201011170919.26705.G.Landini@bham.ac.uk>
	<4CE3EA1A.2010408@broadinstitute.org>
	<201011171635.44197.G.Landini@bham.ac.uk>
Message-ID: <4CE40BD8.9010409@broadinstitute.org>

Lots of good points Gabriel,
If I understand right, you'd like the perimeter points in this order:

     1.....2
    3........4
    5...6 7...8
     9.10 11.12

(or do you want all the points, not just the ends, in clockwise order?)

We could store it that way internally - an efficient run-length encoding 
and easy enough to use it to build all of the cursors. The 
eight-connected compression scheme is elegant; that would be a great 
storage format.

Your point regarding the perimeter is well-taken; the perimeter is 
typically greater than the count of the pixels that make up the 
perimeter. I suppose you're right about area as well, but the magnitude 
of the error is far less.

--Lee

On 11/17/2010 11:35 AM, Gabriel Landini wrote:
> Hi Lee,
>
> On Wednesday 17 Nov 2010  14:48:03 Lee Kamentsky wrote:
>> Do you think the specification should include a cursor that iterates
>> along the pixels on the perimeter? That would save everyone the trouble
>> of reimplementing Chang.
> Do you mean to: given an XStart YStart, this cursor would go round the blob
> and compute a collection of parameters?
> If so, yes it might be a really good idea.
>
>> It's somewhat trivial for me to include the
>> start coordinates in the interface (I'm guessing something like "int []
>> Start(T label);" or "int Start(T label, int dim) instead of or in
>> addition to "int Start[X,Y,Z](T label)" to align to the imglib spirit)
>> if they're of general use.
> Good. Yes, there is a definite advantage one has all the blobs labelled to be
> able to target each one from a table of positions rather than going all over
> the image. I mentioned StartZ (I realised now that in IJ these are called
> XStart, etc) but currently there is no native method to isolate 3D blobs.
>
>> The outline pixels can be recovered from a list of pixel coordinates for
>> each label by sorting the coordinates by x then y and finding the ones
>> without y neighbors on either side, and then sorting by y, then x and
>> repeating, although labeling using Chang is clearly more efficient if
>> you have a binary thresholding of the image.
> Here is where Freeman's algorithm (walking around each blob) is efficient
> because it gives the boundary already sorted in the sequence along of the
> walk. Currently IJ uses a different algorithm to compute the perimeter length.
> (results for large blobs are similar to Freeman's but if I recall correctly
> there is some discrepancy for small ones). Also IJ uses the number of pixels
> as "area". While some might not bother too much about this detail, others
> might think differently (me included :-) ). If a pixel is a point, the area
> cannot be 1 and it should have no perimeter and no circularity, etc. Freeman's
> encoding solves this, I think, a bit better and we should try to provide both,
> area inside the bounding perimeter and number of pixels in the blob.
>
> Also one wants that perimeter sorted for a number of other reasons. For
> example one can compute the yardstick fractal dimension using this sorted list
> of coordinates. And one can also use this list and save the blob outlines as a
> chain encoded profile (this is used by some imaging systems). The file size is
> minuscule as it encodes one of the 8 possible positions of the next pixel and
> one can pack several "next positions" per byte).
> After going round the profile and one reaches the starting pixel (plus
> checking that the pixel at x-1, y+1 is either visited or empty, if not one
> still has some boundary to walk) one already has the perimeter and the area
> under the enclosed perimeter. So one can compute circularity in one operation.
> The cursor could return the perimeter length and the area enclosed by the
> perimeter. But now that the perimeter has been computer, one can also extract
> the convex hull from the sorted list, and the convex area, and once you have
> the convex hull, the feret diameter is computed easily, and its angle with the
> horizontal frame, and the breadth. Furthermore, the centroid can be computed
> as the average of all the coordinates in one of those passes too.
> The other family of morphological parameters relates to the labelling of the
> pixels. These include the number of pixels, and all the greyscale statistics
> of the blob (for example via redirection to an image holding the greyscale
> values) and the centre of mass. There is an advantage in computing this whole
> block together too, as the code for computing the mean grey level is already
> almost there to allow computing the standard deviation, skewness, kurtosis,
> etc. One accesses each pixel in the blob only once.
>
>> We do have a use case in which pixels are multiply labeled (current
>> research has images of objects that cross and share pixels) which means
>> that the most general case can't use reconstruction of a binary image to
>> recover the labeling.
> I see, well yes that brings in new issues. Perhaps one could implement a
> cursor that processes binary images and which is very fast, while multi-label
> images require some special treatment?
>
> We might want to keep in mind that it is useful to have both 8- and 4-
> connected particle encodings for the analysis of blobs.
>
> Thanks for listening!
> Regards
>
> Gabriel




From gharris at mbl.edu  Wed Nov 17 16:52:12 2010
From: gharris at mbl.edu (Grant B. Harris)
Date: Wed, 17 Nov 2010 17:52:12 -0500
Subject: [ImageJ-devel] NetBeans references and background
Message-ID: <4CE45C9C.7060005@mbl.edu>

Today I updated my NetBeans 'Map' with lots of new stuff on Lookup, 
using the IDE, and developing apps. on the NetBeans Platform.  For 
anyone interested: http://dev.imagejdev.org/gbh/netbeans/map.htm

- Grant



From ctrueden at wisc.edu  Wed Nov 17 16:56:06 2010
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Wed, 17 Nov 2010 16:56:06 -0600
Subject: [ImageJ-devel] NetBeans references and background
In-Reply-To: <4CE45C9C.7060005@mbl.edu>
References: <4CE45C9C.7060005@mbl.edu>
Message-ID: <AANLkTikvUeGsD7Rz-f8ReLzA2r6vZhwRokThdYc0Ycne@mail.gmail.com>

Hi Grant,

Thanks, I think this map-style organization is really useful for presenting
many ideas succinctly, and allowing people to drill down to topics of
interest.

-Curtis

On Wed, Nov 17, 2010 at 4:52 PM, Grant B. Harris <gharris at mbl.edu> wrote:

> Today I updated my NetBeans 'Map' with lots of new stuff on Lookup, using
> the IDE, and developing apps. on the NetBeans Platform.  For anyone
> interested: http://dev.imagejdev.org/gbh/netbeans/map.htm
>
> - Grant
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagejdev.org
> http://imagejdev.org/mailman/listinfo/imagej-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101117/cb3b6ce4/attachment.html>

From ctrueden at wisc.edu  Mon Nov 22 17:52:11 2010
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Mon, 22 Nov 2010 17:52:11 -0600
Subject: [ImageJ-devel] Simple plugin discovery logic
Message-ID: <AANLkTim7j3VRZ9Qi8Dazx-97y_X2Q31wh8oDc1196CYh@mail.gmail.com>

Hi Grant et. al,

Today Rick & I added a simple plugin discovery mechanism to the ImageJ2
codebase. This is a work in progress. The idea is to have an interface,
PluginFinder, that provides a method, findPlugins(List<PluginEntry>
plugins), for populating a list with discovered plugins. The IJ1
compatibility layer can have an Ij1PluginFinder that discovers IJ1 plugins,
and the ImageJ2 code can have an Ij2PluginFinder (or whatever) for
discovering any additional plugins of various types.

Here is what we have so far:

In ij2-common:
  + imagej.plugin.PluginEntry -- very simple data structure for a single
plugin entry, including plugin class name, and associated menu entry
  + imagej.plugin.PluginFinder -- interface for anything capable of
discovering ImageJ plugins -- has one method: findPlugins(List<PluginEntry>
plugins)

In ij1-bridge:
  + imagej.ij1bridge.plugin.Ij1PluginFinder -- implementation for
discovering ImageJ 1.x plugins -- delegates to ij.Menus where possible

In ijx:
  + ijx.plugin.IjxPluginFinder -- currently a dummy implementation that just
populates a single fake plugin entry -- eventually will discover ImageJ 2.x
plugins

Tester class (in ijx):
  + ijx.plugin.PluginDiscovery -- obtains all implementations of
PluginFinder interface (using NB Lookup), discovers all available plugins
and prints out the list

Again, this is a work in progress. The goal is have a very simple,
encapsulated way of querying for plugins without any assumptions about GUIs,
etc. The PluginEntry in particular will need to be fleshed out with more
details?e.g., there is no way to express the arg string needed by many IJ1
plugins/commands, no way to link an image icon for use with a toolbar, and
no way to express order for menus or toolbars.

More later; comments welcome any time.

-Curtis
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101122/8fad2745/attachment.html>

From Johannes.Schindelin at gmx.de  Mon Nov 22 18:32:48 2010
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Tue, 23 Nov 2010 01:32:48 +0100 (CET)
Subject: [ImageJ-devel] Simple plugin discovery logic
In-Reply-To: <AANLkTim7j3VRZ9Qi8Dazx-97y_X2Q31wh8oDc1196CYh@mail.gmail.com>
References: <AANLkTim7j3VRZ9Qi8Dazx-97y_X2Q31wh8oDc1196CYh@mail.gmail.com>
Message-ID: <alpine.DEB.1.00.1011230131410.2948@bonsai2>

Hi,

On Mon, 22 Nov 2010, Curtis Rueden wrote:

> Today Rick & I added a simple plugin discovery mechanism to the ImageJ2 
> codebase. This is a work in progress. The idea is to have an interface, 
> PluginFinder, that provides a method, findPlugins(List<PluginEntry> 
> plugins), for populating a list with discovered plugins. The IJ1 
> compatibility layer can have an Ij1PluginFinder that discovers IJ1 
> plugins, and the ImageJ2 code can have an Ij2PluginFinder (or whatever) 
> for discovering any additional plugins of various types.

Great!

I could imagine that at a later stage, this is easily extended to provide 
discovery mechanisms for I/O, tool, display, editor and spreadsheet 
plugins in addition to menu entry plugins... :-)

Good job,
Dscho



From leek at broadinstitute.org  Tue Nov 23 07:22:47 2010
From: leek at broadinstitute.org (Lee Kamentsky)
Date: Tue, 23 Nov 2010 08:22:47 -0500
Subject: [ImageJ-devel] Simple plugin discovery logic
In-Reply-To: <AANLkTim7j3VRZ9Qi8Dazx-97y_X2Q31wh8oDc1196CYh@mail.gmail.com>
References: <AANLkTim7j3VRZ9Qi8Dazx-97y_X2Q31wh8oDc1196CYh@mail.gmail.com>
Message-ID: <4CEBC027.4090607@broadinstitute.org>

Hi Curtis,

Looks like a good start. Is NetBeans going to be required for IJ2? It 
would be nice, esp. for CellProfiler, to have some static method that 
would find the plugin finders, but if NetBeans is in, the code to do so 
ourselves does not look too complex.

--Lee

On 11/22/2010 6:52 PM, Curtis Rueden wrote:
> Hi Grant et. al,
>
> Today Rick & I added a simple plugin discovery mechanism to the 
> ImageJ2 codebase. This is a work in progress. The idea is to have an 
> interface, PluginFinder, that provides a method, 
> findPlugins(List<PluginEntry> plugins), for populating a list with 
> discovered plugins. The IJ1 compatibility layer can have an 
> Ij1PluginFinder that discovers IJ1 plugins, and the ImageJ2 code can 
> have an Ij2PluginFinder (or whatever) for discovering any additional 
> plugins of various types.
>
> Here is what we have so far:
>
> In ij2-common:
>   + imagej.plugin.PluginEntry -- very simple data structure for a 
> single plugin entry, including plugin class name, and associated menu 
> entry
>   + imagej.plugin.PluginFinder -- interface for anything capable of 
> discovering ImageJ plugins -- has one method: 
> findPlugins(List<PluginEntry> plugins)
>
> In ij1-bridge:
>   + imagej.ij1bridge.plugin.Ij1PluginFinder -- implementation for 
> discovering ImageJ 1.x plugins -- delegates to ij.Menus where possible
>
> In ijx:
>   + ijx.plugin.IjxPluginFinder -- currently a dummy implementation 
> that just populates a single fake plugin entry -- eventually will 
> discover ImageJ 2.x plugins
>
> Tester class (in ijx):
>   + ijx.plugin.PluginDiscovery -- obtains all implementations of 
> PluginFinder interface (using NB Lookup), discovers all available 
> plugins and prints out the list
>
> Again, this is a work in progress. The goal is have a very simple, 
> encapsulated way of querying for plugins without any assumptions about 
> GUIs, etc. The PluginEntry in particular will need to be fleshed out 
> with more details?e.g., there is no way to express the arg string 
> needed by many IJ1 plugins/commands, no way to link an image icon for 
> use with a toolbar, and no way to express order for menus or toolbars.
>
> More later; comments welcome any time.
>
> -Curtis
>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagejdev.org
> http://imagejdev.org/mailman/listinfo/imagej-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101123/da58d906/attachment.html>

From gharris at mbl.edu  Tue Nov 23 11:12:35 2010
From: gharris at mbl.edu (Grant B. Harris)
Date: Tue, 23 Nov 2010 12:12:35 -0500
Subject: [ImageJ-devel] Refactoring of Ijx to remove ij package conflicts
Message-ID: <4CEBF603.1060802@mbl.edu>

An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101123/199c2879/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0000 at 17278_412667274d097b42-6fd5.png
Type: image/png
Size: 8368 bytes
Desc: not available
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101123/199c2879/attachment.png>

From ctrueden at wisc.edu  Tue Nov 23 21:36:46 2010
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Tue, 23 Nov 2010 21:36:46 -0600
Subject: [ImageJ-devel] Refactoring of Ijx to remove ij package conflicts
In-Reply-To: <4CEBF603.1060802@mbl.edu>
References: <4CEBF603.1060802@mbl.edu>
Message-ID: <AANLkTi=VUAg==LcviqoDuKvwRJ7rXq=ZJkEAbDAaR+jM@mail.gmail.com>

Hi Grant,

I (almost) have completed a refactoring of Ijx to remove any conflicting
> references to the package 'ij'.
>

Great. I have added ImageJX to the umbrella POM, which means it will compile
along with several other modules if "mvn" is run from the toplevel
directory. Please note: this means that the Hudson will now include IJX in
the automated compile-and-test process?which means we will be notified any
time a commit to ijx happens that breaks the build.

-Curtis

On Tue, Nov 23, 2010 at 11:12 AM, Grant B. Harris <gharris at mbl.edu> wrote:

>  All --
>
> I (almost) have completed a refactoring of Ijx to remove any conflicting
> references to the package 'ij'.
>
> All of the code in the ij package was moved to the ijx package.  I also
> reorganized (changed the location of) a variety of classes (mostly from
> ij/plugins) to better reflect the functional groupings.  There are a number
> of things I still need to move.
>
> It compiles, but where there a references to classes by string (as is the
> case for many command/plugin calls) the refactoring did not make the
> changes, so I need to manually go through and fix these.  (Our new plugin
> discover mechanism will, hopefully, eliiminate these 'hard' string
> references.)
>
> Here is a view of the current arrangement:
>
>
>
> -- Grant
>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagejdev.org
> http://imagejdev.org/mailman/listinfo/imagej-devel
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101123/526eee75/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: image/png
Size: 8368 bytes
Desc: not available
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101123/526eee75/attachment.png>

From ctrueden at wisc.edu  Tue Nov 23 22:04:28 2010
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Tue, 23 Nov 2010 22:04:28 -0600
Subject: [ImageJ-devel] Simple plugin discovery logic
In-Reply-To: <4CEBC027.4090607@broadinstitute.org>
References: <AANLkTim7j3VRZ9Qi8Dazx-97y_X2Q31wh8oDc1196CYh@mail.gmail.com>
	<4CEBC027.4090607@broadinstitute.org>
Message-ID: <AANLkTinn7KN5t33gByXJX3U5wKm8FKA7Z06r4Zw9gZ2p@mail.gmail.com>

Hi Lee,

Looks like a good start. Is NetBeans going to be required for IJ2? It would
> be nice, esp. for CellProfiler, to have some static method that would find
> the plugin finders, but if NetBeans is in, the code to do so ourselves does
> not look too complex.
>

"NetBeans" is actually a collection of quite a few different modules. We
will be using them piecemeal in places where it makes sense. For the ImageJ2
GUI, we will likely use the NetBeans RCP as a whole, but it will not be
required to use ImageJ as a library.

In the case of plugin discovery, we are using the NetBeans Lookup module to
access all plugin finders. This takes the form of a simple method call:
  Lookup.getDefault().lookupAll(PluginFinder.class).

Alternately, you can instantiate specific PluginFinder implementations and
ask them to discover plugins with something like:
  List<PluginEntry> plugins = new ArrayList<PluginEntry>();
  new Ij1PluginFinder().findPlugins(plugins);

But ultimately there will indeed be a simple static method that returns all
the plugins found by all registered plugin finders. This will likely be the
easiest method for external applications like CellProfiler to use.

-Curtis

On Tue, Nov 23, 2010 at 7:22 AM, Lee Kamentsky <leek at broadinstitute.org>wrote:

>  Hi Curtis,
>
> Looks like a good start. Is NetBeans going to be required for IJ2? It would
> be nice, esp. for CellProfiler, to have some static method that would find
> the plugin finders, but if NetBeans is in, the code to do so ourselves does
> not look too complex.
>
> --Lee
>
>
> On 11/22/2010 6:52 PM, Curtis Rueden wrote:
>
> Hi Grant et. al,
>
> Today Rick & I added a simple plugin discovery mechanism to the ImageJ2
> codebase. This is a work in progress. The idea is to have an interface,
> PluginFinder, that provides a method, findPlugins(List<PluginEntry>
> plugins), for populating a list with discovered plugins. The IJ1
> compatibility layer can have an Ij1PluginFinder that discovers IJ1 plugins,
> and the ImageJ2 code can have an Ij2PluginFinder (or whatever) for
> discovering any additional plugins of various types.
>
> Here is what we have so far:
>
> In ij2-common:
>   + imagej.plugin.PluginEntry -- very simple data structure for a single
> plugin entry, including plugin class name, and associated menu entry
>   + imagej.plugin.PluginFinder -- interface for anything capable of
> discovering ImageJ plugins -- has one method: findPlugins(List<PluginEntry>
> plugins)
>
> In ij1-bridge:
>   + imagej.ij1bridge.plugin.Ij1PluginFinder -- implementation for
> discovering ImageJ 1.x plugins -- delegates to ij.Menus where possible
>
> In ijx:
>   + ijx.plugin.IjxPluginFinder -- currently a dummy implementation that
> just populates a single fake plugin entry -- eventually will discover ImageJ
> 2.x plugins
>
> Tester class (in ijx):
>   + ijx.plugin.PluginDiscovery -- obtains all implementations of
> PluginFinder interface (using NB Lookup), discovers all available plugins
> and prints out the list
>
> Again, this is a work in progress. The goal is have a very simple,
> encapsulated way of querying for plugins without any assumptions about GUIs,
> etc. The PluginEntry in particular will need to be fleshed out with more
> details?e.g., there is no way to express the arg string needed by many IJ1
> plugins/commands, no way to link an image icon for use with a toolbar, and
> no way to express order for menus or toolbars.
>
> More later; comments welcome any time.
>
> -Curtis
>
>
> _______________________________________________
> ImageJ-devel mailing listImageJ-devel at imagejdev.orghttp://imagejdev.org/mailman/listinfo/imagej-devel
>
>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagejdev.org
> http://imagejdev.org/mailman/listinfo/imagej-devel
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101123/58d80f6a/attachment.html>

From ctrueden at wisc.edu  Wed Nov 24 15:09:35 2010
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Wed, 24 Nov 2010 15:09:35 -0600
Subject: [ImageJ-devel] ImgLib automated builds
Message-ID: <AANLkTinxb5=jU8M3NNxdcUXHRdP+des=JEuC78a5J1Df@mail.gmail.com>

Hello ImgLib lovers,

We have added ImgLib to the ImageJDev Hudson continuous integration system
at:
http://dev.imagejdev.org:8080/job/ImgLib/

This means that whenever anyone pushes a change to the master branch, Hudson
will automatically try to build the ImgLib projects, and send an email if
the build breaks.

It also publishes Javadoc online at:
http://dev.imagejdev.org:8080/job/ImgLib/javadoc/

And publishes the last successful build artifacts:
http://dev.imagejdev.org:8080/job/ImgLib/lastSuccessfulBuild/artifact/imglib/target/imglib-2.0-SNAPSHOT.jar
http://dev.imagejdev.org:8080/job/ImgLib/lastSuccessfulBuild/artifact/imglib-algorithms/target/imglib-algorithms-2.0-SNAPSHOT.jar
http://dev.imagejdev.org:8080/job/ImgLib/lastSuccessfulBuild/artifact/imglib-ij/target/imglib-ij-2.0-SNAPSHOT.jar
http://dev.imagejdev.org:8080/job/ImgLib/lastSuccessfulBuild/artifact/imglib-io/target/imglib-io-2.0-SNAPSHOT.jar

And publishes a Maven report site for each component:
http://dev.imagejdev.org:8080/job/ImgLib/lastSuccessfulBuild/artifact/imglib/target/site/index.html
http://dev.imagejdev.org:8080/job/ImgLib/lastSuccessfulBuild/artifact/imglib-algorithms/target/site/index.html
http://dev.imagejdev.org:8080/job/ImgLib/lastSuccessfulBuild/artifact/imglib-ij/target/site/index.html
http://dev.imagejdev.org:8080/job/ImgLib/lastSuccessfulBuild/artifact/imglib-io/target/site/index.html

These are all linked from the (currently very minimal) ImageJDev ImgLib page
at:
http://imagejdev.org/imglib

If you would like to be added to the email notification list for the builds,
or have any other questions, please let us know.

To all U.S. folks: Happy Thanksgiving. :-)

-Curtis
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101124/60967d29/attachment.html>

From grislis at wisc.edu  Wed Nov 24 15:16:14 2010
From: grislis at wisc.edu (Aivar Grislis)
Date: Wed, 24 Nov 2010 15:16:14 -0600
Subject: [ImageJ-devel] IJ2 Plugin Proposal
Message-ID: <4CED809E.105@wisc.edu>

I'm proposing a more dynamic way of running plugins and sending images 
from one plugin to another that would lend itself to workflows and 
pipelines.  This could also be used within plugins and within IJ2 as an 
architectural building block to chain chunks of image processing code 
together.

Basically I propose that a plugin can have multiple named input and 
output images and that whenever an output image is ready it is passed on 
to become the input image to the next plugin in the chain.

IMPETUS

I feel the need for this from a couple of plugins I have worked on 
(actually my only plugins!).

I worked on a Deep Zoom plugin.  This takes a huge image, tiles it, then 
the tiles are written out in a particular directory/file name 
structure.  Next we halve the original image and repeat, until the image 
gets halved to a miniscule size.

While working on this plugin I thought about writing the code to halve 
the image and to tile it in the most general-purpose, reusable way.  
Also I wanted to be memory-efficient: I didn't want to just make all the 
halves, then go through them and make all the tiles, then go throughout 
those and write out all the files.

What I came up with at that time was a chainable plugin.  In pseudo-code:

interface IChainablePlugin {

   // chains one plugin to next; called from outside the plugin
   public chain(IChainablePlugin plugin);

   // gets the input image; called from within plugin
   Image get();

   // puts the output image; called from within plugin
   put(Image image);
}

An abstract base class kept track of the next, chained plugin instance 
and handed off the output image to that next plugin, using the same thread.

I wrote a chainable plugin class to halve the image, one to tile it, and 
had a third one that was just an inner class to my Deep Zoom plugin that 
handled the specifics of writing out the tiled image files.  Presumably 
the first two classes would be reusable code and the third was just 
specific to Deep Zoom.

Obviously as-is this is limited to one input and one output.  I started 
thinking about having an image dispatcher class that would keep track of 
which images a plugin required and hand them off from one plugin to another.

I'll just briefly mention the SLIM plugin I am working on.  Since the 
SLIM fitting process is time consuming I display a very coarse colorized 
version of the fitted results that is refined as the fit progresses.  So 
there I want to pass on my output image before the plugin finishes and I 
want to put out successive versions of this image.  This is similar to 
my wanting to process the individual tiles before the whole image is tiled.

PROPOSAL

We could label the input and output images using Java annotations.  
(Note that the current Declarative Plugin annotations allow one to label 
input and output image member variables but the outputs are harvested 
only once the plugin is finished. There is no way to put out an output 
image within the plugin code.)

Here is some sample code for what I'm proposing:

"@Input
@Output({ @Img(Plugin1.BLUE), @Img(Plugin1.GREEN) })
public class Plugin1 extends AbstractPlugin {
   public static final String BLUE = "Blue";
   public static final String GREEN = "Green";

   void process() {
       Image image = get();
       put(BLUE, image);
       put(GREEN, image);
   }
}"

Here the annotations result in an input name set of ["Default"] and an 
output set of ["Blue","Green"].  (If there are no parameters the default 
name is used.)  Of course, there could also be named input images (i.e. 
"get(ORANGE)") or default output images (i.e. "put()").

Instances of plugins such as these could be chained together:
   plugin1.chain(Plugin1.BLUE, plugin2);  // named output goes to 
default input
   plugin1.chain(Plugin1.GREEN, plugin2, Plugin2.ORANGE); // named 
output goes to named input
   plugin2.chain(plugin3); // default output goes to default input
   plugin2.chain(plugin4, Plugin4.PURPLE); // default output goes to 
named input

Using strings as identifiers might seem less than ideal.  However, the 
strings are unique to the plugin they belong to.  If they are specified 
as static constants, as above, that would prevent spelling mismatches.  
Once a chain of plugins is established and before we run it we could 
make sure that all of the inputs have been chained to.  We can detect if 
a plugin asks for an input or output that has not been annotated and 
warn the plugin programmer.

Of course, once we have named input and output images we could build on 
that and give the IJ end-user ways to link up plugins in workflows or 
pipelines, a la CellProfiler.

I have a prototype implementation of this, so the sample code above 
works, details upon request.

Aivar

(P.S. It's the Thanksgiving holiday in the U.S. so you might not hear 
from us until Monday.  Happy Thanksgiving!)










From gharris at mbl.edu  Wed Nov 24 15:19:06 2010
From: gharris at mbl.edu (Grant B. Harris)
Date: Wed, 24 Nov 2010 16:19:06 -0500
Subject: [ImageJ-devel] ImgLib automated builds
In-Reply-To: <AANLkTinxb5=jU8M3NNxdcUXHRdP+des=JEuC78a5J1Df@mail.gmail.com>
References: <AANLkTinxb5=jU8M3NNxdcUXHRdP+des=JEuC78a5J1Df@mail.gmail.com>
Message-ID: <4CED814A.9060508@mbl.edu>

Excellent!

And thank you, Curtis, for all your work on the git, svn, Maven, Nexus, 
Hudson infrastructure and adapting all the projects and dependencies 
over.  This is essential stuff that creates a solid development 
foundation.   Cheers.

  - Grant





From leek at broadinstitute.org  Wed Nov 24 15:31:11 2010
From: leek at broadinstitute.org (Lee Kamentsky)
Date: Wed, 24 Nov 2010 16:31:11 -0500
Subject: [ImageJ-devel] IJ2 Plugin Proposal
In-Reply-To: <4CED809E.105@wisc.edu>
References: <4CED809E.105@wisc.edu>
Message-ID: <4CED841F.4080808@broadinstitute.org>

Hi Aivar,
I'm sort of doing this with the @Parameter attributes now and 
CellProfiler. I use reflection to get the class of the tagged variable. 
The plugin's image inputs are variables of type ImagePlus (and probably 
later, imglib's Image) that are not marked with output=true and the 
outputs are the ones with output=true. Perhaps it's a bit of a hack to 
infer that something is intended to be used as an image by its class 
type, but that's what I did; the other possibility would be to indicate 
that it is an image explicitly in @Parameter.

CellProfiler works beautifully with this - maybe Curtis can show you how 
it does with ImageJ plugins.

I can imagine writing your tool (or using something like Knime) with the 
current infrastructure. You have some sort of hookup gui (and Knime does 
this for you) that allows you to attach image inputs to outputs and it's 
up to the tool to figure out when a plugin's inputs are ready.

--Lee

On 11/24/2010 4:16 PM, Aivar Grislis wrote:
> I'm proposing a more dynamic way of running plugins and sending images 
> from one plugin to another that would lend itself to workflows and 
> pipelines.  This could also be used within plugins and within IJ2 as 
> an architectural building block to chain chunks of image processing 
> code together.
>
> Basically I propose that a plugin can have multiple named input and 
> output images and that whenever an output image is ready it is passed 
> on to become the input image to the next plugin in the chain.
>
> IMPETUS
>
> I feel the need for this from a couple of plugins I have worked on 
> (actually my only plugins!).
>
> I worked on a Deep Zoom plugin.  This takes a huge image, tiles it, 
> then the tiles are written out in a particular directory/file name 
> structure.  Next we halve the original image and repeat, until the 
> image gets halved to a miniscule size.
>
> While working on this plugin I thought about writing the code to halve 
> the image and to tile it in the most general-purpose, reusable way.  
> Also I wanted to be memory-efficient: I didn't want to just make all 
> the halves, then go through them and make all the tiles, then go 
> throughout those and write out all the files.
>
> What I came up with at that time was a chainable plugin.  In pseudo-code:
>
> interface IChainablePlugin {
>
>   // chains one plugin to next; called from outside the plugin
>   public chain(IChainablePlugin plugin);
>
>   // gets the input image; called from within plugin
>   Image get();
>
>   // puts the output image; called from within plugin
>   put(Image image);
> }
>
> An abstract base class kept track of the next, chained plugin instance 
> and handed off the output image to that next plugin, using the same 
> thread.
>
> I wrote a chainable plugin class to halve the image, one to tile it, 
> and had a third one that was just an inner class to my Deep Zoom 
> plugin that handled the specifics of writing out the tiled image 
> files.  Presumably the first two classes would be reusable code and 
> the third was just specific to Deep Zoom.
>
> Obviously as-is this is limited to one input and one output.  I 
> started thinking about having an image dispatcher class that would 
> keep track of which images a plugin required and hand them off from 
> one plugin to another.
>
> I'll just briefly mention the SLIM plugin I am working on.  Since the 
> SLIM fitting process is time consuming I display a very coarse 
> colorized version of the fitted results that is refined as the fit 
> progresses.  So there I want to pass on my output image before the 
> plugin finishes and I want to put out successive versions of this 
> image.  This is similar to my wanting to process the individual tiles 
> before the whole image is tiled.
>
> PROPOSAL
>
> We could label the input and output images using Java annotations.  
> (Note that the current Declarative Plugin annotations allow one to 
> label input and output image member variables but the outputs are 
> harvested only once the plugin is finished. There is no way to put out 
> an output image within the plugin code.)
>
> Here is some sample code for what I'm proposing:
>
> "@Input
> @Output({ @Img(Plugin1.BLUE), @Img(Plugin1.GREEN) })
> public class Plugin1 extends AbstractPlugin {
>   public static final String BLUE = "Blue";
>   public static final String GREEN = "Green";
>
>   void process() {
>       Image image = get();
>       put(BLUE, image);
>       put(GREEN, image);
>   }
> }"
>
> Here the annotations result in an input name set of ["Default"] and an 
> output set of ["Blue","Green"].  (If there are no parameters the 
> default name is used.)  Of course, there could also be named input 
> images (i.e. "get(ORANGE)") or default output images (i.e. "put()").
>
> Instances of plugins such as these could be chained together:
>   plugin1.chain(Plugin1.BLUE, plugin2);  // named output goes to 
> default input
>   plugin1.chain(Plugin1.GREEN, plugin2, Plugin2.ORANGE); // named 
> output goes to named input
>   plugin2.chain(plugin3); // default output goes to default input
>   plugin2.chain(plugin4, Plugin4.PURPLE); // default output goes to 
> named input
>
> Using strings as identifiers might seem less than ideal.  However, the 
> strings are unique to the plugin they belong to.  If they are 
> specified as static constants, as above, that would prevent spelling 
> mismatches.  Once a chain of plugins is established and before we run 
> it we could make sure that all of the inputs have been chained to.  We 
> can detect if a plugin asks for an input or output that has not been 
> annotated and warn the plugin programmer.
>
> Of course, once we have named input and output images we could build 
> on that and give the IJ end-user ways to link up plugins in workflows 
> or pipelines, a la CellProfiler.
>
> I have a prototype implementation of this, so the sample code above 
> works, details upon request.
>
> Aivar
>
> (P.S. It's the Thanksgiving holiday in the U.S. so you might not hear 
> from us until Monday.  Happy Thanksgiving!)
>
>
>
>
>
>
>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagejdev.org
> http://imagejdev.org/mailman/listinfo/imagej-devel




From grislis at wisc.edu  Wed Nov 24 15:31:44 2010
From: grislis at wisc.edu (Aivar Grislis)
Date: Wed, 24 Nov 2010 15:31:44 -0600
Subject: [ImageJ-devel] IJ2 Plugin Proposal
Message-ID: <4CED8440.5010408@wisc.edu>

I also just sent this to ImageJX, forgot to cc: them originally.

-------- Original Message --------
Subject: 	IJ2 Plugin Proposal
Date: 	Wed, 24 Nov 2010 15:16:14 -0600
From: 	Aivar Grislis <grislis at wisc.edu>
To: 	imagej-devel at imagejdev.org



I'm proposing a more dynamic way of running plugins and sending images
from one plugin to another that would lend itself to workflows and
pipelines.  This could also be used within plugins and within IJ2 as an
architectural building block to chain chunks of image processing code
together.

Basically I propose that a plugin can have multiple named input and
output images and that whenever an output image is ready it is passed on
to become the input image to the next plugin in the chain.

IMPETUS

I feel the need for this from a couple of plugins I have worked on
(actually my only plugins!).

I worked on a Deep Zoom plugin.  This takes a huge image, tiles it, then
the tiles are written out in a particular directory/file name
structure.  Next we halve the original image and repeat, until the image
gets halved to a miniscule size.

While working on this plugin I thought about writing the code to halve
the image and to tile it in the most general-purpose, reusable way.
Also I wanted to be memory-efficient: I didn't want to just make all the
halves, then go through them and make all the tiles, then go throughout
those and write out all the files.

What I came up with at that time was a chainable plugin.  In pseudo-code:

interface IChainablePlugin {

   // chains one plugin to next; called from outside the plugin
   public chain(IChainablePlugin plugin);

   // gets the input image; called from within plugin
   Image get();

   // puts the output image; called from within plugin
   put(Image image);
}

An abstract base class kept track of the next, chained plugin instance
and handed off the output image to that next plugin, using the same thread.

I wrote a chainable plugin class to halve the image, one to tile it, and
had a third one that was just an inner class to my Deep Zoom plugin that
handled the specifics of writing out the tiled image files.  Presumably
the first two classes would be reusable code and the third was just
specific to Deep Zoom.

Obviously as-is this is limited to one input and one output.  I started
thinking about having an image dispatcher class that would keep track of
which images a plugin required and hand them off from one plugin to another.

I'll just briefly mention the SLIM plugin I am working on.  Since the
SLIM fitting process is time consuming I display a very coarse colorized
version of the fitted results that is refined as the fit progresses.  So
there I want to pass on my output image before the plugin finishes and I
want to put out successive versions of this image.  This is similar to
my wanting to process the individual tiles before the whole image is tiled.

PROPOSAL

We could label the input and output images using Java annotations.
(Note that the current Declarative Plugin annotations allow one to label
input and output image member variables but the outputs are harvested
only once the plugin is finished. There is no way to put out an output
image within the plugin code.)

Here is some sample code for what I'm proposing:

"@Input
@Output({ @Img(Plugin1.BLUE), @Img(Plugin1.GREEN) })
public class Plugin1 extends AbstractPlugin {
   public static final String BLUE = "Blue";
   public static final String GREEN = "Green";

   void process() {
       Image image = get();
       put(BLUE, image);
       put(GREEN, image);
   }
}"

Here the annotations result in an input name set of ["Default"] and an
output set of ["Blue","Green"].  (If there are no parameters the default
name is used.)  Of course, there could also be named input images (i.e.
"get(ORANGE)") or default output images (i.e. "put()").

Instances of plugins such as these could be chained together:
   plugin1.chain(Plugin1.BLUE, plugin2);  // named output goes to
default input
   plugin1.chain(Plugin1.GREEN, plugin2, Plugin2.ORANGE); // named
output goes to named input
   plugin2.chain(plugin3); // default output goes to default input
   plugin2.chain(plugin4, Plugin4.PURPLE); // default output goes to
named input

Using strings as identifiers might seem less than ideal.  However, the
strings are unique to the plugin they belong to.  If they are specified
as static constants, as above, that would prevent spelling mismatches.
Once a chain of plugins is established and before we run it we could
make sure that all of the inputs have been chained to.  We can detect if
a plugin asks for an input or output that has not been annotated and
warn the plugin programmer.

Of course, once we have named input and output images we could build on
that and give the IJ end-user ways to link up plugins in workflows or
pipelines, a la CellProfiler.

I have a prototype implementation of this, so the sample code above
works, details upon request.

Aivar

(P.S. It's the Thanksgiving holiday in the U.S. so you might not hear
from us until Monday.  Happy Thanksgiving!)








-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101124/2e7f47ae/attachment.html>

From grislis at wisc.edu  Wed Nov 24 16:45:43 2010
From: grislis at wisc.edu (Aivar Grislis)
Date: Wed, 24 Nov 2010 16:45:43 -0600
Subject: [ImageJ-devel] IJ2 Plugin Proposal
In-Reply-To: <4CED841F.4080808@broadinstitute.org>
References: <4CED809E.105@wisc.edu> <4CED841F.4080808@broadinstitute.org>
Message-ID: <4CED9597.4030800@wisc.edu>

Hi Lee,

What I want to do differently is pass on the output image from a plugin 
whenever its ready.  You won't get this externally by noting that a 
member variable is annotated, the plugin has to make a call to say this 
output image is done.  In this way the plugin could produce a series of 
images one by one (rather than having to pass back an array of output 
images).

I looked at KNIME, Pipeline Pilot, and MyGrid Taverna, which were all 
mentioned in a December 2009 ImageJX discussion.  They seem overblown to 
me for what we need.  There's also licensing issues: GPL, odd 
proprietary eval/yearly lease, LPGL respectively.  Some of them involve 
authoring XML files, etc.  The annotation scheme is very lightweight.

To me the GUI drag & drop UI is mostly eye candy.  I like how 
CellProfiler sets up  workflows.  You should be able to author workflows 
by example:  you load an image, run a plugin, run another plugin, and 
that becomes a workflow.  We save the plugins used, there are inputs, 
chained output/inputs, and outputs.

Aivar



On 11/24/10 3:31 PM, Lee Kamentsky wrote:
> Hi Aivar,
> I'm sort of doing this with the @Parameter attributes now and 
> CellProfiler. I use reflection to get the class of the tagged 
> variable. The plugin's image inputs are variables of type ImagePlus 
> (and probably later, imglib's Image) that are not marked with 
> output=true and the outputs are the ones with output=true. Perhaps 
> it's a bit of a hack to infer that something is intended to be used as 
> an image by its class type, but that's what I did; the other 
> possibility would be to indicate that it is an image explicitly in 
> @Parameter.
>
> CellProfiler works beautifully with this - maybe Curtis can show you 
> how it does with ImageJ plugins.
>
> I can imagine writing your tool (or using something like Knime) with 
> the current infrastructure. You have some sort of hookup gui (and 
> Knime does this for you) that allows you to attach image inputs to 
> outputs and it's up to the tool to figure out when a plugin's inputs 
> are ready.
>
> --Lee
>
> On 11/24/2010 4:16 PM, Aivar Grislis wrote:
>> I'm proposing a more dynamic way of running plugins and sending 
>> images from one plugin to another that would lend itself to workflows 
>> and pipelines.  This could also be used within plugins and within IJ2 
>> as an architectural building block to chain chunks of image 
>> processing code together.
>>
>> Basically I propose that a plugin can have multiple named input and 
>> output images and that whenever an output image is ready it is passed 
>> on to become the input image to the next plugin in the chain.
>>
>> IMPETUS
>>
>> I feel the need for this from a couple of plugins I have worked on 
>> (actually my only plugins!).
>>
>> I worked on a Deep Zoom plugin.  This takes a huge image, tiles it, 
>> then the tiles are written out in a particular directory/file name 
>> structure.  Next we halve the original image and repeat, until the 
>> image gets halved to a miniscule size.
>>
>> While working on this plugin I thought about writing the code to 
>> halve the image and to tile it in the most general-purpose, reusable 
>> way.  Also I wanted to be memory-efficient: I didn't want to just 
>> make all the halves, then go through them and make all the tiles, 
>> then go throughout those and write out all the files.
>>
>> What I came up with at that time was a chainable plugin.  In 
>> pseudo-code:
>>
>> interface IChainablePlugin {
>>
>>   // chains one plugin to next; called from outside the plugin
>>   public chain(IChainablePlugin plugin);
>>
>>   // gets the input image; called from within plugin
>>   Image get();
>>
>>   // puts the output image; called from within plugin
>>   put(Image image);
>> }
>>
>> An abstract base class kept track of the next, chained plugin 
>> instance and handed off the output image to that next plugin, using 
>> the same thread.
>>
>> I wrote a chainable plugin class to halve the image, one to tile it, 
>> and had a third one that was just an inner class to my Deep Zoom 
>> plugin that handled the specifics of writing out the tiled image 
>> files.  Presumably the first two classes would be reusable code and 
>> the third was just specific to Deep Zoom.
>>
>> Obviously as-is this is limited to one input and one output.  I 
>> started thinking about having an image dispatcher class that would 
>> keep track of which images a plugin required and hand them off from 
>> one plugin to another.
>>
>> I'll just briefly mention the SLIM plugin I am working on.  Since the 
>> SLIM fitting process is time consuming I display a very coarse 
>> colorized version of the fitted results that is refined as the fit 
>> progresses.  So there I want to pass on my output image before the 
>> plugin finishes and I want to put out successive versions of this 
>> image.  This is similar to my wanting to process the individual tiles 
>> before the whole image is tiled.
>>
>> PROPOSAL
>>
>> We could label the input and output images using Java annotations.  
>> (Note that the current Declarative Plugin annotations allow one to 
>> label input and output image member variables but the outputs are 
>> harvested only once the plugin is finished. There is no way to put 
>> out an output image within the plugin code.)
>>
>> Here is some sample code for what I'm proposing:
>>
>> "@Input
>> @Output({ @Img(Plugin1.BLUE), @Img(Plugin1.GREEN) })
>> public class Plugin1 extends AbstractPlugin {
>>   public static final String BLUE = "Blue";
>>   public static final String GREEN = "Green";
>>
>>   void process() {
>>       Image image = get();
>>       put(BLUE, image);
>>       put(GREEN, image);
>>   }
>> }"
>>
>> Here the annotations result in an input name set of ["Default"] and 
>> an output set of ["Blue","Green"].  (If there are no parameters the 
>> default name is used.)  Of course, there could also be named input 
>> images (i.e. "get(ORANGE)") or default output images (i.e. "put()").
>>
>> Instances of plugins such as these could be chained together:
>>   plugin1.chain(Plugin1.BLUE, plugin2);  // named output goes to 
>> default input
>>   plugin1.chain(Plugin1.GREEN, plugin2, Plugin2.ORANGE); // named 
>> output goes to named input
>>   plugin2.chain(plugin3); // default output goes to default input
>>   plugin2.chain(plugin4, Plugin4.PURPLE); // default output goes to 
>> named input
>>
>> Using strings as identifiers might seem less than ideal.  However, 
>> the strings are unique to the plugin they belong to.  If they are 
>> specified as static constants, as above, that would prevent spelling 
>> mismatches.  Once a chain of plugins is established and before we run 
>> it we could make sure that all of the inputs have been chained to.  
>> We can detect if a plugin asks for an input or output that has not 
>> been annotated and warn the plugin programmer.
>>
>> Of course, once we have named input and output images we could build 
>> on that and give the IJ end-user ways to link up plugins in workflows 
>> or pipelines, a la CellProfiler.
>>
>> I have a prototype implementation of this, so the sample code above 
>> works, details upon request.
>>
>> Aivar
>>
>> (P.S. It's the Thanksgiving holiday in the U.S. so you might not hear 
>> from us until Monday.  Happy Thanksgiving!)
>>
>>
>>
>>
>>
>>
>>
>>
>> _______________________________________________
>> ImageJ-devel mailing list
>> ImageJ-devel at imagejdev.org
>> http://imagejdev.org/mailman/listinfo/imagej-devel
>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagejdev.org
> http://imagejdev.org/mailman/listinfo/imagej-devel




From Johannes.Schindelin at gmx.de  Wed Nov 24 18:26:23 2010
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Thu, 25 Nov 2010 01:26:23 +0100 (CET)
Subject: [ImageJ-devel] ImgLib automated builds
In-Reply-To: <AANLkTinxb5=jU8M3NNxdcUXHRdP+des=JEuC78a5J1Df@mail.gmail.com>
References: <AANLkTinxb5=jU8M3NNxdcUXHRdP+des=JEuC78a5J1Df@mail.gmail.com>
Message-ID: <alpine.DEB.1.00.1011250123580.3605@pacific.mpi-cbg.de>

Hi Curtis,

On Wed, 24 Nov 2010, Curtis Rueden wrote:

> This means that whenever anyone pushes a change to the master branch, 
> Hudson will automatically try to build the ImgLib projects, and send an 
> email if the build breaks.

That is a fantastic feature! Especially since it only touches the 'master' 
branch, and you're free to develop topic branches (even rewriting the 
commits) until they are really ready.

> And publishes the last successful build artifacts:

I am looking forward to you showing me how this works, so that we can use 
such a feature to replace Fiji's "precompiled/" directory.

Thanks!
Dscho




From dimiterpp at gmail.com  Sun Nov 28 18:35:31 2010
From: dimiterpp at gmail.com (Dimiter Prodanov)
Date: Mon, 29 Nov 2010 01:35:31 +0100
Subject: [ImageJ-devel] Imglib benchmarks
In-Reply-To: <AANLkTikq1w7eTtiaK=qsjkuLFVXQNDF6DEuXfnpZs6e6@mail.gmail.com>
References: <AANLkTikq1w7eTtiaK=qsjkuLFVXQNDF6DEuXfnpZs6e6@mail.gmail.com>
Message-ID: <AANLkTinWTFg9kLYubvVK2oLN9x+aiyL1HkV+hz_ureRC@mail.gmail.com>

Hi Curtis,

Thank you very much for the effort! Do you have other meaningful benchmarks?
In the mean while I have evolved PixLib and now I am ready to
demonstrate basic Mathematical morphology in D-dimensions.

best regards,

Dimiter

On Mon, Nov 15, 2010 at 6:36 PM, Curtis Rueden <ctrueden at wisc.edu> wrote:
> Hi everyone,
>
> For those interested, we have posted some benchmarks comparing ImageJ,
> imglib (http://pacific.mpi-cbg.de/wiki/index.php/Imglib) and PixLib
> (http://sourceforge.net/projects/pixlib/) with raw byte array performance:
>
> ? http://imagejdev.org/imglib-benchmarks
>
> Comments and questions welcome!
>
> Regards,
> Curtis
>
> --
> You received this message because you are subscribed to the Google Groups
> "ImageJX" group.
> To post to this group, send email to imagejx at googlegroups.com.
> To unsubscribe from this group, send email to
> imagejx+unsubscribe at googlegroups.com.
> For more options, visit this group at
> http://groups.google.com/group/imagejx?hl=en.
>



From ctrueden at wisc.edu  Mon Nov 29 15:39:57 2010
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Mon, 29 Nov 2010 15:39:57 -0600
Subject: [ImageJ-devel] Imglib benchmarks
In-Reply-To: <AANLkTinWTFg9kLYubvVK2oLN9x+aiyL1HkV+hz_ureRC@mail.gmail.com>
References: <AANLkTikq1w7eTtiaK=qsjkuLFVXQNDF6DEuXfnpZs6e6@mail.gmail.com>
	<AANLkTinWTFg9kLYubvVK2oLN9x+aiyL1HkV+hz_ureRC@mail.gmail.com>
Message-ID: <AANLkTi=-b9pRbd8K8M6CF0HePaGx-8kjUdFNW4s7jh=o@mail.gmail.com>

 Hi Dimiter,

Thank you very much for the effort! Do you have other meaningful benchmarks?
>

Not yet. Do you have any suggestions? Now that I have worked out how to use
Flot to generate charts on the web site, I could set up additional charts
pretty easily.

In the mean while I have evolved PixLib and now I am ready to
> demonstrate basic Mathematical morphology in D-dimensions.
>

Great. If the time performance of PixLib changes, let me know and I can
rerun the benchmark and update the numbers.

-Curtis

On Sun, Nov 28, 2010 at 6:35 PM, Dimiter Prodanov <dimiterpp at gmail.com>wrote:

> Hi Curtis,
>
> Thank you very much for the effort! Do you have other meaningful
> benchmarks?
> In the mean while I have evolved PixLib and now I am ready to
> demonstrate basic Mathematical morphology in D-dimensions.
>
> best regards,
>
> Dimiter
>
> On Mon, Nov 15, 2010 at 6:36 PM, Curtis Rueden <ctrueden at wisc.edu> wrote:
> > Hi everyone,
> >
> > For those interested, we have posted some benchmarks comparing ImageJ,
> > imglib (http://pacific.mpi-cbg.de/wiki/index.php/Imglib) and PixLib
> > (http://sourceforge.net/projects/pixlib/) with raw byte array
> performance:
> >
> >   http://imagejdev.org/imglib-benchmarks
> >
> > Comments and questions welcome!
> >
> > Regards,
> > Curtis
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101129/f4163b83/attachment.html>

From rwlentz at wisc.edu  Tue Nov 30 14:09:03 2010
From: rwlentz at wisc.edu (Rick Lentz)
Date: Tue, 30 Nov 2010 14:09:03 -0600
Subject: [ImageJ-devel] dev.loci.wisc.edu will be down for the next 30
	minutes
Message-ID: <AANLkTikHUMP7ZCpKk0jbKPm9Ox6-kM9Rb9PP2zxYzH31@mail.gmail.com>

Greetings,

  Contact Heath Skarlupka @ helpdesk at bocklabs.wisc.edu for more details.

Sincerely,

Rick Lentz
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20101130/f4df3606/attachment.html>

