From christophe.leterrier at gmail.com  Mon Jul  2 08:18:59 2012
From: christophe.leterrier at gmail.com (Christophe Leterrier)
Date: Mon, 2 Jul 2012 15:18:59 +0200
Subject: [ImageJ-devel] Running a Java7-only ImageJ plugin under OSX
Message-ID: <CALmP0E+cOFb9qWeh+ixooepjbdF2Y3hnOzv-2idhPp5f3827OA@mail.gmail.com>

Hi,

Sorry for the duplicates, I'm a bit lost as regards to merging and
consolidations in the Fiji / ImageJ / ImageJdevel mailing lists. Did
Fiji-devel merge into ImageJ-devel in the end ? What about
ImageJ/Fiji-users ?


I come to my point. I would like to test a super-resolution plugin, GraspJ,
under OSX :
http://code.google.com/p/graspj/

It is a nice super-resolution package for peak detection, fitting (using
GPU computing), image reconstruction (using correct uncertainty-sized
gaussian spots) and drift correction without fiduciary markers (using
cross-correlation between subsets of the data). It requires Java 7 and
OpenCL. I saw it presented by its author, Norman Brede, it is his work as
an undergraduate at ICFO in Barcelona if I understood correctly.

The problem is, I can't get ImageJ to use Java 7 under OSX. I downloaded
the newest Java SE 7u4 jdk for OSX here:
http://www.oracle.com/technetwork/java/javase/downloads/jdk-7u4-downloads-1591156.html
installed it and selected Java 7 as the first choice in the Java
preferences, but neither Fiji nor ImageJ uses Java 7 when launched (they
use the Java 6 installed on my machine).

Johannes (Schindelin) told me the Fiji launcher for OSX has Java 1.6
hardcoded and doesn't take into account the system-wide Java preferences.
Is it the same for plain ImageJ ? Could I force ImageJ to use Java 7?

Thanks for your help,


Christophe Leterrier
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120702/70b810d2/attachment.html>

From Johannes.Schindelin at gmx.de  Tue Jul  3 22:33:11 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Wed, 4 Jul 2012 05:33:11 +0200 (CEST)
Subject: [ImageJ-devel] Funny menu issue with ImageJ2: a tale of frustration
 and resolution
Message-ID: <alpine.DEB.1.00.1207040532330.32459@s15462909.onlinehome-server.info>

Hi all,

I debugged a funny issue with ImageJ2 on Linux, Java 1.6.0_24, that Curtis
pointed out to me: if you click on the File menu, do _not_ release the
mouse button, and then move to the 'Quit' menu item and release the mouse
button, ImageJ does not execute the QuitProgram plugin. If you click on
"File" (releasing the mouse before going on), it works.

A little Googling suggested that enableInputMethods(false) on the JMenuBar
and/or JMenuItems could fix the problem. It indeed fixes the issue that
MouseMotionListeners would not get any events while the mouse is over the
menus, but it does not fix the issue that the ActionEvent is never fired.

A couple of hours debugging later, I find that calling the Fiji Script
Editor and executing a Beanshell script to inspect the state of the
JMenuBar miraculously fixes the problem.

Further inspection of the state before and after calling the Beanshell
script -- which is now empty because that still miraculously fixes the
problem -- I see that the class MouseGrabber (which is an inner class of
javax.swing.plaf.basic.BasicPopupMenuUI) intercepts the mouse drag event
and does not let Handler (an inner class of
javax.swing.plaf.basic.BasicMenuUI) handle it. For some reason, running a
simple Beanshell script in the Script Editor removes the ChangeListener
that adds the MouseGrabber to the AWTEventListeners and all is fine.
(Note: I was unable to pin down what exactly triggers that; just
instantiating the Beanshell interpreter was not enough, there was also
some overzealous threading necessary, of which the Script Editor has a
lot.)

During my debugging efforts, I also found that the problem really only
occurs if the menu item you release the mouse on is in the clipping area
of the frame owning the JMenuBar. So for me, File>Open... and
File>New>Image... works, and even File>New>Internal Clipboard, but
File>New>External Clipboard (which has no overlap with the ImageJ frame)
does not. It will only trigger if you click on File, release the mouse,
and then walk your way to the menu item.

Alas, after a couple of hours of debugging, I finally had a good idea: try
out Java 1.6.0 Update 33 (I tested with Update 24). And lo and behold, the
issue is fixed.

Sigh,
Dscho

P.S.: Of course, Ubuntu still has 6u24 since that is the latest OpenJDK
version. You gotta love Oracle for their brilliant Open Source strategy!


From birgit.moeller at informatik.uni-halle.de  Thu Jul  5 09:40:53 2012
From: birgit.moeller at informatik.uni-halle.de (Birgit Moeller)
Date: Thu, 05 Jul 2012 16:40:53 +0200
Subject: [ImageJ-devel] Question about Bioformats, Scifio and ImageJ 2.0
Message-ID: <4FF5A775.4000902@informatik.uni-halle.de>

Dear ImageJ 2.0 team!
We try to some prototypical development of some plugins (and something
more) on top of the ImageJ 2.0 core. ImageJ 2.0 comes with lots of jars.
Among them there are the following four

loci-common-4.4-imagej-2.0.0-beta2.1.jar
ome-xml-4.4-imagej-2.0.0-beta2.1.jar
poi-loci-4.4-imagej-2.0.0-beta2.1.jar
scifio-4.4-imagej-2.0.0-beta2.1.jar

They all seem to contain parts of the Bioformats/Loci/OME-XML libraries.
It appears that most of the contents of these libraries have formerly
been part of loci_tools.jar. Our question is in how far these libraries
are compatible (or even equal?) to the other (older?) ones which can be
downloaded from the Bioformats page, i.e. loci_tools.jar.

The thing is that our software is supposed to principally run in ImageJ
1.0 as well as in 2.0. Therefore it would be great if we could rely on
just one version of bioformats, i.e. either loci_tools or the four
libraries from above. Could you give us a hint which option to follow,
i.e. which libraries to use, or should it even be possible to use both
in common?
Is the version shipped with ImageJ 2.0 just a new release of
Bioformats/Loci not yet available on the webpage (...but which will be
available there in near future)?
Or does that version contain ImageJ 2.0 specific changes which make
sense only in the context of ImageJ 2.0, and Bioformats/Loci as
available for ImageJ 1.0 from the webpage will become/remain something
different?

It would be great if you could clarify this a bit.
Thanks a lot and best regards,

 Birgit

------------------------------------------------------------------------
Dr. rer. nat. Birgit Moeller  Pattern Recognition & Bioinformatics
                              Institute of Computer Science
 phone:   +49(0)345-55-24745  Faculty of Natural Sciences III
 fax:     +49(0)345-55-27039  Martin Luther University Halle-Wittenberg
 office:  Room 4.12           Von-Seckendorff-Platz 1
                              06099 Halle / Saale (Germany)

e-mail:  birgit.moeller at informatik.uni-halle.de
www:     http://www.informatik.uni-halle.de/moeller/
------------------------------------------------------------------------


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 262 bytes
Desc: OpenPGP digital signature
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120705/f7fd943c/attachment.pgp>

From ctrueden at wisc.edu  Thu Jul  5 14:34:58 2012
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Thu, 5 Jul 2012 14:34:58 -0500
Subject: [ImageJ-devel] Question about Bioformats, Scifio and ImageJ 2.0
In-Reply-To: <4FF5A775.4000902@informatik.uni-halle.de>
References: <4FF5A775.4000902@informatik.uni-halle.de>
Message-ID: <CADN69ynupbk8=BLpdtiYFHrt_B-52fEM90UpsJKFuUgOaZVeeg@mail.gmail.com>

Hi Birgit,


> loci-common-4.4-imagej-2.0.0-beta2.1.jar
> ome-xml-4.4-imagej-2.0.0-beta2.1.jar
> poi-loci-4.4-imagej-2.0.0-beta2.1.jar
> scifio-4.4-imagej-2.0.0-beta2.1.jar


The "4.4-imagej-2.0.0-beta2.1" release is a version that we built for
ImageJ2, off the latest develop branch of bioformats.git. There are no
special hacks or changes specific to ImageJ2; we simply needed the latest
bugfixes and API changes in order for ImageJ2's file I/O to work properly.
We are hoping to avoid this sort of custom-built version in the future,
after the OME 4.4 release, when we expect to have



They all seem to contain parts of the Bioformats/Loci/OME-XML libraries.
> It appears that most of the contents of these libraries have formerly
> been part of loci_tools.jar. Our question is in how far these libraries
> are compatible (or even equal?) to the other (older?) ones which can be
> downloaded from the Bioformats page, i.e. loci_tools.jar.


The loci_tools.jar is a convenience bundle of bio-formats.jar plus its
dependencies. For details, see:
    http://loci.wisc.edu/bio-formats/bio-formats-java-library#jars

Regarding compatibility, you should be free to mix and match your own
version of the Bio-Formats code, particularly newer versions (since we try
not to break backwards compatibility).


> The thing is that our software is supposed to principally run in ImageJ
> 1.0 as well as in 2.0. Therefore it would be great if we could rely on
> just one version of bioformats, i.e. either loci_tools or the four
> libraries from above.


You should be able to rely on a single version of Bio-Formats without
problems (ideally the latest version).

The question of whether to use loci_tools.jar or bio-formats.jar +
dependencies is up to you; every developer likes to do things his/her own
way. That said, if you want my personal advice, I would suggest structuring
your code as a Maven project, which makes dependency management much easier
and gives your project a standardized build process. Then you don't have to
worry about juggling JARs yourself nearly so much. I would be happy to
elaborate further and/or provide code examples if you are interested; just
let me know.

Regards,
Curtis


On Thu, Jul 5, 2012 at 9:40 AM, Birgit Moeller <
birgit.moeller at informatik.uni-halle.de> wrote:

> Dear ImageJ 2.0 team!
> We try to some prototypical development of some plugins (and something
> more) on top of the ImageJ 2.0 core. ImageJ 2.0 comes with lots of jars.
> Among them there are the following four
>
> loci-common-4.4-imagej-2.0.0-beta2.1.jar
> ome-xml-4.4-imagej-2.0.0-beta2.1.jar
> poi-loci-4.4-imagej-2.0.0-beta2.1.jar
> scifio-4.4-imagej-2.0.0-beta2.1.jar
>
> They all seem to contain parts of the Bioformats/Loci/OME-XML libraries.
> It appears that most of the contents of these libraries have formerly
> been part of loci_tools.jar. Our question is in how far these libraries
> are compatible (or even equal?) to the other (older?) ones which can be
> downloaded from the Bioformats page, i.e. loci_tools.jar.
>
> The thing is that our software is supposed to principally run in ImageJ
> 1.0 as well as in 2.0. Therefore it would be great if we could rely on
> just one version of bioformats, i.e. either loci_tools or the four
> libraries from above. Could you give us a hint which option to follow,
> i.e. which libraries to use, or should it even be possible to use both
> in common?
> Is the version shipped with ImageJ 2.0 just a new release of
> Bioformats/Loci not yet available on the webpage (...but which will be
> available there in near future)?
> Or does that version contain ImageJ 2.0 specific changes which make
> sense only in the context of ImageJ 2.0, and Bioformats/Loci as
> available for ImageJ 1.0 from the webpage will become/remain something
> different?
>
> It would be great if you could clarify this a bit.
> Thanks a lot and best regards,
>
>  Birgit
>
> ------------------------------------------------------------------------
> Dr. rer. nat. Birgit Moeller  Pattern Recognition & Bioinformatics
>                               Institute of Computer Science
>  phone:   +49(0)345-55-24745  Faculty of Natural Sciences III
>  fax:     +49(0)345-55-27039  Martin Luther University Halle-Wittenberg
>  office:  Room 4.12           Von-Seckendorff-Platz 1
>                               06099 Halle / Saale (Germany)
>
> e-mail:  birgit.moeller at informatik.uni-halle.de
> www:     http://www.informatik.uni-halle.de/moeller/
> ------------------------------------------------------------------------
>
>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120705/98b26666/attachment.html>

From Johannes.Schindelin at gmx.de  Fri Jul  6 21:38:23 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Sat, 7 Jul 2012 04:38:23 +0200 (CEST)
Subject: [ImageJ-devel] Permission to bump mpicbg.version to 2.0.0-SNAPSHOT?
Message-ID: <alpine.DEB.1.00.1207070435010.32459@s15462909.onlinehome-server.info>

Hi everybody,

since mpicbg as of 20111128 is too old to compile (Mavenized) fiji.git,
may I bump it to 2.0.0-SNAPSHOT (which I uploaded manually to
imagej.snapshots)?

Jenkins is really unhappy otherwise:

	https://qa.nest-initiative.org/view/Fiji/

(fiji-windows-core picks 2.0.0-SNAPSHOT over 20111128 but that is only
dumb luck...)

Ciao,
Johannes


From saalfeld at mpi-cbg.de  Sat Jul  7 04:27:29 2012
From: saalfeld at mpi-cbg.de (Stephan Saalfeld)
Date: Sat, 07 Jul 2012 11:27:29 +0200
Subject: [ImageJ-devel] Permission to bump mpicbg.version to
	2.0.0-SNAPSHOT?
In-Reply-To: <alpine.DEB.1.00.1207070435010.32459@s15462909.onlinehome-server.info>
References: <alpine.DEB.1.00.1207070435010.32459@s15462909.onlinehome-server.info>
Message-ID: <1341653249.3535.4.camel@saalfeld-thinkpad>

Can you explain that to the non-expert?





On Sat, 2012-07-07 at 04:38 +0200, Johannes Schindelin wrote: 
> Hi everybody,
> 
> since mpicbg as of 20111128 is too old to compile (Mavenized) fiji.git,
> may I bump it to 2.0.0-SNAPSHOT (which I uploaded manually to
> imagej.snapshots)?
> 
> Jenkins is really unhappy otherwise:
> 
> 	https://qa.nest-initiative.org/view/Fiji/
> 
> (fiji-windows-core picks 2.0.0-SNAPSHOT over 20111128 but that is only
> dumb luck...)
> 
> Ciao,
> Johannes



From Johannes.Schindelin at gmx.de  Sat Jul  7 14:34:33 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Sat, 7 Jul 2012 14:34:33 -0500 (CDT)
Subject: [ImageJ-devel] Permission to bump mpicbg.version to
	2.0.0-SNAPSHOT?
In-Reply-To: <1341653249.3535.4.camel@saalfeld-thinkpad>
References: <alpine.DEB.1.00.1207070435010.32459@s15462909.onlinehome-server.info>
	<1341653249.3535.4.camel@saalfeld-thinkpad>
Message-ID: <alpine.DEB.1.00.1207071426041.3023@bonsai2>

Hi Stephan,

On Sat, 7 Jul 2012, Stephan Saalfeld wrote:

> On Sat, 2012-07-07 at 04:38 +0200, Johannes Schindelin wrote: 
>
> > since mpicbg as of 20111128 is too old to compile (Mavenized)
> > fiji.git, may I bump it to 2.0.0-SNAPSHOT (which I uploaded manually
> > to imagej.snapshots)?
>
> Can you explain that to the non-expert?

The scijava POM:

https://github.com/scijava/scijava-common/blob/master/pom-scijava/pom.xml

is the intended parent POM for the scijava software stack. So basically,
every (Mavenized) sourcecode's top-evel pom.xml lists it as parent POM.
This is the case for ImgLib, ImageJ2, Bio-Formats, SCIFIO, and I probably
forgot a few. That POM lists a few Maven repositories and current versions
of components of the scijava software stack.

The current version for mpicbg is listed as 20111128, but I recently
uploaded a new artifact (manually, since mpicbg is not Mavenized) with the
version 2.0.0-SNAPSHOT. I needed to do that because parts of Fiji, in
particular blockmatching_.jar, require a newer version of that library.

Now, I do not foresee any conflicts introduced by pushing the mpicbg
version in the scijava POM to 2.0.0-SNAPSHOT, but as there are now
potentially many projects depending on scijava.pom, I want to play it
carefully.

Christian Dietz from the KNIME project already indicated privately that
they are unaffected by that version change.

Ciao,
Johannes


From Johannes.Schindelin at gmx.de  Sat Jul  7 15:00:53 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Sat, 7 Jul 2012 15:00:53 -0500 (CDT)
Subject: [ImageJ-devel] Permission to bump mpicbg.version to
	2.0.0-SNAPSHOT?
In-Reply-To: <CADN69yn8uwdf8pxtRsVSj1+OLw1rJzSvhx8+PeKoNkZ8BMLRZw@mail.gmail.com>
References: <alpine.DEB.1.00.1207070435010.32459@s15462909.onlinehome-server.info>
	<1341653249.3535.4.camel@saalfeld-thinkpad>
	<alpine.DEB.1.00.1207071426041.3023@bonsai2>
	<CADN69yn8uwdf8pxtRsVSj1+OLw1rJzSvhx8+PeKoNkZ8BMLRZw@mail.gmail.com>
Message-ID: <alpine.DEB.1.00.1207071454130.3023@bonsai2>

Hi Curtis,

[Re-Cc:ing everybody stripped by scijava. I love when GoogleGroups does
that. It is really helpful.]

On Sat, 7 Jul 2012, Curtis Rueden wrote:

> I will reply in more detail on Monday, but we should consider using a new
> release version number (e.g. 20120707) instead of using a snapshot.

Fair enough!

> Otherwise I will have to make a new release version anyway when we release
> beta3 next week.

I did not think of that. But is mpicbg really needed for ImgLib2? A quick
"git grep mpicbg\\. imglib2/" reveals that there are only references in
algorithms-gpl, broken, ij, scripting and tests (and a link that is
probably incorrect in PolygonRegionOfInterestTest in core).

> Do you want to start versioning mpicbg in sync with imglib2? (Maybe we
> should see what Stephan wants there).

Yep, would be good to hear from Stephan about his plans there.

Ciao,
Johannes


From panovr at gmail.com  Sun Jul  8 00:30:32 2012
From: panovr at gmail.com (Yili Zhao)
Date: Sat, 7 Jul 2012 22:30:32 -0700 (PDT)
Subject: [ImageJ-devel] Permission to bump mpicbg.version to
	2.0.0-SNAPSHOT?
In-Reply-To: <alpine.DEB.1.00.1207070435010.32459@s15462909.onlinehome-server.info>
References: <alpine.DEB.1.00.1207070435010.32459@s15462909.onlinehome-server.info>
Message-ID: <f392b41f-21dd-4ba8-abf6-5965b742af5a@googlegroups.com>

What the relationship between mpicbg and imglib? Will imglib replace mpicbg?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120707/eb13a05e/attachment.html>

From Johannes.Schindelin at gmx.de  Sun Jul  8 01:59:41 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Sun, 8 Jul 2012 01:59:41 -0500 (CDT)
Subject: [ImageJ-devel] Permission to bump mpicbg.version to
 2.0.0-SNAPSHOT?
In-Reply-To: <f392b41f-21dd-4ba8-abf6-5965b742af5a@googlegroups.com>
References: <alpine.DEB.1.00.1207070435010.32459@s15462909.onlinehome-server.info>
	<f392b41f-21dd-4ba8-abf6-5965b742af5a@googlegroups.com>
Message-ID: <alpine.DEB.1.00.1207080155010.3023@bonsai2>

Hi,

On Sat, 7 Jul 2012, Yili Zhao wrote:

> What the relationship between mpicbg and imglib? Will imglib replace
> mpicbg?

Please have a look at the source and at my answer again. mpicbg is a
dependency of imglib1, only few non-core parts of imglib2 depend on it.

Ciao,
Johannes


From saalfeld at mpi-cbg.de  Sun Jul  8 03:54:01 2012
From: saalfeld at mpi-cbg.de (Stephan Saalfeld)
Date: Sun, 08 Jul 2012 10:54:01 +0200
Subject: [ImageJ-devel] [fiji-devel] Re: Permission to bump
 mpicbg.version to 2.0.0-SNAPSHOT?
In-Reply-To: <alpine.DEB.1.00.1207071454130.3023@bonsai2>
References: <alpine.DEB.1.00.1207070435010.32459@s15462909.onlinehome-server.info>
	<1341653249.3535.4.camel@saalfeld-thinkpad>
	<alpine.DEB.1.00.1207071426041.3023@bonsai2>
	<CADN69yn8uwdf8pxtRsVSj1+OLw1rJzSvhx8+PeKoNkZ8BMLRZw@mail.gmail.com>
	<alpine.DEB.1.00.1207071454130.3023@bonsai2>
Message-ID: <1341737641.3535.37.camel@saalfeld-thinkpad>

Hi Johannes and Curtis,

thanks for explaining.  I am not familiar with the differences between
snapshots and releases.  I trust in you to make the right choice.

To explain the mpicbg situation: I consider the version of the git
repository that is committed as submodule to the fiji repository the
stable release because I tested it in the full Fiji context (at least
for compiling issues) which includes TrakEM2 and ImgLib1/2.  That
version corresponds to what is uploaded to the Fiji updater.

The dependencies in imglib2 are wrong transformed comments.  imglib2-ij,
imglib2-algorithms-gpl, imglib-scripting and imglib2-tests use utility
classes that I will transfer to imglib2 in August now that I've seen it.
imglib2-algorithms-gpl and imglib-scripting use it for transformation
which can now be replaced by imglib2-realtransform (actually the
transform as implemented there is obsolete now that RealViews exist).

My plan is to free imglib2 from mpicbg dependencies because it will
incorporate all its functions wrapped in improved interfaces.  This,
however, is a longer term project which means that mpicbg will remain
for quite some time, mainly in the Fiji context for TrakEM2 and other
plugins.  Synchronizing version numbers between imglib2 and mpicbg would
thus be misleading in my understanding.

Be patient with me---I have to finish my thesis by July 31---no further
mercy.  Back in hacking mood after that...

Cheers,
Stephan




On Sat, 2012-07-07 at 15:00 -0500, Johannes Schindelin wrote: 
> Hi Curtis,
> 
> [Re-Cc:ing everybody stripped by scijava. I love when GoogleGroups does
> that. It is really helpful.]
> 
> On Sat, 7 Jul 2012, Curtis Rueden wrote:
> 
> > I will reply in more detail on Monday, but we should consider using a new
> > release version number (e.g. 20120707) instead of using a snapshot.
> 
> Fair enough!
> 
> > Otherwise I will have to make a new release version anyway when we release
> > beta3 next week.
> 
> I did not think of that. But is mpicbg really needed for ImgLib2? A quick
> "git grep mpicbg\\. imglib2/" reveals that there are only references in
> algorithms-gpl, broken, ij, scripting and tests (and a link that is
> probably incorrect in PolygonRegionOfInterestTest in core).
> 
> > Do you want to start versioning mpicbg in sync with imglib2? (Maybe we
> > should see what Stephan wants there).
> 
> Yep, would be good to hear from Stephan about his plans there.
> 
> Ciao,
> Johannes
> 



From Johannes.Schindelin at gmx.de  Sun Jul  8 14:50:46 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Sun, 8 Jul 2012 14:50:46 -0500 (CDT)
Subject: [ImageJ-devel] [fiji-devel] Re: Permission to bump
 mpicbg.version to 2.0.0-SNAPSHOT?
In-Reply-To: <1341737641.3535.37.camel@saalfeld-thinkpad>
References: <alpine.DEB.1.00.1207070435010.32459@s15462909.onlinehome-server.info>
	<1341653249.3535.4.camel@saalfeld-thinkpad>
	<alpine.DEB.1.00.1207071426041.3023@bonsai2>
	<CADN69yn8uwdf8pxtRsVSj1+OLw1rJzSvhx8+PeKoNkZ8BMLRZw@mail.gmail.com>
	<alpine.DEB.1.00.1207071454130.3023@bonsai2>
	<1341737641.3535.37.camel@saalfeld-thinkpad>
Message-ID: <alpine.DEB.1.00.1207081425360.3023@bonsai2>

Hi Stephan,

On Sun, 8 Jul 2012, Stephan Saalfeld wrote:

> thanks for explaining.  I am not familiar with the differences between
> snapshots and releases.  I trust in you to make the right choice.

Basically, the problem with snapshot versions is that they are moving
targets. So imglib2-2.0.0-beta3 cannot depend on mpicbg-2.0.0-SNAPSHOT.
That was my thinko and Curtis corrected that.

> To explain the mpicbg situation: I consider the version of the git
> repository that is committed as submodule to the fiji repository the
> stable release because I tested it in the full Fiji context (at least
> for compiling issues) which includes TrakEM2 and ImgLib1/2.  That
> version corresponds to what is uploaded to the Fiji updater.

Okay, that would be version 20120621, then, as that is the date of the
commit in fiji.git, referring to the mpicbg commit 4200032831.

I verified that the Updater considers my compiled version of that revision
and what you uploaded as identical, so I "deployed" (== "uploaded to the
Maven repository" in Maven speak) the latter[*1*].

> The dependencies in imglib2 are wrong transformed comments.  imglib2-ij,
> imglib2-algorithms-gpl, imglib-scripting and imglib2-tests use utility
> classes that I will transfer to imglib2 in August now that I've seen it.
> imglib2-algorithms-gpl and imglib-scripting use it for transformation
> which can now be replaced by imglib2-realtransform (actually the
> transform as implemented there is obsolete now that RealViews exist).
> 
> My plan is to free imglib2 from mpicbg dependencies because it will
> incorporate all its functions wrapped in improved interfaces.  This,
> however, is a longer term project which means that mpicbg will remain
> for quite some time, mainly in the Fiji context for TrakEM2 and other
> plugins.  Synchronizing version numbers between imglib2 and mpicbg would
> thus be misleading in my understanding.

Okay, great, thanks for the clarification! Much appreciated.

> Be patient with me---I have to finish my thesis by July 31---no further
> mercy.  Back in hacking mood after that...

Yep, the thesis is more important right now. Good luck with that!

Ciao,
Dscho

[Footnote *1*] I did not upload my compiled version, since -- as you know
-- .jar files are really .zip files, storing timestamps with the files, so
by necessity the .jar files are different when they are recompiled. The
Updater is a bit clever about that situation and inspects the .zip
contents (in newer incarnations, it ignores even more things that depend
on the build environment/date).


From Johannes.Schindelin at gmx.de  Sun Jul  8 21:10:44 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Sun, 8 Jul 2012 21:10:44 -0500 (CDT)
Subject: [ImageJ-devel] [fiji-devel] Re: Permission to bump
 mpicbg.version to 2.0.0-SNAPSHOT?
In-Reply-To: <alpine.DEB.1.00.1207081425360.3023@bonsai2>
References: <alpine.DEB.1.00.1207070435010.32459@s15462909.onlinehome-server.info>
	<1341653249.3535.4.camel@saalfeld-thinkpad>
	<alpine.DEB.1.00.1207071426041.3023@bonsai2>
	<CADN69yn8uwdf8pxtRsVSj1+OLw1rJzSvhx8+PeKoNkZ8BMLRZw@mail.gmail.com>
	<alpine.DEB.1.00.1207071454130.3023@bonsai2>
	<1341737641.3535.37.camel@saalfeld-thinkpad>
	<alpine.DEB.1.00.1207081425360.3023@bonsai2>
Message-ID: <alpine.DEB.1.00.1207082107040.3023@bonsai2>

Hi,

On Sun, 8 Jul 2012, Johannes Schindelin wrote:

> On Sun, 8 Jul 2012, Stephan Saalfeld wrote:
> 
> > To explain the mpicbg situation: I consider the version of the git
> > repository that is committed as submodule to the fiji repository the
> > stable release because I tested it in the full Fiji context (at least
> > for compiling issues) which includes TrakEM2 and ImgLib1/2.  That
> > version corresponds to what is uploaded to the Fiji updater.
> 
> Okay, that would be version 20120621, then, as that is the date of the
> commit in fiji.git, referring to the mpicbg commit 4200032831.
> 
> I verified that the Updater considers my compiled version of that
> revision and what you uploaded as identical, so I "deployed" (==
> "uploaded to the Maven repository" in Maven speak) the latter.

It turns out that I was able to fix the bug in MiniMaven which wanted to
use the old mpicbg version to compile blockmatching even when the
corresponding pom.xml clearly asked for the newer version.

This was possible due to the Mavenization of Fiji which allowed me to
import the Fiji Build project into Eclipse (after identifying a rather
serious problem together with Tobias Pietzsch on Friday, I was able to fix
the problem today, see the Git log for Fiji's src-plugins/pom.xml). Well,
part of it was helped by Eclipse, since I could not attach Eclipse to
Jenkins' Fiji Builds.

Anyway, the problem is a non-issue now, please disregard my original
request to bump scijava to a new version.

Ciao,
Dscho


From Johannes.Schindelin at gmx.de  Sun Jul  8 23:58:20 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Mon, 9 Jul 2012 06:58:20 +0200 (CEST)
Subject: [ImageJ-devel] Maintenance work 3am-7am CDT
Message-ID: <alpine.DEB.1.00.1207090652310.32459@s15462909.onlinehome-server.info>

Dear all,

the servers for the imagej.net domain will be offline for at least a
little bit starting 3am CDT (that is, UTC -0500) and hopefully at most
until 7am. For our European friends, this means morning, for our Asian
friends, afternoon.

Sorry for the inconvenience!
Johannes


From ctrueden at wisc.edu  Mon Jul  9 11:27:12 2012
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Mon, 9 Jul 2012 11:27:12 -0500
Subject: [ImageJ-devel] [fiji-devel] Re: Permission to bump
	mpicbg.version to 2.0.0-SNAPSHOT?
In-Reply-To: <alpine.DEB.1.00.1207081425360.3023@bonsai2>
References: <alpine.DEB.1.00.1207070435010.32459@s15462909.onlinehome-server.info>
	<1341653249.3535.4.camel@saalfeld-thinkpad>
	<alpine.DEB.1.00.1207071426041.3023@bonsai2>
	<CADN69yn8uwdf8pxtRsVSj1+OLw1rJzSvhx8+PeKoNkZ8BMLRZw@mail.gmail.com>
	<alpine.DEB.1.00.1207071454130.3023@bonsai2>
	<1341737641.3535.37.camel@saalfeld-thinkpad>
	<alpine.DEB.1.00.1207081425360.3023@bonsai2>
Message-ID: <CADN69yn3-+rrjreJLG0B_0KcP0GSZ3Cb730BgvXmshX4w5xsEA@mail.gmail.com>

Hi all,


> Basically, the problem with snapshot versions is that they are moving
> targets. So imglib2-2.0.0-beta3 cannot depend on mpicbg-2.0.0-SNAPSHOT.
> That was my thinko and Curtis corrected that.


Yes, the good thing about release versions (i.e., any version without
"-SNAPSHOT" as the suffix) is that they never change after deployment
(i.e., once they are available to anyone external). The idea is that adding
a release version dependency creates a looser-and-more-stable linkage
between projects, whereas a snapshot dependency creates a
tighter-but-less-stable one.

The way we are doing it with ImageJ2 and ImgLib2 is that the development
version of ImageJ2 depends on an ImgLib2 snapshot. When we do a release, we
do a release for the entire stack, with both ImageJ2 and ImgLib2 versioned
the same (but if you want to change this in the future, we can discuss).

It is forbidden for a release version of a project to have any snapshot
dependencies (because then depending on that release would not be
transitively stable). Therefore, when we do a release of the ImgLib2
projects, we need a new-enough release version of mpicbg as well?at least
until the transition away from mpicbg is complete someday.


> Okay, that would be version 20120621, then, as that is the date of the
> commit in fiji.git, referring to the mpicbg commit 4200032831.
>


I verified that the Updater considers my compiled version of that revision
> and what you uploaded as identical, so I "deployed" (== "uploaded to the
> Maven repository" in Maven speak) the latter[*1*].


Sounds perfect!

Regards,
Curtis


On Sun, Jul 8, 2012 at 2:50 PM, Johannes Schindelin <
Johannes.Schindelin at gmx.de> wrote:

> Hi Stephan,
>
> On Sun, 8 Jul 2012, Stephan Saalfeld wrote:
>
> > thanks for explaining.  I am not familiar with the differences between
> > snapshots and releases.  I trust in you to make the right choice.
>
> Basically, the problem with snapshot versions is that they are moving
> targets. So imglib2-2.0.0-beta3 cannot depend on mpicbg-2.0.0-SNAPSHOT.
> That was my thinko and Curtis corrected that.
>
> > To explain the mpicbg situation: I consider the version of the git
> > repository that is committed as submodule to the fiji repository the
> > stable release because I tested it in the full Fiji context (at least
> > for compiling issues) which includes TrakEM2 and ImgLib1/2.  That
> > version corresponds to what is uploaded to the Fiji updater.
>
> Okay, that would be version 20120621, then, as that is the date of the
> commit in fiji.git, referring to the mpicbg commit 4200032831.
>
> I verified that the Updater considers my compiled version of that revision
> and what you uploaded as identical, so I "deployed" (== "uploaded to the
> Maven repository" in Maven speak) the latter[*1*].
>
> > The dependencies in imglib2 are wrong transformed comments.  imglib2-ij,
> > imglib2-algorithms-gpl, imglib-scripting and imglib2-tests use utility
> > classes that I will transfer to imglib2 in August now that I've seen it.
> > imglib2-algorithms-gpl and imglib-scripting use it for transformation
> > which can now be replaced by imglib2-realtransform (actually the
> > transform as implemented there is obsolete now that RealViews exist).
> >
> > My plan is to free imglib2 from mpicbg dependencies because it will
> > incorporate all its functions wrapped in improved interfaces.  This,
> > however, is a longer term project which means that mpicbg will remain
> > for quite some time, mainly in the Fiji context for TrakEM2 and other
> > plugins.  Synchronizing version numbers between imglib2 and mpicbg would
> > thus be misleading in my understanding.
>
> Okay, great, thanks for the clarification! Much appreciated.
>
> > Be patient with me---I have to finish my thesis by July 31---no further
> > mercy.  Back in hacking mood after that...
>
> Yep, the thesis is more important right now. Good luck with that!
>
> Ciao,
> Dscho
>
> [Footnote *1*] I did not upload my compiled version, since -- as you know
> -- .jar files are really .zip files, storing timestamps with the files, so
> by necessity the .jar files are different when they are recompiled. The
> Updater is a bit clever about that situation and inspects the .zip
> contents (in newer incarnations, it ignores even more things that depend
> on the build environment/date).
>
> --
> Please avoid top-posting, and please make sure to reply-to-all!
>
> Mailing list web interface: http://groups.google.com/group/fiji-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120709/786b4795/attachment.html>

From preibisch at mpi-cbg.de  Tue Jul 10 09:40:02 2012
From: preibisch at mpi-cbg.de (Stephan Preibisch)
Date: Tue, 10 Jul 2012 10:40:02 -0400
Subject: [ImageJ-devel] New imglib2-algorithms-legacy
Message-ID: <B69B5F73-F943-43CA-BA63-3302E450BC2C@mpi-cbg.de>

Hi guys,

I intend to port the ImgLib1 algorithms that I still need in a "dirty" way so that we can use them under ImgLib2 but they still need to be properly ported at some point. Otherwise it will take a too long time until we will have the time to it correctly ... I am not too happy about this, but otherwise we will never get rid of ImgLib1 ...

I have unfortunately no idea how to create a new maven package, also the descriptions I found on the internet sound rather - well - like easy to mess up. If anyone has time, it would be awesome to create a new maven package: imglib2-algorithms-legacy which has the same dependencies as the GPL one. 

Thanks and nice greetings,
Steffi

From Johannes.Schindelin at gmx.de  Tue Jul 10 11:21:54 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Tue, 10 Jul 2012 18:21:54 +0200 (CEST)
Subject: [ImageJ-devel] New imglib2-algorithms-legacy
In-Reply-To: <B69B5F73-F943-43CA-BA63-3302E450BC2C@mpi-cbg.de>
References: <B69B5F73-F943-43CA-BA63-3302E450BC2C@mpi-cbg.de>
Message-ID: <alpine.DEB.1.00.1207101818550.32459@s15462909.onlinehome-server.info>

Hi Steffi,

On Tue, 10 Jul 2012, Stephan Preibisch wrote:

> I intend to port the ImgLib1 algorithms that I still need in a "dirty"
> way so that we can use them under ImgLib2 but they still need to be
> properly ported at some point. Otherwise it will take a too long time
> until we will have the time to it correctly ... I am not too happy about
> this, but otherwise we will never get rid of ImgLib1 ...

Great that you start this. I agree that the pragmatic way is to port them
in a dirty way now and clean things up later. Of course this incurs some
technical debt, but it still gets rid of more of it.

> I have unfortunately no idea how to create a new maven package, also the
> descriptions I found on the internet sound rather - well - like easy to
> mess up. If anyone has time, it would be awesome to create a new maven
> package: imglib2-algorithms-legacy which has the same dependencies as
> the GPL one. 

I will make a branch with a simple pom and will be on Skype later. Fair
ennough?

Ciao,
Dscho


From preibisch at mpi-cbg.de  Tue Jul 10 11:26:02 2012
From: preibisch at mpi-cbg.de (Stephan Preibisch)
Date: Tue, 10 Jul 2012 12:26:02 -0400
Subject: [ImageJ-devel] New imglib2-algorithms-legacy
In-Reply-To: <alpine.DEB.1.00.1207101818550.32459@s15462909.onlinehome-server.info>
References: <B69B5F73-F943-43CA-BA63-3302E450BC2C@mpi-cbg.de>
	<alpine.DEB.1.00.1207101818550.32459@s15462909.onlinehome-server.info>
Message-ID: <F7406E89-5E63-4986-8B41-8366DBF72EFE@mpi-cbg.de>

Perfect! Thanks a lot!

Bye bye,
Steffi

On Jul 10, 2012, at 12:21 , Johannes Schindelin wrote:

> Hi Steffi,
> 
> On Tue, 10 Jul 2012, Stephan Preibisch wrote:
> 
>> I intend to port the ImgLib1 algorithms that I still need in a "dirty"
>> way so that we can use them under ImgLib2 but they still need to be
>> properly ported at some point. Otherwise it will take a too long time
>> until we will have the time to it correctly ... I am not too happy about
>> this, but otherwise we will never get rid of ImgLib1 ...
> 
> Great that you start this. I agree that the pragmatic way is to port them
> in a dirty way now and clean things up later. Of course this incurs some
> technical debt, but it still gets rid of more of it.
> 
>> I have unfortunately no idea how to create a new maven package, also the
>> descriptions I found on the internet sound rather - well - like easy to
>> mess up. If anyone has time, it would be awesome to create a new maven
>> package: imglib2-algorithms-legacy which has the same dependencies as
>> the GPL one. 
> 
> I will make a branch with a simple pom and will be on Skype later. Fair
> ennough?
> 
> Ciao,
> Dscho



From ctrueden at wisc.edu  Tue Jul 10 11:54:21 2012
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Tue, 10 Jul 2012 11:54:21 -0500
Subject: [ImageJ-devel] [fiji-devel] Re:  New imglib2-algorithms-legacy
In-Reply-To: <alpine.DEB.1.00.1207101818550.32459@s15462909.onlinehome-server.info>
References: <B69B5F73-F943-43CA-BA63-3302E450BC2C@mpi-cbg.de>
	<alpine.DEB.1.00.1207101818550.32459@s15462909.onlinehome-server.info>
Message-ID: <CADN69yn0nGOpyJzuemZv=83ozGLu7rV8NCZjJrAunpOXgkJT3w@mail.gmail.com>

Hi Steffi & Dscho,



Great that you start this. I agree that the pragmatic way is to port them
> in a dirty way now and clean things up later. Of course this incurs some
> technical debt, but it still gets rid of more of it.


I agree; progressive steps toward reducing and eventually eliminating
ImgLib1 are good!


> > I have unfortunately no idea how to create a new maven package, also the
> > descriptions I found on the internet sound rather - well - like easy to
> > mess up. If anyone has time, it would be awesome to create a new maven
> > package: imglib2-algorithms-legacy which has the same dependencies as
> > the GPL one.
>

The safest way to make a new Maven project in an existing multi-module
structure such as ImgLib is to copy an existing project:

$ cd imglib2/algorithms && cp -rp gpl legacy
$ cd legacy
// delete Eclipse metadata and Maven build stuff
$ rm -rf .classpath .project .settings target
$ vi pom.xml
// then read through the POM and change details that differ for the new
project
// then delete source files out of src and replace with your new classes



I will make a branch with a simple pom and will be on Skype later. Fair
> ennough?


I have done this for imglib2-algorithms-legacy and pushed to master.

HTH,
Curtis


On Tue, Jul 10, 2012 at 11:21 AM, Johannes Schindelin <
Johannes.Schindelin at gmx.de> wrote:

> Hi Steffi,
>
> On Tue, 10 Jul 2012, Stephan Preibisch wrote:
>
> > I intend to port the ImgLib1 algorithms that I still need in a "dirty"
> > way so that we can use them under ImgLib2 but they still need to be
> > properly ported at some point. Otherwise it will take a too long time
> > until we will have the time to it correctly ... I am not too happy about
> > this, but otherwise we will never get rid of ImgLib1 ...
>
> Great that you start this. I agree that the pragmatic way is to port them
> in a dirty way now and clean things up later. Of course this incurs some
> technical debt, but it still gets rid of more of it.
>
> > I have unfortunately no idea how to create a new maven package, also the
> > descriptions I found on the internet sound rather - well - like easy to
> > mess up. If anyone has time, it would be awesome to create a new maven
> > package: imglib2-algorithms-legacy which has the same dependencies as
> > the GPL one.
>
> I will make a branch with a simple pom and will be on Skype later. Fair
> ennough?
>
> Ciao,
> Dscho
>
> --
> Please avoid top-posting, and please make sure to reply-to-all!
>
> Mailing list web interface: http://groups.google.com/group/fiji-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120710/c6541f28/attachment.html>

From preibisch at mpi-cbg.de  Tue Jul 10 12:23:59 2012
From: preibisch at mpi-cbg.de (Stephan Preibisch)
Date: Tue, 10 Jul 2012 13:23:59 -0400
Subject: [ImageJ-devel] [fiji-devel] Re:  New imglib2-algorithms-legacy
In-Reply-To: <CADN69yn0nGOpyJzuemZv=83ozGLu7rV8NCZjJrAunpOXgkJT3w@mail.gmail.com>
References: <B69B5F73-F943-43CA-BA63-3302E450BC2C@mpi-cbg.de>
	<alpine.DEB.1.00.1207101818550.32459@s15462909.onlinehome-server.info>
	<CADN69yn0nGOpyJzuemZv=83ozGLu7rV8NCZjJrAunpOXgkJT3w@mail.gmail.com>
Message-ID: <D431FDFA-12E2-4979-B187-629B1DA33EA0@mpi-cbg.de>

Thanks a lot guys, I will put the stuff there for now ...

Bye bye,
Steffi

On Jul 10, 2012, at 12:54 , Curtis Rueden wrote:

> Hi Steffi & Dscho,
> 
>  
> Great that you start this. I agree that the pragmatic way is to port them
> in a dirty way now and clean things up later. Of course this incurs some
> technical debt, but it still gets rid of more of it.
> 
> I agree; progressive steps toward reducing and eventually eliminating ImgLib1 are good!
> 
> 
> > I have unfortunately no idea how to create a new maven package, also the
> > descriptions I found on the internet sound rather - well - like easy to
> > mess up. If anyone has time, it would be awesome to create a new maven
> > package: imglib2-algorithms-legacy which has the same dependencies as
> > the GPL one.
> 
> The safest way to make a new Maven project in an existing multi-module structure such as ImgLib is to copy an existing project:
> 
> $ cd imglib2/algorithms && cp -rp gpl legacy
> $ cd legacy
> // delete Eclipse metadata and Maven build stuff
> $ rm -rf .classpath .project .settings target
> $ vi pom.xml
> // then read through the POM and change details that differ for the new project
> // then delete source files out of src and replace with your new classes
> 
>  
> I will make a branch with a simple pom and will be on Skype later. Fair
> ennough?
> 
> I have done this for imglib2-algorithms-legacy and pushed to master.
> 
> HTH,
> Curtis
> 
> 
> On Tue, Jul 10, 2012 at 11:21 AM, Johannes Schindelin <Johannes.Schindelin at gmx.de> wrote:
> Hi Steffi,
> 
> On Tue, 10 Jul 2012, Stephan Preibisch wrote:
> 
> > I intend to port the ImgLib1 algorithms that I still need in a "dirty"
> > way so that we can use them under ImgLib2 but they still need to be
> > properly ported at some point. Otherwise it will take a too long time
> > until we will have the time to it correctly ... I am not too happy about
> > this, but otherwise we will never get rid of ImgLib1 ...
> 
> Great that you start this. I agree that the pragmatic way is to port them
> in a dirty way now and clean things up later. Of course this incurs some
> technical debt, but it still gets rid of more of it.
> 
> > I have unfortunately no idea how to create a new maven package, also the
> > descriptions I found on the internet sound rather - well - like easy to
> > mess up. If anyone has time, it would be awesome to create a new maven
> > package: imglib2-algorithms-legacy which has the same dependencies as
> > the GPL one.
> 
> I will make a branch with a simple pom and will be on Skype later. Fair
> ennough?
> 
> Ciao,
> Dscho
> 
> --
> Please avoid top-posting, and please make sure to reply-to-all!
> 
> Mailing list web interface: http://groups.google.com/group/fiji-devel
> 
> 
> -- 
> Please avoid top-posting, and please make sure to reply-to-all!
>  
> Mailing list web interface: http://groups.google.com/group/fiji-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120710/a871a41f/attachment.html>

From Johannes.Schindelin at gmx.de  Tue Jul 10 12:50:12 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Tue, 10 Jul 2012 19:50:12 +0200 (CEST)
Subject: [ImageJ-devel] [fiji-devel] Re:  New imglib2-algorithms-legacy
In-Reply-To: <CADN69yn0nGOpyJzuemZv=83ozGLu7rV8NCZjJrAunpOXgkJT3w@mail.gmail.com>
References: <B69B5F73-F943-43CA-BA63-3302E450BC2C@mpi-cbg.de>
	<alpine.DEB.1.00.1207101818550.32459@s15462909.onlinehome-server.info>
	<CADN69yn0nGOpyJzuemZv=83ozGLu7rV8NCZjJrAunpOXgkJT3w@mail.gmail.com>
Message-ID: <alpine.DEB.1.00.1207101904070.32459@s15462909.onlinehome-server.info>

Hi Curtis,

On Tue, 10 Jul 2012, Curtis Rueden wrote:

> On Tue, Jul 10, 2012 at 11:21 AM, Johannes Schindelin
<
> Johannes.Schindelin at gmx.de> wrote:
> > I will make a branch with a simple pom and will be on Skype later.
> > Fair ennough?
> 
> I have done this for imglib2-algorithms-legacy and pushed to master.

Darn, you beat me to it! ;-)

But that gives me more time to explain what it takes to make a new Maven
project.

All it really takes is a pom.xml file and a certain directory structure.
Technically, you can override the default directory layout in the pom.xml,
but why do so? It only breaks expectations and is more hassle than it is
worth, really.

So the directory structure is: you put your .java files under
src/main/java/ and the other files you need to be included into
src/main/resources/. Should you want to apply the best practices called
"regression tests" or even "test-driven development": your tests' .java
files go to src/test/java/ and the non-.java files you might require
unsurprisingly into src/test/resources/.

So what does a pom.xml look like? This is a very simple example:

	<?xml version="1.0" encoding="UTF-8"?>
	<project xmlns="http://maven.apache.org/POM/4.0.0"
			xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
			http://maven.apache.org/xsd/maven-4.0.0.xsd">
		<modelVersion>4.0.0</modelVersion>

		<groupId>sc.fiji</groupId>
		<artifactId>my-uber-library</artifactId>
		<version>2.0.0-SNAPSHOT</version>
	</project>

The first 6 lines are of course just a way to say "Hi, Maven? How are you
today? This is what I would like you to do:".

The only relevant parts are the groupId, which by convention is something
like the inverted domain name (similar to the Java package convention),
the name of the artifact to build (it will be put into target/, under the
name <artifactId>-<version>.jar). And of course the version.

Now, why did I bother so much with Mavenization of Fiji? The real reason
is that Maven is not only a build tool but first and foremost a dependency
management tool. Maven has so-called Maven repositories where it stores
compiled artifacts. ImageJ2's Maven repository lives here:
http://maven.imagej.net:8081/ (most functions can be accessed via
http://maven.imagej.net/ just as well). It is like Fiji's precompiled/
directory, but done right.

Next, for Maven to know what you are looking for, you typically have to
add the dependencies into the pom.xml file. For example, every ImageJ 1.x
plugin will depend on ImageJ 1.x. So let's add that (before the final
</project> line):

	<dependencies>
		<dependency>
			<groupId>net.imagej</groupId>
			<artifactId>ij</artifactId>
			<version>1.45b</version>
		</dependency>
	</dependencies>

As you can see, dependencies are referenced under the same groupId,
artifactId and version triplet (also known as GAV parameters) that you had
to declare for the current project.

For Maven to find the dependencies, it has to know about the location of
the repositories. As you know, we are strong proponents of collaboration
within the scientific community, so we started the scijava effort last
hackathon in December. To this end, Curtis began the scijava "super POM"
which is supposed to declare repositories we use (and other metadata as
well, such as current artifact versions we provide). To benefit from this
in your project, add this to your pom.xml:

	<parent>
		<groupId>org.scijava</groupId>
		<artifactId>pom-scijava</artifactId>
		<version>1.15</version>
	</parent>

	<!-- NB: for project parent -->
	<repositories>
		<repository>
			<id>imagej.releases</id>
			<url>http://maven.imagej.net/content/repositories/releases</url>
		</repository>
		<repository>
			<id>imagej.snapshots</id>
			<url>http://maven.imagej.net/content/repositories/snapshots</url>
		</repository>
	</repositories>

You will see that there are two different repository types: releases and
snapshots. The snapshot versions are "in-progress" versions. If you
declare a dependency with a "-SNAPSHOT" suffix in the version, Maven will
look once a day for new artifacts of the same versions; otherwise, Maven
will look whether it has that version already and not bother
re-downloading.

So what if you have multiple .jar files you want to build in the same
project? Then these need to live in their own subdirectories and there
needs to be a common parent POM, a so-called "aggregator" POM. For an
example, look at Fiji's src-plugins/pom.xml. Basically, it is adding the
<packaging>pom</packaging> entry as well as a couple of subdirectory names
to the <modules> section.

There are many more things you can do with Maven, but chances are you will
not need them.

The simplicity of the pom.xml you need comes from the fact that Maven
defines implicit defaults. It calls that "convention over configuration".
But since we are not converting projects (or at least since we are
flexible enough to adapt), I would strongly recommend staying with the
defaults as much as possible. It also makes your project more accessible,
something that I think we excel at.

Now, in the context of scijava, you will most likely never write a pom.xml
from scratch. You will rather more likely edit an existing one, possibly
after having copied it.

Ciao,
Dscho


From preibisch at mpi-cbg.de  Tue Jul 10 13:28:25 2012
From: preibisch at mpi-cbg.de (Stephan Preibisch)
Date: Tue, 10 Jul 2012 14:28:25 -0400
Subject: [ImageJ-devel] [fiji-devel] Re:  New imglib2-algorithms-legacy
In-Reply-To: <alpine.DEB.1.00.1207101904070.32459@s15462909.onlinehome-server.info>
References: <B69B5F73-F943-43CA-BA63-3302E450BC2C@mpi-cbg.de>
	<alpine.DEB.1.00.1207101818550.32459@s15462909.onlinehome-server.info>
	<CADN69yn0nGOpyJzuemZv=83ozGLu7rV8NCZjJrAunpOXgkJT3w@mail.gmail.com>
	<alpine.DEB.1.00.1207101904070.32459@s15462909.onlinehome-server.info>
Message-ID: <002C3F27-B718-4072-8C90-0DC5F9A2419D@mpi-cbg.de>

Hi Johannes,

this is very useful, could you put maybe onto the Fiji wiki that when searching for "Maven" this would shop up? I guess I will know if I really got it once I try to make a new src-plugins plugin ...

It definitely made into my "GIT & Maven HowTo" directory ...

Thanks a lot,
Steffi

On Jul 10, 2012, at 13:50 , Johannes Schindelin wrote:

> Hi Curtis,
> 
> On Tue, 10 Jul 2012, Curtis Rueden wrote:
> 
>> On Tue, Jul 10, 2012 at 11:21 AM, Johannes Schindelin
> <
>> Johannes.Schindelin at gmx.de> wrote:
>>> I will make a branch with a simple pom and will be on Skype later.
>>> Fair ennough?
>> 
>> I have done this for imglib2-algorithms-legacy and pushed to master.
> 
> Darn, you beat me to it! ;-)
> 
> But that gives me more time to explain what it takes to make a new Maven
> project.
> 
> All it really takes is a pom.xml file and a certain directory structure.
> Technically, you can override the default directory layout in the pom.xml,
> but why do so? It only breaks expectations and is more hassle than it is
> worth, really.
> 
> So the directory structure is: you put your .java files under
> src/main/java/ and the other files you need to be included into
> src/main/resources/. Should you want to apply the best practices called
> "regression tests" or even "test-driven development": your tests' .java
> files go to src/test/java/ and the non-.java files you might require
> unsurprisingly into src/test/resources/.
> 
> So what does a pom.xml look like? This is a very simple example:
> 
> 	<?xml version="1.0" encoding="UTF-8"?>
> 	<project xmlns="http://maven.apache.org/POM/4.0.0"
> 			xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
> 			xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
> 			http://maven.apache.org/xsd/maven-4.0.0.xsd">
> 		<modelVersion>4.0.0</modelVersion>
> 
> 		<groupId>sc.fiji</groupId>
> 		<artifactId>my-uber-library</artifactId>
> 		<version>2.0.0-SNAPSHOT</version>
> 	</project>
> 
> The first 6 lines are of course just a way to say "Hi, Maven? How are you
> today? This is what I would like you to do:".
> 
> The only relevant parts are the groupId, which by convention is something
> like the inverted domain name (similar to the Java package convention),
> the name of the artifact to build (it will be put into target/, under the
> name <artifactId>-<version>.jar). And of course the version.
> 
> Now, why did I bother so much with Mavenization of Fiji? The real reason
> is that Maven is not only a build tool but first and foremost a dependency
> management tool. Maven has so-called Maven repositories where it stores
> compiled artifacts. ImageJ2's Maven repository lives here:
> http://maven.imagej.net:8081/ (most functions can be accessed via
> http://maven.imagej.net/ just as well). It is like Fiji's precompiled/
> directory, but done right.
> 
> Next, for Maven to know what you are looking for, you typically have to
> add the dependencies into the pom.xml file. For example, every ImageJ 1.x
> plugin will depend on ImageJ 1.x. So let's add that (before the final
> </project> line):
> 
> 	<dependencies>
> 		<dependency>
> 			<groupId>net.imagej</groupId>
> 			<artifactId>ij</artifactId>
> 			<version>1.45b</version>
> 		</dependency>
> 	</dependencies>
> 
> As you can see, dependencies are referenced under the same groupId,
> artifactId and version triplet (also known as GAV parameters) that you had
> to declare for the current project.
> 
> For Maven to find the dependencies, it has to know about the location of
> the repositories. As you know, we are strong proponents of collaboration
> within the scientific community, so we started the scijava effort last
> hackathon in December. To this end, Curtis began the scijava "super POM"
> which is supposed to declare repositories we use (and other metadata as
> well, such as current artifact versions we provide). To benefit from this
> in your project, add this to your pom.xml:
> 
> 	<parent>
> 		<groupId>org.scijava</groupId>
> 		<artifactId>pom-scijava</artifactId>
> 		<version>1.15</version>
> 	</parent>
> 
> 	<!-- NB: for project parent -->
> 	<repositories>
> 		<repository>
> 			<id>imagej.releases</id>
> 			<url>http://maven.imagej.net/content/repositories/releases</url>
> 		</repository>
> 		<repository>
> 			<id>imagej.snapshots</id>
> 			<url>http://maven.imagej.net/content/repositories/snapshots</url>
> 		</repository>
> 	</repositories>
> 
> You will see that there are two different repository types: releases and
> snapshots. The snapshot versions are "in-progress" versions. If you
> declare a dependency with a "-SNAPSHOT" suffix in the version, Maven will
> look once a day for new artifacts of the same versions; otherwise, Maven
> will look whether it has that version already and not bother
> re-downloading.
> 
> So what if you have multiple .jar files you want to build in the same
> project? Then these need to live in their own subdirectories and there
> needs to be a common parent POM, a so-called "aggregator" POM. For an
> example, look at Fiji's src-plugins/pom.xml. Basically, it is adding the
> <packaging>pom</packaging> entry as well as a couple of subdirectory names
> to the <modules> section.
> 
> There are many more things you can do with Maven, but chances are you will
> not need them.
> 
> The simplicity of the pom.xml you need comes from the fact that Maven
> defines implicit defaults. It calls that "convention over configuration".
> But since we are not converting projects (or at least since we are
> flexible enough to adapt), I would strongly recommend staying with the
> defaults as much as possible. It also makes your project more accessible,
> something that I think we excel at.
> 
> Now, in the context of scijava, you will most likely never write a pom.xml
> from scratch. You will rather more likely edit an existing one, possibly
> after having copied it.
> 
> Ciao,
> Dscho



From Johannes.Schindelin at gmx.de  Tue Jul 10 15:49:19 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Tue, 10 Jul 2012 22:49:19 +0200 (CEST)
Subject: [ImageJ-devel] [fiji-devel] Re:  New imglib2-algorithms-legacy
In-Reply-To: <002C3F27-B718-4072-8C90-0DC5F9A2419D@mpi-cbg.de>
References: <B69B5F73-F943-43CA-BA63-3302E450BC2C@mpi-cbg.de>
	<alpine.DEB.1.00.1207101818550.32459@s15462909.onlinehome-server.info>
	<CADN69yn0nGOpyJzuemZv=83ozGLu7rV8NCZjJrAunpOXgkJT3w@mail.gmail.com>
	<alpine.DEB.1.00.1207101904070.32459@s15462909.onlinehome-server.info>
	<002C3F27-B718-4072-8C90-0DC5F9A2419D@mpi-cbg.de>
Message-ID: <alpine.DEB.1.00.1207102111270.32459@s15462909.onlinehome-server.info>

Hi Steffi,

On Tue, 10 Jul 2012, Stephan Preibisch wrote:

> this is very useful, could you put maybe onto the Fiji wiki that when
> searching for "Maven" this would shop up? I guess I will know if I
> really got it once I try to make a new src-plugins plugin ...

For the lurkers: I added the mail in slightly edited form to the Wiki
already before seeing the request: http://fiji.sc/Maven.

And for future reference: it is a Wiki, everybody is welcome to
contribute. You can even take anything I wrote in public and add it there.
If you are worried about attribution, just write in the summary line
"these were mumblings of Dscho on the mailing list" or some such.

By the way, for spam fighting reasons, the Wiki was closed in the sense
that you needed to ask someone with an account to make you one.

I realized that this was not as open as I want Fiji to be, so I changed
that. All that is required now is to specify your email address; a link
will be sent to you which lets you set the password.

Ciao,
Dscho


From preibisch at mpi-cbg.de  Thu Jul 12 13:37:15 2012
From: preibisch at mpi-cbg.de (Stephan Preibisch)
Date: Thu, 12 Jul 2012 14:37:15 -0400
Subject: [ImageJ-devel] New methods in CalibratedSpace
Message-ID: <2137548E-C7CD-4DD8-9FF0-EBA2B887DA3A@mpi-cbg.de>

Hi,

I would like to add the following methods to CalibratedSapce.java

	/** Copies the {@link Img}'s calibration into the given array. */
	void calibration(float[] cal);

	/** Sets the image calibration for the given dimension. */
	void setCalibration(double[] cal);

	/** Sets the image calibration for the given dimension. */
	void setCalibration(float[] cal);


ImgLib2 compiles fine, let me know if anyone has objections, otherwise I will push it soon ...

Bye bye,
Steffi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120712/96620180/attachment.html>

From ctrueden at wisc.edu  Thu Jul 12 13:51:32 2012
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Thu, 12 Jul 2012 13:51:32 -0500
Subject: [ImageJ-devel] [fiji-devel] New methods in CalibratedSpace
In-Reply-To: <2137548E-C7CD-4DD8-9FF0-EBA2B887DA3A@mpi-cbg.de>
References: <2137548E-C7CD-4DD8-9FF0-EBA2B887DA3A@mpi-cbg.de>
Message-ID: <CADN69yndvXj8VGmazH9ktxkrZQrAiOYmGm_OLD+zpB+aj1w-Bw@mail.gmail.com>

Hi Steffi,


> I would like to add the following methods to CalibratedSapce.java


I think these methods are good additions!


> /** Sets the image calibration for the given dimension. */
>  void setCalibration(double[] cal);
> /** Sets the image calibration for the given dimension. */
>  void setCalibration(float[] cal);


Shouldn't the javadoc for these read "Sets the image calibration from the
given array." or similar?

Regards,
Curtis


On Thu, Jul 12, 2012 at 1:37 PM, Stephan Preibisch <preibisch at mpi-cbg.de>wrote:

> Hi,
>
> I would like to add the following methods to CalibratedSapce.java
>
> /** Copies the {@link Img}'s calibration into the given array. */
>  void calibration(float[] cal);
>
>  /** Sets the image calibration for the given dimension. */
>  void setCalibration(double[] cal);
>
> /** Sets the image calibration for the given dimension. */
>  void setCalibration(float[] cal);
>
>
> ImgLib2 compiles fine, let me know if anyone has objections, otherwise I
> will push it soon ...
>
> Bye bye,
> Steffi
>
> --
> Please avoid top-posting, and please make sure to reply-to-all!
>
> Mailing list web interface: http://groups.google.com/group/fiji-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120712/6bbac8a2/attachment.html>

From preibisch at mpi-cbg.de  Thu Jul 12 14:02:12 2012
From: preibisch at mpi-cbg.de (Stephan Preibisch)
Date: Thu, 12 Jul 2012 15:02:12 -0400
Subject: [ImageJ-devel] [fiji-devel] New methods in CalibratedSpace
In-Reply-To: <CADN69yndvXj8VGmazH9ktxkrZQrAiOYmGm_OLD+zpB+aj1w-Bw@mail.gmail.com>
References: <2137548E-C7CD-4DD8-9FF0-EBA2B887DA3A@mpi-cbg.de>
	<CADN69yndvXj8VGmazH9ktxkrZQrAiOYmGm_OLD+zpB+aj1w-Bw@mail.gmail.com>
Message-ID: <57385D10-BBBE-49C0-8503-2E1B0FACC4D7@mpi-cbg.de>

Good point :) I will change the the comments and push it!

Bye bye,
Steffi

On Jul 12, 2012, at 14:51 , Curtis Rueden wrote:

> Hi Steffi,
> 
> 
> I would like to add the following methods to CalibratedSapce.java
> 
> I think these methods are good additions!
> 
> 
> 	/** Sets the image calibration for the given dimension. */
> 	void setCalibration(double[] cal);
> 	/** Sets the image calibration for the given dimension. */
> 	void setCalibration(float[] cal);
> 
> Shouldn't the javadoc for these read "Sets the image calibration from the given array." or similar?
> 
> Regards,
> Curtis
> 
> 
> On Thu, Jul 12, 2012 at 1:37 PM, Stephan Preibisch <preibisch at mpi-cbg.de> wrote:
> Hi,
> 
> I would like to add the following methods to CalibratedSapce.java
> 
> 	/** Copies the {@link Img}'s calibration into the given array. */
> 	void calibration(float[] cal);
> 
> 	/** Sets the image calibration for the given dimension. */
> 	void setCalibration(double[] cal);
> 
> 	/** Sets the image calibration for the given dimension. */
> 	void setCalibration(float[] cal);
> 
> 
> ImgLib2 compiles fine, let me know if anyone has objections, otherwise I will push it soon ...
> 
> Bye bye,
> Steffi
> 
> -- 
> Please avoid top-posting, and please make sure to reply-to-all!
>  
> Mailing list web interface: http://groups.google.com/group/fiji-devel
> 
> 
> -- 
> Please avoid top-posting, and please make sure to reply-to-all!
>  
> Mailing list web interface: http://groups.google.com/group/fiji-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120712/63df3cb2/attachment.html>

From ctrueden at wisc.edu  Thu Jul 12 14:53:50 2012
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Thu, 12 Jul 2012 14:53:50 -0500
Subject: [ImageJ-devel] Plugin development: should I start with ImageJ2
	right away?
In-Reply-To: <4FFC3F7F.3070003@mce.hggm.es>
References: <4FFC3F7F.3070003@mce.hggm.es>
Message-ID: <CADN69ykiL1t8GAwFafjJ=5JLKbqkw7ASpnUnF1jWwWE0NCO4dA@mail.gmail.com>

Hi Jos?,


> Now the question arises: should I start developing for ImageJ2 or will it
> be better for my sanity to stick to the "classical" ImageJ until ImageJ2
> comes out of the beta stage? How much refactoring will be waiting for me
> when I want to update my program if I choose the latter?


The current status of ImageJ2 is that it is quite stable now, and getting
more so every day. However, as you point out, it is still very much beta
software. While I believe the core architecture will not undergo major
design or API changes at this point, we are not making any guarantees about
it until the final release of 2.0.0.

I think it makes sense to begin exploring writing your code as ImageJ2
plugins. However, there are still major features missing from ImageJ2. For
example, we do not yet have many of ImageJ1's analysis capabilities such as
thresholding  or results tables.

Another aspect to consider is that ImageJ2 is trying to provide as backward
compatibility with ImageJ1. So if you write your code targeting ImageJ1,
the hope is that it will also work in ImageJ2, especially if it does not
have any custom or embedded UI/AWT logic.

All of that said, the reality is that if you want to write your code
against ImageJ2 either now in the future, you will be looking at some
amount of eventual refactoring, from either IJ1-to-IJ2 (if you initially
write it in the IJ1 framework) or from IJ2-to-IJ2 (if you initially write
it in the IJ2 beta framework).

Regards,
Curtis


On Tue, Jul 10, 2012 at 9:43 AM, Jos? Mar?a Mateos <jmmateos at mce.hggm.es>wrote:

> Hello everybody,
>
> I started developing a clustering development framework targeted at
> dynamic nuclear medicine studies some months ago using an imaging platform
> different from ImageJ.
>
> Due to some "obscure" aspects of said platform, I'm thinking about moving
> the development of this framework and start building it on top of ImageJ.
>
> Now the question arises: should I start developing for ImageJ2 or will it
> be better for my sanity to stick to the "classical" ImageJ until ImageJ2
> comes out of the beta stage? How much refactoring will be waiting for me
> when I want to update my program if I choose the latter?
>
> Best,
>
> Jos? Mar?a Mateos.
>
> --
> ImageJ mailing list: http://imagej.nih.gov/ij/list.**html<http://imagej.nih.gov/ij/list.html>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120712/5e2645b7/attachment-0001.html>

From tinevez at pasteur.fr  Thu Jul 12 15:28:50 2012
From: tinevez at pasteur.fr (Jean-Yves Tinevez)
Date: Thu, 12 Jul 2012 22:28:50 +0200
Subject: [ImageJ-devel] [fiji-devel] New methods in CalibratedSpace
In-Reply-To: <57385D10-BBBE-49C0-8503-2E1B0FACC4D7@mpi-cbg.de>
References: <2137548E-C7CD-4DD8-9FF0-EBA2B887DA3A@mpi-cbg.de>
	<CADN69yndvXj8VGmazH9ktxkrZQrAiOYmGm_OLD+zpB+aj1w-Bw@mail.gmail.com>
	<57385D10-BBBE-49C0-8503-2E1B0FACC4D7@mpi-cbg.de>
Message-ID: <4FFF3382.7070706@pasteur.fr>


>>
>>
>>     I would like to add the following methods to CalibratedSapce.java
>>
>>
>> I think these methods are good additions!
>>
>>
>>     /** Sets the image calibration for the given dimension. */
>>     void setCalibration(double[] cal);
>>     /** Sets the image calibration for the given dimension. */
>>     void setCalibration(float[] cal);
>>
>>
>> Shouldn't the javadoc for these read "Sets the image calibration from 
>> the given array." or similar?

Hi all

Any chance ImagePlusAdapter wrap() methods return an ImgPlus?

Cheers
jy
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120712/be552044/attachment.html>

From preibisch at mpi-cbg.de  Thu Jul 12 15:30:40 2012
From: preibisch at mpi-cbg.de (Stephan Preibisch)
Date: Thu, 12 Jul 2012 16:30:40 -0400
Subject: [ImageJ-devel] [fiji-devel] New methods in CalibratedSpace
In-Reply-To: <4FFF3382.7070706@pasteur.fr>
References: <2137548E-C7CD-4DD8-9FF0-EBA2B887DA3A@mpi-cbg.de>
	<CADN69yndvXj8VGmazH9ktxkrZQrAiOYmGm_OLD+zpB+aj1w-Bw@mail.gmail.com>
	<57385D10-BBBE-49C0-8503-2E1B0FACC4D7@mpi-cbg.de>
	<4FFF3382.7070706@pasteur.fr>
Message-ID: <D74766EC-35E0-4A28-A67C-D048362A4CCE@mpi-cbg.de>

Hi J-Y,

you could just add another wrap method that does that if you like ... seems useful to me ....

Bye bye,
Steffi

On Jul 12, 2012, at 16:28 , Jean-Yves Tinevez wrote:

> 
>>> 
>>> 
>>> I would like to add the following methods to CalibratedSapce.java
>>> 
>>> I think these methods are good additions!
>>> 
>>> 
>>>  /** Sets the image calibration for the given dimension. */
>>>  void setCalibration(double[] cal);
>>>  /** Sets the image calibration for the given dimension. */
>>>  void setCalibration(float[] cal);
>>> 
>>> Shouldn't the javadoc for these read "Sets the image calibration from the given array." or similar?
> 
> Hi all
> 
> Any chance ImagePlusAdapter wrap() methods return an ImgPlus?
> 
> Cheers
> jy

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120712/c345f0f9/attachment.html>

From ctrueden at wisc.edu  Thu Jul 12 15:33:01 2012
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Thu, 12 Jul 2012 15:33:01 -0500
Subject: [ImageJ-devel] [fiji-devel] New methods in CalibratedSpace
In-Reply-To: <D74766EC-35E0-4A28-A67C-D048362A4CCE@mpi-cbg.de>
References: <2137548E-C7CD-4DD8-9FF0-EBA2B887DA3A@mpi-cbg.de>
	<CADN69yndvXj8VGmazH9ktxkrZQrAiOYmGm_OLD+zpB+aj1w-Bw@mail.gmail.com>
	<57385D10-BBBE-49C0-8503-2E1B0FACC4D7@mpi-cbg.de>
	<4FFF3382.7070706@pasteur.fr>
	<D74766EC-35E0-4A28-A67C-D048362A4CCE@mpi-cbg.de>
Message-ID: <CADN69yk-GxQ2HFyUPqBSL+reGk9RD6W6K-AK+ockuXcuUpgdEw@mail.gmail.com>

Hi Steffi,


> you could just add another wrap method that does that if you like ...
> seems useful to me . ...


I agree with J-Y: the wrap methods could always return ImgPlus, since an
ImgPlus is also an Img. No reduction in functionality there.

-Curtis


On Thu, Jul 12, 2012 at 3:30 PM, Stephan Preibisch <preibisch at mpi-cbg.de>wrote:

> Hi J-Y,
>
> you could just add another wrap method that does that if you like ...
> seems useful to me . ...
>
> Bye bye,
> Steffi
>
> On Jul 12, 2012, at 16:28 , Jean-Yves Tinevez wrote:
>
>
>
>
>>  I would like to add the following methods to CalibratedSapce.java
>
>
>  I think these methods are good additions!
>
>
>>   /** Sets the image calibration for the given dimension. */
>>  void setCalibration(double[] cal);
>>  /** Sets the image calibration for the given dimension. */
>>  void setCalibration(float[] cal);
>
>
>  Shouldn't the javadoc for these read "Sets the image calibration from
> the given array." or similar?
>
>
> Hi all
>
> Any chance ImagePlusAdapter wrap() methods return an ImgPlus?
>
> Cheers
> jy
>
>
>  --
> Please avoid top-posting, and please make sure to reply-to-all!
>
> Mailing list web interface: http://groups.google.com/group/fiji-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120712/99ff62cd/attachment.html>

From preibisch at mpi-cbg.de  Thu Jul 12 16:05:21 2012
From: preibisch at mpi-cbg.de (Stephan Preibisch)
Date: Thu, 12 Jul 2012 17:05:21 -0400
Subject: [ImageJ-devel] [fiji-devel] New methods in CalibratedSpace
In-Reply-To: <CADN69yk-GxQ2HFyUPqBSL+reGk9RD6W6K-AK+ockuXcuUpgdEw@mail.gmail.com>
References: <2137548E-C7CD-4DD8-9FF0-EBA2B887DA3A@mpi-cbg.de>
	<CADN69yndvXj8VGmazH9ktxkrZQrAiOYmGm_OLD+zpB+aj1w-Bw@mail.gmail.com>
	<57385D10-BBBE-49C0-8503-2E1B0FACC4D7@mpi-cbg.de>
	<4FFF3382.7070706@pasteur.fr>
	<D74766EC-35E0-4A28-A67C-D048362A4CCE@mpi-cbg.de>
	<CADN69yk-GxQ2HFyUPqBSL+reGk9RD6W6K-AK+ockuXcuUpgdEw@mail.gmail.com>
Message-ID: <BACD9340-4397-4CD5-954A-CC6D091ECEF1@mpi-cbg.de>

In principle, I agree. However it might break some code in a bad way. We used several times constructs like

Img< T > img;

if ( img instanceOf ImagePlusImg )
{
	// get the underlying instance (which is especially true after wrapping)
	ImagePlus imp = ((ImagePlusImg)img).getImagePlus();
	....

	// or do something else where you test instanceof
}

which would suddenly fail because ImgPlus is an Img, but only HAS for example an ImagePlusImg...

What do you think?

Bye bye,
Steffi


On Jul 12, 2012, at 16:33 , Curtis Rueden wrote:

> Hi Steffi,
> 
> 
> you could just add another wrap method that does that if you like ... seems useful to me . ...
> 
> I agree with J-Y: the wrap methods could always return ImgPlus, since an ImgPlus is also an Img. No reduction in functionality there.
> 
> -Curtis
> 
> 
> On Thu, Jul 12, 2012 at 3:30 PM, Stephan Preibisch <preibisch at mpi-cbg.de> wrote:
> Hi J-Y,
> 
> you could just add another wrap method that does that if you like ... seems useful to me . ...
> 
> Bye bye,
> Steffi
> 
> On Jul 12, 2012, at 16:28 , Jean-Yves Tinevez wrote:
> 
>> 
>>>> 
>>>> 
>>>> I would like to add the following methods to CalibratedSapce.java
>>>> 
>>>> I think these methods are good additions!
>>>> 
>>>> 
>>>>  /** Sets the image calibration for the given dimension. */
>>>>  void setCalibration(double[] cal);
>>>>  /** Sets the image calibration for the given dimension. */
>>>>  void setCalibration(float[] cal);
>>>> 
>>>> Shouldn't the javadoc for these read "Sets the image calibration from the given array." or similar?
>> 
>> Hi all
>> 
>> Any chance ImagePlusAdapter wrap() methods return an ImgPlus?
>> 
>> Cheers
>> jy
> 
> 
> -- 
> Please avoid top-posting, and please make sure to reply-to-all!
>  
> Mailing list web interface: http://groups.google.com/group/fiji-devel
> 
> 
> -- 
> Please avoid top-posting, and please make sure to reply-to-all!
>  
> Mailing list web interface: http://groups.google.com/group/fiji-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120712/35b4a678/attachment-0001.html>

From tinevez at pasteur.fr  Thu Jul 12 16:14:03 2012
From: tinevez at pasteur.fr (Jean-Yves Tinevez)
Date: Thu, 12 Jul 2012 23:14:03 +0200
Subject: [ImageJ-devel] [fiji-devel] New methods in CalibratedSpace
In-Reply-To: <BACD9340-4397-4CD5-954A-CC6D091ECEF1@mpi-cbg.de>
References: <2137548E-C7CD-4DD8-9FF0-EBA2B887DA3A@mpi-cbg.de>
	<CADN69yndvXj8VGmazH9ktxkrZQrAiOYmGm_OLD+zpB+aj1w-Bw@mail.gmail.com>
	<57385D10-BBBE-49C0-8503-2E1B0FACC4D7@mpi-cbg.de>
	<4FFF3382.7070706@pasteur.fr>
	<D74766EC-35E0-4A28-A67C-D048362A4CCE@mpi-cbg.de>
	<CADN69yk-GxQ2HFyUPqBSL+reGk9RD6W6K-AK+ockuXcuUpgdEw@mail.gmail.com>
	<BACD9340-4397-4CD5-954A-CC6D091ECEF1@mpi-cbg.de>
Message-ID: <4FFF3E1B.2010807@pasteur.fr>

On 12-Jul-12 23:05, Stephan Preibisch wrote:
> In principle, I agree. However it might break some code in a bad way. 
> We used several times constructs like
>
> Img< T > img;
>
> if ( img instanceOf ImagePlusImg )
> {
> // get the underlying instance (which is especially true after wrapping)
> ImagePlus imp = ((ImagePlusImg)img).getImagePlus();
> ....
>
> // or do something else where you test instanceof
> }
>
> which would suddenly fail because ImgPlus is an Img, but only HAS for 
> example an ImagePlusImg...
>
> What do you think?

Bummer.

How do we get the ImagePlusAdapter to return an Img that captures 
calibration as well then?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120712/07171b5c/attachment.html>

From preibisch at mpi-cbg.de  Thu Jul 12 16:19:30 2012
From: preibisch at mpi-cbg.de (Stephan Preibisch)
Date: Thu, 12 Jul 2012 17:19:30 -0400
Subject: [ImageJ-devel] [fiji-devel] New methods in CalibratedSpace
In-Reply-To: <4FFF3E1B.2010807@pasteur.fr>
References: <2137548E-C7CD-4DD8-9FF0-EBA2B887DA3A@mpi-cbg.de>
	<CADN69yndvXj8VGmazH9ktxkrZQrAiOYmGm_OLD+zpB+aj1w-Bw@mail.gmail.com>
	<57385D10-BBBE-49C0-8503-2E1B0FACC4D7@mpi-cbg.de>
	<4FFF3382.7070706@pasteur.fr>
	<D74766EC-35E0-4A28-A67C-D048362A4CCE@mpi-cbg.de>
	<CADN69yk-GxQ2HFyUPqBSL+reGk9RD6W6K-AK+ockuXcuUpgdEw@mail.gmail.com>
	<BACD9340-4397-4CD5-954A-CC6D091ECEF1@mpi-cbg.de>
	<4FFF3E1B.2010807@pasteur.fr>
Message-ID: <BEAA40B0-E03D-4E96-AB0E-CCF580FBC217@mpi-cbg.de>

We have two options:

1) break it and maybe it is just fine
2) make a second method like

public ImgPlus< T > wrapImgPlus( final ImagePlus imp )
{
	Img< T > img = wrap( imp );
	ImgPlus< T > imgplus = new ImgPlus( img );

	imgplus.setCalibration( imp.getCal ... );
	imgplus.setName( imp.getTitle() );

	return imgplus;
}

Maybe 1) is the better way to go, I just wanted to bring up potential implications ....



On Jul 12, 2012, at 17:14 , Jean-Yves Tinevez wrote:

> On 12-Jul-12 23:05, Stephan Preibisch wrote:
>> In principle, I agree. However it might break some code in a bad way. We used several times constructs like
>> 
>> Img< T > img;
>> 
>> if ( img instanceOf ImagePlusImg )
>> {
>>  // get the underlying instance (which is especially true after wrapping)
>>  ImagePlus imp = ((ImagePlusImg)img).getImagePlus();
>>  ....
>> 
>>  // or do something else where you test instanceof
>> }
>> 
>> which would suddenly fail because ImgPlus is an Img, but only HAS for example an ImagePlusImg...
>> 
>> What do you think?
> 
> Bummer.
> 
> How do we get the ImagePlusAdapter to return an Img that captures calibration as well then?
> 
> -- 
> Please avoid top-posting, and please make sure to reply-to-all!
>  
> Mailing list web interface: http://groups.google.com/group/fiji-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120712/de62db23/attachment.html>

From ctrueden at wisc.edu  Thu Jul 12 16:22:46 2012
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Thu, 12 Jul 2012 16:22:46 -0500
Subject: [ImageJ-devel] [fiji-devel] New methods in CalibratedSpace
In-Reply-To: <BEAA40B0-E03D-4E96-AB0E-CCF580FBC217@mpi-cbg.de>
References: <2137548E-C7CD-4DD8-9FF0-EBA2B887DA3A@mpi-cbg.de>
	<CADN69yndvXj8VGmazH9ktxkrZQrAiOYmGm_OLD+zpB+aj1w-Bw@mail.gmail.com>
	<57385D10-BBBE-49C0-8503-2E1B0FACC4D7@mpi-cbg.de>
	<4FFF3382.7070706@pasteur.fr>
	<D74766EC-35E0-4A28-A67C-D048362A4CCE@mpi-cbg.de>
	<CADN69yk-GxQ2HFyUPqBSL+reGk9RD6W6K-AK+ockuXcuUpgdEw@mail.gmail.com>
	<BACD9340-4397-4CD5-954A-CC6D091ECEF1@mpi-cbg.de>
	<4FFF3E1B.2010807@pasteur.fr>
	<BEAA40B0-E03D-4E96-AB0E-CCF580FBC217@mpi-cbg.de>
Message-ID: <CADN69ymHBD=F1Tj6CWhEiPtV9qRKbRiU7wUT3_18c-Dw6snmOw@mail.gmail.com>

Hi Steffi & J-Y,

> if ( img instanceOf ImagePlusImg )

I think using instanceof in this way is quite evil, and should be avoided
whenever possible. It is something I very much want to avoid in the core
ImgLib2 and ImageJ2 code, because it prohibits extensibility. Better is to
put the common functionality into an interface method declaration and then
implement it differently in the different subclasses.

That said, how to avoid writing code like this depends on the situation.
We'd have to look over the various places in code that it is currently
happening...

> 1) break it and maybe it is just fine
> 2) make a wrapImgPlus method
> Maybe 1) is the better way to go, I just wanted to bring up potential
implications ....

In this case, given that it would be easy to simply add the wrapImgPlus
methods, that may be a safer way to go. Anyone else have an opinion?

Regards,
Curtis


On Thu, Jul 12, 2012 at 4:19 PM, Stephan Preibisch <preibisch at mpi-cbg.de>wrote:

> We have two options:
>
> 1) break it and maybe it is just fine
> 2) make a second method like
>
> public ImgPlus< T > wrapImgPlus( final ImagePlus imp )
> {
> Img< T > img = wrap( imp );
>  ImgPlus< T > imgplus = new ImgPlus( img );
>
> imgplus.setCalibration( imp.getCal ... );
> imgplus.setName( imp.getTitle() );
>
> return imgplus;
> }
>
> Maybe 1) is the better way to go, I just wanted to bring up potential
> implications ....
>
>
>
> On Jul 12, 2012, at 17:14 , Jean-Yves Tinevez wrote:
>
>  On 12-Jul-12 23:05, Stephan Preibisch wrote:
>
> In principle, I agree. However it might break some code in a bad way. We
> used several times constructs like
>
>  Img< T > img;
>
>  if ( img instanceOf ImagePlusImg )
> {
>  // get the underlying instance (which is especially true after wrapping)
>  ImagePlus imp = ((ImagePlusImg)img).getImagePlus();
>  ....
>
>  // or do something else where you test instanceof
> }
>
>  which would suddenly fail because ImgPlus is an Img, but only HAS for
> example an ImagePlusImg...
>
>  What do you think?
>
>
> Bummer.
>
> How do we get the ImagePlusAdapter to return an Img that captures
> calibration as well then?
>
> --
> Please avoid top-posting, and please make sure to reply-to-all!
>
> Mailing list web interface: http://groups.google.com/group/fiji-devel
>
>
>  --
> Please avoid top-posting, and please make sure to reply-to-all!
>
> Mailing list web interface: http://groups.google.com/group/fiji-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120712/83081ff6/attachment.html>

From tinevez at pasteur.fr  Thu Jul 12 16:28:28 2012
From: tinevez at pasteur.fr (Jean-Yves Tinevez)
Date: Thu, 12 Jul 2012 23:28:28 +0200
Subject: [ImageJ-devel] [fiji-devel] New methods in CalibratedSpace
In-Reply-To: <CADN69ymHBD=F1Tj6CWhEiPtV9qRKbRiU7wUT3_18c-Dw6snmOw@mail.gmail.com>
References: <2137548E-C7CD-4DD8-9FF0-EBA2B887DA3A@mpi-cbg.de>
	<CADN69yndvXj8VGmazH9ktxkrZQrAiOYmGm_OLD+zpB+aj1w-Bw@mail.gmail.com>
	<57385D10-BBBE-49C0-8503-2E1B0FACC4D7@mpi-cbg.de>
	<4FFF3382.7070706@pasteur.fr>
	<D74766EC-35E0-4A28-A67C-D048362A4CCE@mpi-cbg.de>
	<CADN69yk-GxQ2HFyUPqBSL+reGk9RD6W6K-AK+ockuXcuUpgdEw@mail.gmail.com>
	<BACD9340-4397-4CD5-954A-CC6D091ECEF1@mpi-cbg.de>
	<4FFF3E1B.2010807@pasteur.fr>
	<BEAA40B0-E03D-4E96-AB0E-CCF580FBC217@mpi-cbg.de>
	<CADN69ymHBD=F1Tj6CWhEiPtV9qRKbRiU7wUT3_18c-Dw6snmOw@mail.gmail.com>
Message-ID: <4FFF417C.8000707@pasteur.fr>

On 12-Jul-12 23:22, Curtis Rueden wrote:
> Hi Steffi & J-Y,
>
> > if ( img instanceOf ImagePlusImg )
>
> I think using instanceof in this way is quite evil, and should be 
> avoided whenever possible. It is something I very much want to avoid 
> in the core ImgLib2 and ImageJ2 code, because it prohibits 
> extensibility. Better is to put the common functionality into an 
> interface method declaration and then implement it differently in the 
> different subclasses.
>
> That said, how to avoid writing code like this depends on the 
> situation. We'd have to look over the various places in code that it 
> is currently happening...
>
> > 1) break it and maybe it is just fine
> > 2) make a wrapImgPlus method
> > Maybe 1) is the better way to go, I just wanted to bring up 
> potential implications ....
>
> In this case, given that it would be easy to simply add the 
> wrapImgPlus methods, that may be a safer way to go. Anyone else have 
> an opinion?

Maybe

we could take the thing in reverse:

- have wrap() methods return an actual ImagePlusImg
- have ImagePlusImg be an ImgPlus

I quickly looked and this is not trivial: ImagePlusImg is already a 
PlanarImg, and we would have to add some hierarchy in the middle...


From preibisch at mpi-cbg.de  Thu Jul 12 16:40:12 2012
From: preibisch at mpi-cbg.de (Stephan Preibisch)
Date: Thu, 12 Jul 2012 17:40:12 -0400
Subject: [ImageJ-devel] [fiji-devel] New methods in CalibratedSpace
In-Reply-To: <4FFF417C.8000707@pasteur.fr>
References: <2137548E-C7CD-4DD8-9FF0-EBA2B887DA3A@mpi-cbg.de>
	<CADN69yndvXj8VGmazH9ktxkrZQrAiOYmGm_OLD+zpB+aj1w-Bw@mail.gmail.com>
	<57385D10-BBBE-49C0-8503-2E1B0FACC4D7@mpi-cbg.de>
	<4FFF3382.7070706@pasteur.fr>
	<D74766EC-35E0-4A28-A67C-D048362A4CCE@mpi-cbg.de>
	<CADN69yk-GxQ2HFyUPqBSL+reGk9RD6W6K-AK+ockuXcuUpgdEw@mail.gmail.com>
	<BACD9340-4397-4CD5-954A-CC6D091ECEF1@mpi-cbg.de>
	<4FFF3E1B.2010807@pasteur.fr>
	<BEAA40B0-E03D-4E96-AB0E-CCF580FBC217@mpi-cbg.de>
	<CADN69ymHBD=F1Tj6CWhEiPtV9qRKbRiU7wUT3_18c-Dw6snmOw@mail.gmail.com>
	<4FFF417C.8000707@pasteur.fr>
Message-ID: <DA125629-92E4-4973-8CBA-B293BA2A17D3@mpi-cbg.de>

Good point J-Y, wrap should always return an ImagePlusImg ... 

But I do not really like that ImagePlusImg is an ImgPlus, because ImgPlus is an Img and has an Img. And on top ImagePlusImg is an Img, too. But then it could return itself, no, that gets too convolved for my taste ...

why not add a second wrap method then, we could call it:

ImgPlus imp = wrapMetaData( ImagePlus );

or so?

On Jul 12, 2012, at 17:28 , Jean-Yves Tinevez wrote:

> On 12-Jul-12 23:22, Curtis Rueden wrote:
>> Hi Steffi & J-Y,
>> 
>> > if ( img instanceOf ImagePlusImg )
>> 
>> I think using instanceof in this way is quite evil, and should be avoided whenever possible. It is something I very much want to avoid in the core ImgLib2 and ImageJ2 code, because it prohibits extensibility. Better is to put the common functionality into an interface method declaration and then implement it differently in the different subclasses.
>> 
>> That said, how to avoid writing code like this depends on the situation. We'd have to look over the various places in code that it is currently happening...
>> 
>> > 1) break it and maybe it is just fine
>> > 2) make a wrapImgPlus method
>> > Maybe 1) is the better way to go, I just wanted to bring up potential implications ....
>> 
>> In this case, given that it would be easy to simply add the wrapImgPlus methods, that may be a safer way to go. Anyone else have an opinion?
> 
> Maybe
> 
> we could take the thing in reverse:
> 
> - have wrap() methods return an actual ImagePlusImg
> - have ImagePlusImg be an ImgPlus
> 
> I quickly looked and this is not trivial: ImagePlusImg is already a PlanarImg, and we would have to add some hierarchy in the middle...



From saalfeld at mpi-cbg.de  Fri Jul 13 02:20:24 2012
From: saalfeld at mpi-cbg.de (Stephan Saalfeld)
Date: Fri, 13 Jul 2012 09:20:24 +0200
Subject: [ImageJ-devel] [fiji-devel] New methods in CalibratedSpace
In-Reply-To: <DA125629-92E4-4973-8CBA-B293BA2A17D3@mpi-cbg.de>
References: <2137548E-C7CD-4DD8-9FF0-EBA2B887DA3A@mpi-cbg.de>
	<CADN69yndvXj8VGmazH9ktxkrZQrAiOYmGm_OLD+zpB+aj1w-Bw@mail.gmail.com>
	<57385D10-BBBE-49C0-8503-2E1B0FACC4D7@mpi-cbg.de>
	<4FFF3382.7070706@pasteur.fr>
	<D74766EC-35E0-4A28-A67C-D048362A4CCE@mpi-cbg.de>
	<CADN69yk-GxQ2HFyUPqBSL+reGk9RD6W6K-AK+ockuXcuUpgdEw@mail.gmail.com>
	<BACD9340-4397-4CD5-954A-CC6D091ECEF1@mpi-cbg.de>
	<4FFF3E1B.2010807@pasteur.fr>
	<BEAA40B0-E03D-4E96-AB0E-CCF580FBC217@mpi-cbg.de>
	<CADN69ymHBD=F1Tj6CWhEiPtV9qRKbRiU7wUT3_18c-Dw6snmOw@mail.gmail.com>
	<4FFF417C.8000707@pasteur.fr>
	<DA125629-92E4-4973-8CBA-B293BA2A17D3@mpi-cbg.de>
Message-ID: <1342164024.2223.8.camel@saalfeld-thinkpad>

Hi,

I would not change the way ImgPlusImg and ImgPlus are designed right now
and not mix them.  Keep in mind that ImgPlusImg can return the ImagePlus
by which you have access to Calibration and all the other ImageJ
metadata.

I support adding a method wrapImgPlus or wrapToImgPlus (for better
grammar).

Best,
Stephan




On Thu, 2012-07-12 at 17:40 -0400, Stephan Preibisch wrote: 
> Good point J-Y, wrap should always return an ImagePlusImg ... 
> 
> But I do not really like that ImagePlusImg is an ImgPlus, because ImgPlus is an Img and has an Img. And on top ImagePlusImg is an Img, too. But then it could return itself, no, that gets too convolved for my taste ...
> 
> why not add a second wrap method then, we could call it:
> 
> ImgPlus imp = wrapMetaData( ImagePlus );
> 
> or so?
> 
> On Jul 12, 2012, at 17:28 , Jean-Yves Tinevez wrote:
> 
> > On 12-Jul-12 23:22, Curtis Rueden wrote:
> >> Hi Steffi & J-Y,
> >> 
> >> > if ( img instanceOf ImagePlusImg )
> >> 
> >> I think using instanceof in this way is quite evil, and should be avoided whenever possible. It is something I very much want to avoid in the core ImgLib2 and ImageJ2 code, because it prohibits extensibility. Better is to put the common functionality into an interface method declaration and then implement it differently in the different subclasses.
> >> 
> >> That said, how to avoid writing code like this depends on the situation. We'd have to look over the various places in code that it is currently happening...
> >> 
> >> > 1) break it and maybe it is just fine
> >> > 2) make a wrapImgPlus method
> >> > Maybe 1) is the better way to go, I just wanted to bring up potential implications ....
> >> 
> >> In this case, given that it would be easy to simply add the wrapImgPlus methods, that may be a safer way to go. Anyone else have an opinion?
> > 
> > Maybe
> > 
> > we could take the thing in reverse:
> > 
> > - have wrap() methods return an actual ImagePlusImg
> > - have ImagePlusImg be an ImgPlus
> > 
> > I quickly looked and this is not trivial: ImagePlusImg is already a PlanarImg, and we would have to add some hierarchy in the middle...
> 



From tinevez at pasteur.fr  Fri Jul 13 02:37:16 2012
From: tinevez at pasteur.fr (Jean-Yves Tinevez)
Date: Fri, 13 Jul 2012 09:37:16 +0200
Subject: [ImageJ-devel] [fiji-devel] New methods in CalibratedSpace
In-Reply-To: <1342164024.2223.8.camel@saalfeld-thinkpad>
References: <2137548E-C7CD-4DD8-9FF0-EBA2B887DA3A@mpi-cbg.de>
	<CADN69yndvXj8VGmazH9ktxkrZQrAiOYmGm_OLD+zpB+aj1w-Bw@mail.gmail.com>
	<57385D10-BBBE-49C0-8503-2E1B0FACC4D7@mpi-cbg.de>
	<4FFF3382.7070706@pasteur.fr>
	<D74766EC-35E0-4A28-A67C-D048362A4CCE@mpi-cbg.de>
	<CADN69yk-GxQ2HFyUPqBSL+reGk9RD6W6K-AK+ockuXcuUpgdEw@mail.gmail.com>
	<BACD9340-4397-4CD5-954A-CC6D091ECEF1@mpi-cbg.de>
	<4FFF3E1B.2010807@pasteur.fr>
	<BEAA40B0-E03D-4E96-AB0E-CCF580FBC217@mpi-cbg.de>
	<CADN69ymHBD=F1Tj6CWhEiPtV9qRKbRiU7wUT3_18c-Dw6snmOw@mail.gmail.com>
	<4FFF417C.8000707@pasteur.fr>
	<DA125629-92E4-4973-8CBA-B293BA2A17D3@mpi-cbg.de>
	<1342164024.2223.8.camel@saalfeld-thinkpad>
Message-ID: <5555A14D-2110-4A76-A718-FB7A62971EA2@pasteur.fr>


On 13 juil. 2012, at 09:20, Stephan Saalfeld wrote:

> Hi,
> 
> I would not change the way ImgPlusImg and ImgPlus are designed right now
> and not mix them.  Keep in mind that ImgPlusImg can return the ImagePlus
> by which you have access to Calibration and all the other ImageJ
> metadata.
> 
> I support adding a method wrapImgPlus or wrapToImgPlus (for better
> grammar).

I understand your points. ImgPlus is sexy and is adequate.

But then, what of ImagePlusImg? What would be its purpose? Johannes, thou who bore it, what is the purpose of thy infant? 

Best
jy

From saalfeld at mpi-cbg.de  Fri Jul 13 02:39:54 2012
From: saalfeld at mpi-cbg.de (Stephan Saalfeld)
Date: Fri, 13 Jul 2012 09:39:54 +0200
Subject: [ImageJ-devel] [fiji-devel] New methods in CalibratedSpace
In-Reply-To: <5555A14D-2110-4A76-A718-FB7A62971EA2@pasteur.fr>
References: <2137548E-C7CD-4DD8-9FF0-EBA2B887DA3A@mpi-cbg.de>
	<CADN69yndvXj8VGmazH9ktxkrZQrAiOYmGm_OLD+zpB+aj1w-Bw@mail.gmail.com>
	<57385D10-BBBE-49C0-8503-2E1B0FACC4D7@mpi-cbg.de>
	<4FFF3382.7070706@pasteur.fr>
	<D74766EC-35E0-4A28-A67C-D048362A4CCE@mpi-cbg.de>
	<CADN69yk-GxQ2HFyUPqBSL+reGk9RD6W6K-AK+ockuXcuUpgdEw@mail.gmail.com>
	<BACD9340-4397-4CD5-954A-CC6D091ECEF1@mpi-cbg.de>
	<4FFF3E1B.2010807@pasteur.fr>
	<BEAA40B0-E03D-4E96-AB0E-CCF580FBC217@mpi-cbg.de>
	<CADN69ymHBD=F1Tj6CWhEiPtV9qRKbRiU7wUT3_18c-Dw6snmOw@mail.gmail.com>
	<4FFF417C.8000707@pasteur.fr>
	<DA125629-92E4-4973-8CBA-B293BA2A17D3@mpi-cbg.de>
	<1342164024.2223.8.camel@saalfeld-thinkpad>
	<5555A14D-2110-4A76-A718-FB7A62971EA2@pasteur.fr>
Message-ID: <1342165194.2223.15.camel@saalfeld-thinkpad>

The other way round---no?

ImagePlusImg is a container to use an existing ImagePlus transparently
through ImgLib2, in other words a `non-copying' wrapper into another
library's data.  ImgPlus is a construct that mimics ImageJ's ImagePlus
in a sense that it combines any Img (ImageProcessor/ImageStack in ImageJ
speak) with rudimentary though useful meta-data such as a name and
linear calibration factors.  ImgPlus is most useful in the context of
ImageJ2 where exactly that meta-data is needed.

Best,
Stephan




On Fri, 2012-07-13 at 09:37 +0200, Jean-Yves Tinevez wrote: 
> On 13 juil. 2012, at 09:20, Stephan Saalfeld wrote:
> 
> > Hi,
> > 
> > I would not change the way ImgPlusImg and ImgPlus are designed right now
> > and not mix them.  Keep in mind that ImgPlusImg can return the ImagePlus
> > by which you have access to Calibration and all the other ImageJ
> > metadata.
> > 
> > I support adding a method wrapImgPlus or wrapToImgPlus (for better
> > grammar).
> 
> I understand your points. ImgPlus is sexy and is adequate.
> 
> But then, what of ImagePlusImg? What would be its purpose? Johannes, thou who bore it, what is the purpose of thy infant? 
> 
> Best
> jy



From ctrueden at wisc.edu  Fri Jul 13 15:47:18 2012
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Fri, 13 Jul 2012 15:47:18 -0500
Subject: [ImageJ-devel] ImageJ 2.0.0-beta3 released
Message-ID: <CADN69ymz+Fw53oeNJBKe3+riL2CB4xas0E8XtFN8ZQQ+FfhY+w@mail.gmail.com>

Hi everyone,

Today the ImageJDev team is releasing the third beta of ImageJ2, version
2.0.0-beta3.

ImageJ 2.0.0-beta3 is a "beta"-quality release, meaning the code is not
finished. The design is more stable than before but still subject to change
until the final 2.0.0 release. It is recommended that people continue to
use ImageJ v1.x for critical work.

The ImageJ2 user interface is modeled after ImageJ v1.x as much as
possible. However, under the hood, ImageJ2 is a complete redesign of
ImageJ. It provides backward compatibility with older versions of ImageJ by
bundling the latest v1.x code and translating between "legacy" and "modern"
image structures.

Development of this release of ImageJ2 focused heavily on making the
architecture and infrastructure more flexible and more capable of running
headlessly (without a GUI). To accommodate this, changes were made to
displays, menus, events, the updater and in many other areas. However,
there were also some improvements at the application level?all in all, over
100 bugfixes and improvements.

For further details on this release, including a discussion of new
features, please see our blog post:
  http://developer.imagej.net/2012/07/13/imagej-v200-beta3

You can download the release from:
  http://developer.imagej.net/downloads

That page also has a table of planned future releases and roadmap links for
the project.

For more details on the ImageJ developments, see the web site at:
  http://developer.imagej.net/

Regards,
Curtis Rueden
 ImageJDev project lead
Laboratory for Optical and Computational Instrumentation
University of Wisconsin-Madison
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120713/b466e684/attachment.html>

From saalfeld at mpi-cbg.de  Sat Jul 14 18:55:14 2012
From: saalfeld at mpi-cbg.de (Stephan Saalfeld)
Date: Sun, 15 Jul 2012 01:55:14 +0200
Subject: [ImageJ-devel] [fiji-devel] Re:  New imglib2-algorithms-legacy
In-Reply-To: <alpine.DEB.1.00.1207102111270.32459@s15462909.onlinehome-server.info>
References: <B69B5F73-F943-43CA-BA63-3302E450BC2C@mpi-cbg.de>
	<alpine.DEB.1.00.1207101818550.32459@s15462909.onlinehome-server.info>
	<CADN69yn0nGOpyJzuemZv=83ozGLu7rV8NCZjJrAunpOXgkJT3w@mail.gmail.com>
	<alpine.DEB.1.00.1207101904070.32459@s15462909.onlinehome-server.info>
	<002C3F27-B718-4072-8C90-0DC5F9A2419D@mpi-cbg.de>
	<alpine.DEB.1.00.1207102111270.32459@s15462909.onlinehome-server.info>
Message-ID: <1342310114.6981.67.camel@saalfeld-thinkpad>

Hi Johannes,

as a subscriber to the Fiji Wiki RSS feed I see that about 10 new users
register at the Wiki per each day since it's open.  If those are not
bots then hooray, we are getting thousands of contributors in the next
few months.  However, none of the new users has yet contributed anything
and they all have very web1.0 ICQ-names that makes me believe that
actually they are bots.  I do not know if we should stress openness so
far to welcome script-kids to play with our Wiki---sounds like a lot of
hairy administration work.  For now, it renders the RSS-feed annoying
and useless.

What do you think?

Best,
Stephan




On Tue, 2012-07-10 at 22:49 +0200, Johannes Schindelin wrote: 
> Hi Steffi,
> 
> On Tue, 10 Jul 2012, Stephan Preibisch wrote:
> 
> > this is very useful, could you put maybe onto the Fiji wiki that when
> > searching for "Maven" this would shop up? I guess I will know if I
> > really got it once I try to make a new src-plugins plugin ...
> 
> For the lurkers: I added the mail in slightly edited form to the Wiki
> already before seeing the request: http://fiji.sc/Maven.
> 
> And for future reference: it is a Wiki, everybody is welcome to
> contribute. You can even take anything I wrote in public and add it there.
> If you are worried about attribution, just write in the summary line
> "these were mumblings of Dscho on the mailing list" or some such.
> 
> By the way, for spam fighting reasons, the Wiki was closed in the sense
> that you needed to ask someone with an account to make you one.
> 
> I realized that this was not as open as I want Fiji to be, so I changed
> that. All that is required now is to specify your email address; a link
> will be sent to you which lets you set the password.
> 
> Ciao,
> Dscho
> 
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel



From saalfeld at mpi-cbg.de  Sat Jul 14 18:58:34 2012
From: saalfeld at mpi-cbg.de (Stephan Saalfeld)
Date: Sun, 15 Jul 2012 01:58:34 +0200
Subject: [ImageJ-devel] [fiji-devel] ImageJ 2.0.0-beta3 released
In-Reply-To: <CADN69ymz+Fw53oeNJBKe3+riL2CB4xas0E8XtFN8ZQQ+FfhY+w@mail.gmail.com>
References: <CADN69ymz+Fw53oeNJBKe3+riL2CB4xas0E8XtFN8ZQQ+FfhY+w@mail.gmail.com>
Message-ID: <1342310314.6981.70.camel@saalfeld-thinkpad>

Congrats to the ImageJDev team!

Cheers,
Stephan




On Fri, 2012-07-13 at 15:47 -0500, Curtis Rueden wrote: 
> Hi everyone,
> 
> Today the ImageJDev team is releasing the third beta of ImageJ2, version
> 2.0.0-beta3.
> 
> ImageJ 2.0.0-beta3 is a "beta"-quality release, meaning the code is not
> finished. The design is more stable than before but still subject to change
> until the final 2.0.0 release. It is recommended that people continue to
> use ImageJ v1.x for critical work.
> 
> The ImageJ2 user interface is modeled after ImageJ v1.x as much as
> possible. However, under the hood, ImageJ2 is a complete redesign of
> ImageJ. It provides backward compatibility with older versions of ImageJ by
> bundling the latest v1.x code and translating between "legacy" and "modern"
> image structures.
> 
> Development of this release of ImageJ2 focused heavily on making the
> architecture and infrastructure more flexible and more capable of running
> headlessly (without a GUI). To accommodate this, changes were made to
> displays, menus, events, the updater and in many other areas. However,
> there were also some improvements at the application level?all in all, over
> 100 bugfixes and improvements.
> 
> For further details on this release, including a discussion of new
> features, please see our blog post:
>   http://developer.imagej.net/2012/07/13/imagej-v200-beta3
> 
> You can download the release from:
>   http://developer.imagej.net/downloads
> 
> That page also has a table of planned future releases and roadmap links for
> the project.
> 
> For more details on the ImageJ developments, see the web site at:
>   http://developer.imagej.net/
> 
> Regards,
> Curtis Rueden
>  ImageJDev project lead
> Laboratory for Optical and Computational Instrumentation
> University of Wisconsin-Madison
> 



From Johannes.Schindelin at gmx.de  Sun Jul 15 02:07:54 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Sun, 15 Jul 2012 02:07:54 -0500 (CDT)
Subject: [ImageJ-devel] Dubious new Wiki accounts,
 was Re:  [fiji-devel] Re:  New imglib2-algorithms-legacy
In-Reply-To: <1342310114.6981.67.camel@saalfeld-thinkpad>
References: <B69B5F73-F943-43CA-BA63-3302E450BC2C@mpi-cbg.de>
	<alpine.DEB.1.00.1207101818550.32459@s15462909.onlinehome-server.info>
	<CADN69yn0nGOpyJzuemZv=83ozGLu7rV8NCZjJrAunpOXgkJT3w@mail.gmail.com>
	<alpine.DEB.1.00.1207101904070.32459@s15462909.onlinehome-server.info>
	<002C3F27-B718-4072-8C90-0DC5F9A2419D@mpi-cbg.de>
	<alpine.DEB.1.00.1207102111270.32459@s15462909.onlinehome-server.info>
	<1342310114.6981.67.camel@saalfeld-thinkpad>
Message-ID: <alpine.DEB.1.00.1207150147320.3023@bonsai2>

Hi Stephan,

On Sun, 15 Jul 2012, Stephan Saalfeld wrote:

> as a subscriber to the Fiji Wiki RSS feed I see that about 10 new users
> register at the Wiki per each day since it's open.  If those are not
> bots then hooray, we are getting thousands of contributors in the next
> few months.  However, none of the new users has yet contributed anything
> and they all have very web1.0 ICQ-names that makes me believe that
> actually they are bots.  I do not know if we should stress openness so
> far to welcome script-kids to play with our Wiki---sounds like a lot of
> hairy administration work.  For now, it renders the RSS-feed annoying
> and useless.

I am sorry for that!

However, I activated the "Register by-email" for a reason... almost all of
them are not what MediaWiki calls "authenticated", and I plan to use the
"Merge and Delete Users" on user accounts that have not been authenticated
for a week.

If this bothers you, I can add something like a Captcha, but I do not
expect any spam on the Wiki.

Ciao,
Dscho


From saalfeld at mpi-cbg.de  Sun Jul 15 05:10:48 2012
From: saalfeld at mpi-cbg.de (Stephan Saalfeld)
Date: Sun, 15 Jul 2012 12:10:48 +0200
Subject: [ImageJ-devel] Dubious new Wiki accounts,
 was Re:  [fiji-devel] Re: New imglib2-algorithms-legacy
In-Reply-To: <alpine.DEB.1.00.1207150147320.3023@bonsai2>
References: <B69B5F73-F943-43CA-BA63-3302E450BC2C@mpi-cbg.de>
	<alpine.DEB.1.00.1207101818550.32459@s15462909.onlinehome-server.info>
	<CADN69yn0nGOpyJzuemZv=83ozGLu7rV8NCZjJrAunpOXgkJT3w@mail.gmail.com>
	<alpine.DEB.1.00.1207101904070.32459@s15462909.onlinehome-server.info>
	<002C3F27-B718-4072-8C90-0DC5F9A2419D@mpi-cbg.de>
	<alpine.DEB.1.00.1207102111270.32459@s15462909.onlinehome-server.info>
	<1342310114.6981.67.camel@saalfeld-thinkpad>
	<alpine.DEB.1.00.1207150147320.3023@bonsai2>
Message-ID: <1342347048.2807.56.camel@saalfeld-thinkpad>

Hi,

a Captcha would help to get the spam off the RSS feed that previously
was a very useful tool.  Since we support intelligent image processing
we may be willing to warmly welcome bots that can read captchas ;)

Any solution that cleans up the news-feed be it Captcha or turn back to
user-invited accounts is very welcome.  Thanks.

Best,
Stephan




On Sun, 2012-07-15 at 02:07 -0500, Johannes Schindelin wrote: 
> Hi Stephan,
> 
> On Sun, 15 Jul 2012, Stephan Saalfeld wrote:
> 
> > as a subscriber to the Fiji Wiki RSS feed I see that about 10 new users
> > register at the Wiki per each day since it's open.  If those are not
> > bots then hooray, we are getting thousands of contributors in the next
> > few months.  However, none of the new users has yet contributed anything
> > and they all have very web1.0 ICQ-names that makes me believe that
> > actually they are bots.  I do not know if we should stress openness so
> > far to welcome script-kids to play with our Wiki---sounds like a lot of
> > hairy administration work.  For now, it renders the RSS-feed annoying
> > and useless.
> 
> I am sorry for that!
> 
> However, I activated the "Register by-email" for a reason... almost all of
> them are not what MediaWiki calls "authenticated", and I plan to use the
> "Merge and Delete Users" on user accounts that have not been authenticated
> for a week.
> 
> If this bothers you, I can add something like a Captcha, but I do not
> expect any spam on the Wiki.
> 
> Ciao,
> Dscho



From Johannes.Schindelin at gmx.de  Sun Jul 15 14:38:29 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Sun, 15 Jul 2012 14:38:29 -0500 (CDT)
Subject: [ImageJ-devel] Dubious new Wiki accounts,
 was Re:  [fiji-devel] Re: New imglib2-algorithms-legacy
In-Reply-To: <1342347048.2807.56.camel@saalfeld-thinkpad>
References: <B69B5F73-F943-43CA-BA63-3302E450BC2C@mpi-cbg.de>
	<alpine.DEB.1.00.1207101818550.32459@s15462909.onlinehome-server.info>
	<CADN69yn0nGOpyJzuemZv=83ozGLu7rV8NCZjJrAunpOXgkJT3w@mail.gmail.com>
	<alpine.DEB.1.00.1207101904070.32459@s15462909.onlinehome-server.info>
	<002C3F27-B718-4072-8C90-0DC5F9A2419D@mpi-cbg.de>
	<alpine.DEB.1.00.1207102111270.32459@s15462909.onlinehome-server.info>
	<1342310114.6981.67.camel@saalfeld-thinkpad>
	<alpine.DEB.1.00.1207150147320.3023@bonsai2>
	<1342347048.2807.56.camel@saalfeld-thinkpad>
Message-ID: <alpine.DEB.1.00.1207151437380.3023@bonsai2>

Hi Stephan,

On Sun, 15 Jul 2012, Stephan Saalfeld wrote:

> a Captcha would help to get the spam off the RSS feed that previously
> was a very useful tool.  Since we support intelligent image processing
> we may be willing to warmly welcome bots that can read captchas ;)

I turned on math-based captcha for creating accounts. Should that not be
enough, I will activated reCAPTCHA.

Ciao,
Dscho


From tinevez at pasteur.fr  Sun Jul 15 15:16:58 2012
From: tinevez at pasteur.fr (Jean-Yves Tinevez)
Date: Sun, 15 Jul 2012 22:16:58 +0200
Subject: [ImageJ-devel] [fiji-devel] New methods in CalibratedSpace
In-Reply-To: <1342165194.2223.15.camel@saalfeld-thinkpad>
References: <2137548E-C7CD-4DD8-9FF0-EBA2B887DA3A@mpi-cbg.de>
	<CADN69yndvXj8VGmazH9ktxkrZQrAiOYmGm_OLD+zpB+aj1w-Bw@mail.gmail.com>
	<57385D10-BBBE-49C0-8503-2E1B0FACC4D7@mpi-cbg.de>
	<4FFF3382.7070706@pasteur.fr>
	<D74766EC-35E0-4A28-A67C-D048362A4CCE@mpi-cbg.de>
	<CADN69yk-GxQ2HFyUPqBSL+reGk9RD6W6K-AK+ockuXcuUpgdEw@mail.gmail.com>
	<BACD9340-4397-4CD5-954A-CC6D091ECEF1@mpi-cbg.de>
	<4FFF3E1B.2010807@pasteur.fr>
	<BEAA40B0-E03D-4E96-AB0E-CCF580FBC217@mpi-cbg.de>
	<CADN69ymHBD=F1Tj6CWhEiPtV9qRKbRiU7wUT3_18c-Dw6snmOw@mail.gmail.com>
	<4FFF417C.8000707@pasteur.fr>
	<DA125629-92E4-4973-8CBA-B293BA2A17D3@mpi-cbg.de>
	<1342164024.2223.8.camel@saalfeld-thinkpad>
	<5555A14D-2110-4A76-A718-FB7A62971EA2@pasteur.fr>
	<1342165194.2223.15.camel@saalfeld-thinkpad>
Message-ID: <5003253A.8070809@pasteur.fr>

On 13-Jul-12 09:39, Stephan Saalfeld wrote:
> The other way round---no?
>
> ImagePlusImg is a container to use an existing ImagePlus transparently
> through ImgLib2, in other words a `non-copying' wrapper into another
> library's data.  ImgPlus is a construct that mimics ImageJ's ImagePlus
> in a sense that it combines any Img (ImageProcessor/ImageStack in ImageJ
> speak) with rudimentary though useful meta-data such as a name and
> linear calibration factors.  ImgPlus is most useful in the context of
> ImageJ2 where exactly that meta-data is needed.


Hi all,

In the same line.

I modified ImagePlusAdapter so that the correct calibration values and 
Axis type are determined from ImagePlus. I saw that there were a nice 
AxisType class to identify dimensions. Is there a plan to have them 
store also the dimension units (such as um, minutes, etc..)?
What does IJ2 guys need here?

Cheers
jy


From Johannes.Schindelin at gmx.de  Sun Jul 15 16:05:32 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Sun, 15 Jul 2012 16:05:32 -0500 (CDT)
Subject: [ImageJ-devel] Dubious new Wiki accounts,
 was Re:  [fiji-devel] Re: New imglib2-algorithms-legacy
In-Reply-To: <alpine.DEB.1.00.1207151437380.3023@bonsai2>
References: <B69B5F73-F943-43CA-BA63-3302E450BC2C@mpi-cbg.de>
	<alpine.DEB.1.00.1207101818550.32459@s15462909.onlinehome-server.info>
	<CADN69yn0nGOpyJzuemZv=83ozGLu7rV8NCZjJrAunpOXgkJT3w@mail.gmail.com>
	<alpine.DEB.1.00.1207101904070.32459@s15462909.onlinehome-server.info>
	<002C3F27-B718-4072-8C90-0DC5F9A2419D@mpi-cbg.de>
	<alpine.DEB.1.00.1207102111270.32459@s15462909.onlinehome-server.info>
	<1342310114.6981.67.camel@saalfeld-thinkpad>
	<alpine.DEB.1.00.1207150147320.3023@bonsai2>
	<1342347048.2807.56.camel@saalfeld-thinkpad>
	<alpine.DEB.1.00.1207151437380.3023@bonsai2>
Message-ID: <alpine.DEB.1.00.1207151604590.3023@bonsai2>

Hi,

On Sun, 15 Jul 2012, Johannes Schindelin wrote:

> On Sun, 15 Jul 2012, Stephan Saalfeld wrote:
> 
> > a Captcha would help to get the spam off the RSS feed that previously
> > was a very useful tool.  Since we support intelligent image processing
> > we may be willing to warmly welcome bots that can read captchas ;)
> 
> I turned on math-based captcha for creating accounts. Should that not be
> enough, I will activated reCAPTCHA.

It seemed to be not enough. So I activated reCAPTCHA.

Ciao,
Dscho


From padraig.looney at gmail.com  Mon Jul 16 03:13:19 2012
From: padraig.looney at gmail.com (Padraig Looney)
Date: Mon, 16 Jul 2012 09:13:19 +0100
Subject: [ImageJ-devel] Simple usage of ImageJ2 and ImgLib2
Message-ID: <CAEvY7i9EiwFYmMTUBSWFnbvcyDiP9mYAwkRrxjw0Fa2j1t4Rgw@mail.gmail.com>

Dear list,

Apologies if this posting is not in the correct place but I seem to have
hit a brick wall in moving to ImgLib2 and ImageJ2.

I have used ImageJ 1 without the the user interface for a variety of
software projects. In Image J to open an Image I would use

Opener opener = new opener();
Imageplus imp = opener.openImage("someFile");
imp.show();

and from there I could perform the processing and change the display etc.

With a view to moving to imgLib2 and ImageJ2 I have been going through the
Javadoc to try to display an image perform more complicated tasks. So I
have found this example among others on the Imglib2 site but in the imgLibs
package there is no ImageJFunctions anymore.

public < T extends RealType< T > & NativeType< T > > Example1b()
        throws ImgIOException, IncompatibleTypeException
    {
        // define the file to open
        File file = new File( "DrosophilaWing.tif" );

        // open with ImgOpener using an ArrayImgFactory, here the return
type will be
        // defined by the opener
        // the opener will ignore the Type of the ArrayImgFactory
        ImgFactory< ? > imgFactory = new ArrayImgFactory< T >();
        Img< T > image = new ImgOpener().openImg( file.getAbsolutePath(),
imgFactory );

        // display it via ImgLib using ImageJ
        ImageJFunctions.show( image );

        // open with ImgOpener as Float using a CellImgFactory, it will be
opened as float
        // independent of the type of the image
        // to enforce to open it as FloatType, an instance of FloatType has
to be passed along
        Img< FloatType > imageFloat = new ImgOpener().openImg(
file.getAbsolutePath(),
            new CellImgFactory< FloatType >( 10 ), new FloatType() );

        // display it via ImgLib using ImageJ
        ImageJFunctions.show( imageFloat );
    }

Ideally I would like to use Swing and get a Canvas containing the image and
to be able to put this on a JFrame. I have gone through the ImageJ2 javadoc
and I have found a range of classes that seem relevant such as
Defaultdataset, SwingSdiImageDisplayViewer, SwingDisplayPanel but I keep
running into errors with Services that don't exist because I am probably
not using ImageJ2 as intended.

Many thanks

Padraig Looney
Medical Physicist
Royal Surrey County Hospital
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120716/16729a2e/attachment.html>

From saalfeld at mpi-cbg.de  Mon Jul 16 03:43:13 2012
From: saalfeld at mpi-cbg.de (Stephan Saalfeld)
Date: Mon, 16 Jul 2012 10:43:13 +0200
Subject: [ImageJ-devel] Dubious new Wiki accounts,
 was Re:  [fiji-devel] Re: New imglib2-algorithms-legacy
In-Reply-To: <alpine.DEB.1.00.1207151604590.3023@bonsai2>
References: <B69B5F73-F943-43CA-BA63-3302E450BC2C@mpi-cbg.de>
	<alpine.DEB.1.00.1207101818550.32459@s15462909.onlinehome-server.info>
	<CADN69yn0nGOpyJzuemZv=83ozGLu7rV8NCZjJrAunpOXgkJT3w@mail.gmail.com>
	<alpine.DEB.1.00.1207101904070.32459@s15462909.onlinehome-server.info>
	<002C3F27-B718-4072-8C90-0DC5F9A2419D@mpi-cbg.de>
	<alpine.DEB.1.00.1207102111270.32459@s15462909.onlinehome-server.info>
	<1342310114.6981.67.camel@saalfeld-thinkpad>
	<alpine.DEB.1.00.1207150147320.3023@bonsai2>
	<1342347048.2807.56.camel@saalfeld-thinkpad>
	<alpine.DEB.1.00.1207151437380.3023@bonsai2>
	<alpine.DEB.1.00.1207151604590.3023@bonsai2>
Message-ID: <1342428193.4109.8.camel@saalfeld-thinkpad>

Thanks!

BTW---confirmation e-mails aren't a very solid entrance door.  If I were
to write a bot, I would make it use either trashmail or any personal
mail-server that I control and call any link that comes to me by
mail---door open.

Cheers,
Stephan




On Sun, 2012-07-15 at 16:05 -0500, Johannes Schindelin wrote: 
> Hi,
> 
> On Sun, 15 Jul 2012, Johannes Schindelin wrote:
> 
> > On Sun, 15 Jul 2012, Stephan Saalfeld wrote:
> > 
> > > a Captcha would help to get the spam off the RSS feed that previously
> > > was a very useful tool.  Since we support intelligent image processing
> > > we may be willing to warmly welcome bots that can read captchas ;)
> > 
> > I turned on math-based captcha for creating accounts. Should that not be
> > enough, I will activated reCAPTCHA.
> 
> It seemed to be not enough. So I activated reCAPTCHA.
> 
> Ciao,
> Dscho



From preibisch at mpi-cbg.de  Mon Jul 16 09:15:48 2012
From: preibisch at mpi-cbg.de (Stephan Preibisch)
Date: Mon, 16 Jul 2012 10:15:48 -0400
Subject: [ImageJ-devel] Simple usage of ImageJ2 and ImgLib2
In-Reply-To: <CAEvY7i9EiwFYmMTUBSWFnbvcyDiP9mYAwkRrxjw0Fa2j1t4Rgw@mail.gmail.com>
References: <CAEvY7i9EiwFYmMTUBSWFnbvcyDiP9mYAwkRrxjw0Fa2j1t4Rgw@mail.gmail.com>
Message-ID: <81995B45-E832-42F0-BF07-D25598D54F14@mpi-cbg.de>

Hi Padraig,

the ImageJFunctions is part of the imglib2-ij.jar package which you need to import ... this is, however, the ImageJ1 way to display ImgLib2 data, so we are not so sure that is what you are interested in. Maybe Curtis or Johannes could help?

Btw, if you are interested in getting a planar image (like each slice is a byte[], short[], float[], double[], etc.) you should use the PlanarImgFactory< T > which returns a PlanarImg<T, A>. It has a method "A getPlane(int planeNo)" which will return "A", i.e. the FloatArray, ByteArray, DoubleArray, ... containing the array for the respective plane. Each "A" has a method called "Object getCurrentStorageArray()", if it is a float-image it will be the "FloatArray" returning you float[]. Here is an example:

		// open image as float (returns an ImgPlus which has a PlanarImg)
		ImgPlus< FloatType > imgFloat = new ImgOpener().openImg( file.getAbsolutePath(),new PlanarImgFactory< FloatType >(), new FloatType() );
		
		// cast it to the right type of the PlanarImg
		PlanarImg< FloatType, FloatArray > planarImg = (PlanarImg< FloatType, FloatArray >)imgFloat.getImg();  

		// get plane number 0 (first plane)
		final float[] values = planarImg.getPlane( 0 ).getCurrentStorageArray();

Hope this helps,
Stephan and Tobias


On Jul 16, 2012, at 4:13 , Padraig Looney wrote:

> Dear list,
> 
> Apologies if this posting is not in the correct place but I seem to have hit a brick wall in moving to ImgLib2 and ImageJ2.
> 
> I have used ImageJ 1 without the the user interface for a variety of software projects. In Image J to open an Image I would use
> 
> Opener opener = new opener();
> Imageplus imp = opener.openImage("someFile");
> imp.show();
> 
> and from there I could perform the processing and change the display etc. 
> 
> With a view to moving to imgLib2 and ImageJ2 I have been going through the Javadoc to try to display an image perform more complicated tasks. So I have found this example among others on the Imglib2 site but in the imgLibs package there is no ImageJFunctions anymore.
> 
> public < T extends RealType< T > & NativeType< T > > Example1b()
>         throws ImgIOException, IncompatibleTypeException
>     {
>         // define the file to open
>         File file = new File( "DrosophilaWing.tif" );
>  
>         // open with ImgOpener using an ArrayImgFactory, here the return type will be
>         // defined by the opener
>         // the opener will ignore the Type of the ArrayImgFactory
>         ImgFactory< ? > imgFactory = new ArrayImgFactory< T >();
>         Img< T > image = new ImgOpener().openImg( file.getAbsolutePath(), imgFactory );
>  
>         // display it via ImgLib using ImageJ
>         ImageJFunctions.show( image );
>  
>         // open with ImgOpener as Float using a CellImgFactory, it will be opened as float 
>         // independent of the type of the image
>         // to enforce to open it as FloatType, an instance of FloatType has to be passed along
>         Img< FloatType > imageFloat = new ImgOpener().openImg( file.getAbsolutePath(),
>             new CellImgFactory< FloatType >( 10 ), new FloatType() );
>  
>         // display it via ImgLib using ImageJ
>         ImageJFunctions.show( imageFloat );
>     }
> 
> Ideally I would like to use Swing and get a Canvas containing the image and to be able to put this on a JFrame. I have gone through the ImageJ2 javadoc and I have found a range of classes that seem relevant such as Defaultdataset, SwingSdiImageDisplayViewer, SwingDisplayPanel but I keep running into errors with Services that don't exist because I am probably not using ImageJ2 as intended. 
> 
> Many thanks 
> 
> Padraig Looney
> Medical Physicist  
> Royal Surrey County Hospital
>  
> 
> 
> 
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel



From bdezonia at gmail.com  Mon Jul 16 10:55:40 2012
From: bdezonia at gmail.com (Barry DeZonia)
Date: Mon, 16 Jul 2012 10:55:40 -0500
Subject: [ImageJ-devel] [fiji-devel] New methods in CalibratedSpace
In-Reply-To: <5003253A.8070809@pasteur.fr>
References: <2137548E-C7CD-4DD8-9FF0-EBA2B887DA3A@mpi-cbg.de>
	<CADN69yndvXj8VGmazH9ktxkrZQrAiOYmGm_OLD+zpB+aj1w-Bw@mail.gmail.com>
	<57385D10-BBBE-49C0-8503-2E1B0FACC4D7@mpi-cbg.de>
	<4FFF3382.7070706@pasteur.fr>
	<D74766EC-35E0-4A28-A67C-D048362A4CCE@mpi-cbg.de>
	<CADN69yk-GxQ2HFyUPqBSL+reGk9RD6W6K-AK+ockuXcuUpgdEw@mail.gmail.com>
	<BACD9340-4397-4CD5-954A-CC6D091ECEF1@mpi-cbg.de>
	<4FFF3E1B.2010807@pasteur.fr>
	<BEAA40B0-E03D-4E96-AB0E-CCF580FBC217@mpi-cbg.de>
	<CADN69ymHBD=F1Tj6CWhEiPtV9qRKbRiU7wUT3_18c-Dw6snmOw@mail.gmail.com>
	<4FFF417C.8000707@pasteur.fr>
	<DA125629-92E4-4973-8CBA-B293BA2A17D3@mpi-cbg.de>
	<1342164024.2223.8.camel@saalfeld-thinkpad>
	<5555A14D-2110-4A76-A718-FB7A62971EA2@pasteur.fr>
	<1342165194.2223.15.camel@saalfeld-thinkpad>
	<5003253A.8070809@pasteur.fr>
Message-ID: <CAKcvfuSg3P5mX=p-K-VzDHQqrvQ8kaaF90=LLbWeiYVmVRmGLw@mail.gmail.com>

Curtis may not be able to respond to this topic in the near future. Note
that the support of units in Imglib2 was discussed a bit here:
http://imagej.net/pipermail/imagej-devel/2012-March/000732.html

On Sun, Jul 15, 2012 at 3:16 PM, Jean-Yves Tinevez <tinevez at pasteur.fr>wrote:

> On 13-Jul-12 09:39, Stephan Saalfeld wrote:
>
>> The other way round---no?
>>
>> ImagePlusImg is a container to use an existing ImagePlus transparently
>> through ImgLib2, in other words a `non-copying' wrapper into another
>> library's data.  ImgPlus is a construct that mimics ImageJ's ImagePlus
>> in a sense that it combines any Img (ImageProcessor/ImageStack in ImageJ
>> speak) with rudimentary though useful meta-data such as a name and
>> linear calibration factors.  ImgPlus is most useful in the context of
>> ImageJ2 where exactly that meta-data is needed.
>>
>
>
> Hi all,
>
> In the same line.
>
> I modified ImagePlusAdapter so that the correct calibration values and
> Axis type are determined from ImagePlus. I saw that there were a nice
> AxisType class to identify dimensions. Is there a plan to have them store
> also the dimension units (such as um, minutes, etc..)?
> What does IJ2 guys need here?
>
> Cheers
>
> jy
>
> --
> Please avoid top-posting, and please make sure to reply-to-all!
>
> Mailing list web interface: http://groups.google.com/**group/fiji-devel<http://groups.google.com/group/fiji-devel>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120716/c5775b5d/attachment-0001.html>

From Johannes.Schindelin at gmx.de  Mon Jul 16 10:41:13 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Mon, 16 Jul 2012 17:41:13 +0200 (CEST)
Subject: [ImageJ-devel] Dubious new Wiki accounts
In-Reply-To: <1342428193.4109.8.camel@saalfeld-thinkpad>
References: <B69B5F73-F943-43CA-BA63-3302E450BC2C@mpi-cbg.de>
	<alpine.DEB.1.00.1207101818550.32459@s15462909.onlinehome-server.info>
	<CADN69yn0nGOpyJzuemZv=83ozGLu7rV8NCZjJrAunpOXgkJT3w@mail.gmail.com>
	<alpine.DEB.1.00.1207101904070.32459@s15462909.onlinehome-server.info>
	<002C3F27-B718-4072-8C90-0DC5F9A2419D@mpi-cbg.de>
	<alpine.DEB.1.00.1207102111270.32459@s15462909.onlinehome-server.info>
	<1342310114.6981.67.camel@saalfeld-thinkpad>
	<alpine.DEB.1.00.1207150147320.3023@bonsai2>
	<1342347048.2807.56.camel@saalfeld-thinkpad>
	<alpine.DEB.1.00.1207151437380.3023@bonsai2>
	<alpine.DEB.1.00.1207151604590.3023@bonsai2>
	<1342428193.4109.8.camel@saalfeld-thinkpad>
Message-ID: <alpine.DEB.1.00.1207161737390.32459@s15462909.onlinehome-server.info>

Hi Stephan,

On Mon, 16 Jul 2012, Stephan Saalfeld wrote:

> Thanks!

You're welcome!

> BTW---confirmation e-mails aren't a very solid entrance door.  If I were
> to write a bot, I would make it use either trashmail or any personal
> mail-server that I control and call any link that comes to me by
> mail---door open.

Yes, but my major aim is not to keep bots out, but to strike a balance
between keeping bots out and lowering the barrier for the potentially many
people who were intimidated by not being able to get an account easily.

Should there be a spammer who gets through, I will block the account right
away and revert the changes. That's not too much trouble, methinks.

Ciao,
Dscho


From Johannes.Schindelin at gmx.de  Mon Jul 16 18:08:25 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Tue, 17 Jul 2012 01:08:25 +0200 (CEST)
Subject: [ImageJ-devel] Dubious new Wiki accounts
In-Reply-To: <alpine.DEB.1.00.1207161737390.32459@s15462909.onlinehome-server.info>
References: <B69B5F73-F943-43CA-BA63-3302E450BC2C@mpi-cbg.de>
	<alpine.DEB.1.00.1207101818550.32459@s15462909.onlinehome-server.info>
	<CADN69yn0nGOpyJzuemZv=83ozGLu7rV8NCZjJrAunpOXgkJT3w@mail.gmail.com>
	<alpine.DEB.1.00.1207101904070.32459@s15462909.onlinehome-server.info>
	<002C3F27-B718-4072-8C90-0DC5F9A2419D@mpi-cbg.de>
	<alpine.DEB.1.00.1207102111270.32459@s15462909.onlinehome-server.info>
	<1342310114.6981.67.camel@saalfeld-thinkpad>
	<alpine.DEB.1.00.1207150147320.3023@bonsai2>
	<1342347048.2807.56.camel@saalfeld-thinkpad>
	<alpine.DEB.1.00.1207151437380.3023@bonsai2>
	<alpine.DEB.1.00.1207151604590.3023@bonsai2>
	<1342428193.4109.8.camel@saalfeld-thinkpad>
	<alpine.DEB.1.00.1207161737390.32459@s15462909.onlinehome-server.info>
Message-ID: <alpine.DEB.1.00.1207162309330.32459@s15462909.onlinehome-server.info>

Hi Stephan, me again,

On Mon, 16 Jul 2012, Johannes Schindelin wrote:

> On Mon, 16 Jul 2012, Stephan Saalfeld wrote:
> 
> > BTW---confirmation e-mails aren't a very solid entrance door.  If I were
> > to write a bot, I would make it use either trashmail or any personal
> > mail-server that I control and call any link that comes to me by
> > mail---door open.
> 
> Yes, but my major aim is not to keep bots out, but to strike a balance
> between keeping bots out and lowering the barrier for the potentially many
> people who were intimidated by not being able to get an account easily.
> 
> Should there be a spammer who gets through, I will block the account right
> away and revert the changes. That's not too much trouble, methinks.

So far, the only problem I have is that reCAPTCHA did not prevent 4 more
accounts from being created. However, as I enhanced the
removeUnusedAccounts maintenance script of MediaWiki to clean up the logs
as well (you can see the effect in the current version of RecentChanges),
I hope that this is good enough to make the RSS feed usable again.

Ciao,
Dscho

P.S.: Of course, it does not help that I edited quite a bunch of pages
today, but those are legitimate changes.


From saalfeld at mpi-cbg.de  Mon Jul 16 18:17:29 2012
From: saalfeld at mpi-cbg.de (Stephan Saalfeld)
Date: Tue, 17 Jul 2012 01:17:29 +0200
Subject: [ImageJ-devel] [fiji-devel] Re:  Dubious new Wiki accounts
In-Reply-To: <alpine.DEB.1.00.1207162309330.32459@s15462909.onlinehome-server.info>
References: <B69B5F73-F943-43CA-BA63-3302E450BC2C@mpi-cbg.de>
	<alpine.DEB.1.00.1207101818550.32459@s15462909.onlinehome-server.info>
	<CADN69yn0nGOpyJzuemZv=83ozGLu7rV8NCZjJrAunpOXgkJT3w@mail.gmail.com>
	<alpine.DEB.1.00.1207101904070.32459@s15462909.onlinehome-server.info>
	<002C3F27-B718-4072-8C90-0DC5F9A2419D@mpi-cbg.de>
	<alpine.DEB.1.00.1207102111270.32459@s15462909.onlinehome-server.info>
	<1342310114.6981.67.camel@saalfeld-thinkpad>
	<alpine.DEB.1.00.1207150147320.3023@bonsai2>
	<1342347048.2807.56.camel@saalfeld-thinkpad>
	<alpine.DEB.1.00.1207151437380.3023@bonsai2>
	<alpine.DEB.1.00.1207151604590.3023@bonsai2>
	<1342428193.4109.8.camel@saalfeld-thinkpad>
	<alpine.DEB.1.00.1207161737390.32459@s15462909.onlinehome-server.info>
	<alpine.DEB.1.00.1207162309330.32459@s15462909.onlinehome-server.info>
Message-ID: <1342480649.4109.148.camel@saalfeld-thinkpad>

Hey,

> P.S.: Of course, it does not help that I edited quite a bunch of pages
> today, but those are legitimate changes.
> 

just wanted to say: Yes---you drowned it in a million URL cosmetic
changes :)

Hope all goes well with the smart/lucky bot accounts that made it
through.

Best,
Stephan



From preibisch at mpi-cbg.de  Tue Jul 17 16:08:06 2012
From: preibisch at mpi-cbg.de (Stephan Preibisch)
Date: Tue, 17 Jul 2012 17:08:06 -0400
Subject: [ImageJ-devel] Significant change to ImgOpener - or - why
	ImgOpener.openImg() cannot return a T
Message-ID: <D7931AC1-BA9B-4561-AA28-D901E3A652B4@mpi-cbg.de>

Hi guys,

this became a massive explanation. I suggest this as as solution to a problem we have been only partly aware of. I hope you enjoy reading ;)

Steffi


As the ImageJ conference is approaching I was talking with Johannes and we agreed that the ImgOpener needs to be finished. However, since its first version there has been a major design fault. 

But first the good news:
--------------------------------
It works perfectly fine if you say "open me an Image as float" or "...as UnsignedByte" or whatever, classically called by the method
-> new ImgOpener.openImg( String id, ImgFactory<T> factory, T type ); 
It can, without any problems, return you an Img<T>, and it requires that T is RealType (and not anymore NativeType, see at the end). So far, so good. 
Note that "T" is NOT a return parameter, but something you give to the openAs method.

Now the bad news. 
--------------------------
If you say "open this image as whatever RealType it is", it can do that, but it cannot assign a "T" to it - because T is not a return parameter. We made an ugly hack inside so that it seems as if it would work, but it does not. Now you might ask, why change it if it worked so far? Well, here is an easy example that would cause a ClassCastException on run time

public static <T extends RealType< T >> void main( String[] args )
{
	Img< T > img1 = new ImgOpener.openImg( "somepic_8bit.tif" ); // 8-bit unsigned
	Img< T > img2 = new ImgOpener.openImg( "somepic_32bit.tif" ); // 32-bit float

	img1.firstElement().set( img2.firstElement() ); // run-time crash
}

It will throw a ClassCastException because img1 is of UnsignedByteType and img2 of FloatType. But as we cast it in a dirty way, it compiles just fine.
So, we cannot return a "T", but what we can return is Img< which is at least a RealType >. And this is for sure always true, but img1 and img2 are not necessarily the same RealType (as above).

The correct way (which doesn't work)
--------------------------------------------------
What we should return is an Img< ? extends RealType< ? > >. However, it is not ensured that the two "?" are the same, so an Img of this type is basically incompatible with everything else, which means an unchecked cast is necessary. So although correct, maybe not a good idea. And it is really ugly to write if necessary.

The still somehow correct way
-----------------------------------------
Instead, it returns now an Img< RealType >. This is kind of a tradeoff. On one hand, this is very easy to write and will give you compile errors where it should, for example

	img1.firstElement().set( img2.firstElement() ); // COMPILE ERROR (not the same RealType realization)

OR
     
       public <T extends RealType< T >> void add( IterableInterval< T > i1, IterableInterval< T > i2 ) { .... }
       add( img1, img2 ); // COMPILE ERROR (not the same RealType realization)

BUT

	Gauss.inFloatInPlace( 2.0 , img1 ); // FINE (just one RealType realization required, inside it will be always the same "T")
	Gauss.inFloatInPlace( 2.0 , img2 ); // FINE (just one RealType realization required, inside it will be always the same "T")

	public < T extends RealType< T > > void add1( Img< T > img1, double value ) { ... }
        add1( img1, 5 ); // FINE (just one RealType realization required, inside it will be always the same "T")

	public < T extends RealType< T >, S extends RealType< S > > void add2( Img< T > img1, Img< S > img2 ) { ... }
        add2( img1, img2 ); // FINE (explicitly two different RealType realizations are allowed)

	public void add3( Img< RealType > img1, Img< RealType > img2 ) { ... }
        add3( img1, img2 ); // FINE (both are just some kind of RealType, but gives a warning)

On the other hand it gives a lot of Warnings because RealType should be more specified. 

Why not Img< RealType< ? > >
------------------------------------------
Similar problem as in <? extends RealType< ? > >. RealType< ? > is not a valid substitute for any construct like < T extends RealType < T > >. One would have to cast to Img< RealType >, so we can take this one right away as it is less writing.

Where did NativeType go?
------------------------------------
I do not see any reason why we should enforce a NativeType. There is no objection to load an image into a (hypothetical) ListImg< BigDecimalType >.

What are the implications?
-----------------------------------
We should write NOTHING except the method opening files for Img< RealType >. And also only if it is really required - quite often it is not. But if, Img< RealType > It is a completely valid input for any generic algorithm as show above for Gauss, add, etc. 



I implemented the changes on a branch called 'newimgopener'. It also contains four static convenience opening methods and a speed improvement.

Any comments are very welcome. If somebody has a better idea how to solve the problem ... I am all ears ...

Bye bye,
Steffi

From sapristi at gmail.com  Tue Jul 17 17:01:02 2012
From: sapristi at gmail.com (Albert Cardona)
Date: Wed, 18 Jul 2012 00:01:02 +0200
Subject: [ImageJ-devel] [ImageJ] #1104: Cannot open XML files for TrakEM2
In-Reply-To: <035.ad508dd6f01b8179ee6cdef84e50de65@imagej.net>
References: <020.c7c984eca64a70f3a3141e89796b25e3@imagej.net>
	<035.ad508dd6f01b8179ee6cdef84e50de65@imagej.net>
Message-ID: <CAJj13_-hTZZ+vigsXskfV5KV6MbJ-8LfLoOt95Uw7eyk-tH6LQ@mail.gmail.com>

2012/7/17 ImageJ <trac at imagej.net>:
> #1104: Cannot open XML files for TrakEM2
> ----------------------+---------------------------------
>  Reporter:  bdezonia  |       Owner:  bdezonia
>      Type:  defect    |      Status:  closed
>  Priority:  major     |   Milestone:  imagej-2.0.0-beta4
> Component:  other     |     Version:
>  Severity:  serious   |  Resolution:  invalid
>  Keywords:            |  Blocked By:
>  Blocking:            |
> ----------------------+---------------------------------
> Changes (by bdezonia):
>
>  * status:  new => closed
>  * resolution:   => invalid
>
>
> Comment:
>
>  I have heard nothing back. Albert, I am closing this ticket as invalid. If
>  you have more details then reopen this ticket and provide them. Thanks.



Barry,

as I wrote before:

"create  trakem2 project, push s to save it into an xml file, them run
imagej2 file open."

You will see that it does not open as TrakEM2, but the LOCI dialog opens.

Albert

-- 
http://albert.rierol.net
http://www.ini.uzh.ch/~acardona/


From Johannes.Schindelin at gmx.de  Tue Jul 17 17:45:20 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Wed, 18 Jul 2012 00:45:20 +0200 (CEST)
Subject: [ImageJ-devel] [ImageJ] #1104: Cannot open XML files for TrakEM2
In-Reply-To: <CAJj13_-hTZZ+vigsXskfV5KV6MbJ-8LfLoOt95Uw7eyk-tH6LQ@mail.gmail.com>
References: <020.c7c984eca64a70f3a3141e89796b25e3@imagej.net>
	<035.ad508dd6f01b8179ee6cdef84e50de65@imagej.net>
	<CAJj13_-hTZZ+vigsXskfV5KV6MbJ-8LfLoOt95Uw7eyk-tH6LQ@mail.gmail.com>
Message-ID: <alpine.DEB.1.00.1207180043070.32459@s15462909.onlinehome-server.info>

Hi Albert,

On Wed, 18 Jul 2012, Albert Cardona wrote:

> 2012/7/17 ImageJ <trac at imagej.net>:
> > #1104: Cannot open XML files for TrakEM2
> > ----------------------+---------------------------------
> >  Reporter:  bdezonia  |       Owner:  bdezonia
> >      Type:  defect    |      Status:  closed
> >  Priority:  major     |   Milestone:  imagej-2.0.0-beta4
> > Component:  other     |     Version:
> >  Severity:  serious   |  Resolution:  invalid
> >  Keywords:            |  Blocked By:
> >  Blocking:            |
> > ----------------------+---------------------------------
> > Changes (by bdezonia):
> >
> >  * status:  new => closed
> >  * resolution:   => invalid
> >
> >
> > Comment:
> >
> >  I have heard nothing back. Albert, I am closing this ticket as invalid. If
> >  you have more details then reopen this ticket and provide them. Thanks.
>
> "create  trakem2 project, push s to save it into an xml file, them run
> imagej2 file open."
> 
> You will see that it does not open as TrakEM2, but the LOCI dialog opens.

As sad as it makes me, Barry does not have Fiji installed. The best way to
let him reproduce, therefore, is to provide a minimal TrakEM2 project,
maybe zipped up.

If you do not expect plain ImageJ to work without TrakEM2 installed as a
plugin, please say so and zip up a minimal installation. Using the Fiji
Package Manager, this is easy.

Ciao,
Johannes


From sapristi at gmail.com  Wed Jul 18 00:30:13 2012
From: sapristi at gmail.com (Albert Cardona)
Date: Wed, 18 Jul 2012 07:30:13 +0200
Subject: [ImageJ-devel] [ImageJ] #1104: Cannot open XML files for TrakEM2
In-Reply-To: <alpine.DEB.1.00.1207180043070.32459@s15462909.onlinehome-server.info>
References: <020.c7c984eca64a70f3a3141e89796b25e3@imagej.net>
	<035.ad508dd6f01b8179ee6cdef84e50de65@imagej.net>
	<CAJj13_-hTZZ+vigsXskfV5KV6MbJ-8LfLoOt95Uw7eyk-tH6LQ@mail.gmail.com>
	<alpine.DEB.1.00.1207180043070.32459@s15462909.onlinehome-server.info>
Message-ID: <CAJj13_94c=v23MQDKsQrgq2aCLiuaj7kyumGhq++dKEcuex47Q@mail.gmail.com>

2012/7/18 Johannes Schindelin <Johannes.Schindelin at gmx.de>:
> Hi Albert,
>
> On Wed, 18 Jul 2012, Albert Cardona wrote:
>
>> 2012/7/17 ImageJ <trac at imagej.net>:
>> > #1104: Cannot open XML files for TrakEM2
>> > ----------------------+---------------------------------
>> >  Reporter:  bdezonia  |       Owner:  bdezonia
>> >      Type:  defect    |      Status:  closed
>> >  Priority:  major     |   Milestone:  imagej-2.0.0-beta4
>> > Component:  other     |     Version:
>> >  Severity:  serious   |  Resolution:  invalid
>> >  Keywords:            |  Blocked By:
>> >  Blocking:            |
>> > ----------------------+---------------------------------
>> > Changes (by bdezonia):
>> >
>> >  * status:  new => closed
>> >  * resolution:   => invalid
>> >
>> >
>> > Comment:
>> >
>> >  I have heard nothing back. Albert, I am closing this ticket as invalid. If
>> >  you have more details then reopen this ticket and provide them. Thanks.
>>
>> "create  trakem2 project, push s to save it into an xml file, them run
>> imagej2 file open."
>>
>> You will see that it does not open as TrakEM2, but the LOCI dialog opens.
>
> As sad as it makes me, Barry does not have Fiji installed. The best way to
> let him reproduce, therefore, is to provide a minimal TrakEM2 project,
> maybe zipped up.
>
> If you do not expect plain ImageJ to work without TrakEM2 installed as a
> plugin, please say so and zip up a minimal installation. Using the Fiji
> Package Manager, this is easy.
>
> Ciao,
> Johannes


There are several TrakEM2 XML online, here is one:

  http://www.ini.uzh.ch/~acardona/data/Seg.tar.bz2

(Used in the EM segmentation challenge:
http://www.ini.uzh.ch/~acardona/data.html )


Regarding ImageJ-2s opener: it is unclear to me if the policy will be
to be able to open anything from "File - Open" like in ImageJ-1. If
not, that's fine: TrakEM2 would open from "File - Import - TrakEM2" or
another appropriate entry point.

Albert



-- 
http://albert.rierol.net
http://www.ini.uzh.ch/~acardona/


From markyhb at gmail.com  Wed Jul 18 01:15:36 2012
From: markyhb at gmail.com (Marky)
Date: Wed, 18 Jul 2012 07:15:36 +0100
Subject: [ImageJ-devel] Basic usage of ImageJ2 libraries in seperate
 application (Simple display image in JFrame)
Message-ID: <CAD0z_xTHRKxRYajhc0R0giGNONWN9cpy5-U=waPE7VHx9U28kA@mail.gmail.com>

Dear All,

I have a (hopefully) simple question. I have a separate application
which launches a JFrame which displays a DICOM image and provides
basic functionality like zooming and ROI. I have this working with
ImageJ libraries no problem (ImagePlus etc).

I would like to replicate this using the new ImageJ2 libraries.
However, when looking through the likely classes to guide me, I find
myself getting lost!.
I simply wish to display an image in a JFrame and provide the basis
functionality that a standard ImageJ2 window does (zooming, scrolling
through slices etc).

Is there any help or advice you can give.

Cheers,
Mark


From jru at stowers.org  Wed Jul 18 12:33:22 2012
From: jru at stowers.org (Unruh, Jay)
Date: Wed, 18 Jul 2012 12:33:22 -0500
Subject: [ImageJ-devel] Basic usage of ImageJ2 libraries in seperate
 application (Simple display image in JFrame)
In-Reply-To: <CAD0z_xTHRKxRYajhc0R0giGNONWN9cpy5-U=waPE7VHx9U28kA@mail.gmail.com>
References: <CAD0z_xTHRKxRYajhc0R0giGNONWN9cpy5-U=waPE7VHx9U28kA@mail.gmail.com>
Message-ID: <E2B64B01EAFA0B4A919627D756BE73777C180601@EXCHMB-01.stowers-institute.org>

Hi all,

I would like to add something to Mark's request.  In general it is not trivial to see how one would create a new data type structure and create a display for it.  For example, in ImageJ1, a PlotWindow simply extends an ImageWindow and overrides its draw method to add buttons to the window.  That allows for duplication of functions like copy, zoom, rois, etc.  This is the kind of thing that ImageJ2 in principle makes much easier with the abstract character of the display and dataset classes.  Nevertheless, without an example to guide me I am having a bit of trouble assessing which methods I need to override and which ones I don't.  In addition, it isn't clear how to gain access to the image frame to create the buttons themselves.  Of course, it may be that putting buttons into a window isn't appropriate, since the underlying data model may provide access to copy and edit functions within the existing image display model.  I looked into the Histogram Plot plugin for guidance, but it simply creates a stand alone frame that doesn't extend any of the internal abstract classes or provide data access.

Thanks,
Jay

-----Original Message-----
From: imagej-devel-bounces at imagej.net [mailto:imagej-devel-bounces at imagej.net] On Behalf Of Marky
Sent: Wednesday, July 18, 2012 1:16 AM
To: imagej-devel at imagej.net
Subject: [ImageJ-devel] Basic usage of ImageJ2 libraries in seperate application (Simple display image in JFrame)

Dear All,

I have a (hopefully) simple question. I have a separate application which launches a JFrame which displays a DICOM image and provides basic functionality like zooming and ROI. I have this working with ImageJ libraries no problem (ImagePlus etc).

I would like to replicate this using the new ImageJ2 libraries.
However, when looking through the likely classes to guide me, I find myself getting lost!.
I simply wish to display an image in a JFrame and provide the basis functionality that a standard ImageJ2 window does (zooming, scrolling through slices etc).

Is there any help or advice you can give.

Cheers,
Mark

_______________________________________________
ImageJ-devel mailing list
ImageJ-devel at imagej.net
http://imagej.net/mailman/listinfo/imagej-devel


From preibisch at mpi-cbg.de  Thu Jul 19 11:02:36 2012
From: preibisch at mpi-cbg.de (Stephan Preibisch)
Date: Thu, 19 Jul 2012 12:02:36 -0400
Subject: [ImageJ-devel] LOCI crashes with current Fiji build on runtime
Message-ID: <04FEBFC9-2BBD-4D2C-8006-7BF45DAD468C@mpi-cbg.de>

Hi,

running the SPIM registration I run into the problem that it is not possible to open images anymore because of a java.lang.NoSuchMethodError (see full exception below): ome.xml.model.Experimenter.setDisplayName(Ljava/lang/String;)V

A similar error (setAcquiredDate instead of setDisplayName) can be reproduced using the Script editor with beanshell and the mitosis.tif (ImageJ example image):

   import loci.formats.ChannelSeparator;
   import loci.formats.MetadataTools;
   import loci.formats.meta.IMetadata;
   import loci.formats.IFormatReader;

   final IFormatReader r = new ChannelSeparator();

   final IMetadata omexmlMeta = MetadataTools.createOMEXMLMetadata();
   r.setMetadataStore( omexmlMeta );
   r.setId( "/Users/preibischs/Desktop/mitosis.tif" );

-> Target exception: java.lang.NoSuchMethodError: ome.xml.model.Image.setAcquiredDate(Ljava/lang/String;)V

Does anyone know why this happens (was fine some days ago)...

Thanks a lot, 
Steffi


java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at ij.Command.runPlugIn(Command.java:146)
	at ij.Command.runCommand(Command.java:95)
	at ij.Executer.run(Executer.java:64)
	at java.lang.Thread.run(Thread.java:680)
Caused by: java.lang.NoSuchMethodError: ome.xml.model.Experimenter.setDisplayName(Ljava/lang/String;)V
	at loci.formats.ome.OMEXMLMetadataImpl.setExperimenterDisplayName(OMEXMLMetadataImpl.java:7386)
	at loci.formats.meta.FilterMetadata.setExperimenterDisplayName(FilterMetadata.java:889)
	at loci.formats.in.ZeissLSMReader.initMetadata(ZeissLSMReader.java:1192)
	at loci.formats.in.ZeissLSMReader.initFile(ZeissLSMReader.java:520)
	at loci.formats.FormatReader.setId(FormatReader.java:1091)
	at loci.formats.ImageReader.setId(ImageReader.java:682)
	at loci.formats.ReaderWrapper.setId(ReaderWrapper.java:492)
	at loci.formats.ChannelSeparator.setId(ChannelSeparator.java:261)
	at mpicbg.imglib.io.LOCI.openLOCIFloatType(LOCI.java:638)
	at mpicbg.imglib.io.LOCI.openLOCIFloatType(LOCI.java:583)
	at mpicbg.imglib.io.LOCI.openLOCIFloatType(LOCI.java:573)
	at mpicbg.imglib.io.LOCI.openLOCIFloatType(LOCI.java:568)
	at fiji.plugin.Bead_Registration.getInteractiveDoGParameters(Bead_Registration.java:673)
	at fiji.plugin.Bead_Registration.getConfiguration(Bead_Registration.java:320)
	at fiji.plugin.Bead_Registration.access$100(Bead_Registration.java:40)
	at fiji.plugin.Bead_Registration$1.dialogItemChanged(Bead_Registration.java:208)
	at ij.gui.GenericDialog.showDialog(GenericDialog.java:1052)
	at fiji.plugin.Bead_Registration.singleChannel(Bead_Registration.java:265)
	at fiji.plugin.Bead_Registration.run(Bead_Registration.java:75)
	at ij.IJ.runUserPlugIn(IJ.java:185)
	at ij.IJ.runPlugIn(IJ.java:152)



From melissa at glencoesoftware.com  Mon Jul 23 18:30:28 2012
From: melissa at glencoesoftware.com (Melissa Linkert)
Date: Mon, 23 Jul 2012 19:30:28 -0400
Subject: [ImageJ-devel] [fiji-devel] LOCI crashes with current Fiji
	build on runtime
In-Reply-To: <04FEBFC9-2BBD-4D2C-8006-7BF45DAD468C@mpi-cbg.de>
References: <04FEBFC9-2BBD-4D2C-8006-7BF45DAD468C@mpi-cbg.de>
Message-ID: <20120723233028.GE10861@medusa>

Hi Steffi,

> running the SPIM registration I run into the problem that it is not possible to open images anymore because of a java.lang.NoSuchMethodError (see full exception below): ome.xml.model.Experimenter.setDisplayName(Ljava/lang/String;)V
> 
> A similar error (setAcquiredDate instead of setDisplayName) can be reproduced using the Script editor with beanshell and the mitosis.tif (ImageJ example image):
*snip*
> 
> Does anyone know why this happens (was fine some days ago)...

As far as I can tell, this is because when you build Fiji you now get
two different versions of Bio-Formats in the 'jars' and 'plugins'
directories.  plugins/loci_tools.jar is a specific version from April
2012, where plugins/loci_plugins.jar and jars/bio-formats.jar (and
jars/loci-common.jar etc.) are the latest 4.4-SNAPSHOT version from
Maven.  4.4-SNAPSHOT had some subtle API changes a couple of weeks ago,
which would cause this error if older and newer JARs were mixed on the
CLASSPATH.

I would guess that this is somewhat related to this thread:

https://groups.google.com/forum/?fromgroups#!topic/fiji-devel/r1JOg4C8_68

...but I could easily be wrong.

Regards,
-Melissa

On Thu, Jul 19, 2012 at 12:02:36PM -0400, Stephan Preibisch wrote:
> Hi,
> 
> running the SPIM registration I run into the problem that it is not possible to open images anymore because of a java.lang.NoSuchMethodError (see full exception below): ome.xml.model.Experimenter.setDisplayName(Ljava/lang/String;)V
> 
> A similar error (setAcquiredDate instead of setDisplayName) can be reproduced using the Script editor with beanshell and the mitosis.tif (ImageJ example image):
> 
>    import loci.formats.ChannelSeparator;
>    import loci.formats.MetadataTools;
>    import loci.formats.meta.IMetadata;
>    import loci.formats.IFormatReader;
> 
>    final IFormatReader r = new ChannelSeparator();
> 
>    final IMetadata omexmlMeta = MetadataTools.createOMEXMLMetadata();
>    r.setMetadataStore( omexmlMeta );
>    r.setId( "/Users/preibischs/Desktop/mitosis.tif" );
> 
> -> Target exception: java.lang.NoSuchMethodError: ome.xml.model.Image.setAcquiredDate(Ljava/lang/String;)V
> 
> Does anyone know why this happens (was fine some days ago)...
> 
> Thanks a lot, 
> Steffi
> 
> 
> java.lang.reflect.InvocationTargetException
> 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
> 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
> 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
> 	at java.lang.reflect.Method.invoke(Method.java:597)
> 	at ij.Command.runPlugIn(Command.java:146)
> 	at ij.Command.runCommand(Command.java:95)
> 	at ij.Executer.run(Executer.java:64)
> 	at java.lang.Thread.run(Thread.java:680)
> Caused by: java.lang.NoSuchMethodError: ome.xml.model.Experimenter.setDisplayName(Ljava/lang/String;)V
> 	at loci.formats.ome.OMEXMLMetadataImpl.setExperimenterDisplayName(OMEXMLMetadataImpl.java:7386)
> 	at loci.formats.meta.FilterMetadata.setExperimenterDisplayName(FilterMetadata.java:889)
> 	at loci.formats.in.ZeissLSMReader.initMetadata(ZeissLSMReader.java:1192)
> 	at loci.formats.in.ZeissLSMReader.initFile(ZeissLSMReader.java:520)
> 	at loci.formats.FormatReader.setId(FormatReader.java:1091)
> 	at loci.formats.ImageReader.setId(ImageReader.java:682)
> 	at loci.formats.ReaderWrapper.setId(ReaderWrapper.java:492)
> 	at loci.formats.ChannelSeparator.setId(ChannelSeparator.java:261)
> 	at mpicbg.imglib.io.LOCI.openLOCIFloatType(LOCI.java:638)
> 	at mpicbg.imglib.io.LOCI.openLOCIFloatType(LOCI.java:583)
> 	at mpicbg.imglib.io.LOCI.openLOCIFloatType(LOCI.java:573)
> 	at mpicbg.imglib.io.LOCI.openLOCIFloatType(LOCI.java:568)
> 	at fiji.plugin.Bead_Registration.getInteractiveDoGParameters(Bead_Registration.java:673)
> 	at fiji.plugin.Bead_Registration.getConfiguration(Bead_Registration.java:320)
> 	at fiji.plugin.Bead_Registration.access$100(Bead_Registration.java:40)
> 	at fiji.plugin.Bead_Registration$1.dialogItemChanged(Bead_Registration.java:208)
> 	at ij.gui.GenericDialog.showDialog(GenericDialog.java:1052)
> 	at fiji.plugin.Bead_Registration.singleChannel(Bead_Registration.java:265)
> 	at fiji.plugin.Bead_Registration.run(Bead_Registration.java:75)
> 	at ij.IJ.runUserPlugIn(IJ.java:185)
> 	at ij.IJ.runPlugIn(IJ.java:152)
> 
> -- 
> Please avoid top-posting, and please make sure to reply-to-all!
> 
> Mailing list web interface: http://groups.google.com/group/fiji-devel


From preibisch at mpi-cbg.de  Mon Jul 23 18:44:40 2012
From: preibisch at mpi-cbg.de (Stephan Preibisch)
Date: Mon, 23 Jul 2012 19:44:40 -0400
Subject: [ImageJ-devel] [fiji-devel] LOCI crashes with current Fiji
	build on runtime
In-Reply-To: <20120723233028.GE10861@medusa>
References: <04FEBFC9-2BBD-4D2C-8006-7BF45DAD468C@mpi-cbg.de>
	<20120723233028.GE10861@medusa>
Message-ID: <236513BE-93E8-423C-AC44-3917360A56C7@mpi-cbg.de>

Thanks Melissa, that worked!! I somehow keep deleting loci_plugins.jar but it keeps coming back ... that caused the problem. I will figure out what always recreates it.

Bye bye,
Steffi


Am Jul 23, 2012 um 19:30 schrieb Melissa Linkert <melissa at glencoesoftware.com>:

> Hi Steffi,
> 
>> running the SPIM registration I run into the problem that it is not possible to open images anymore because of a java.lang.NoSuchMethodError (see full exception below): ome.xml.model.Experimenter.setDisplayName(Ljava/lang/String;)V
>> 
>> A similar error (setAcquiredDate instead of setDisplayName) can be reproduced using the Script editor with beanshell and the mitosis.tif (ImageJ example image):
> *snip*
>> 
>> Does anyone know why this happens (was fine some days ago)...
> 
> As far as I can tell, this is because when you build Fiji you now get
> two different versions of Bio-Formats in the 'jars' and 'plugins'
> directories.  plugins/loci_tools.jar is a specific version from April
> 2012, where plugins/loci_plugins.jar and jars/bio-formats.jar (and
> jars/loci-common.jar etc.) are the latest 4.4-SNAPSHOT version from
> Maven.  4.4-SNAPSHOT had some subtle API changes a couple of weeks ago,
> which would cause this error if older and newer JARs were mixed on the
> CLASSPATH.
> 
> I would guess that this is somewhat related to this thread:
> 
> https://groups.google.com/forum/?fromgroups#!topic/fiji-devel/r1JOg4C8_68
> 
> ...but I could easily be wrong.
> 
> Regards,
> -Melissa
> 
> On Thu, Jul 19, 2012 at 12:02:36PM -0400, Stephan Preibisch wrote:
>> Hi,
>> 
>> running the SPIM registration I run into the problem that it is not possible to open images anymore because of a java.lang.NoSuchMethodError (see full exception below): ome.xml.model.Experimenter.setDisplayName(Ljava/lang/String;)V
>> 
>> A similar error (setAcquiredDate instead of setDisplayName) can be reproduced using the Script editor with beanshell and the mitosis.tif (ImageJ example image):
>> 
>>   import loci.formats.ChannelSeparator;
>>   import loci.formats.MetadataTools;
>>   import loci.formats.meta.IMetadata;
>>   import loci.formats.IFormatReader;
>> 
>>   final IFormatReader r = new ChannelSeparator();
>> 
>>   final IMetadata omexmlMeta = MetadataTools.createOMEXMLMetadata();
>>   r.setMetadataStore( omexmlMeta );
>>   r.setId( "/Users/preibischs/Desktop/mitosis.tif" );
>> 
>> -> Target exception: java.lang.NoSuchMethodError: ome.xml.model.Image.setAcquiredDate(Ljava/lang/String;)V
>> 
>> Does anyone know why this happens (was fine some days ago)...
>> 
>> Thanks a lot, 
>> Steffi
>> 
>> 
>> java.lang.reflect.InvocationTargetException
>>    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
>>    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
>>    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
>>    at java.lang.reflect.Method.invoke(Method.java:597)
>>    at ij.Command.runPlugIn(Command.java:146)
>>    at ij.Command.runCommand(Command.java:95)
>>    at ij.Executer.run(Executer.java:64)
>>    at java.lang.Thread.run(Thread.java:680)
>> Caused by: java.lang.NoSuchMethodError: ome.xml.model.Experimenter.setDisplayName(Ljava/lang/String;)V
>>    at loci.formats.ome.OMEXMLMetadataImpl.setExperimenterDisplayName(OMEXMLMetadataImpl.java:7386)
>>    at loci.formats.meta.FilterMetadata.setExperimenterDisplayName(FilterMetadata.java:889)
>>    at loci.formats.in.ZeissLSMReader.initMetadata(ZeissLSMReader.java:1192)
>>    at loci.formats.in.ZeissLSMReader.initFile(ZeissLSMReader.java:520)
>>    at loci.formats.FormatReader.setId(FormatReader.java:1091)
>>    at loci.formats.ImageReader.setId(ImageReader.java:682)
>>    at loci.formats.ReaderWrapper.setId(ReaderWrapper.java:492)
>>    at loci.formats.ChannelSeparator.setId(ChannelSeparator.java:261)
>>    at mpicbg.imglib.io.LOCI.openLOCIFloatType(LOCI.java:638)
>>    at mpicbg.imglib.io.LOCI.openLOCIFloatType(LOCI.java:583)
>>    at mpicbg.imglib.io.LOCI.openLOCIFloatType(LOCI.java:573)
>>    at mpicbg.imglib.io.LOCI.openLOCIFloatType(LOCI.java:568)
>>    at fiji.plugin.Bead_Registration.getInteractiveDoGParameters(Bead_Registration.java:673)
>>    at fiji.plugin.Bead_Registration.getConfiguration(Bead_Registration.java:320)
>>    at fiji.plugin.Bead_Registration.access$100(Bead_Registration.java:40)
>>    at fiji.plugin.Bead_Registration$1.dialogItemChanged(Bead_Registration.java:208)
>>    at ij.gui.GenericDialog.showDialog(GenericDialog.java:1052)
>>    at fiji.plugin.Bead_Registration.singleChannel(Bead_Registration.java:265)
>>    at fiji.plugin.Bead_Registration.run(Bead_Registration.java:75)
>>    at ij.IJ.runUserPlugIn(IJ.java:185)
>>    at ij.IJ.runPlugIn(IJ.java:152)
>> 
>> -- 
>> Please avoid top-posting, and please make sure to reply-to-all!
>> 
>> Mailing list web interface: http://groups.google.com/group/fiji-devel


From pietzsch at mpi-cbg.de  Tue Jul 24 05:16:43 2012
From: pietzsch at mpi-cbg.de (Tobias Pietzsch)
Date: Tue, 24 Jul 2012 12:16:43 +0200
Subject: [ImageJ-devel] Local Neighborhood stuff
In-Reply-To: <000101cd6762$7347e580$59d7b080$@dietz@uni-konstanz.de>
References: <000101cd6762$7347e580$59d7b080$@dietz@uni-konstanz.de>
Message-ID: <500E760B.7060802@mpi-cbg.de>

Hi,

I cc'ed the imagej-devel list, because this should be of wider interest.
The gist of the mails quoted below is that we (Christian Dietz,
Jean-Yves Tinevez) are trying to unify the LocalNeighborhood (-Cursors)
that have been popping up in different places in ImgLib2.
Currently, most of the relevant source can be found in package
net.imglib2.algorithm.region.localneighborhood in algorithms-gpl.
Maybe Jean-Yves and Christian could provide some more information on the
individual neighborhoods that are implemented.

Some comments with respect to the previous mails

1.) Factory vs. CopyOn()
A factory could be constructed with parameters, for instance the
CellContainerFactory is constructed with cell dimensions. So a
HypersphereNeighborhood could be constructed with the radius for
example. However, I don't see much harm in adding the copyOn() method.
Having only updateSource() would be too little, as we might want to
change the type T of the Neighborhood in copyOn() and only keep the
structure.In general, I don't like the updateSource() very much. For
instance,what happens if the new source has a different number of
dimensions?

2.) Neighborhood interface
In addition to Positionable and IterableInterval, it could extend 
Localizable to get the position of the center.

3.) IN extends RandomAccessibleInterval<T> parameter in 
AbstractNeighborhood, etc
I think all the Neighborhoods should be constructed on
RandomAccessible<T> instead of RandomAccessibleInterval<T>.
If interval extension is required then this should be done outside of
the Neighborhood. If we do this, then the IN parameter is no longer
required, right? The Neighborhood is just constructed with any
RandomAccessible<T>.

4.) move to imglib2 core
Eventually, the neighborhood should be moved to the core, maybe with the
exception of rather special-case stuff like DiscNeighborhood.
Or is ops a better place? What do you think?

best regards,
Tobias




On 07/24/2012 09:12 AM, Jean-Yves Tinevez wrote:
 >
 >
 > On Tue, Jul 24, 2012 at 8:53 AM, Christian Dietz
 > <christian.dietz at uni-konstanz.de
 > <mailto:christian.dietz at uni-konstanz.de>> wrote:
 >
 > Hi Tobi,
 >
 > thinking of parameters. Each neighborhood may have a different amount
 > of parameters like radius, spans etc...
 >
 >
 > Which leads us to the question: What do we want in the Neighborhood
 > interface? It has to be Positionable and IntervalIterable, but what
 > do we add to this?
 >
 > Initially I put a setSpan(long[] size); method, because I thought
 > that every neighborhood would have some size that could be set. The
 > span would then have the meaning of the bounding box radius. It doe
 > snot work if we want to put /e.g./ Brensenham lines there.
 >
 > What else?

On 07/23/2012 08:45 PM, Christian Dietz wrote:
 > Hi,
 >
 > yes I was also thinking about a factory, but again I ran into
 > problems. Imagine the following scenario:
 >
 > You've an operation which operates on a Neighborhood & Image, so you
 > give it a Neighborhood in the Constructor. Any Img<T> is passed in
 > the compute call of the. The operation can be applied on any Img<T>
 > (e.g. compute(A img, A res)), but if the op can't set the source of a
 > neighborhood the op can't be reused.
 >
 > Best regards,
 >
 > Christian
 >
 >
 >
 > -----Original Message----- From: Tobias Pietzsch
 > [mailto:pietzsch at mpi-cbg.de] Sent: Montag, 23. Juli 2012 17:27 To:
 > Christian Dietz Cc: 'Jean-Yves Tinevez' Subject: Re: Local
 > Neighborhood stuff
 >
 > Hi,
 >
 > In similar situations we often used a factory in imglib2. So, would a
 > NeighborhoodFactory instead of a copy/updateSource method work here?
 >
 > best regards, Tobias
 >
 > On 07/21/2012 09:03 PM, Christian Dietz wrote:
 >> Just one more remark (as I ran into problems ;))
 >>
 >> Just recognized that instead of the copy(IN source) something like
 >> updateSource(IN source) would be better. In addition a constructor
 >> of a AbstractNeighborhood(int numDims,? xy) should also be
 >> available (see knip_deployment for examples).
 >>
 >> What do you think?
 >>
 >> *From:*Jean-Yves Tinevez [mailto:jeanyves.tinevez at gmail.com]
 >> *Sent:* Samstag, 21. Juli 2012 20:32 *To:* Christian Dietz *Cc:*
 >> Tobias Pietzsch; Martin Horn *Subject:* Re: Local Neighborhood
 >> stuff
 >>
 >> Sorry mail was sent a bit early. I should not write with a baby on
 >> my lap.
 >>
 >> I just had a look again at the LocalNeighborhood stuff which came
 >> up the last days in algorithms-gpl.
 >>
 >> It looks pretty much as the things we did some weeks ago. Our
 >> solution was less sophisticated, that?s  why I converted the
 >> ?delta? to the solution of Jean-Yves
 >> (BufferedRectangleNeighborhoodCursor and the Wrapper for the
 >> HyperSphere/Cursor of Stephan P.).
 >>
 >>
 >> Ok careful, the Sphere iterator is not a wrapper for the
 >> HyperSphere of Stephan: It gives you an actual ellipsoid (3
 >> different semi axes) and only iterate over the first 3 dimension by
 >> privileging the Z axis. Stephan Hypersphere is nD generic, and is
 >> an actual sphere in pixel coordinates.
 >>
 >> Several questions/suggestions came up, which I would like to
 >> discuss with you so that we maybe have one consolidated package to
 >> work on? ; )
 >>
 >> (i)Why in algorithms-gpl? Could also be put into the core of
 >> algorithms or even imglib2?
 >>
 >> Because I thought the code was clumsy compared to the elegance of
 >> Stephan's sphere, and I did not dare put it in the core.
 >>
 >> (ii)Could we parameterize AbstractNeighborhood<T, IN extends
 >> RandomAccessibleInterval<T>>? Especially in the case of the
 >> OutOfBoundsStrategy this could make sense (less casting).
 >>
 >> Oki.
 >>
 >> (iii)Could we add a method like copy(IN source) to
 >> AbstractNeighborhood? It?s nice if one could create instances of
 >> any AbstractNeighborhood from a given neighborhood.
 >>
 >> You mean create the same kind of neighborhood on a different
 >> source? Oki.
 >>
 >> (iv)Maybe we could add an Interface Neighborhood<T, IN extends
 >> RandomAccessibleInterbal<T>>?
 >>
 >>
 >> Tobias?
 >>
 >> We should also add the HyperSphere/Cursor of Stephan to this
 >> package.
 >>
 >> I made some changes and pushed them into knip_deployment
 >> algorithms-gpl etc!
 >>
 >>
 >> As soon as I am back to University I will also fix the formatting,
 >> sorry for that ;)
 >>
 >> Have a nice weekend,
 >>
 >>
 >> Thanks! cheers jy
 >>
 >

On 07/21/2012 07:01 PM, Christian Dietz wrote:
> Hi Tobi & Jean-Yves,
>
> I just had a look again at the LocalNeighborhood stuff which came up the
> last days in algorithms-gpl.
>
> It looks pretty much as the things we did some weeks ago. Our solution
> was less sophisticated, that?s  why I converted the ?delta? to the
> solution of Jean-Yves (BufferedRectangleNeighborhoodCursor and the
> Wrapper for the HyperSphere/Cursor of Stephan P.).
>
> Several questions/suggestions came up, which I would like to discuss
> with you so that we maybe have one consolidated package to work on? ; )
>
> (i)Why in algorithms-gpl? Could also be put into the core of algorithms
> or even imglib2?
>
> (ii)Could we parameterize AbstractNeighborhood<T, IN extends
> RandomAccessibleInterval<T>>? Especially in the case of the
> OutOfBoundsStrategy this could make sense (less casting).
>
> (iii)Could we add a method like copy(IN source) to AbstractNeighborhood?
> It?s nice if one could create instances of any AbstractNeighborhood from
> a given neighborhood.
>
> (iv)Maybe we could add an Interface Neighborhood<T, IN extends
> RandomAccessibleInterbal<T>>?
>
> We should also add the HyperSphere/Cursor of Stephan to this package.
>
> I made some changes and pushed them into knip_deployment algorithms-gpl etc!
>
>
> As soon as I am back to University I will also fix the formatting, sorry
> for that ;)
>
> Have a nice weekend,
>
> Christian
>



From raghuramsathyam at yahoo.com  Tue Jul 24 14:28:39 2012
From: raghuramsathyam at yahoo.com (raghuram sathyam)
Date: Tue, 24 Jul 2012 12:28:39 -0700 (PDT)
Subject: [ImageJ-devel] running macros on ImageJ2
Message-ID: <1343158119.93200.YahooMailNeo@web160805.mail.bf1.yahoo.com>

Hello IJ developers,
I have been using a macro for processing multiple choice surveys for a while. I wrote this macro from scratch (it was not recorded on the UI) for IJ1 and it works very well on IJ1. I have been trying to migrate to IJ2 so that i can move my processing to the cloud.

I have also written some code to preprocess the images i receive and use IJ as a library within my code. I use IJ.runMacroFile(...) to run the macro that i wrote for detailed image processing using IJ.

I am stuck trying to replicate this behavior on IJ2. If i link IJ1 as a library, AWT is invoked and i am unable to run on a headless server. I looked at the code for the ScriptPlugin.java and various other files in the plugins.script package but have no clue on how to get similar functionality as IJ.runMacroFile(..).

Any pointers on how i can get this done?

-raghuram
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120724/4c2a959c/attachment.html>

From Johannes.Schindelin at gmx.de  Tue Jul 24 21:54:03 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Wed, 25 Jul 2012 04:54:03 +0200 (CEST)
Subject: [ImageJ-devel] Move of the Fiji Updater into ImageJ complete
Message-ID: <alpine.DEB.1.00.1207250236290.32459@s15462909.onlinehome-server.info>

Hi all,

I tried to make as sure as I can that things do not break, but after a
frantic two weeks it is time to release the baby and give it a shot.

So what happened?

The updater moved to ImageJ2 in the same line as the launcher moved
already: the idea is to move the stuff which is not exactly specific to
life sciences to ImageJ2. Just so things are neatly separated.

The file Fiji-Updater.jar now only contains the bare minimum required to
get the ImageJ updater and run it. Probably a little less than the bare
minimum, time will tell and I will add things back.

On the good side, a ton of bugs were kicked out due to the test
infrastructure provided by ImageJ2. In fact, large parts of my debugging
were done in Eclipse with both ImageJ and Fiji updater projects loaded and
even running the classes in Fiji's custom classloader with ij.dir pointing
to a fully populated Fiji directory and setting breakpoints and single
stepping and "stuff".

So the updater should be more robust, at least in the long run.

The most notable change is that you will need to install the
ij-updater-ssh.jar from the ImageJ update site and edit the upload part of
your Fiji update site in "Manage update sites" to say (user)@fiji.sc in
the ssh host field if you want to continue to upload to our main update
site.

The other big news is that the updater can now handle versioned files. In
other words, it will consider ij-1.42a.jar and ij-1.47b.jar to be two
versions of the same component.

It still does not handle two different components requiring different
versions of a third component, though (think Micro-Manager requiring
commons-math 2.0 and TrackMate requiring version 3.0, which are mutually
incompatible).

There is still a ton of work in the updater but at least I can concentrate
on other projects for the moment without worrying about incompatibilities
betweeen the two updaters (as shown recently in the SLIM issue) or about
untested features: with the regression tests in place (which faithful
Jenkins tests continuously), I can add tests for most bugs I fix, to be
certain that I do not break things for many when I try to fix things for
one.

But for the moment I am a bit exhausted. So, please, people, try not to
have problems with the updater for the moment, m'kay?

Ciao,
Dscho


From michael at doube.net  Wed Jul 25 03:48:37 2012
From: michael at doube.net (Michael Doube)
Date: Wed, 25 Jul 2012 10:48:37 +0200
Subject: [ImageJ-devel] [fiji-devel] Move of the Fiji Updater into
	ImageJ complete
In-Reply-To: <alpine.DEB.1.00.1207250236290.32459@s15462909.onlinehome-server.info>
References: <alpine.DEB.1.00.1207250236290.32459@s15462909.onlinehome-server.info>
Message-ID: <500FB2E5.7030805@doube.net>

> The other big news is that the updater can now handle versioned files. In
> other words, it will consider ij-1.42a.jar and ij-1.47b.jar to be two
> versions of the same component.

Great! Looking forward to using this feature. Thanks very much for
implementing this.

Michael


From michael at doube.net  Wed Jul 25 04:29:29 2012
From: michael at doube.net (Michael Doube)
Date: Wed, 25 Jul 2012 11:29:29 +0200
Subject: [ImageJ-devel] Finding classes and importing the right Maven
	artifacts
Message-ID: <500FBC79.20409@doube.net>

Dear all,

I'm Mavenizing the BoneJ project so that I can streamline coding,
testing and deployment, while moving to the IJ2 API.

Mostly, Eclipse has handled that OK. But, now I'm editing my pom.xml and
am missing a couple of dependencies, which are really hard to find. I
don't know whether classes moved or changed name, or are just somewhere
other than I expect and unsearchable.

So, specifically - which dependencies do I need to declare in pom.xml to
satisfy these imports?

import imagej.data.display.DatasetView;

used here:
https://github.com/mdoube/BoneJ/blob/bonej2/src/org/bonej/VolumeFraction.java

and

import imagej.platform.PlatformService;
used here:
https://github.com/mdoube/BoneJ/blob/bonej2/src/org/bonej/Help.java

Michael


From michael at doube.net  Wed Jul 25 06:41:46 2012
From: michael at doube.net (Michael Doube)
Date: Wed, 25 Jul 2012 13:41:46 +0200
Subject: [ImageJ-devel] Finding classes and importing the right Maven
	artifacts
In-Reply-To: <500FBC79.20409@doube.net>
References: <500FBC79.20409@doube.net>
Message-ID: <500FDB7A.5050304@doube.net>

> import imagej.data.display.DatasetView; import
> imagej.platform.PlatformService;

I found them, by using net.imagej and not imagej as the group ID and
ij-data and ij-platform as the artefact IDs. Why the distinction?

Michael


From Johannes.Schindelin at gmx.de  Wed Jul 25 11:34:09 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Wed, 25 Jul 2012 18:34:09 +0200 (CEST)
Subject: [ImageJ-devel] [fiji-devel] Move of the Fiji Updater into
	ImageJ complete
In-Reply-To: <500FB2E5.7030805@doube.net>
References: <alpine.DEB.1.00.1207250236290.32459@s15462909.onlinehome-server.info>
	<500FB2E5.7030805@doube.net>
Message-ID: <alpine.DEB.1.00.1207251833160.32459@s15462909.onlinehome-server.info>

Hi Michael,

On Wed, 25 Jul 2012, Michael Doube wrote:

> > The other big news is that the updater can now handle versioned files.
> > In other words, it will consider ij-1.42a.jar and ij-1.47b.jar to be
> > two versions of the same component.
> 
> Great! Looking forward to using this feature. Thanks very much for
> implementing this.

Just to clarify: the updater still does not want you to have different
versions installed at the same time. It will remove ij-1.42a.jar when it
installs ij-1.47b.jar.

Ciao,
Dscho


From Johannes.Schindelin at gmx.de  Wed Jul 25 12:30:25 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Wed, 25 Jul 2012 19:30:25 +0200 (CEST)
Subject: [ImageJ-devel] Finding classes and importing the right Maven
 artifacts
In-Reply-To: <500FBC79.20409@doube.net>
References: <500FBC79.20409@doube.net>
Message-ID: <alpine.DEB.1.00.1207251927580.32459@s15462909.onlinehome-server.info>

Hi Michael,

On Wed, 25 Jul 2012, Michael Doube wrote:

> I'm Mavenizing the BoneJ project so that I can streamline coding,
> testing and deployment, while moving to the IJ2 API.

Great! You remind me that I still owe you that blog post describing Maven
and Jenkins and Git and how they work together in the ImageJ2 project.

> Mostly, Eclipse has handled that OK. But, now I'm editing my pom.xml and
> am missing a couple of dependencies, which are really hard to find. I
> don't know whether classes moved or changed name, or are just somewhere
> other than I expect and unsearchable.
> 
> So, specifically - which dependencies do I need to declare in pom.xml to
> satisfy these imports?
> 
> import imagej.data.display.DatasetView;
> 
> used here:
> https://github.com/mdoube/BoneJ/blob/bonej2/src/org/bonej/VolumeFraction.java

In a fiji.git checkout with all .jar files updated from the ImageJ update
site, I ran this:

./bin/find-jar-for-class.py imagej.data.display.DatasetView
Class imagej.data.display.DatasetView is in /home/gene099/fiji/jars/ij-data-2.0.0-SNAPSHOT.jar

> import imagej.platform.PlatformService;
> used here:
> https://github.com/mdoube/BoneJ/blob/bonej2/src/org/bonej/Help.java

and likewise this:

./bin/find-jar-for-class.py imagej.platform.PlatformService
Class imagej.platform.PlatformService is in /home/gene099/fiji/jars/ij-platform-2.0.0-SNAPSHOT.jar

Ciao,
Johannes


From Johannes.Schindelin at gmx.de  Wed Jul 25 13:05:51 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Wed, 25 Jul 2012 20:05:51 +0200 (CEST)
Subject: [ImageJ-devel] Finding classes and importing the right Maven
 artifacts
In-Reply-To: <500FDB7A.5050304@doube.net>
References: <500FBC79.20409@doube.net> <500FDB7A.5050304@doube.net>
Message-ID: <alpine.DEB.1.00.1207251931080.32459@s15462909.onlinehome-server.info>

Hi Michael,

On Wed, 25 Jul 2012, Michael Doube wrote:

> > import imagej.data.display.DatasetView; import
> > imagej.platform.PlatformService;
> 
> I found them, by using net.imagej and not imagej as the group ID and
> ij-data and ij-platform as the artefact IDs. Why the distinction?

Yep, the groupId is net.imagej (the convention is to use the inverted
domain name).

The distinction between ij-data and ij-platform is that the former deals
with image data while the latter deals with platform-specific
functionality such as opening a URL in a web browser.

In general, we tried to modularize ImageJ2 as much as possible (hence the
need for the ImageJ updater to keep things easy to use). This allows to
cherry-pick exactly which parts of ImageJ2 you want to use.

Ciao,
Dscho


From Johannes.Schindelin at gmx.de  Wed Jul 25 13:12:13 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Wed, 25 Jul 2012 20:12:13 +0200 (CEST)
Subject: [ImageJ-devel] [fiji-devel] Re: Move of the Fiji Updater into
	ImageJ complete
In-Reply-To: <CAE=G8NQKKt7a43JdHmS5qWZWmag=HsNA+mOHkFRv7ERdtWYa9Q@mail.gmail.com>
References: <alpine.DEB.1.00.1207250236290.32459@s15462909.onlinehome-server.info>
	<efac0b07-f73b-48d7-a2d6-2230bebc84e4@googlegroups.com>
	<CAE=G8NQKKt7a43JdHmS5qWZWmag=HsNA+mOHkFRv7ERdtWYa9Q@mail.gmail.com>
Message-ID: <alpine.DEB.1.00.1207252011270.32459@s15462909.onlinehome-server.info>

Hi Ignacio,

On Wed, 25 Jul 2012, Ignacio Arganda-Carreras wrote:

> I tried to upload a new version of Trainable_Segmentation.jar and I got the
> following errors on the terminal:
> 
> Multiple versions found for jars/log4j.jar
> Multiple versions found for jars/slf4j-api.jar
> Multiple versions found for jars/slf4j-log4j12.jar
> java.lang.InstantiationException: No uploader found for protocol ssh
> at imagej.updater.core.FilesUploader.getUploader(FilesUploader.java:88)
>  at imagej.updater.core.FilesUploader.<init>(FilesUploader.java:100)
> at imagej.updater.gui.UpdaterFrame.upload(UpdaterFrame.java:794)
>  at imagej.updater.gui.UpdaterFrame$6$1.run(UpdaterFrame.java:323)

I uploaded a new updater that should fix that issue. If not, please
contact me via chat or IM so we can sort out the issues together.

Ciao,
Dscho


From preibisch at mpi-cbg.de  Wed Jul 25 13:22:59 2012
From: preibisch at mpi-cbg.de (Stephan Preibisch)
Date: Wed, 25 Jul 2012 14:22:59 -0400
Subject: [ImageJ-devel] Finding classes and importing the right Maven
	artifacts
In-Reply-To: <alpine.DEB.1.00.1207251931080.32459@s15462909.onlinehome-server.info>
References: <500FBC79.20409@doube.net> <500FDB7A.5050304@doube.net>
	<alpine.DEB.1.00.1207251931080.32459@s15462909.onlinehome-server.info>
Message-ID: <B3FDB89B-748C-4B8F-A501-2F08889B5E46@mpi-cbg.de>

Hi,

can I ask a related question. Yesterday, I tried to add jna.jar as a Maven dependency to a plugin for some testing. But I was unable to figure out a valid version that I need, the artifact id and the group id. Where I do get this stuff from? Luckily the CPU_Meter used it, so I copied it from there:

		<dependency>
			<groupId>net.java.dev.jna</groupId>
			<artifactId>jna</artifactId>
			<version>3.2.7</version>
		</dependency>

But is is unclear to me why the group id would be "net.java.dev.jna" as the entire package is in com.sun.*, e.g.:

import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.Platform;

I guess there must be somewhere a pom.xml where all jars, their id's, locations, available versions etc. are listed - where I could also add a new jar if required. But I did not manage to find where that would be.

Thanks a lot and nice greetings,
Stephan

On Jul 25, 2012, at 14:05 , Johannes Schindelin wrote:

> Hi Michael,
> 
> On Wed, 25 Jul 2012, Michael Doube wrote:
> 
>>> import imagej.data.display.DatasetView; import
>>> imagej.platform.PlatformService;
>> 
>> I found them, by using net.imagej and not imagej as the group ID and
>> ij-data and ij-platform as the artefact IDs. Why the distinction?
> 
> Yep, the groupId is net.imagej (the convention is to use the inverted
> domain name).
> 
> The distinction between ij-data and ij-platform is that the former deals
> with image data while the latter deals with platform-specific
> functionality such as opening a URL in a web browser.
> 
> In general, we tried to modularize ImageJ2 as much as possible (hence the
> need for the ImageJ updater to keep things easy to use). This allows to
> cherry-pick exactly which parts of ImageJ2 you want to use.
> 
> Ciao,
> Dscho
> 
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120725/666b4b43/attachment.html>

From Johannes.Schindelin at gmx.de  Wed Jul 25 14:31:24 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Wed, 25 Jul 2012 21:31:24 +0200 (CEST)
Subject: [ImageJ-devel] [fiji-devel] Re: Move of the Fiji Updater into
	ImageJ complete
In-Reply-To: <efac0b07-f73b-48d7-a2d6-2230bebc84e4@googlegroups.com>
References: <alpine.DEB.1.00.1207250236290.32459@s15462909.onlinehome-server.info>
	<efac0b07-f73b-48d7-a2d6-2230bebc84e4@googlegroups.com>
Message-ID: <alpine.DEB.1.00.1207252012220.32459@s15462909.onlinehome-server.info>

Hi Simon,

On Wed, 25 Jul 2012, simon.ochsenreither at googlemail.com wrote:

> Does this have any short-term impact on Fiji or will it just mean that
> Fiji won't need to ship with its own updater when Fiji is ported to
> ImageJ2?

It means exactly that. The short-term impact is that there might be the
occasional hiccups, unfortunately.

> I have seen that a lot of changes and improvements have gone into
> ImageJ2 and I wonder how many changes will Fiji need to run on the new
> version? I guess it will require more than just a recompile? :-)

In general, yes, a lot of the stuff in Fiji will need to be ported to the
ImageJ2 architecture.

> ImageJ2 also uses Swing instead of AWT, so do plugins with a GUI need to
> update or is the move handled transparently (and people can just keep
> using e. g. GenericDialogPlus, etc.?)

ImageJ2 tries to be as GUI-agnostic as possible, wrapping the GUI-specific
parts in individual components. This allows other software to write
adapters to run ImageJ2 plugins within their framework. For example,
CellProfiler runs ImageJ2 plugins and it is not even a Java program but a
Python one.

The way plugins try to get their input is no longer by creating a dialog
explicitly. This is a nightmare if you want to run the same plugin
unchanged on a cluster. The way to interact with the user in ImageJ2 is by
annotating the fields you require as parameters. Example:

	@Plugin
	public class MyPlugin implements ImageJPlugin {
		@Parameter
		double value;

		public void run() {
			System.err.println("The value is " + value);
		}
	}

ImageJ will figure out how to construct a dialog from the annotated
fields. Parameters do not need to be information to be gathered via a
dialog, though. For example, if you want to interact with a service (such
as the log service to report exceptions) you also add them as fields
annotated as a parameter.

> I searched for information on the website, but maybe you have a hint
> where I can find more information about it?

Well, a couple of things might still be moving around, that's why we have
not yet written extensive documentation. But I will, promise.

Ciao,
Johannes


From Johannes.Schindelin at gmx.de  Wed Jul 25 15:11:24 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Wed, 25 Jul 2012 22:11:24 +0200 (CEST)
Subject: [ImageJ-devel] Finding classes and importing the right Maven
 artifacts
In-Reply-To: <B3FDB89B-748C-4B8F-A501-2F08889B5E46@mpi-cbg.de>
References: <500FBC79.20409@doube.net> <500FDB7A.5050304@doube.net>
	<alpine.DEB.1.00.1207251931080.32459@s15462909.onlinehome-server.info>
	<B3FDB89B-748C-4B8F-A501-2F08889B5E46@mpi-cbg.de>
Message-ID: <alpine.DEB.1.00.1207252205270.32459@s15462909.onlinehome-server.info>

Hi Stephan,

On Wed, 25 Jul 2012, Stephan Preibisch wrote:

> can I ask a related question. Yesterday, I tried to add jna.jar as a
> Maven dependency to a plugin for some testing. But I was unable to
> figure out a valid version that I need, the artifact id and the group
> id. Where I do get this stuff from? Luckily the CPU_Meter used it, so I
> copied it from there:
> 
> 		<dependency>
> 			<groupId>net.java.dev.jna</groupId>
> 			<artifactId>jna</artifactId>
> 			<version>3.2.7</version>
> 		</dependency>

Typically you point a web browser to http://maven.imagej.net:8081/ (or if
you are behind a firewall, http://maven.imagej.net/, but that has a few
limitations) and search for the artifact name. If you do not find it
there, http://search.maven.org/ should have it.

> But is is unclear to me why the group id would be "net.java.dev.jna" as
> the entire package is in com.sun.*, e.g.:
> 
> import com.sun.jna.Library;
> import com.sun.jna.Native;
> import com.sun.jna.Platform;

Well, their plan was to donate JNA to Sun for inclusion into the official
API of the JRE. But Sun never took it, so they were stuck with the wrong
package name. But the website where you get JNA used to be called
http://jna.dev.java.net/, hence the groupId. Oracle changed it to
http://jna.java.net/ (basically removing all "dev." from the projects
hosted on java.net), just because they could, and probably because they
thought it would be a good idea to invalidate all the links that were
floating around in the world wide net. But at least the JNA project (or at
least those maintaining their artifacts) seem to have the good sense to
keep the groupId people started to use.

Ciao,
Dscho


From Johannes.Schindelin at gmx.de  Wed Jul 25 17:25:08 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Thu, 26 Jul 2012 00:25:08 +0200 (CEST)
Subject: [ImageJ-devel] [fiji-devel] Re: Move of the Fiji Updater into
	ImageJ complete
In-Reply-To: <fff68582-0054-473d-abaf-2c5716011361@googlegroups.com>
References: <alpine.DEB.1.00.1207250236290.32459@s15462909.onlinehome-server.info>
	<efac0b07-f73b-48d7-a2d6-2230bebc84e4@googlegroups.com>
	<alpine.DEB.1.00.1207252012220.32459@s15462909.onlinehome-server.info>
	<fff68582-0054-473d-abaf-2c5716011361@googlegroups.com>
Message-ID: <alpine.DEB.1.00.1207252336320.32459@s15462909.onlinehome-server.info>

Hi Simon,

On Wed, 25 Jul 2012, simon.ochsenreither at googlemail.com wrote:

> > ImageJ will figure out how to construct a dialog from the annotated
> > fields. Parameters do not need to be information to be gathered via a
> > dialog, though. For example, if you want to interact with a service
> > (such as the log service to report exceptions) you also add them as
> > fields annotated as a parameter.
>
> Wow, that's an quite advanced design! I hope it works out that way, I
> think especially the layouting will be hard to get right. So there will
> be custom compiler plugins to process the annotations and create
> classfiles from them?

It actually works already, but it is not a custom compiler. The
annotations are processed by a subclass of the
AbstractInputHarvesterPlugin such as the SwingInputHarvesterPlugin:

http://fiji.sc/javadoc/imagej/ext/ui/swing/SwingInputHarvester.html

This is a preprocessor plugin and discovered at runtime via annotations,
too. In general, quite a lot of things are discovered at runtime in
ImageJ.

The trick is to have a library called sezpoz in the classpath while
compiling; it processes the annotations and stores the list of the
accumulated classes in the .jar files. At runtime, these files are loaded
via the class loader; thereby classes which are in the classpath will be
found, others not.

An example is the GUI binding. By default, we have the Swing binding in
the classpath. But if you put the AWT binding into the classpath instead,
that one will be instantiated (our AWT bindings are basically
proofs-of-concept, and not feature complete at this time).

The same is true for plugins: they are discovered at runtime through the
annotations that were processed by sezpoz at compile time.

In general, our focus was on making the simple easy and the complicated at
least possible. For example, we do have facilities that allow things such
as locking the aspect ratio in the resize dialog, but all of these
facilities were added with the flexibility in mind to let other programs
show the GUI, or even show no GUI at all.

Ciao,
Johannes


From christian.dietz at uni-konstanz.de  Thu Jul 26 02:23:27 2012
From: christian.dietz at uni-konstanz.de (Christian Dietz)
Date: Thu, 26 Jul 2012 09:23:27 +0200
Subject: [ImageJ-devel] Local Neighborhood stuff
In-Reply-To: <500E760B.7060802@mpi-cbg.de>
References: <000101cd6762$7347e580$59d7b080$@dietz@uni-konstanz.de>
	<500E760B.7060802@mpi-cbg.de>
Message-ID: <5010F06F.6040607@uni-konstanz.de>

Hi,

I just branched into "localneighborhood-revised" where you can find the 
current version in algorithms-gpl (which is not very elegant at the moment).

> Hi,
>
> I cc'ed the imagej-devel list, because this should be of wider interest.
> The gist of the mails quoted below is that we (Christian Dietz,
> Jean-Yves Tinevez) are trying to unify the LocalNeighborhood (-Cursors)
> that have been popping up in different places in ImgLib2.
> Currently, most of the relevant source can be found in package
> net.imglib2.algorithm.region.localneighborhood in algorithms-gpl.
> Maybe Jean-Yves and Christian could provide some more information on the
> individual neighborhoods that are implemented.

BufferedRectangularNeighborhood is a very simple ring-buffer 
implementation, to reduce the number of pixel-accesses (yes there is a 
speed-up).
Additionaly I wrapped the HyperSphere stuff of Stephan Preibisch 
(HyperSphereNeighborhood).

>
> Some comments with respect to the previous mails
>
> 1.) Factory vs. CopyOn()
> A factory could be constructed with parameters, for instance the
> CellContainerFactory is constructed with cell dimensions. So a
> HypersphereNeighborhood could be constructed with the radius for
> example. However, I don't see much harm in adding the copyOn() method.
> Having only updateSource() would be too little, as we might want to
> change the type T of the Neighborhood in copyOn() and only keep the
> structure.In general, I don't like the updateSource() very much. For
> instance,what happens if the new source has a different number of
> dimensions?
I agree. As long as one can simulate the updateSource() behaviour (maybe 
with copyOn) everything is fine.
But as you mentoined, how would we handle sources with more dimensions 
in copyOn? For instance copyOn on a RectangularNeighborhood (with 3,5,7 
spans) is called with a
4-d source. What would be the span in this dimension?

> 2.) Neighborhood interface
> In addition to Positionable and IterableInterval, it could extend 
> Localizable to get the position of the center.

Yap. Perfect.

>
> 3.) IN extends RandomAccessibleInterval<T> parameter in 
> AbstractNeighborhood, etc
> I think all the Neighborhoods should be constructed on
> RandomAccessible<T> instead of RandomAccessibleInterval<T>.
> If interval extension is required then this should be done outside of
> the Neighborhood. If we do this, then the IN parameter is no longer
> required, right? The Neighborhood is just constructed with any
> RandomAccessible<T>.

Agree.

> 4.) move to imglib2 core
> Eventually, the neighborhood should be moved to the core, maybe with the
> exception of rather special-case stuff like DiscNeighborhood.
> Or is ops a better place? What do you think?

 From my point of view it should be in the core, as these are basic 
data-structures.

>
> best regards,
> Tobias
>
>
> On 07/24/2012 09:12 AM, Jean-Yves Tinevez wrote:
> >
> >
> > On Tue, Jul 24, 2012 at 8:53 AM, Christian Dietz
> > <christian.dietz at uni-konstanz.de
> > <mailto:christian.dietz at uni-konstanz.de>> wrote:
> >
> > Hi Tobi,
> >
> > thinking of parameters. Each neighborhood may have a different amount
> > of parameters like radius, spans etc...
> >
> >
> > Which leads us to the question: What do we want in the Neighborhood
> > interface? It has to be Positionable and IntervalIterable, but what
> > do we add to this?
> >
> > Initially I put a setSpan(long[] size); method, because I thought
> > that every neighborhood would have some size that could be set. The
> > span would then have the meaning of the bounding box radius. It doe
> > snot work if we want to put /e.g./ Brensenham lines there.
> >
> > What else?
>
> On 07/23/2012 08:45 PM, Christian Dietz wrote:
> > Hi,
> >
> > yes I was also thinking about a factory, but again I ran into
> > problems. Imagine the following scenario:
> >
> > You've an operation which operates on a Neighborhood & Image, so you
> > give it a Neighborhood in the Constructor. Any Img<T> is passed in
> > the compute call of the. The operation can be applied on any Img<T>
> > (e.g. compute(A img, A res)), but if the op can't set the source of a
> > neighborhood the op can't be reused.
> >
> > Best regards,
> >
> > Christian
> >
> >
> >
> > -----Original Message----- From: Tobias Pietzsch
> > [mailto:pietzsch at mpi-cbg.de] Sent: Montag, 23. Juli 2012 17:27 To:
> > Christian Dietz Cc: 'Jean-Yves Tinevez' Subject: Re: Local
> > Neighborhood stuff
> >
> > Hi,
> >
> > In similar situations we often used a factory in imglib2. So, would a
> > NeighborhoodFactory instead of a copy/updateSource method work here?
> >
> > best regards, Tobias
> >
> > On 07/21/2012 09:03 PM, Christian Dietz wrote:
> >> Just one more remark (as I ran into problems ;))
> >>
> >> Just recognized that instead of the copy(IN source) something like
> >> updateSource(IN source) would be better. In addition a constructor
> >> of a AbstractNeighborhood(int numDims,? xy) should also be
> >> available (see knip_deployment for examples).
> >>
> >> What do you think?
> >>
> >> *From:*Jean-Yves Tinevez [mailto:jeanyves.tinevez at gmail.com]
> >> *Sent:* Samstag, 21. Juli 2012 20:32 *To:* Christian Dietz *Cc:*
> >> Tobias Pietzsch; Martin Horn *Subject:* Re: Local Neighborhood
> >> stuff
> >>
> >> Sorry mail was sent a bit early. I should not write with a baby on
> >> my lap.
> >>
> >> I just had a look again at the LocalNeighborhood stuff which came
> >> up the last days in algorithms-gpl.
> >>
> >> It looks pretty much as the things we did some weeks ago. Our
> >> solution was less sophisticated, that?s  why I converted the
> >> ?delta? to the solution of Jean-Yves
> >> (BufferedRectangleNeighborhoodCursor and the Wrapper for the
> >> HyperSphere/Cursor of Stephan P.).
> >>
> >>
> >> Ok careful, the Sphere iterator is not a wrapper for the
> >> HyperSphere of Stephan: It gives you an actual ellipsoid (3
> >> different semi axes) and only iterate over the first 3 dimension by
> >> privileging the Z axis. Stephan Hypersphere is nD generic, and is
> >> an actual sphere in pixel coordinates.
> >>
> >> Several questions/suggestions came up, which I would like to
> >> discuss with you so that we maybe have one consolidated package to
> >> work on? ; )
> >>
> >> (i)Why in algorithms-gpl? Could also be put into the core of
> >> algorithms or even imglib2?
> >>
> >> Because I thought the code was clumsy compared to the elegance of
> >> Stephan's sphere, and I did not dare put it in the core.
> >>
> >> (ii)Could we parameterize AbstractNeighborhood<T, IN extends
> >> RandomAccessibleInterval<T>>? Especially in the case of the
> >> OutOfBoundsStrategy this could make sense (less casting).
> >>
> >> Oki.
> >>
> >> (iii)Could we add a method like copy(IN source) to
> >> AbstractNeighborhood? It?s nice if one could create instances of
> >> any AbstractNeighborhood from a given neighborhood.
> >>
> >> You mean create the same kind of neighborhood on a different
> >> source? Oki.
> >>
> >> (iv)Maybe we could add an Interface Neighborhood<T, IN extends
> >> RandomAccessibleInterbal<T>>?
> >>
> >>
> >> Tobias?
> >>
> >> We should also add the HyperSphere/Cursor of Stephan to this
> >> package.
> >>
> >> I made some changes and pushed them into knip_deployment
> >> algorithms-gpl etc!
> >>
> >>
> >> As soon as I am back to University I will also fix the formatting,
> >> sorry for that ;)
> >>
> >> Have a nice weekend,
> >>
> >>
> >> Thanks! cheers jy
> >>
> >
>
> On 07/21/2012 07:01 PM, Christian Dietz wrote:
>> Hi Tobi & Jean-Yves,
>>
>> I just had a look again at the LocalNeighborhood stuff which came up the
>> last days in algorithms-gpl.
>>
>> It looks pretty much as the things we did some weeks ago. Our solution
>> was less sophisticated, that?s  why I converted the ?delta? to the
>> solution of Jean-Yves (BufferedRectangleNeighborhoodCursor and the
>> Wrapper for the HyperSphere/Cursor of Stephan P.).
>>
>> Several questions/suggestions came up, which I would like to discuss
>> with you so that we maybe have one consolidated package to work on? ; )
>>
>> (i)Why in algorithms-gpl? Could also be put into the core of algorithms
>> or even imglib2?
>>
>> (ii)Could we parameterize AbstractNeighborhood<T, IN extends
>> RandomAccessibleInterval<T>>? Especially in the case of the
>> OutOfBoundsStrategy this could make sense (less casting).
>>
>> (iii)Could we add a method like copy(IN source) to AbstractNeighborhood?
>> It?s nice if one could create instances of any AbstractNeighborhood from
>> a given neighborhood.
>>
>> (iv)Maybe we could add an Interface Neighborhood<T, IN extends
>> RandomAccessibleInterbal<T>>?
>>
>> We should also add the HyperSphere/Cursor of Stephan to this package.
>>
>> I made some changes and pushed them into knip_deployment 
>> algorithms-gpl etc!
>>
>>
>> As soon as I am back to University I will also fix the formatting, sorry
>> for that ;)
>>
>> Have a nice weekend,
>>
>> Christian
>>
>
>



From tinevez at pasteur.fr  Thu Jul 26 02:30:03 2012
From: tinevez at pasteur.fr (Jean-Yves Tinevez)
Date: Thu, 26 Jul 2012 09:30:03 +0200
Subject: [ImageJ-devel] Local Neighborhood stuff
In-Reply-To: <5010F06F.6040607@uni-konstanz.de>
References: <000101cd6762$7347e580$59d7b080$@dietz@uni-konstanz.de>
	<500E760B.7060802@mpi-cbg.de> <5010F06F.6040607@uni-konstanz.de>
Message-ID: <88A20083-627D-4DBB-88BB-6EE16F0E9886@pasteur.fr>

Hi all

>> 
>> 
>> I cc'ed the imagej-devel list, because this should be of wider interest.
>> The gist of the mails quoted below is that we (Christian Dietz,
>> Jean-Yves Tinevez) are trying to unify the LocalNeighborhood (-Cursors)
>> that have been popping up in different places in ImgLib2.
>> Currently, most of the relevant source can be found in package
>> net.imglib2.algorithm.region.localneighborhood in algorithms-gpl.
>> Maybe Jean-Yves and Christian could provide some more information on the
>> individual neighborhoods that are implemented.
> 
> BufferedRectangularNeighborhood is a very simple ring-buffer implementation, to reduce the number of pixel-accesses (yes there is a speed-up).
> Additionaly I wrapped the HyperSphere stuff of Stephan Preibisch (HyperSphereNeighborhood).
> 
I think there is no need for that: there is already a HyperSphere class which has the role of the neighborhood. We need to convince Stephan to tweak it to fit into the hierarchy. 
>> 
>> 1.) Factory vs. CopyOn()
>> A factory could be constructed with parameters, for instance the
>> CellContainerFactory is constructed with cell dimensions. So a
>> HypersphereNeighborhood could be constructed with the radius for
>> example. However, I don't see much harm in adding the copyOn() method.
>> Having only updateSource() would be too little, as we might want to
>> change the type T of the Neighborhood in copyOn() and only keep the
>> structure.In general, I don't like the updateSource() very much. For
>> instance,what happens if the new source has a different number of
>> dimensions?
> I agree. As long as one can simulate the updateSource() behaviour (maybe with copyOn) everything is fine.
> But as you mentoined, how would we handle sources with more dimensions in copyOn? For instance copyOn on a RectangularNeighborhood (with 3,5,7 spans) is called with a
> 4-d source. What would be the span in this dimension?

I suggest by contract: 0. We would copy the span array to the new copy, and take the smallest array size as a limit. So that has soon as the numDimensions() are not equal, 0s are fed to the span. It is the role of the concrete implementation to ensure it makes sense. E.g.: copying a sphere to a 2D image should make it a disc. 

> 
>> 2.) Neighborhood interface
>> In addition to Positionable and IterableInterval, it could extend Localizable to get the position of the center.
> 
> Yap. Perfect.
> 
setSpan(long[] span);
span(long[] span);
copyOn(RandomAccessible<T> target)

I would like also to have a mother interface for the cursor, that would allow methods like

relativeDistance(int dim); // from the neighborhood center
relativeSquareDistance();
etc...


>> 
>> 3.) IN extends RandomAccessibleInterval<T> parameter in AbstractNeighborhood, etc
>> I think all the Neighborhoods should be constructed on
>> RandomAccessible<T> instead of RandomAccessibleInterval<T>.
>> If interval extension is required then this should be done outside of
>> the Neighborhood. If we do this, then the IN parameter is no longer
>> required, right? The Neighborhood is just constructed with any
>> RandomAccessible<T>.
> 
> Agree.
> 
Tobias also suggest to make a double type to be more generic than just ExtendedRI etc? Could you do it? I am not strong enough with the generics to make it right.


>> 4.) move to imglib2 core
>> Eventually, the neighborhood should be moved to the core, maybe with the
>> exception of rather special-case stuff like DiscNeighborhood.
>> Or is ops a better place? What do you think?
> 
> From my point of view it should be in the core, as these are basic data-structures.
> 
When the first 3 concrete implementations are done ok? 

Also i plan on removing DiscNeighborhood and SphereNeighborhood from imglib2: they are too specific and clumsy and do not fit what we are designing here. They are related to the ability to position a neighborhood using calibrated, real coordinates, as is x = 6.5 ?m, etc.. taking advantage of the calibration in IngPlus<T> 

The neighborhood hierarchy we are designing deal with pixel coordinates only and this is right. 

Cheers
jy
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120726/bb9e5ca3/attachment.html>

From michael at doube.net  Thu Jul 26 02:47:41 2012
From: michael at doube.net (Michael Doube)
Date: Thu, 26 Jul 2012 09:47:41 +0200
Subject: [ImageJ-devel] Finding classes and importing the right Maven
 artifacts
In-Reply-To: <alpine.DEB.1.00.1207251927580.32459@s15462909.onlinehome-server.info>
References: <500FBC79.20409@doube.net>
	<alpine.DEB.1.00.1207251927580.32459@s15462909.onlinehome-server.info>
Message-ID: <5010F61D.1080106@doube.net>

>> Mostly, Eclipse has handled that OK. But, now I'm editing my pom.xml and
>> am missing a couple of dependencies, which are really hard to find.

OK, so I found them by trial and error by searching at
http://maven.imagej.net:8081/index.html#welcome and editing pom.xml
until build errors went away.

What was tripping me up was that there are several versions of
ij-platform, for example. The beta releases (fixed states, right?) and
the SNAPSHOTS (updating often, right?). So far, so good. But, then there
are versions 2.0-SNAPSHOT and 2.0.0-SNAPSHOT. And one with a sources
classifier. And there is also an ij-platform artifact with the group ID
imagej, version 2.0-SNAPSHOT, and several others with group ID
net.imagej. So, even guessing the right artifact name could point at
eight distinct actual artifacts.

Even more confusing is this recommendation for pom.xml at
http://fiji.sc/wiki/index.php/Maven

		<dependency>
			<groupId>net.imagej</groupId>
			<artifactId>ij</artifactId>
			<version>1.46j</version>
		</dependency>
		<dependency>
			<groupId>imagej</groupId>
			<artifactId>imagej</artifactId>
			<version>2.0-SNAPSHOT</version>
		</dependency>

Which makes it look like ImageJ1 is under net.imagej and ImageJ2 is
under imagej.

Guidance, please?

Michael




From pietzsch at mpi-cbg.de  Thu Jul 26 05:50:34 2012
From: pietzsch at mpi-cbg.de (Tobias Pietzsch)
Date: Thu, 26 Jul 2012 12:50:34 +0200
Subject: [ImageJ-devel] Local Neighborhood stuff
In-Reply-To: <88A20083-627D-4DBB-88BB-6EE16F0E9886@pasteur.fr>
References: <000101cd6762$7347e580$59d7b080$@dietz@uni-konstanz.de>
	<500E760B.7060802@mpi-cbg.de> <5010F06F.6040607@uni-konstanz.de>
	<88A20083-627D-4DBB-88BB-6EE16F0E9886@pasteur.fr>
Message-ID: <501120FA.9070901@mpi-cbg.de>

Hi,

 >>> 2.) Neighborhood interface
 > setSpan(long[] span);
 > span(long[] span);
 > copyOn(RandomAccessible<T> target)

I think, the "span" concept is too specialised for the interface.
The assumption is that the bounding box of the neighborhood structuring 
element is 2*span[d]+1 in every dimension. The anchor point is assumed 
to be the center of this neighborhood.

We should think of non-symmetric neighborhoods as well.
I suggest that instead of a long[] span, we use an Interval to specify 
the bounding box. The anchor point is always the (0,0,...,0) of the 
interval. The above span would translate to interval.min[d] = -span[d], 
interval.max[] = span[d].

What would setSpan() do? Does this change the size and shape of the 
structuring element?

 >
 > I would like also to have a mother interface for the cursor, that would
 > allow methods like
 >
 > relativeDistance(int dim); // from the neighborhood center
 > relativeSquareDistance();
 > etc...

Ok. I wonder whether all Neighborhoods should be required to implement 
this. Maybe we could have a hierarchy of interfaces. Neighborhood just
supplies a Cursor. NeighborhoodExt extends Neighborhood supplies a 
Cursor that also implements interface for relativeDistance() etc.

Note, that it is easy to write a generic wrapper that takes a 
Neighborhood and turns it into NeighborhoodExt by wrapping the Cursors.
So if you just want to hack up a Neighborhood quickly you wouldn't need 
to bother with implementing relativeDistance() etc.

Of course, I do not suggest to name the thing "NeighborhoodExt"...
:-)

 >> From my point of view it should be in the core, as these are basic
 >> data-structures.
 >>
 > When the first 3 concrete implementations are done ok?

Sounds good!

best regards,
Tobias


On 07/26/2012 09:30 AM, Jean-Yves Tinevez wrote:
> Hi all
>
>>>
>>>
>>> I cc'ed the imagej-devel list, because this should be of wider interest.
>>> The gist of the mails quoted below is that we (Christian Dietz,
>>> Jean-Yves Tinevez) are trying to unify the LocalNeighborhood (-Cursors)
>>> that have been popping up in different places in ImgLib2.
>>> Currently, most of the relevant source can be found in package
>>> net.imglib2.algorithm.region.localneighborhood in algorithms-gpl.
>>> Maybe Jean-Yves and Christian could provide some more information on the
>>> individual neighborhoods that are implemented.
>>
>> BufferedRectangularNeighborhood is a very simple ring-buffer
>> implementation, to reduce the number of pixel-accesses (yes there is a
>> speed-up).
>> Additionaly I wrapped the HyperSphere stuff of Stephan Preibisch
>> (HyperSphereNeighborhood).
>>
> I think there is no need for that: there is already a HyperSphere class
> which has the role of the neighborhood. We need to convince Stephan to
> tweak it to fit into the hierarchy.
>>>
>>> 1.) Factory vs. CopyOn()
>>> A factory could be constructed with parameters, for instance the
>>> CellContainerFactory is constructed with cell dimensions. So a
>>> HypersphereNeighborhood could be constructed with the radius for
>>> example. However, I don't see much harm in adding the copyOn() method.
>>> Having only updateSource() would be too little, as we might want to
>>> change the type T of the Neighborhood in copyOn() and only keep the
>>> structure.In general, I don't like the updateSource() very much. For
>>> instance,what happens if the new source has a different number of
>>> dimensions?
>> I agree. As long as one can simulate the updateSource() behaviour
>> (maybe with copyOn) everything is fine.
>> But as you mentoined, how would we handle sources with more dimensions
>> in copyOn? For instance copyOn on a RectangularNeighborhood (with
>> 3,5,7 spans) is called with a
>> 4-d source. What would be the span in this dimension?
>
> I suggest by contract: 0. We would copy the span array to the new copy,
> and take the smallest array size as a limit. So that has soon as the
> numDimensions() are not equal, 0s are fed to the span. It is the role of
> the concrete implementation to ensure it makes sense. /E.g.: /copying a
> sphere to a 2D image should make it a disc.
>
>>
>>> 2.) Neighborhood interface
>>> In addition to Positionable and IterableInterval, it could extend
>>> Localizable to get the position of the center.
>>
>> Yap. Perfect.
>>
> setSpan(long[] span);
> span(long[] span);
> copyOn(RandomAccessible<T> target)
>
> I would like also to have a mother interface for the cursor, that would
> allow methods like
>
> relativeDistance(int dim); // from the neighborhood center
> relativeSquareDistance();
> etc...
>
>
>>>
>>> 3.) IN extends RandomAccessibleInterval<T> parameter in
>>> AbstractNeighborhood, etc
>>> I think all the Neighborhoods should be constructed on
>>> RandomAccessible<T> instead of RandomAccessibleInterval<T>.
>>> If interval extension is required then this should be done outside of
>>> the Neighborhood. If we do this, then the IN parameter is no longer
>>> required, right? The Neighborhood is just constructed with any
>>> RandomAccessible<T>.
>>
>> Agree.
>>
> Tobias also suggest to make a double type to be more generic than just
> ExtendedRI etc? Could you do it? I am not strong enough with the
> generics to make it right.
>
>
>>> 4.) move to imglib2 core
>>> Eventually, the neighborhood should be moved to the core, maybe with the
>>> exception of rather special-case stuff like DiscNeighborhood.
>>> Or is ops a better place? What do you think?
>>
>> From my point of view it should be in the core, as these are basic
>> data-structures.
>>
> When the first 3 concrete implementations are done ok?
>
> Also i plan on removing DiscNeighborhood and SphereNeighborhood from
> imglib2: they are too specific and clumsy and do not fit what we are
> designing here. They are related to the ability to position a
> neighborhood using calibrated, real coordinates, as is x = 6.5 ?m, etc..
> taking advantage of the calibration in IngPlus<T>
>
> The neighborhood hierarchy we are designing deal with pixel coordinates
> only and this is right.
>
> Cheers
> jy



From Johannes.Schindelin at gmx.de  Thu Jul 26 12:00:15 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Thu, 26 Jul 2012 19:00:15 +0200 (CEST)
Subject: [ImageJ-devel] Finding classes and importing the right Maven
 artifacts
In-Reply-To: <5010F61D.1080106@doube.net>
References: <500FBC79.20409@doube.net>
	<alpine.DEB.1.00.1207251927580.32459@s15462909.onlinehome-server.info>
	<5010F61D.1080106@doube.net>
Message-ID: <alpine.DEB.1.00.1207261851100.32459@s15462909.onlinehome-server.info>

Hi Michael,

On Thu, 26 Jul 2012, Michael Doube wrote:

> >> Mostly, Eclipse has handled that OK. But, now I'm editing my pom.xml
> >> and am missing a couple of dependencies, which are really hard to
> >> find.
> 
> OK, so I found them by trial and error by searching at
> http://maven.imagej.net:8081/index.html#welcome and editing pom.xml
> until build errors went away.

Yes, we need to make that much, much easier. I will write a plugin
intended for developers you can use to add dependencies given a class name
(under the condition that the class name is in Fiji's class path and that
the corresponding .jar file has a valid pom.xml in it) and a pom.xml you
want to extend.

> What was tripping me up was that there are several versions of
> ij-platform, for example. The beta releases (fixed states, right?) and
> the SNAPSHOTS (updating often, right?). So far, so good. But, then there
> are versions 2.0-SNAPSHOT and 2.0.0-SNAPSHOT. And one with a sources
> classifier. And there is also an ij-platform artifact with the group ID
> imagej, version 2.0-SNAPSHOT, and several others with group ID
> net.imagej. So, even guessing the right artifact name could point at
> eight distinct actual artifacts.

In general, until the API of ImageJ2 stabilizes, you should always use
2.0.0-SNAPSHOT. To be safe, you could just make the scijava .pom your
parent pom (as it is e.g. here:
https://github.com/fiji/fiji/blob/master/src-plugins/pom.xml; it requires
the <parent> and <repositories> tags to be set correctly) and use
${imagej.version} instead (see
https://github.com/scijava/scijava-common/blob/master/pom-scijava/pom.xml
for the available properties).

> Even more confusing is this recommendation for pom.xml at
> http://fiji.sc/wiki/index.php/Maven
> 
> 		<dependency>
> 			<groupId>net.imagej</groupId>
> 			<artifactId>ij</artifactId>
> 			<version>1.46j</version>
> 		</dependency>
> 		<dependency>
> 			<groupId>imagej</groupId>
> 			<artifactId>imagej</artifactId>
> 			<version>2.0-SNAPSHOT</version>
> 		</dependency>
> 
> Which makes it look like ImageJ1 is under net.imagej and ImageJ2 is
> under imagej.

You should specify exactly which component you require of ImageJ2, e.g.
ij-data or ij-core. They are in net.imagej and they all have the version
2.0.0-SNAPSHOT at the moment.

Ciao,
Dscho


From ctrueden at wisc.edu  Thu Jul 26 15:19:52 2012
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Thu, 26 Jul 2012 15:19:52 -0500
Subject: [ImageJ-devel] Finding classes and importing the right Maven
	artifacts
In-Reply-To: <5010F61D.1080106@doube.net>
References: <500FBC79.20409@doube.net>
	<alpine.DEB.1.00.1207251927580.32459@s15462909.onlinehome-server.info>
	<5010F61D.1080106@doube.net>
Message-ID: <CADN69y=2ynpQ3he9pW=KEc+DJHmuu+EmohnNaC5cVTfb_-9f-g@mail.gmail.com>

Hi Mike,

Thanks for the feedback. To add to Dscho's comments...


> What was tripping me up was that there are several versions of
> ij-platform, for example. The beta releases (fixed states, right?) and
> the SNAPSHOTS (updating often, right?). So far, so good.


Yep, all correct.


> But, then there are versions 2.0-SNAPSHOT and 2.0.0-SNAPSHOT.


This is my fault; I decided to change to a major.minor.micro versioning
scheme so we could use semantic versioning (http://semver.org/). The
"2.0-SNAPSHOT" builds are obsolete, so I deleted them all. Hopefully that
clears up any confusion there. :-)


> And one with a sources classifier.


This is a standard Maven thing you can do: publish the source code to its
own JAR with "-sources" classifier. Eclipse is smart enough to download it
for you: in Package Explorer, find any JAR under your project's "Maven
Dependencies" list, right-click it and choose "Maven > Download Sources".
After that, you'll have them in your local cache (in ~/.m2) and you can
browse the sources in Eclipse, debug into them, etc. This only works if
that particular Maven project deploys the "-sources" JAR though, like we
are doing.


> And there is also an ij-platform artifact with the group ID imagej,
> version 2.0-SNAPSHOT


This is also my fault. We originally used groupId "imagej" but decided to
change to "net.imagej" because as Dscho said, it is the convention to use
reverse domain name, and it is strongly preferred (maybe even required?) to
do things that way if you want to submit your stuff to the Maven central
repository.

So everything listed under the "imagej" groupId is old/deprecated, and
should not be used.

To clarify this, I deleted all SNAPSHOT builds with groupId of imagej from
the server. However, there are some release builds that it would be best
not to remove, such as ImageJ5D 1.2.1 - 1.2.4. So the "imagej" groupId will
remain, but in the releases subtree only.


> and several others with group ID net.imagej.


Yes, these are the correct ones.


> So, even guessing the right artifact name could point at eight distinct
> actual artifacts.


Hopefully since I deleted a lot of the cruft, it is less confusing now.


> Even more confusing is this recommendation for pom.xml at
> http://fiji.sc/wiki/index.php/Maven


I checked that page, but could not find the block you cited. If you see the
old "imagej" groupId anywhere, please fix it, or let us know and I will do
so.

Regards,
Curtis


On Thu, Jul 26, 2012 at 2:47 AM, Michael Doube <michael at doube.net> wrote:

> >> Mostly, Eclipse has handled that OK. But, now I'm editing my pom.xml and
> >> am missing a couple of dependencies, which are really hard to find.
>
> OK, so I found them by trial and error by searching at
> http://maven.imagej.net:8081/index.html#welcome and editing pom.xml
> until build errors went away.
>
> What was tripping me up was that there are several versions of
> ij-platform, for example. The beta releases (fixed states, right?) and
> the SNAPSHOTS (updating often, right?). So far, so good. But, then there
> are versions 2.0-SNAPSHOT and 2.0.0-SNAPSHOT. And one with a sources
> classifier. And there is also an ij-platform artifact with the group ID
> imagej, version 2.0-SNAPSHOT, and several others with group ID
> net.imagej. So, even guessing the right artifact name could point at
> eight distinct actual artifacts.
>
> Even more confusing is this recommendation for pom.xml at
> http://fiji.sc/wiki/index.php/Maven
>
>                 <dependency>
>                         <groupId>net.imagej</groupId>
>                         <artifactId>ij</artifactId>
>                         <version>1.46j</version>
>                 </dependency>
>                 <dependency>
>                         <groupId>imagej</groupId>
>                         <artifactId>imagej</artifactId>
>                         <version>2.0-SNAPSHOT</version>
>                 </dependency>
>
> Which makes it look like ImageJ1 is under net.imagej and ImageJ2 is
> under imagej.
>
> Guidance, please?
>
> Michael
>
>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120726/8cf4d1b0/attachment.html>

From markyhb at gmail.com  Tue Jul 17 15:46:00 2012
From: markyhb at gmail.com (Marky)
Date: Tue, 17 Jul 2012 21:46:00 +0100
Subject: [ImageJ-devel] Basic usage of ImageJ2 libraries in seperate
 application (Simple display image in JFrame)
Message-ID: <CAD0z_xR7B_kaZ1UATMdaL2sgXaZr302sDO4osFLfGGfk-Y7Kqg@mail.gmail.com>

Dear All,

I have a (hopefully) simple question. I have a seperate application
which launches a JFrame which displays a DICOM image and provides
basic fuinstionality like zooming and ROI. I have this working with
ImageJ libraries no problem (ImagePlus etc).

I would like to replicate this using the new ImageJ2 libraries.
However, when looking through the likely classes to guide me, I find
myself getting lost!.
I simply wish to display an image in a JFramw and provide the basis
functionality that a standar ImageJ2 window does (zooming, scrolling
through slices etc).

Is there any help or advice you can give.

Cheers,
Mark


From simon.ochsenreither at googlemail.com  Wed Jul 25 03:41:55 2012
From: simon.ochsenreither at googlemail.com (simon.ochsenreither at googlemail.com)
Date: Wed, 25 Jul 2012 01:41:55 -0700 (PDT)
Subject: [ImageJ-devel] Move of the Fiji Updater into ImageJ complete
In-Reply-To: <alpine.DEB.1.00.1207250236290.32459@s15462909.onlinehome-server.info>
References: <alpine.DEB.1.00.1207250236290.32459@s15462909.onlinehome-server.info>
Message-ID: <efac0b07-f73b-48d7-a2d6-2230bebc84e4@googlegroups.com>

Hi Johannes,

this really sounds like a lot of hard work, thank you!
Does this have any short-term impact on Fiji or will it just mean that Fiji 
won't need to ship with its own updater when Fiji is ported to ImageJ2?

Sorry, about the probably stupid questions... I have seen that a lot of 
changes and improvements have gone into ImageJ2 and I wonder how many 
changes will Fiji need to run on the new version? I guess it will require 
more than just a recompile? :-)
ImageJ2 also uses Swing instead of AWT, so do plugins with a GUI need to 
update or is the move handled transparently (and people can just keep using 
e. g. GenericDialogPlus, etc.?)

I searched for information on the website, but maybe you have a hint where 
I can find more information about it?

Thanks!

Simon
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120725/9051c218/attachment-0001.html>

From iarganda at mit.edu  Wed Jul 25 09:12:52 2012
From: iarganda at mit.edu (Ignacio Arganda-Carreras)
Date: Wed, 25 Jul 2012 16:12:52 +0200
Subject: [ImageJ-devel] [fiji-devel] Re: Move of the Fiji Updater into
	ImageJ complete
In-Reply-To: <efac0b07-f73b-48d7-a2d6-2230bebc84e4@googlegroups.com>
References: <alpine.DEB.1.00.1207250236290.32459@s15462909.onlinehome-server.info>
	<efac0b07-f73b-48d7-a2d6-2230bebc84e4@googlegroups.com>
Message-ID: <CAE=G8NQKKt7a43JdHmS5qWZWmag=HsNA+mOHkFRv7ERdtWYa9Q@mail.gmail.com>

Hey Johannes,

I tried to upload a new version of Trainable_Segmentation.jar and I got the
following errors on the terminal:

Multiple versions found for jars/log4j.jar
Multiple versions found for jars/slf4j-api.jar
Multiple versions found for jars/slf4j-log4j12.jar
java.lang.InstantiationException: No uploader found for protocol ssh
at imagej.updater.core.FilesUploader.getUploader(FilesUploader.java:88)
 at imagej.updater.core.FilesUploader.<init>(FilesUploader.java:100)
at imagej.updater.gui.UpdaterFrame.upload(UpdaterFrame.java:794)
 at imagej.updater.gui.UpdaterFrame$6$1.run(UpdaterFrame.java:323)


I followed your instructions, so i don't know what i'm missing here...

ignacio

On Wed, Jul 25, 2012 at 10:41 AM, <simon.ochsenreither at googlemail.com>wrote:

> Hi Johannes,
>
> this really sounds like a lot of hard work, thank you!
> Does this have any short-term impact on Fiji or will it just mean that
> Fiji won't need to ship with its own updater when Fiji is ported to ImageJ2?
>
> Sorry, about the probably stupid questions... I have seen that a lot of
> changes and improvements have gone into ImageJ2 and I wonder how many
> changes will Fiji need to run on the new version? I guess it will require
> more than just a recompile? :-)
> ImageJ2 also uses Swing instead of AWT, so do plugins with a GUI need to
> update or is the move handled transparently (and people can just keep using
> e. g. GenericDialogPlus, etc.?)
>
> I searched for information on the website, but maybe you have a hint where
> I can find more information about it?
>
> Thanks!
>
> Simon
>
>  --
> Please avoid top-posting, and please make sure to reply-to-all!
>
> Mailing list web interface: http://groups.google.com/group/fiji-devel
>



-- 
Ignacio Arganda-Carreras, Ph.D.
Seung's lab, 46-5065
Department of Brain and Cognitive Sciences
Massachusetts Institute of Technology
43 Vassar St.
Cambridge, MA 02139
USA

Phone: (001) 617-324-3747
Website: http://biocomp.cnb.csic.es/~iarganda/index_EN.html
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120725/e123251b/attachment-0001.html>

From simon.ochsenreither at googlemail.com  Wed Jul 25 15:25:57 2012
From: simon.ochsenreither at googlemail.com (simon.ochsenreither at googlemail.com)
Date: Wed, 25 Jul 2012 13:25:57 -0700 (PDT)
Subject: [ImageJ-devel] [fiji-devel] Re: Move of the Fiji Updater into
	ImageJ complete
In-Reply-To: <alpine.DEB.1.00.1207252012220.32459@s15462909.onlinehome-server.info>
References: <alpine.DEB.1.00.1207250236290.32459@s15462909.onlinehome-server.info>
	<efac0b07-f73b-48d7-a2d6-2230bebc84e4@googlegroups.com>
	<alpine.DEB.1.00.1207252012220.32459@s15462909.onlinehome-server.info>
Message-ID: <fff68582-0054-473d-abaf-2c5716011361@googlegroups.com>

Hi Johannes!

Thanks for your information, I really appreciate it!

The way plugins try to get their input is no longer by creating a dialog 
> explicitly. This is a nightmare if you want to run the same plugin 
> unchanged on a cluster.
>
Good to hear! I have a lot of fun with that currently ... :-) 
 

> ImageJ will figure out how to construct a dialog from the annotated 
> fields. Parameters do not need to be information to be gathered via a 
> dialog, though. For example, if you want to interact with a service (such 
> as the log service to report exceptions) you also add them as fields 
> annotated as a parameter. 
>
 Wow, that's an quite advanced design! I hope it works out that way, I 
think especially the layouting will be hard to get right. So there will be 
custom compiler plugins to process the annotations and create classfiles 
from them?

Bye,

Simon
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120725/02e422a1/attachment.html>

From jeanyves.tinevez at gmail.com  Thu Jul 26 06:11:12 2012
From: jeanyves.tinevez at gmail.com (Jean-Yves Tinevez)
Date: Thu, 26 Jul 2012 13:11:12 +0200
Subject: [ImageJ-devel] Local Neighborhood stuff
In-Reply-To: <501120FA.9070901@mpi-cbg.de>
References: <500E760B.7060802@mpi-cbg.de> <5010F06F.6040607@uni-konstanz.de>
	<88A20083-627D-4DBB-88BB-6EE16F0E9886@pasteur.fr>
	<501120FA.9070901@mpi-cbg.de>
Message-ID: <CAAgB9O75gbgSXVBMvXvk_iBcmHeLB4--6pjGidQ4Bc2M3iavcw@mail.gmail.com>

On Thu, Jul 26, 2012 at 12:50 PM, Tobias Pietzsch <pietzsch at mpi-cbg.de>wrote:

> Hi,
>
> >>> 2.) Neighborhood interface
>
> > setSpan(long[] span);
> > span(long[] span);
> > copyOn(RandomAccessible<T> target)
>
> I think, the "span" concept is too specialised for the interface.
>

Right: for instance, it does not work with the HyperSphere which requires a
scalar long radius.


> The assumption is that the bounding box of the neighborhood structuring
> element is 2*span[d]+1 in every dimension. The anchor point is assumed to
> be the center of this neighborhood.
>
> We should think of non-symmetric neighborhoods as well.
> I suggest that instead of a long[] span, we use an Interval to specify the
> bounding box. The anchor point is always the (0,0,...,0) of the interval.
> The above span would translate to interval.min[d] = -span[d],
> interval.max[] = span[d].
>
> What would setSpan() do? Does this change the size and shape of the
> structuring element?
>
> Just the global size, the actual meaning should be let to concrete
implementation.
But as you noted, it is too specific for the interface, until we come with
an idea that would enable to specify the dimension of a generic
neighborhood....
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120726/2165a346/attachment.html>

From michael at doube.net  Fri Jul 27 06:45:23 2012
From: michael at doube.net (Michael Doube)
Date: Fri, 27 Jul 2012 13:45:23 +0200
Subject: [ImageJ-devel] Finding classes and importing the right Maven
 artifacts
In-Reply-To: <CADN69y=2ynpQ3he9pW=KEc+DJHmuu+EmohnNaC5cVTfb_-9f-g@mail.gmail.com>
References: <500FBC79.20409@doube.net>
	<alpine.DEB.1.00.1207251927580.32459@s15462909.onlinehome-server.info>
	<5010F61D.1080106@doube.net>
	<CADN69y=2ynpQ3he9pW=KEc+DJHmuu+EmohnNaC5cVTfb_-9f-g@mail.gmail.com>
Message-ID: <50127F53.8090005@doube.net>

Hi Curtis, Johannes,

>     But, then there are versions 2.0-SNAPSHOT and 2.0.0-SNAPSHOT.
> 
> 
> This is my fault; I decided to change to a major.minor.micro versioning
> scheme so we could use semantic versioning (http://semver.org/). The
> "2.0-SNAPSHOT" builds are obsolete, so I deleted them all. Hopefully
> that clears up any confusion there. :-)

Yep, thanks. All set to 2.0.0-SNAPSHOT now.

> in Package Explorer, find any JAR under your
> project's "Maven Dependencies" list, right-click it and choose "Maven >
> Download Sources". After that, you'll have them in your local cache (in
> ~/.m2) and you can browse the sources in Eclipse, debug into them, etc.

That is cool. Thanks.

> So everything listed under the "imagej" groupId is old/deprecated, and
> should not be used.

Got it. Everything is net.imagej now.

> I checked that page, but could not find the block you cited.

Looks like half of it was my own creation, sorry for the mis-citation.


> If you see
> the old "imagej" groupId anywhere, please fix it, or let us know and I
> will do so.

Only in relation to SNAPSHOTs and future releases right?

In the end I have made two new projects in Eclipse, both tracking
bonej.git. One is using my old Ant-based build system and is for BoneJ1,
and there is a mavenized new project BoneJ2 using the Maven build
system, pom.xml etc. They work on different branches of the git repo.

What I would like to do in the end is have ImageJ handle runtime
dependencies. Is there a way to tell Maven to make sure these things are
present at compile-time? In particular, I'd like to build against a
couple of plugins which are listed as modules in Fiji's
src-plugins/pom.xml AnalyzeSkeleton_ and LocalThickness. At the moment I
have to put their jars in the build path.

Michael






From michael at doube.net  Fri Jul 27 08:35:24 2012
From: michael at doube.net (Michael Doube)
Date: Fri, 27 Jul 2012 15:35:24 +0200
Subject: [ImageJ-devel] Finding classes and importing the right Maven
 artifacts
In-Reply-To: <50127F53.8090005@doube.net>
References: <500FBC79.20409@doube.net>
	<alpine.DEB.1.00.1207251927580.32459@s15462909.onlinehome-server.info>
	<5010F61D.1080106@doube.net>
	<CADN69y=2ynpQ3he9pW=KEc+DJHmuu+EmohnNaC5cVTfb_-9f-g@mail.gmail.com>
	<50127F53.8090005@doube.net>
Message-ID: <5012991C.8020804@doube.net>

>> in Package Explorer, find any JAR under your
>> project's "Maven Dependencies" list, right-click it and choose "Maven >
>> Download Sources". After that, you'll have them in your local cache (in
>> ~/.m2) and you can browse the sources in Eclipse, debug into them, etc.

Maybe this is still refreshing in the US morning, but I still see
net.imagej:ij-platform 2.0-SNAPSHOT in the repository, and the source is
only for the 2.0 version. Could you please make sources available for
the 2.0.0-SNAPSHOTs?

Cheers,

Michael



From Johannes.Schindelin at gmx.de  Fri Jul 27 13:41:23 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Fri, 27 Jul 2012 20:41:23 +0200 (CEST)
Subject: [ImageJ-devel] Finding classes and importing the right Maven
 artifacts
In-Reply-To: <50127F53.8090005@doube.net>
References: <500FBC79.20409@doube.net>
	<alpine.DEB.1.00.1207251927580.32459@s15462909.onlinehome-server.info>
	<5010F61D.1080106@doube.net>
	<CADN69y=2ynpQ3he9pW=KEc+DJHmuu+EmohnNaC5cVTfb_-9f-g@mail.gmail.com>
	<50127F53.8090005@doube.net>
Message-ID: <alpine.DEB.1.00.1207272038290.32459@s15462909.onlinehome-server.info>

Hi Michael,

On Fri, 27 Jul 2012, Michael Doube wrote:

> What I would like to do in the end is have ImageJ handle runtime
> dependencies. Is there a way to tell Maven to make sure these things are
> present at compile-time? In particular, I'd like to build against a
> couple of plugins which are listed as modules in Fiji's
> src-plugins/pom.xml AnalyzeSkeleton_ and LocalThickness. At the moment I
> have to put their jars in the build path.

That's correct, unless you build Fiji in your Eclipse workspace as well.
Then you can add the dependencies to the pom.xml file.

For the moment, I have not deployed *any* Fiji artifacts, mainly because I
have to sort out a couple of issues first: since I want to deploy them
from Jenkins, I have to make sure that it does not try to re-deploy
non-snapshot versions (there are a couple ones in src-plugins/, most
notably imagescience and friends, which are stable releases and as such
really do not want the -SNAPSHOT suffix in their version).

It will take well into next week to sort out these issues, sorry!

Ciao,
Johannes


From ctrueden at wisc.edu  Fri Jul 27 14:49:32 2012
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Fri, 27 Jul 2012 14:49:32 -0500
Subject: [ImageJ-devel] Finding classes and importing the right Maven
	artifacts
In-Reply-To: <5012991C.8020804@doube.net>
References: <500FBC79.20409@doube.net>
	<alpine.DEB.1.00.1207251927580.32459@s15462909.onlinehome-server.info>
	<5010F61D.1080106@doube.net>
	<CADN69y=2ynpQ3he9pW=KEc+DJHmuu+EmohnNaC5cVTfb_-9f-g@mail.gmail.com>
	<50127F53.8090005@doube.net> <5012991C.8020804@doube.net>
Message-ID: <CADN69ymDBBNS=apgMmxxF0M8FUYd6it+U4AySFwMw5VmL4Jn9g@mail.gmail.com>

Hi Mike,

> Maybe this is still refreshing in the US morning, but I still see
> net.imagej:ij-platform 2.0-SNAPSHOT in the repository

The web site cache was out of date, so they were popping up in search
results but not actually present. I rebuilt the cache, so all traces of the
"2.0-SNAPSHOT" artifacts should now be gone.

> and the source is
> only for the 2.0 version. Could you please make sources available for
> the 2.0.0-SNAPSHOTs?

Once again, my fault. While playing around with the Maven POM hierarchy
awhile back, I inadvertently disabled generation of "-sources" JARs. I have
reenabled it for the ImageJ2, ImgLib and ImageJA projects, and all should
now be present for the snapshot versions. Unfortunately, they did not get
published for the beta1, beta2 or beta3 release versions, nor for any
versions of ImageJ1. For ImageJ2 it may not be worth worrying about fixing;
future betas and stable releases will have them again now. But I would like
to publish the sources for past ImageJ1 releases; I will investigate the
best way of doing that.

Regards,
Curtis


On Fri, Jul 27, 2012 at 8:35 AM, Michael Doube <michael at doube.net> wrote:

> >> in Package Explorer, find any JAR under your
> >> project's "Maven Dependencies" list, right-click it and choose "Maven >
> >> Download Sources". After that, you'll have them in your local cache (in
> >> ~/.m2) and you can browse the sources in Eclipse, debug into them, etc.
>
> Maybe this is still refreshing in the US morning, but I still see
> net.imagej:ij-platform 2.0-SNAPSHOT in the repository, and the source is
> only for the 2.0 version. Could you please make sources available for
> the 2.0.0-SNAPSHOTs?
>
> Cheers,
>
> Michael
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120727/bf3acd66/attachment.html>

From michael at doube.net  Sun Jul 29 03:34:03 2012
From: michael at doube.net (Michael Doube)
Date: Sun, 29 Jul 2012 10:34:03 +0200
Subject: [ImageJ-devel] Finding classes and importing the right Maven
 artifacts
In-Reply-To: <CADN69ymDBBNS=apgMmxxF0M8FUYd6it+U4AySFwMw5VmL4Jn9g@mail.gmail.com>
References: <500FBC79.20409@doube.net>
	<alpine.DEB.1.00.1207251927580.32459@s15462909.onlinehome-server.info>
	<5010F61D.1080106@doube.net>
	<CADN69y=2ynpQ3he9pW=KEc+DJHmuu+EmohnNaC5cVTfb_-9f-g@mail.gmail.com>
	<50127F53.8090005@doube.net> <5012991C.8020804@doube.net>
	<CADN69ymDBBNS=apgMmxxF0M8FUYd6it+U4AySFwMw5VmL4Jn9g@mail.gmail.com>
Message-ID: <5014F57B.7070200@doube.net>

Hi Curtis,

> The web site cache was out of date, so they were popping up in search
> results but not actually present. I rebuilt the cache, so all traces of
> the "2.0-SNAPSHOT" artifacts should now be gone.

They are gone: much tidier now :-)

> I inadvertently disabled generation of "-sources" JARs. I
> have reenabled it for the ImageJ2, ImgLib and ImageJA projects, and all
> should now be present for the snapshot versions.

Sources for the 2.0.0-SNAPSHOTs look to be there on the search page, but
when I ask Maven to download sources nothing much happens, Eclipse still
tells me that no sources or JavaDoc could be found and if I put this
into pom.xml,

		<dependency>
			<groupId>net.imagej</groupId>
			<artifactId>ij-core</artifactId>
			<version>2.0.0-SNAPSHOT</version>
		</dependency>
		<dependency>
			<groupId>net.imagej</groupId>
			<artifactId>ij-core</artifactId>
			<version>2.0.0-SNAPSHOT</version>
			<classifier>sources</classifier>
		</dependency>

Eclipse complains:
Missing artifact net.imagej:ij-core:jar:sources:2.0.0-20120727.050232-588

Maybe I'm just being impatient?

Michael



From michael at doube.net  Sun Jul 29 04:06:22 2012
From: michael at doube.net (Michael Doube)
Date: Sun, 29 Jul 2012 11:06:22 +0200
Subject: [ImageJ-devel] Finding classes and importing the right Maven
 artifacts
In-Reply-To: <alpine.DEB.1.00.1207272038290.32459@s15462909.onlinehome-server.info>
References: <500FBC79.20409@doube.net>
	<alpine.DEB.1.00.1207251927580.32459@s15462909.onlinehome-server.info>
	<5010F61D.1080106@doube.net>
	<CADN69y=2ynpQ3he9pW=KEc+DJHmuu+EmohnNaC5cVTfb_-9f-g@mail.gmail.com>
	<50127F53.8090005@doube.net>
	<alpine.DEB.1.00.1207272038290.32459@s15462909.onlinehome-server.info>
Message-ID: <5014FD0E.2090700@doube.net>

Hi Johannes,

> For the moment, I have not deployed *any* Fiji artifacts, mainly because I
> have to sort out a couple of issues first: since I want to deploy them
> from Jenkins, I have to make sure that it does not try to re-deploy
> non-snapshot versions (there are a couple ones in src-plugins/, most
> notably imagescience and friends, which are stable releases and as such
> really do not want the -SNAPSHOT suffix in their version).

But that sounds promising that in a little while I will be able to add
Fiji plugins to my pom.xml and start coding and building with them, and
also tell ImageJ to make sure they are installed at runtime. That will
be perfect.

> It will take well into next week to sort out these issues, sorry!

I'm not in a super hurry, I just got lucky and had a couple of quiet
days in-between my day job, having babies, writing grants and papers,
and moving countries. So it might be a little while before I get a
chance to play with this again!

What about the possibility that third party plugins, not-necessarily
relevant to Fiji's life-sciences remit (e.g. materials science), could
leverage ImageJ2's continuous integration / building / testing /
repository magic? I'm thinking here about a bare-bones ImageJ2 to which
you could drop in some plugin and have the dependencies satisfied, with
confidence that all the unit tests have passed with the installed
configuration.

Michael


From michael at doube.net  Sun Jul 29 05:17:51 2012
From: michael at doube.net (Michael Doube)
Date: Sun, 29 Jul 2012 12:17:51 +0200
Subject: [ImageJ-devel] Migrating an ImageJ1 plugin (Git,
	Ant etc.) to ImageJ2 (Git, Maven)
Message-ID: <50150DCF.8060908@doube.net>

Hi,

In a new thread because it's a broad but different issue than the
others: How to move an active ImageJ1 plugin project to an ImageJ2 project?

The scenario:
I have an active ImageJ1 plugin project, which I want to move to Image2.
The old plugin needs to stay active with bugfixes and for archival
reasons. Currently, releases are tracked on the master branch of a Git
repository, the IDE is Eclipse and Ant is the builder. I'd like to keep
the whole project (IJ1 and IJ2 plugins) in the same Git repository.

The plan at the moment is to:
Keep releasing the old plugin on the master branch
Work on the new plugin on a version branch
When the new plugin is stable, send the old plugin to a legacy branch
and merge the new plugin to master

Because the two plugins use different build systems, I've set them up as
two separate Eclipse projects, one with the old style (Ant,
plugins.config) and one with the new style (Maven, annotations). The two
projects work on different branches of the same Git repository, so I can
work on both of them simultaneously in the same instance of Eclipse.

To do that I branched the new plugin off, cloned it locally into a new
Eclipse project (Import...) then 'Mavenized' the new project. The
pom.xml-related chatter from me lately has been a result of this
process. The new branch has the old directory structure:
workspace/src/org/bonej/MyPlugin.java but Maven expects something else
by convention.

The big question is, is this going to work at all or should I start
again in a different way?

I am asking all this because processing of annotations doesn't work in
my setup, so the new plugin's menu items aren't added to ImageJ2
(solution is to use the Ant build.xml and Sun javac to do the release
build, as we developed at the last Fiji Hackathon).

Do you see any disasters looming, or propose another streamlined
approach that will work? Maven is impressive so far, so I'd like to
continue with it, I just have to organise things so that it behaves
correctly.

Michael


From michael at doube.net  Sun Jul 29 09:52:21 2012
From: michael at doube.net (Michael Doube)
Date: Sun, 29 Jul 2012 16:52:21 +0200
Subject: [ImageJ-devel] Finding classes and importing the right Maven
 artifacts
In-Reply-To: <5014F57B.7070200@doube.net>
References: <500FBC79.20409@doube.net>
	<alpine.DEB.1.00.1207251927580.32459@s15462909.onlinehome-server.info>
	<5010F61D.1080106@doube.net>
	<CADN69y=2ynpQ3he9pW=KEc+DJHmuu+EmohnNaC5cVTfb_-9f-g@mail.gmail.com>
	<50127F53.8090005@doube.net> <5012991C.8020804@doube.net>
	<CADN69ymDBBNS=apgMmxxF0M8FUYd6it+U4AySFwMw5VmL4Jn9g@mail.gmail.com>
	<5014F57B.7070200@doube.net>
Message-ID: <50154E25.9010802@doube.net>

> Sources for the 2.0.0-SNAPSHOTs look to be there on the search page, but
> when I ask Maven to download sources nothing much happens, Eclipse still
> tells me that no sources or JavaDoc could be found

Looks like the problem was that Eclipse/Maven wasn't properly updating
the local repository. So, I deleted the stale directories in
~/.m2/repository/net/ , refreshed and sources are visible.

Michael



From Johannes.Schindelin at gmx.de  Mon Jul 30 12:18:13 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Mon, 30 Jul 2012 19:18:13 +0200 (CEST)
Subject: [ImageJ-devel] Continuous Integrateion,
 was: Re:  Finding classes and importing the right Maven artifacts
In-Reply-To: <5014FD0E.2090700@doube.net>
References: <500FBC79.20409@doube.net>
	<alpine.DEB.1.00.1207251927580.32459@s15462909.onlinehome-server.info>
	<5010F61D.1080106@doube.net>
	<CADN69y=2ynpQ3he9pW=KEc+DJHmuu+EmohnNaC5cVTfb_-9f-g@mail.gmail.com>
	<50127F53.8090005@doube.net>
	<alpine.DEB.1.00.1207272038290.32459@s15462909.onlinehome-server.info>
	<5014FD0E.2090700@doube.net>
Message-ID: <alpine.DEB.1.00.1207301910280.32459@s15462909.onlinehome-server.info>

Hi Michael,

On Sun, 29 Jul 2012, Michael Doube wrote:

> I'm not in a super hurry, I just got lucky and had a couple of quiet
> days in-between my day job, having babies, writing grants and papers,
> and moving countries.

Heh... Good luck with all that!

> So it might be a little while before I get a chance to play with this
> again!

No worries. It actually takes a little pressure from me, for which I am
thankful.

> What about the possibility that third party plugins, not-necessarily
> relevant to Fiji's life-sciences remit (e.g. materials science), could
> leverage ImageJ2's continuous integration / building / testing /
> repository magic? I'm thinking here about a bare-bones ImageJ2 to which
> you could drop in some plugin and have the dependencies satisfied, with
> confidence that all the unit tests have passed with the installed
> configuration.

To that end, I would seriously suggest to go a slightly different route:
if you are already on GitHub, there is this fantastic offer called
BuildHive (offered by CloudBees to Open Source projects for free):

	https://buildhive.cloudbees.com/

It is basically that service you ask for: once you opted in, it will run
tests whenever you push new commits to your 'master' branch. All you need
to do is make a set of JUnit tests, which is really easy.

Ciao,
Dscho


From Johannes.Schindelin at gmx.de  Mon Jul 30 12:35:24 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Mon, 30 Jul 2012 19:35:24 +0200 (CEST)
Subject: [ImageJ-devel] Migrating an ImageJ1 plugin (Git,
 Ant etc.) to ImageJ2 (Git, Maven)
In-Reply-To: <50150DCF.8060908@doube.net>
References: <50150DCF.8060908@doube.net>
Message-ID: <alpine.DEB.1.00.1207301919460.32459@s15462909.onlinehome-server.info>

Hi Michael,

On Sun, 29 Jul 2012, Michael Doube wrote:

> In a new thread because it's a broad but different issue than the
> others: How to move an active ImageJ1 plugin project to an ImageJ2
> project?
> 
> The scenario:
> I have an active ImageJ1 plugin project, which I want to move to Image2.
> The old plugin needs to stay active with bugfixes and for archival
> reasons. Currently, releases are tracked on the master branch of a Git
> repository, the IDE is Eclipse and Ant is the builder. I'd like to keep
> the whole project (IJ1 and IJ2 plugins) in the same Git repository.
> 
> The plan at the moment is to:
> Keep releasing the old plugin on the master branch
> Work on the new plugin on a version branch
> When the new plugin is stable, send the old plugin to a legacy branch
> and merge the new plugin to master

Personally, I would actually develop them in the same branch, in different
subdirectories, for the time being. And if at all possible, I would try to
re-use code all the time.

Ideally, however, you would really provide the very same .jar file (and
likewise have really just one project) for both the IJ1 and IJ2 plugin. If
you wrap the ImagePlus into an ImgLib2 structure in the IJ1-specific part,
you should be able to use the exact same code to perform the actual
computation from both IJ1 and IJ2.

> Because the two plugins use different build systems, I've set them up as
> two separate Eclipse projects, one with the old style (Ant,
> plugins.config) and one with the new style (Maven, annotations). The two
> projects work on different branches of the same Git repository, so I can
> work on both of them simultaneously in the same instance of Eclipse.

If you have a look at, say,
https://github.com/fiji/fiji/tree/master/src-plugins/Arrow_ you will see
that it is quite doable to use Maven to build IJ1 plugins without any
hassle.

> To do that I branched the new plugin off, cloned it locally into a new
> Eclipse project (Import...) then 'Mavenized' the new project. The
> pom.xml-related chatter from me lately has been a result of this
> process. The new branch has the old directory structure:
> workspace/src/org/bonej/MyPlugin.java but Maven expects something else
> by convention.

Yep, that is right, the convention is that your sources live in the
src/main/java/ sub-directory of your project root directory. In your case,
it would be:

	BoneJ/src/main/java/org/bonej/MyPlugin.java

Also, I would strongly advise to keep the sources outside of the Eclipse
workspace. We had a lot of "fun" with Eclipse that was solved simply by
moving the project files outside of the workspace.

> The big question is, is this going to work at all or should I start
> again in a different way?

I'll not suggest to throw away all your hard work. If you want to follow
my advice above, you can do that without re-starting the whole thing.

For example, to get the IJ1 and IJ2 plugin reconciled into one branch, you
could first change things in the IJ1 branch to use ImgLib2 and to use
Maven, and then you could simply merge the IJ2 branch.

> I am asking all this because processing of annotations doesn't work in
> my setup, so the new plugin's menu items aren't added to ImageJ2
> (solution is to use the Ant build.xml and Sun javac to do the release
> build, as we developed at the last Fiji Hackathon).

Yes, the annotation processing is a little hairy. Our solution in ImageJ2
is to force certain settings by tracking the .factorypath and
.settings/org.eclipse.jdt.apt.core.prefs as part of our source code. This
tells Eclipse to adher to the standard mandated by the Java specifications
which demand that annotation processors present in the classpath when
compiling Java sources be run.

I have ticket in the ImageJ2 ticket system to make it easier to start
developing a plugin in Eclipse, by providing a File>New Plugin (Eclipse)
menu entry. I fully intend to write out the two files mentioned above
together with a pom.xml file from there.

Also note that starting with ImageJ2 beta3, Eclipse setups should be
supported much better even when the annotation processors failed to be
called: if you start ImageJ2 from within Eclipse, it should now detect
that situation and run the annotation processors manually.

> Do you see any disasters looming, or propose another streamlined
> approach that will work? Maven is impressive so far, so I'd like to
> continue with it, I just have to organise things so that it behaves
> correctly.

Right, the problem is however not so much Maven as Eclipse's Maven
emulation. One other thing I would strongly suggest to do is to make the
scijava pom.xml the parent of your top-level pom.xml. That way, you not
only get the ImageJ2 versions for free, but you also get some settings
fixing issues in particular with Eclipse that at least yours truly
struggled with for extended amounts of time. Just as an example: at some
stage, Eclipse's Maven emulation stopped running the buildnumber plugin
(which embeds the current commit into your .jar file's manifest,
super-useful). After hours of research I finally found how to force it
back to normal.

And yes, you probably guessed it, the pom.xml which File>New Plugin
(Eclipse) will write out will have the scijava pom as parent.

Ciao,
Dscho


From Johannes.Schindelin at gmx.de  Mon Jul 30 12:41:48 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Mon, 30 Jul 2012 19:41:48 +0200 (CEST)
Subject: [ImageJ-devel] Migrating an ImageJ1 plugin (Git,
 Ant etc.) to ImageJ2 (Git, Maven)
In-Reply-To: <alpine.DEB.1.00.1207301919460.32459@s15462909.onlinehome-server.info>
References: <50150DCF.8060908@doube.net>
	<alpine.DEB.1.00.1207301919460.32459@s15462909.onlinehome-server.info>
Message-ID: <alpine.DEB.1.00.1207301941000.32459@s15462909.onlinehome-server.info>

Hi,

On Mon, 30 Jul 2012, Johannes Schindelin wrote:

> On Sun, 29 Jul 2012, Michael Doube wrote:
>
> > Because the two plugins use different build systems, I've set them up
> > as two separate Eclipse projects, one with the old style (Ant,
> > plugins.config) and one with the new style (Maven, annotations). The
> > two projects work on different branches of the same Git repository, so
> > I can work on both of them simultaneously in the same instance of
> > Eclipse.
>
> If you have a look at, say,
> https://github.com/fiji/fiji/tree/master/src-plugins/Arrow_ you will see
> that it is quite doable to use Maven to build IJ1 plugins without any
> hassle.

Forgot to say explicitly: the trick is to put plugins.config into
src/main/resources/.

Ciao,
Dscho


From ctrueden at wisc.edu  Mon Jul 30 13:18:35 2012
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Mon, 30 Jul 2012 13:18:35 -0500
Subject: [ImageJ-devel] Migrating an ImageJ1 plugin (Git,
 Ant etc.) to ImageJ2 (Git, Maven)
In-Reply-To: <alpine.DEB.1.00.1207301919460.32459@s15462909.onlinehome-server.info>
References: <50150DCF.8060908@doube.net>
	<alpine.DEB.1.00.1207301919460.32459@s15462909.onlinehome-server.info>
Message-ID: <CADN69ymzz3uNS2iES2+8xXLZ=BXHsR=_--qiRYckimOBK+dUvg@mail.gmail.com>

Hi Mike & everyone,

Johannes wrote:
> Ideally, however, you would really provide the very same .jar file (and
> likewise have really just one project) for both the IJ1 and IJ2 plugin. If
> you wrap the ImagePlus into an ImgLib2 structure in the IJ1-specific part,
> you should be able to use the exact same code to perform the actual
> computation from both IJ1 and IJ2.

One downside to this approach is that by using ImageJ1's ImagePlus as your
primary data structure, you will limit yourself to data types supported by
ImageJ1. The other way round would be to use an ImageJ2 Dataset, which can
be converted to an ImagePlus on the fly in IJ2's legacy layer.

I agree with Johannes that it is great to avoid duplicating code, but there
may also be merit in maintaining a clean IJ2 version of the plugin. We will
continue actively working on the IJ2 legacy layer to make this sort of code
sharing easier.

Regards,
Curtis


On Mon, Jul 30, 2012 at 12:35 PM, Johannes Schindelin <
Johannes.Schindelin at gmx.de> wrote:

> Hi Michael,
>
> On Sun, 29 Jul 2012, Michael Doube wrote:
>
> > In a new thread because it's a broad but different issue than the
> > others: How to move an active ImageJ1 plugin project to an ImageJ2
> > project?
> >
> > The scenario:
> > I have an active ImageJ1 plugin project, which I want to move to Image2.
> > The old plugin needs to stay active with bugfixes and for archival
> > reasons. Currently, releases are tracked on the master branch of a Git
> > repository, the IDE is Eclipse and Ant is the builder. I'd like to keep
> > the whole project (IJ1 and IJ2 plugins) in the same Git repository.
> >
> > The plan at the moment is to:
> > Keep releasing the old plugin on the master branch
> > Work on the new plugin on a version branch
> > When the new plugin is stable, send the old plugin to a legacy branch
> > and merge the new plugin to master
>
> Personally, I would actually develop them in the same branch, in different
> subdirectories, for the time being. And if at all possible, I would try to
> re-use code all the time.
>
> Ideally, however, you would really provide the very same .jar file (and
> likewise have really just one project) for both the IJ1 and IJ2 plugin. If
> you wrap the ImagePlus into an ImgLib2 structure in the IJ1-specific part,
> you should be able to use the exact same code to perform the actual
> computation from both IJ1 and IJ2.
>
> > Because the two plugins use different build systems, I've set them up as
> > two separate Eclipse projects, one with the old style (Ant,
> > plugins.config) and one with the new style (Maven, annotations). The two
> > projects work on different branches of the same Git repository, so I can
> > work on both of them simultaneously in the same instance of Eclipse.
>
> If you have a look at, say,
> https://github.com/fiji/fiji/tree/master/src-plugins/Arrow_ you will see
> that it is quite doable to use Maven to build IJ1 plugins without any
> hassle.
>
> > To do that I branched the new plugin off, cloned it locally into a new
> > Eclipse project (Import...) then 'Mavenized' the new project. The
> > pom.xml-related chatter from me lately has been a result of this
> > process. The new branch has the old directory structure:
> > workspace/src/org/bonej/MyPlugin.java but Maven expects something else
> > by convention.
>
> Yep, that is right, the convention is that your sources live in the
> src/main/java/ sub-directory of your project root directory. In your case,
> it would be:
>
>         BoneJ/src/main/java/org/bonej/MyPlugin.java
>
> Also, I would strongly advise to keep the sources outside of the Eclipse
> workspace. We had a lot of "fun" with Eclipse that was solved simply by
> moving the project files outside of the workspace.
>
> > The big question is, is this going to work at all or should I start
> > again in a different way?
>
> I'll not suggest to throw away all your hard work. If you want to follow
> my advice above, you can do that without re-starting the whole thing.
>
> For example, to get the IJ1 and IJ2 plugin reconciled into one branch, you
> could first change things in the IJ1 branch to use ImgLib2 and to use
> Maven, and then you could simply merge the IJ2 branch.
>
> > I am asking all this because processing of annotations doesn't work in
> > my setup, so the new plugin's menu items aren't added to ImageJ2
> > (solution is to use the Ant build.xml and Sun javac to do the release
> > build, as we developed at the last Fiji Hackathon).
>
> Yes, the annotation processing is a little hairy. Our solution in ImageJ2
> is to force certain settings by tracking the .factorypath and
> .settings/org.eclipse.jdt.apt.core.prefs as part of our source code. This
> tells Eclipse to adher to the standard mandated by the Java specifications
> which demand that annotation processors present in the classpath when
> compiling Java sources be run.
>
> I have ticket in the ImageJ2 ticket system to make it easier to start
> developing a plugin in Eclipse, by providing a File>New Plugin (Eclipse)
> menu entry. I fully intend to write out the two files mentioned above
> together with a pom.xml file from there.
>
> Also note that starting with ImageJ2 beta3, Eclipse setups should be
> supported much better even when the annotation processors failed to be
> called: if you start ImageJ2 from within Eclipse, it should now detect
> that situation and run the annotation processors manually.
>
> > Do you see any disasters looming, or propose another streamlined
> > approach that will work? Maven is impressive so far, so I'd like to
> > continue with it, I just have to organise things so that it behaves
> > correctly.
>
> Right, the problem is however not so much Maven as Eclipse's Maven
> emulation. One other thing I would strongly suggest to do is to make the
> scijava pom.xml the parent of your top-level pom.xml. That way, you not
> only get the ImageJ2 versions for free, but you also get some settings
> fixing issues in particular with Eclipse that at least yours truly
> struggled with for extended amounts of time. Just as an example: at some
> stage, Eclipse's Maven emulation stopped running the buildnumber plugin
> (which embeds the current commit into your .jar file's manifest,
> super-useful). After hours of research I finally found how to force it
> back to normal.
>
> And yes, you probably guessed it, the pom.xml which File>New Plugin
> (Eclipse) will write out will have the scijava pom as parent.
>
> Ciao,
> Dscho
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120730/4b674c6c/attachment.html>

From ctrueden at wisc.edu  Mon Jul 30 14:15:25 2012
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Mon, 30 Jul 2012 14:15:25 -0500
Subject: [ImageJ-devel] Finding classes and importing the right Maven
	artifacts
In-Reply-To: <50154E25.9010802@doube.net>
References: <500FBC79.20409@doube.net>
	<alpine.DEB.1.00.1207251927580.32459@s15462909.onlinehome-server.info>
	<5010F61D.1080106@doube.net>
	<CADN69y=2ynpQ3he9pW=KEc+DJHmuu+EmohnNaC5cVTfb_-9f-g@mail.gmail.com>
	<50127F53.8090005@doube.net> <5012991C.8020804@doube.net>
	<CADN69ymDBBNS=apgMmxxF0M8FUYd6it+U4AySFwMw5VmL4Jn9g@mail.gmail.com>
	<5014F57B.7070200@doube.net> <50154E25.9010802@doube.net>
Message-ID: <CADN69ykmRLnSAWBV6enf0oPPSuV5gt7sxL0mV-r+6Uz_D3r5Qg@mail.gmail.com>

Hi Mike,


> Looks like the problem was that Eclipse/Maven wasn't properly updating
> the local repository. So, I deleted the stale directories in
> ~/.m2/repository/net/ , refreshed and sources are visible.


Glad you got it working. It's weird that that was necessary, though.
Perhaps doing "mvn -U" (or in Eclipse, "Maven > Update Project..." with
"Force Update of Snapshots/Releases" checked) would have done the same.
Maven only checks for SNAPSHOT updates once every 24 hours otherwise.

Regards,
Curtis

P.S. You should definitely not need to reference the "-sources" classifier
as a dependency or anything like that.


On Sun, Jul 29, 2012 at 9:52 AM, Michael Doube <michael at doube.net> wrote:

> > Sources for the 2.0.0-SNAPSHOTs look to be there on the search page, but
> > when I ask Maven to download sources nothing much happens, Eclipse still
> > tells me that no sources or JavaDoc could be found
>
> Looks like the problem was that Eclipse/Maven wasn't properly updating
> the local repository. So, I deleted the stale directories in
> ~/.m2/repository/net/ , refreshed and sources are visible.
>
> Michael
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120730/a3901282/attachment-0001.html>

From Johannes.Schindelin at gmx.de  Mon Jul 30 14:26:08 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Mon, 30 Jul 2012 21:26:08 +0200 (CEST)
Subject: [ImageJ-devel] Migrating an ImageJ1 plugin (Git,
 Ant etc.) to ImageJ2 (Git, Maven)
In-Reply-To: <CADN69ymzz3uNS2iES2+8xXLZ=BXHsR=_--qiRYckimOBK+dUvg@mail.gmail.com>
References: <50150DCF.8060908@doube.net>
	<alpine.DEB.1.00.1207301919460.32459@s15462909.onlinehome-server.info>
	<CADN69ymzz3uNS2iES2+8xXLZ=BXHsR=_--qiRYckimOBK+dUvg@mail.gmail.com>
Message-ID: <alpine.DEB.1.00.1207302124390.32459@s15462909.onlinehome-server.info>

Hi,

On Mon, 30 Jul 2012, Curtis Rueden wrote:

> Johannes wrote:
> > Ideally, however, you would really provide the very same .jar file (and
> > likewise have really just one project) for both the IJ1 and IJ2 plugin. If
> > you wrap the ImagePlus into an ImgLib2 structure in the IJ1-specific part,
> > you should be able to use the exact same code to perform the actual
> > computation from both IJ1 and IJ2.
> 
> One downside to this approach is that by using ImageJ1's ImagePlus as your
> primary data structure, you will limit yourself to data types supported by
> ImageJ1. The other way round would be to use an ImageJ2 Dataset, which can
> be converted to an ImagePlus on the fly in IJ2's legacy layer.
> 
> I agree with Johannes that it is great to avoid duplicating code, but there
> may also be merit in maintaining a clean IJ2 version of the plugin. We will
> continue actively working on the IJ2 legacy layer to make this sort of code
> sharing easier.

Actually, that is what I meant: the core should be using plain ImgLib2,
and the IJ1 plugin should be a mere wrapper that uses imglib2-ij to wrap
an ImagePlus in an Img and then hands off to the core of the plugin.

That way, you only have to maintain one code base, and it is automatically
prepared for ImageJ2.

Ciao,
Dscho


From raghuramsathyam at yahoo.com  Mon Jul 30 14:44:59 2012
From: raghuramsathyam at yahoo.com (raghuram sathyam)
Date: Mon, 30 Jul 2012 12:44:59 -0700 (PDT)
Subject: [ImageJ-devel] running macros on ImageJ2
Message-ID: <1343677499.73956.YahooMailNeo@web160803.mail.bf1.yahoo.com>

Hello IJ developers,
I have been using a macro for processing multiple choice surveys for a 
while. I wrote this macro from scratch (it was not recorded on the UI) 
for IJ1 and it works very well on IJ1. I have been trying to migrate to 
IJ2 so that i can move my processing to the cloud.

I have also written some java code to preprocess the images i receive and use 
IJ as a library within my code. I use IJ.runMacroFile(...) to run the 
macro that i wrote for further image processing using IJ. I use the results returned by the IJ.runMacroFile(...) for my output.


I am stuck trying to replicate this behavior on IJ2.? I 
looked at the code for the ScriptPlugin.java and various other files in 
the plugins.script package but have no clue on how to get similar functionality as IJ.runMacroFile(..).

Any pointers on how i can get this done will be very helpful.

-raghuram
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120730/047afe09/attachment.html>

From bdezonia at gmail.com  Tue Jul 31 11:09:40 2012
From: bdezonia at gmail.com (Barry DeZonia)
Date: Tue, 31 Jul 2012 11:09:40 -0500
Subject: [ImageJ-devel] [fiji-devel] Fwd:  Local Neighborhood stuff
In-Reply-To: <CAAgB9O4i1K2xk4Qw2MVqFhjyASGPhSmgKWJRpJeqmBnQxBtHMA@mail.gmail.com>
References: <500E760B.7060802@mpi-cbg.de> <5010F06F.6040607@uni-konstanz.de>
	<88A20083-627D-4DBB-88BB-6EE16F0E9886@pasteur.fr>
	<501120FA.9070901@mpi-cbg.de>
	<CAAgB9O75gbgSXVBMvXvk_iBcmHeLB4--6pjGidQ4Bc2M3iavcw@mail.gmail.com>
	<CAAgB9O43pCOQssm4bhNkFP6NrtFAet8KK183CaPpaJ9brPKMvQ@mail.gmail.com>
	<CAAgB9O4i1K2xk4Qw2MVqFhjyASGPhSmgKWJRpJeqmBnQxBtHMA@mail.gmail.com>
Message-ID: <CAKcvfuRSyuhWc+aycFd3_hLoAsS8JrH2HU2z3PX9b7Chh1QQsA@mail.gmail.com>

Hi guys,

I've been too busy to dig very deeply into this. I just wanted to let you
know I dealt with some similar issues when writing the
net.imglib2.ops.pointset package. Giving it a look might be informative.

One thing that jumps out at me is the reliance on a span for an abstract
neighborhood. I think there should be bounds but that neighborhoods might
be sparse and possibly nonsymmetric. Imagine a 2d neighborhood like this:

X  X  X  X
    X
X  X

And let any point could be the "center" (or anchor) depending upon the API
user's wishes. This is the idea behind GeneralPointSet. If span means bound
then no problem but if span means "all the points within this n-d space"
then the above is not supportable.

Anyhow I hope this adds to the discussion. If there are any questions in
regard to the PointSet package let me know.

On Fri, Jul 27, 2012 at 10:35 AM, Jean-Yves Tinevez <
jeanyves.tinevez at gmail.com> wrote:

>
>
> Hi all
>
> I pushed some changes to the test branch: I removed the realpositionable
> stuff, and tried to draft the mother interface from our discussions.
>
> But I got stuck at the copyOn method. If I try to make it as generic as I
> can (copy on a different RandomAccessible type and on a different type),
> concrete implementations that are more specific (like the buffered
> rectangle) fail on bad type bounds. I could use some help there.
>
> Best
> jy
>
>
>
>  --
> Please avoid top-posting, and please make sure to reply-to-all!
>
> Mailing list web interface: http://groups.google.com/group/fiji-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120731/072631ac/attachment.html>

From ctrueden at wisc.edu  Tue Jul 31 13:32:09 2012
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Tue, 31 Jul 2012 13:32:09 -0500
Subject: [ImageJ-devel] [fiji-devel] LOCI crashes with current Fiji
	build on runtime
In-Reply-To: <236513BE-93E8-423C-AC44-3917360A56C7@mpi-cbg.de>
References: <04FEBFC9-2BBD-4D2C-8006-7BF45DAD468C@mpi-cbg.de>
	<20120723233028.GE10861@medusa>
	<236513BE-93E8-423C-AC44-3917360A56C7@mpi-cbg.de>
Message-ID: <CADN69y=aKrng-WK53eHKTxfRAOpA1AB--GBYyg8THrsG=L34QA@mail.gmail.com>

Hi everyone,

> I somehow keep deleting loci_plugins.jar but it keeps coming back ...
that caused the problem.

I believe this problem is sorted out for user installations; that is,
running "Update Fiji" should get the proper Bio-Formats JARs. We are no
longer using loci_tools.jar, but rather the individual JARs.

However, there is still work to be done with the Fiji build system, so for
those using Fiji from source, there may continue to be these sorts of
annoyances for a little while yet.

 Sorry,
Curtis


On Mon, Jul 23, 2012 at 6:44 PM, Stephan Preibisch <preibisch at mpi-cbg.de>wrote:

> Thanks Melissa, that worked!! I somehow keep deleting loci_plugins.jar but
> it keeps coming back ... that caused the problem. I will figure out what
> always recreates it.
>
> Bye bye,
> Steffi
>
>
> Am Jul 23, 2012 um 19:30 schrieb Melissa Linkert <
> melissa at glencoesoftware.com>:
>
> > Hi Steffi,
> >
> >> running the SPIM registration I run into the problem that it is not
> possible to open images anymore because of a java.lang.NoSuchMethodError
> (see full exception below):
> ome.xml.model.Experimenter.setDisplayName(Ljava/lang/String;)V
> >>
> >> A similar error (setAcquiredDate instead of setDisplayName) can be
> reproduced using the Script editor with beanshell and the mitosis.tif
> (ImageJ example image):
> > *snip*
> >>
> >> Does anyone know why this happens (was fine some days ago)...
> >
> > As far as I can tell, this is because when you build Fiji you now get
> > two different versions of Bio-Formats in the 'jars' and 'plugins'
> > directories.  plugins/loci_tools.jar is a specific version from April
> > 2012, where plugins/loci_plugins.jar and jars/bio-formats.jar (and
> > jars/loci-common.jar etc.) are the latest 4.4-SNAPSHOT version from
> > Maven.  4.4-SNAPSHOT had some subtle API changes a couple of weeks ago,
> > which would cause this error if older and newer JARs were mixed on the
> > CLASSPATH.
> >
> > I would guess that this is somewhat related to this thread:
> >
> >
> https://groups.google.com/forum/?fromgroups#!topic/fiji-devel/r1JOg4C8_68
> >
> > ...but I could easily be wrong.
> >
> > Regards,
> > -Melissa
> >
> > On Thu, Jul 19, 2012 at 12:02:36PM -0400, Stephan Preibisch wrote:
> >> Hi,
> >>
> >> running the SPIM registration I run into the problem that it is not
> possible to open images anymore because of a java.lang.NoSuchMethodError
> (see full exception below):
> ome.xml.model.Experimenter.setDisplayName(Ljava/lang/String;)V
> >>
> >> A similar error (setAcquiredDate instead of setDisplayName) can be
> reproduced using the Script editor with beanshell and the mitosis.tif
> (ImageJ example image):
> >>
> >>   import loci.formats.ChannelSeparator;
> >>   import loci.formats.MetadataTools;
> >>   import loci.formats.meta.IMetadata;
> >>   import loci.formats.IFormatReader;
> >>
> >>   final IFormatReader r = new ChannelSeparator();
> >>
> >>   final IMetadata omexmlMeta = MetadataTools.createOMEXMLMetadata();
> >>   r.setMetadataStore( omexmlMeta );
> >>   r.setId( "/Users/preibischs/Desktop/mitosis.tif" );
> >>
> >> -> Target exception: java.lang.NoSuchMethodError:
> ome.xml.model.Image.setAcquiredDate(Ljava/lang/String;)V
> >>
> >> Does anyone know why this happens (was fine some days ago)...
> >>
> >> Thanks a lot,
> >> Steffi
> >>
> >>
> >> java.lang.reflect.InvocationTargetException
> >>    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
> >>    at
> sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
> >>    at
> sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
> >>    at java.lang.reflect.Method.invoke(Method.java:597)
> >>    at ij.Command.runPlugIn(Command.java:146)
> >>    at ij.Command.runCommand(Command.java:95)
> >>    at ij.Executer.run(Executer.java:64)
> >>    at java.lang.Thread.run(Thread.java:680)
> >> Caused by: java.lang.NoSuchMethodError:
> ome.xml.model.Experimenter.setDisplayName(Ljava/lang/String;)V
> >>    at
> loci.formats.ome.OMEXMLMetadataImpl.setExperimenterDisplayName(OMEXMLMetadataImpl.java:7386)
> >>    at
> loci.formats.meta.FilterMetadata.setExperimenterDisplayName(FilterMetadata.java:889)
> >>    at
> loci.formats.in.ZeissLSMReader.initMetadata(ZeissLSMReader.java:1192)
> >>    at loci.formats.in.ZeissLSMReader.initFile(ZeissLSMReader.java:520)
> >>    at loci.formats.FormatReader.setId(FormatReader.java:1091)
> >>    at loci.formats.ImageReader.setId(ImageReader.java:682)
> >>    at loci.formats.ReaderWrapper.setId(ReaderWrapper.java:492)
> >>    at loci.formats.ChannelSeparator.setId(ChannelSeparator.java:261)
> >>    at mpicbg.imglib.io.LOCI.openLOCIFloatType(LOCI.java:638)
> >>    at mpicbg.imglib.io.LOCI.openLOCIFloatType(LOCI.java:583)
> >>    at mpicbg.imglib.io.LOCI.openLOCIFloatType(LOCI.java:573)
> >>    at mpicbg.imglib.io.LOCI.openLOCIFloatType(LOCI.java:568)
> >>    at
> fiji.plugin.Bead_Registration.getInteractiveDoGParameters(Bead_Registration.java:673)
> >>    at
> fiji.plugin.Bead_Registration.getConfiguration(Bead_Registration.java:320)
> >>    at
> fiji.plugin.Bead_Registration.access$100(Bead_Registration.java:40)
> >>    at
> fiji.plugin.Bead_Registration$1.dialogItemChanged(Bead_Registration.java:208)
> >>    at ij.gui.GenericDialog.showDialog(GenericDialog.java:1052)
> >>    at
> fiji.plugin.Bead_Registration.singleChannel(Bead_Registration.java:265)
> >>    at fiji.plugin.Bead_Registration.run(Bead_Registration.java:75)
> >>    at ij.IJ.runUserPlugIn(IJ.java:185)
> >>    at ij.IJ.runPlugIn(IJ.java:152)
> >>
> >> --
> >> Please avoid top-posting, and please make sure to reply-to-all!
> >>
> >> Mailing list web interface: http://groups.google.com/group/fiji-devel
>
> --
> Please avoid top-posting, and please make sure to reply-to-all!
>
> Mailing list web interface: http://groups.google.com/group/fiji-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120731/df8a96a1/attachment.html>

From ctrueden at wisc.edu  Tue Jul 31 16:21:15 2012
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Tue, 31 Jul 2012 16:21:15 -0500
Subject: [ImageJ-devel] [fiji-devel] Significant change to ImgOpener -
 or - why ImgOpener.openImg() cannot return a T
In-Reply-To: <D7931AC1-BA9B-4561-AA28-D901E3A652B4@mpi-cbg.de>
References: <D7931AC1-BA9B-4561-AA28-D901E3A652B4@mpi-cbg.de>
Message-ID: <CADN69ynGpAHS40JKYHAixRfnVzhRpcthXM6XOEsrOFKtwEyiwg@mail.gmail.com>

Hi Steffi,

Thanks for the explanation, and sorry for the delay in reply; I have been
on family leave for the past two weeks.

I really like your solution. In certain cases, I think raw types are the
only way to get around the awkwardness of the recursive typing approach.

I tested the newimgopener branch with ImageJ2, and it works. My vote is to
merge to master.

Regards,
Curtis


On Tue, Jul 17, 2012 at 4:08 PM, Stephan Preibisch <preibisch at mpi-cbg.de>wrote:

> Hi guys,
>
> this became a massive explanation. I suggest this as as solution to a
> problem we have been only partly aware of. I hope you enjoy reading ;)
>
> Steffi
>
>
> As the ImageJ conference is approaching I was talking with Johannes and we
> agreed that the ImgOpener needs to be finished. However, since its first
> version there has been a major design fault.
>
> But first the good news:
> --------------------------------
> It works perfectly fine if you say "open me an Image as float" or "...as
> UnsignedByte" or whatever, classically called by the method
> -> new ImgOpener.openImg( String id, ImgFactory<T> factory, T type );
> It can, without any problems, return you an Img<T>, and it requires that T
> is RealType (and not anymore NativeType, see at the end). So far, so good.
> Note that "T" is NOT a return parameter, but something you give to the
> openAs method.
>
> Now the bad news.
> --------------------------
> If you say "open this image as whatever RealType it is", it can do that,
> but it cannot assign a "T" to it - because T is not a return parameter. We
> made an ugly hack inside so that it seems as if it would work, but it does
> not. Now you might ask, why change it if it worked so far? Well, here is an
> easy example that would cause a ClassCastException on run time
>
> public static <T extends RealType< T >> void main( String[] args )
> {
>         Img< T > img1 = new ImgOpener.openImg( "somepic_8bit.tif" ); //
> 8-bit unsigned
>         Img< T > img2 = new ImgOpener.openImg( "somepic_32bit.tif" ); //
> 32-bit float
>
>         img1.firstElement().set( img2.firstElement() ); // run-time crash
> }
>
> It will throw a ClassCastException because img1 is of UnsignedByteType and
> img2 of FloatType. But as we cast it in a dirty way, it compiles just fine.
> So, we cannot return a "T", but what we can return is Img< which is at
> least a RealType >. And this is for sure always true, but img1 and img2 are
> not necessarily the same RealType (as above).
>
> The correct way (which doesn't work)
> --------------------------------------------------
> What we should return is an Img< ? extends RealType< ? > >. However, it is
> not ensured that the two "?" are the same, so an Img of this type is
> basically incompatible with everything else, which means an unchecked cast
> is necessary. So although correct, maybe not a good idea. And it is really
> ugly to write if necessary.
>
> The still somehow correct way
> -----------------------------------------
> Instead, it returns now an Img< RealType >. This is kind of a tradeoff. On
> one hand, this is very easy to write and will give you compile errors where
> it should, for example
>
>         img1.firstElement().set( img2.firstElement() ); // COMPILE ERROR
> (not the same RealType realization)
>
> OR
>
>        public <T extends RealType< T >> void add( IterableInterval< T >
> i1, IterableInterval< T > i2 ) { .... }
>        add( img1, img2 ); // COMPILE ERROR (not the same RealType
> realization)
>
> BUT
>
>         Gauss.inFloatInPlace( 2.0 , img1 ); // FINE (just one RealType
> realization required, inside it will be always the same "T")
>         Gauss.inFloatInPlace( 2.0 , img2 ); // FINE (just one RealType
> realization required, inside it will be always the same "T")
>
>         public < T extends RealType< T > > void add1( Img< T > img1,
> double value ) { ... }
>         add1( img1, 5 ); // FINE (just one RealType realization required,
> inside it will be always the same "T")
>
>         public < T extends RealType< T >, S extends RealType< S > > void
> add2( Img< T > img1, Img< S > img2 ) { ... }
>         add2( img1, img2 ); // FINE (explicitly two different RealType
> realizations are allowed)
>
>         public void add3( Img< RealType > img1, Img< RealType > img2 ) {
> ... }
>         add3( img1, img2 ); // FINE (both are just some kind of RealType,
> but gives a warning)
>
> On the other hand it gives a lot of Warnings because RealType should be
> more specified.
>
> Why not Img< RealType< ? > >
> ------------------------------------------
> Similar problem as in <? extends RealType< ? > >. RealType< ? > is not a
> valid substitute for any construct like < T extends RealType < T > >. One
> would have to cast to Img< RealType >, so we can take this one right away
> as it is less writing.
>
> Where did NativeType go?
> ------------------------------------
> I do not see any reason why we should enforce a NativeType. There is no
> objection to load an image into a (hypothetical) ListImg< BigDecimalType >.
>
> What are the implications?
> -----------------------------------
> We should write NOTHING except the method opening files for Img< RealType
> >. And also only if it is really required - quite often it is not. But if,
> Img< RealType > It is a completely valid input for any generic algorithm as
> show above for Gauss, add, etc.
>
>
>
> I implemented the changes on a branch called 'newimgopener'. It also
> contains four static convenience opening methods and a speed improvement.
>
> Any comments are very welcome. If somebody has a better idea how to solve
> the problem ... I am all ears ...
>
> Bye bye,
> Steffi
>
> --
> Please avoid top-posting, and please make sure to reply-to-all!
>
> Mailing list web interface: http://groups.google.com/group/fiji-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120731/04880371/attachment-0001.html>

From ctrueden at wisc.edu  Tue Jul 31 16:24:33 2012
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Tue, 31 Jul 2012 16:24:33 -0500
Subject: [ImageJ-devel] ImageJ 2.0.0-beta3 released
In-Reply-To: <5001A1CB020000540002D676@gwsmtp1.uni-regensburg.de>
References: <CADN69ymz+Fw53oeNJBKe3+riL2CB4xas0E8XtFN8ZQQ+FfhY+w@mail.gmail.com>
	<5001A1CB020000540002D676@gwsmtp1.uni-regensburg.de>
Message-ID: <CADN69ymFZckRH-KdP2-c2L2c+4=Z0qiz2b83freLmW2fymO4Ug@mail.gmail.com>

Hi Reinhard,

Sorry for the delay in reply; I have been on family leave for the past two
weeks with my new baby. :-)


> thanks a lot for all your efforts! what would you suggest to do? update an
> earlier IJ2 installation (it is beta1), or do a fresh installation of the
> latest release from July 13? does the updating already work, for IJ2?


The idea was that using the ImageJ Updater from an existing installation
(i.e., an earlier beta) was supposed to upgrade it. However, we are still
polishing a few remaining rough edges on the Updater, so that may not work
in practice. For now it is easiest to just download a new beta3 application
bundle.

Regards,
Curtis


On Sat, Jul 14, 2012 at 9:43 AM, Reinhard Rachel <
Reinhard.Rachel at biologie.uni-regensburg.de> wrote:

> >>>
> > Today the ImageJDev team is releasing the third beta of ImageJ2, version
> > 2.0.0-beta3.
>
> Curtis,
> thanks a lot for all your efforts! what would you suggest to do? update an
> earlier IJ2 installation (it is beta1), or do a fresh installation of the
> latest release from July 13? does the updating already work, for IJ2?
> kind regards,
> Reinhard
>
> --
> Prof. Dr. Reinhard Rachel
> University of Regensburg
> Centre for EM / Anatomy
> Faculty of Biology & Preclin. Med.
> Universitaetsstrasse 31
> D-93053 Regensburg - Germany
> tel +49 941 943 2837, 1720
> fax +49 941 943 2868
> mail reinhard.rachel at biologie.uni-regensburg.de
> office: VKL 3.1.29
>
> next microscopy conferences:
> http://www.emc2012.org.uk/
> EMC 2012 in Manchester, UK
> http://www.mc2013.de/
> MC2013 in Regensburg, Germany
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120731/8a7405af/attachment.html>

From bdezonia at gmail.com  Tue Jul 31 16:28:09 2012
From: bdezonia at gmail.com (Barry DeZonia)
Date: Tue, 31 Jul 2012 16:28:09 -0500
Subject: [ImageJ-devel] [fiji-devel] Significant change to ImgOpener -
 or - why ImgOpener.openImg() cannot return a T
In-Reply-To: <D7931AC1-BA9B-4561-AA28-D901E3A652B4@mpi-cbg.de>
References: <D7931AC1-BA9B-4561-AA28-D901E3A652B4@mpi-cbg.de>
Message-ID: <CAKcvfuSSjqh+XQdFhe28_3NSucKZBqy1z9Qjt8SvE7SV4XzaRg@mail.gmail.com>

Steffi,

I remember running into this when originally interfacing IJ2 to Imglib. We
did decided to go with Img<? extends RealType<?> as that seemed the most
safe at the time.

What I'm wondering about with your solution is that it seems to contradict
other people's description as to what is legal to do in Java.

As a contrived example think of the animal cage example:

We have a Animal class and a Lion class derived from it. And a Cage class
that is defined Cage<T extends Animal>.

Though Lion is instanceof Animal its not the case that Cage<Lion>
instanceof Cage<Animal>. This is counterintuitive but many people mention
it.

If it was the case you could write code like this:

Cage<Animal> animals;
Cage<Lion> lions;
animals = lions; // This assignment is not allowed
animals.add(rat); // If this executed, we'd have a Rat in a Cage<Lion>


This is just an example I've pulled from the web but it seems to imply that
an Img<UnsignedByteType> is not safely considered an Img<RealType>. We may
be avoiding all such cases where it could be a problem but is it safe going
forward? I can't say I know.


On Tue, Jul 17, 2012 at 4:08 PM, Stephan Preibisch <preibisch at mpi-cbg.de>wrote:

> Hi guys,
>
> this became a massive explanation. I suggest this as as solution to a
> problem we have been only partly aware of. I hope you enjoy reading ;)
>
> Steffi
>
>
> As the ImageJ conference is approaching I was talking with Johannes and we
> agreed that the ImgOpener needs to be finished. However, since its first
> version there has been a major design fault.
>
> But first the good news:
> --------------------------------
> It works perfectly fine if you say "open me an Image as float" or "...as
> UnsignedByte" or whatever, classically called by the method
> -> new ImgOpener.openImg( String id, ImgFactory<T> factory, T type );
> It can, without any problems, return you an Img<T>, and it requires that T
> is RealType (and not anymore NativeType, see at the end). So far, so good.
> Note that "T" is NOT a return parameter, but something you give to the
> openAs method.
>
> Now the bad news.
> --------------------------
> If you say "open this image as whatever RealType it is", it can do that,
> but it cannot assign a "T" to it - because T is not a return parameter. We
> made an ugly hack inside so that it seems as if it would work, but it does
> not. Now you might ask, why change it if it worked so far? Well, here is an
> easy example that would cause a ClassCastException on run time
>
> public static <T extends RealType< T >> void main( String[] args )
> {
>         Img< T > img1 = new ImgOpener.openImg( "somepic_8bit.tif" ); //
> 8-bit unsigned
>         Img< T > img2 = new ImgOpener.openImg( "somepic_32bit.tif" ); //
> 32-bit float
>
>         img1.firstElement().set( img2.firstElement() ); // run-time crash
> }
>
> It will throw a ClassCastException because img1 is of UnsignedByteType and
> img2 of FloatType. But as we cast it in a dirty way, it compiles just fine.
> So, we cannot return a "T", but what we can return is Img< which is at
> least a RealType >. And this is for sure always true, but img1 and img2 are
> not necessarily the same RealType (as above).
>
> The correct way (which doesn't work)
> --------------------------------------------------
> What we should return is an Img< ? extends RealType< ? > >. However, it is
> not ensured that the two "?" are the same, so an Img of this type is
> basically incompatible with everything else, which means an unchecked cast
> is necessary. So although correct, maybe not a good idea. And it is really
> ugly to write if necessary.
>
> The still somehow correct way
> -----------------------------------------
> Instead, it returns now an Img< RealType >. This is kind of a tradeoff. On
> one hand, this is very easy to write and will give you compile errors where
> it should, for example
>
>         img1.firstElement().set( img2.firstElement() ); // COMPILE ERROR
> (not the same RealType realization)
>
> OR
>
>        public <T extends RealType< T >> void add( IterableInterval< T >
> i1, IterableInterval< T > i2 ) { .... }
>        add( img1, img2 ); // COMPILE ERROR (not the same RealType
> realization)
>
> BUT
>
>         Gauss.inFloatInPlace( 2.0 , img1 ); // FINE (just one RealType
> realization required, inside it will be always the same "T")
>         Gauss.inFloatInPlace( 2.0 , img2 ); // FINE (just one RealType
> realization required, inside it will be always the same "T")
>
>         public < T extends RealType< T > > void add1( Img< T > img1,
> double value ) { ... }
>         add1( img1, 5 ); // FINE (just one RealType realization required,
> inside it will be always the same "T")
>
>         public < T extends RealType< T >, S extends RealType< S > > void
> add2( Img< T > img1, Img< S > img2 ) { ... }
>         add2( img1, img2 ); // FINE (explicitly two different RealType
> realizations are allowed)
>
>         public void add3( Img< RealType > img1, Img< RealType > img2 ) {
> ... }
>         add3( img1, img2 ); // FINE (both are just some kind of RealType,
> but gives a warning)
>
> On the other hand it gives a lot of Warnings because RealType should be
> more specified.
>
> Why not Img< RealType< ? > >
> ------------------------------------------
> Similar problem as in <? extends RealType< ? > >. RealType< ? > is not a
> valid substitute for any construct like < T extends RealType < T > >. One
> would have to cast to Img< RealType >, so we can take this one right away
> as it is less writing.
>
> Where did NativeType go?
> ------------------------------------
> I do not see any reason why we should enforce a NativeType. There is no
> objection to load an image into a (hypothetical) ListImg< BigDecimalType >.
>
> What are the implications?
> -----------------------------------
> We should write NOTHING except the method opening files for Img< RealType
> >. And also only if it is really required - quite often it is not. But if,
> Img< RealType > It is a completely valid input for any generic algorithm as
> show above for Gauss, add, etc.
>
>
>
> I implemented the changes on a branch called 'newimgopener'. It also
> contains four static convenience opening methods and a speed improvement.
>
> Any comments are very welcome. If somebody has a better idea how to solve
> the problem ... I am all ears ...
>
> Bye bye,
> Steffi
>
> --
> Please avoid top-posting, and please make sure to reply-to-all!
>
> Mailing list web interface: http://groups.google.com/group/fiji-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120731/1c358297/attachment.html>

From ctrueden at wisc.edu  Tue Jul 31 16:45:43 2012
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Tue, 31 Jul 2012 16:45:43 -0500
Subject: [ImageJ-devel] ImageJ2 in headless mode
In-Reply-To: <CAD7QA-0Ne6r0PB6fTy-RKrAdic5V2MY1mNXHShvvZUknARJtVg@mail.gmail.com>
References: <CAD7QA-0Ne6r0PB6fTy-RKrAdic5V2MY1mNXHShvvZUknARJtVg@mail.gmail.com>
Message-ID: <CADN69ymSnKRFCoHm3ARekkk+Wj826G-Vn470qaqtfOo2fonszw@mail.gmail.com>

Hi Raghuram,

I am terribly sorry for leaving this message unanswered for so long.


> 1)Xvfb didnt work on our server (ubuntu 12.04, hosted in our departmental
> datacenter) for some reason. It always fails saying cannot start xvfb.


I think your best bet for the time being would be to debug these Xvfb
problems. It is the most surefire way to run ImageJ1 headless. The only
thing to watch out for is dialog boxes popping up waiting for user input on
the server side, with no way to close them. Hopefully your macros can avoid
doing such things.

Alternately, you could try Fiji in headless mode using the --headless
command line flag; it is quite good in many circumstances, but there are
certain macros that simply cannot work that way, since they rely on the
Java GUI (even if nothing is explicitly shown onscreen, sometimes dialogs
are being constructed and manipulated invisibly).


> 2) So we started dabbling with ImageJ2 beta1 and now the beta that was
> released yesterday. But have had not success in getting it to run in
> headless mode either.


We plan to create a tutorial for ImageJ2 headless, but the API is still in
flux and we have simply not had time yet. Hopefully very soon though! Both
beta2 and beta3 made improvements in the API to use headless.

What you will never be able to do with ImageJ2 though is run legacy ImageJ1
plugins (and some macros) fully headless, no matter what. The reason is
that the ImageJ1 compatibility layer keeps an invisible ImageJ1 window
around, which it uses to execute those things. And that window cannot ever
be fully headless. The solution, moving forward, will be to have an
ImageJ2-specific script or plugin that has no dependence on any explicit
GUI elements.

If you are really eager to get started with ImageJ2 programming, I would be
happy to go into more detail about it, but it may be easier to wait till we
have some documentation online about it.

Regards,
Curtis


On Sat, May 19, 2012 at 12:32 PM, raghuram sudhaakar <rs96 at buffalo.edu>wrote:

> Hello Curtis,
> I have been using imageJ (v1) for an automated grading process. A
> colleague and I developed a macro which runs well and until now we have
> been using it on our personal machines. We are trying to host it on a local
> server so the macro can be used by other colleagues as well, but are stuck
> trying to run in headless mode
>
> 1)Xvfb didnt work on our server (ubuntu 12.04, hosted in our departmental
> datacenter) for some reason. It always fails saying cannot start xvfb.
>
> 2) So we started dabbling with ImageJ2 beta1 and now the beta that was
> released yesterday. But have had not success in getting it to run in
> headless mode either.
>
> Some quick pointers on how to get this done will be great and very useful
> for the upcoming summer session.
>
> thanks
> raghuram
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120731/51699917/attachment-0001.html>

From ctrueden at wisc.edu  Tue Jul 31 16:59:26 2012
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Tue, 31 Jul 2012 16:59:26 -0500
Subject: [ImageJ-devel] [fiji-devel] Significant change to ImgOpener -
 or - why ImgOpener.openImg() cannot return a T
In-Reply-To: <CAKcvfuSSjqh+XQdFhe28_3NSucKZBqy1z9Qjt8SvE7SV4XzaRg@mail.gmail.com>
References: <D7931AC1-BA9B-4561-AA28-D901E3A652B4@mpi-cbg.de>
	<CAKcvfuSSjqh+XQdFhe28_3NSucKZBqy1z9Qjt8SvE7SV4XzaRg@mail.gmail.com>
Message-ID: <CADN69yms-8syOAgw9ec0hbzbTJSDkU=eR_oO6fC+izx0GLspZA@mail.gmail.com>

Hi Barry,


> This is just an example I've pulled from the web but it seems to imply
> that an Img<UnsignedByteType> is not safely considered an Img<RealType>.


Good point! We should probably use "Img<? extends RealType>" instead. I
tested this with ImageJ2, and it still works as expected. And I believe all
of Steffi's example cases will still work too. So I pushed these changes to
the newimgopener branch.

What do you think, Steffi? Anyone else?

Regards,
Curtis


On Tue, Jul 31, 2012 at 4:28 PM, Barry DeZonia <bdezonia at gmail.com> wrote:

> Steffi,
>
> I remember running into this when originally interfacing IJ2 to Imglib. We
> did decided to go with Img<? extends RealType<?> as that seemed the most
> safe at the time.
>
> What I'm wondering about with your solution is that it seems to contradict
> other people's description as to what is legal to do in Java.
>
> As a contrived example think of the animal cage example:
>
> We have a Animal class and a Lion class derived from it. And a Cage class
> that is defined Cage<T extends Animal>.
>
> Though Lion is instanceof Animal its not the case that Cage<Lion>
> instanceof Cage<Animal>. This is counterintuitive but many people mention
> it.
>
> If it was the case you could write code like this:
>
> Cage<Animal> animals;
>
> Cage<Lion> lions;
>
>
> animals = lions; // This assignment is not allowed
>
>
> animals.add(rat); // If this executed, we'd have a Rat in a Cage<Lion>
>
>
> This is just an example I've pulled from the web but it seems to imply
> that an Img<UnsignedByteType> is not safely considered an Img<RealType>. We
> may be avoiding all such cases where it could be a problem but is it safe
> going forward? I can't say I know.
>
>
> On Tue, Jul 17, 2012 at 4:08 PM, Stephan Preibisch <preibisch at mpi-cbg.de>wrote:
>
>> Hi guys,
>>
>> this became a massive explanation. I suggest this as as solution to a
>> problem we have been only partly aware of. I hope you enjoy reading ;)
>>
>> Steffi
>>
>>
>> As the ImageJ conference is approaching I was talking with Johannes and
>> we agreed that the ImgOpener needs to be finished. However, since its first
>> version there has been a major design fault.
>>
>> But first the good news:
>> --------------------------------
>> It works perfectly fine if you say "open me an Image as float" or "...as
>> UnsignedByte" or whatever, classically called by the method
>> -> new ImgOpener.openImg( String id, ImgFactory<T> factory, T type );
>> It can, without any problems, return you an Img<T>, and it requires that
>> T is RealType (and not anymore NativeType, see at the end). So far, so good.
>> Note that "T" is NOT a return parameter, but something you give to the
>> openAs method.
>>
>> Now the bad news.
>> --------------------------
>> If you say "open this image as whatever RealType it is", it can do that,
>> but it cannot assign a "T" to it - because T is not a return parameter. We
>> made an ugly hack inside so that it seems as if it would work, but it does
>> not. Now you might ask, why change it if it worked so far? Well, here is an
>> easy example that would cause a ClassCastException on run time
>>
>> public static <T extends RealType< T >> void main( String[] args )
>> {
>>         Img< T > img1 = new ImgOpener.openImg( "somepic_8bit.tif" ); //
>> 8-bit unsigned
>>         Img< T > img2 = new ImgOpener.openImg( "somepic_32bit.tif" ); //
>> 32-bit float
>>
>>         img1.firstElement().set( img2.firstElement() ); // run-time crash
>> }
>>
>> It will throw a ClassCastException because img1 is of UnsignedByteType
>> and img2 of FloatType. But as we cast it in a dirty way, it compiles just
>> fine.
>> So, we cannot return a "T", but what we can return is Img< which is at
>> least a RealType >. And this is for sure always true, but img1 and img2 are
>> not necessarily the same RealType (as above).
>>
>> The correct way (which doesn't work)
>> --------------------------------------------------
>> What we should return is an Img< ? extends RealType< ? > >. However, it
>> is not ensured that the two "?" are the same, so an Img of this type is
>> basically incompatible with everything else, which means an unchecked cast
>> is necessary. So although correct, maybe not a good idea. And it is really
>> ugly to write if necessary.
>>
>> The still somehow correct way
>> -----------------------------------------
>> Instead, it returns now an Img< RealType >. This is kind of a tradeoff.
>> On one hand, this is very easy to write and will give you compile errors
>> where it should, for example
>>
>>         img1.firstElement().set( img2.firstElement() ); // COMPILE ERROR
>> (not the same RealType realization)
>>
>> OR
>>
>>        public <T extends RealType< T >> void add( IterableInterval< T >
>> i1, IterableInterval< T > i2 ) { .... }
>>        add( img1, img2 ); // COMPILE ERROR (not the same RealType
>> realization)
>>
>> BUT
>>
>>         Gauss.inFloatInPlace( 2.0 , img1 ); // FINE (just one RealType
>> realization required, inside it will be always the same "T")
>>         Gauss.inFloatInPlace( 2.0 , img2 ); // FINE (just one RealType
>> realization required, inside it will be always the same "T")
>>
>>         public < T extends RealType< T > > void add1( Img< T > img1,
>> double value ) { ... }
>>         add1( img1, 5 ); // FINE (just one RealType realization required,
>> inside it will be always the same "T")
>>
>>         public < T extends RealType< T >, S extends RealType< S > > void
>> add2( Img< T > img1, Img< S > img2 ) { ... }
>>         add2( img1, img2 ); // FINE (explicitly two different RealType
>> realizations are allowed)
>>
>>         public void add3( Img< RealType > img1, Img< RealType > img2 ) {
>> ... }
>>         add3( img1, img2 ); // FINE (both are just some kind of RealType,
>> but gives a warning)
>>
>> On the other hand it gives a lot of Warnings because RealType should be
>> more specified.
>>
>> Why not Img< RealType< ? > >
>> ------------------------------------------
>> Similar problem as in <? extends RealType< ? > >. RealType< ? > is not a
>> valid substitute for any construct like < T extends RealType < T > >. One
>> would have to cast to Img< RealType >, so we can take this one right away
>> as it is less writing.
>>
>> Where did NativeType go?
>> ------------------------------------
>> I do not see any reason why we should enforce a NativeType. There is no
>> objection to load an image into a (hypothetical) ListImg< BigDecimalType >.
>>
>> What are the implications?
>> -----------------------------------
>> We should write NOTHING except the method opening files for Img< RealType
>> >. And also only if it is really required - quite often it is not. But if,
>> Img< RealType > It is a completely valid input for any generic algorithm as
>> show above for Gauss, add, etc.
>>
>>
>>
>> I implemented the changes on a branch called 'newimgopener'. It also
>> contains four static convenience opening methods and a speed improvement.
>>
>> Any comments are very welcome. If somebody has a better idea how to solve
>> the problem ... I am all ears ...
>>
>> Bye bye,
>> Steffi
>>
>> --
>> Please avoid top-posting, and please make sure to reply-to-all!
>>
>> Mailing list web interface: http://groups.google.com/group/fiji-devel
>>
>
>  --
> Please avoid top-posting, and please make sure to reply-to-all!
>
> Mailing list web interface: http://groups.google.com/group/fiji-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120731/aff93144/attachment.html>

From preibisch at mpi-cbg.de  Tue Jul 31 17:18:02 2012
From: preibisch at mpi-cbg.de (Stephan Preibisch)
Date: Tue, 31 Jul 2012 18:18:02 -0400
Subject: [ImageJ-devel] [fiji-devel] Significant change to ImgOpener -
	or - why ImgOpener.openImg() cannot return a T
In-Reply-To: <CADN69yms-8syOAgw9ec0hbzbTJSDkU=eR_oO6fC+izx0GLspZA@mail.gmail.com>
References: <D7931AC1-BA9B-4561-AA28-D901E3A652B4@mpi-cbg.de>
	<CAKcvfuSSjqh+XQdFhe28_3NSucKZBqy1z9Qjt8SvE7SV4XzaRg@mail.gmail.com>
	<CADN69yms-8syOAgw9ec0hbzbTJSDkU=eR_oO6fC+izx0GLspZA@mail.gmail.com>
Message-ID: <55560F10-32EF-48D6-9641-652ED2221E4A@mpi-cbg.de>

Hi Barry, hi Curtis,

the example you give would give you a warning, and, yes, - a runtime error. The problem is, there is no right way to do it as the type is not defined at compile time but instead depends on the image that is opened. 

However, I do not see why <? extends RealType> would have any advantage. It crashes on the exactly same thing, but is more tough to write, see here:

Img< RealType >img = ImgOpener.open( "/Users/preibischs/Documents/Microscopy/SPIM/HisYFP-SPIM/spim_TL18_Angle0.lsm" );
img.firstElement().add( new FloatType() );

-> fails because cannot cast to ByteType (what the image is)

Img< ? extends RealType >img = ImgOpener.open( "/Users/preibischs/Documents/Microscopy/SPIM/HisYFP-SPIM/spim_TL18_Angle0.lsm" );
img.firstElement().add( new FloatType() );

-> fails as well, but is more to write

And the construct <? extends RealType<?>> would be correct but cannot be used in any generic method as it is not ensured that the first and the second "?" are the same. 

We still have to choose one of them, I still vote for Img< RealType >, because it is at least easy to write.

The best is to open it as FloatType or as ByteType, but this is not always possible ...

What do you think? 

Bye bye,
Steffi


On Jul 31, 2012, at 17:59 , Curtis Rueden wrote:

> Hi Barry,
> 
> 
> This is just an example I've pulled from the web but it seems to imply that an Img<UnsignedByteType> is not safely considered an Img<RealType>.
> 
> Good point! We should probably use "Img<? extends RealType>" instead. I tested this with ImageJ2, and it still works as expected. And I believe all of Steffi's example cases will still work too. So I pushed these changes to the newimgopener branch.
> 
> What do you think, Steffi? Anyone else?
> 
> Regards,
> Curtis
> 
> 
> On Tue, Jul 31, 2012 at 4:28 PM, Barry DeZonia <bdezonia at gmail.com> wrote:
> Steffi,
> 
> I remember running into this when originally interfacing IJ2 to Imglib. We did decided to go with Img<? extends RealType<?> as that seemed the most safe at the time.
> 
> What I'm wondering about with your solution is that it seems to contradict other people's description as to what is legal to do in Java.
> 
> As a contrived example think of the animal cage example:
> 
> We have a Animal class and a Lion class derived from it. And a Cage class that is defined Cage<T extends Animal>.
> 
> Though Lion is instanceof Animal its not the case that Cage<Lion> instanceof Cage<Animal>. This is counterintuitive but many people mention it.
> 
> If it was the case you could write code like this:
> 
> 
> Cage<Animal> animals;
> 
> 
> 
> Cage<Lion> lions;
> 
> 
> 
> animals = lions; // This assignment is not allowed
> 
> 
> 
> animals.add(rat); // If this executed, we'd have a Rat in a Cage<Lion>
> 
> This is just an example I've pulled from the web but it seems to imply that an Img<UnsignedByteType> is not safely considered an Img<RealType>. We may be avoiding all such cases where it could be a problem but is it safe going forward? I can't say I know.
> 
> 
> On Tue, Jul 17, 2012 at 4:08 PM, Stephan Preibisch <preibisch at mpi-cbg.de> wrote:
> Hi guys,
> 
> this became a massive explanation. I suggest this as as solution to a problem we have been only partly aware of. I hope you enjoy reading ;)
> 
> Steffi
> 
> 
> As the ImageJ conference is approaching I was talking with Johannes and we agreed that the ImgOpener needs to be finished. However, since its first version there has been a major design fault.
> 
> But first the good news:
> --------------------------------
> It works perfectly fine if you say "open me an Image as float" or "...as UnsignedByte" or whatever, classically called by the method
> -> new ImgOpener.openImg( String id, ImgFactory<T> factory, T type );
> It can, without any problems, return you an Img<T>, and it requires that T is RealType (and not anymore NativeType, see at the end). So far, so good.
> Note that "T" is NOT a return parameter, but something you give to the openAs method.
> 
> Now the bad news.
> --------------------------
> If you say "open this image as whatever RealType it is", it can do that, but it cannot assign a "T" to it - because T is not a return parameter. We made an ugly hack inside so that it seems as if it would work, but it does not. Now you might ask, why change it if it worked so far? Well, here is an easy example that would cause a ClassCastException on run time
> 
> public static <T extends RealType< T >> void main( String[] args )
> {
>         Img< T > img1 = new ImgOpener.openImg( "somepic_8bit.tif" ); // 8-bit unsigned
>         Img< T > img2 = new ImgOpener.openImg( "somepic_32bit.tif" ); // 32-bit float
> 
>         img1.firstElement().set( img2.firstElement() ); // run-time crash
> }
> 
> It will throw a ClassCastException because img1 is of UnsignedByteType and img2 of FloatType. But as we cast it in a dirty way, it compiles just fine.
> So, we cannot return a "T", but what we can return is Img< which is at least a RealType >. And this is for sure always true, but img1 and img2 are not necessarily the same RealType (as above).
> 
> The correct way (which doesn't work)
> --------------------------------------------------
> What we should return is an Img< ? extends RealType< ? > >. However, it is not ensured that the two "?" are the same, so an Img of this type is basically incompatible with everything else, which means an unchecked cast is necessary. So although correct, maybe not a good idea. And it is really ugly to write if necessary.
> 
> The still somehow correct way
> -----------------------------------------
> Instead, it returns now an Img< RealType >. This is kind of a tradeoff. On one hand, this is very easy to write and will give you compile errors where it should, for example
> 
>         img1.firstElement().set( img2.firstElement() ); // COMPILE ERROR (not the same RealType realization)
> 
> OR
> 
>        public <T extends RealType< T >> void add( IterableInterval< T > i1, IterableInterval< T > i2 ) { .... }
>        add( img1, img2 ); // COMPILE ERROR (not the same RealType realization)
> 
> BUT
> 
>         Gauss.inFloatInPlace( 2.0 , img1 ); // FINE (just one RealType realization required, inside it will be always the same "T")
>         Gauss.inFloatInPlace( 2.0 , img2 ); // FINE (just one RealType realization required, inside it will be always the same "T")
> 
>         public < T extends RealType< T > > void add1( Img< T > img1, double value ) { ... }
>         add1( img1, 5 ); // FINE (just one RealType realization required, inside it will be always the same "T")
> 
>         public < T extends RealType< T >, S extends RealType< S > > void add2( Img< T > img1, Img< S > img2 ) { ... }
>         add2( img1, img2 ); // FINE (explicitly two different RealType realizations are allowed)
> 
>         public void add3( Img< RealType > img1, Img< RealType > img2 ) { ... }
>         add3( img1, img2 ); // FINE (both are just some kind of RealType, but gives a warning)
> 
> On the other hand it gives a lot of Warnings because RealType should be more specified.
> 
> Why not Img< RealType< ? > >
> ------------------------------------------
> Similar problem as in <? extends RealType< ? > >. RealType< ? > is not a valid substitute for any construct like < T extends RealType < T > >. One would have to cast to Img< RealType >, so we can take this one right away as it is less writing.
> 
> Where did NativeType go?
> ------------------------------------
> I do not see any reason why we should enforce a NativeType. There is no objection to load an image into a (hypothetical) ListImg< BigDecimalType >.
> 
> What are the implications?
> -----------------------------------
> We should write NOTHING except the method opening files for Img< RealType >. And also only if it is really required - quite often it is not. But if, Img< RealType > It is a completely valid input for any generic algorithm as show above for Gauss, add, etc.
> 
> 
> 
> I implemented the changes on a branch called 'newimgopener'. It also contains four static convenience opening methods and a speed improvement.
> 
> Any comments are very welcome. If somebody has a better idea how to solve the problem ... I am all ears ...
> 
> Bye bye,
> Steffi
> 
> --
> Please avoid top-posting, and please make sure to reply-to-all!
> 
> Mailing list web interface: http://groups.google.com/group/fiji-devel
> 
> 
> -- 
> Please avoid top-posting, and please make sure to reply-to-all!
>  
> Mailing list web interface: http://groups.google.com/group/fiji-devel
> 
> 
> -- 
> Please avoid top-posting, and please make sure to reply-to-all!
>  
> Mailing list web interface: http://groups.google.com/group/fiji-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20120731/f89db42c/attachment-0001.html>

