From jay.w.warrick at gmail.com  Tue Mar  3 10:42:07 2015
From: jay.w.warrick at gmail.com (Jay Warrick)
Date: Tue, 3 Mar 2015 10:42:07 -0600
Subject: [ImageJ-devel] Scifio question - how to use (recently updated)
	bioformats proprietary formats (programmatically)
Message-ID: <B8F667E0-F684-42FF-ADA8-4D3E063CCEA4@gmail.com>

Hi All,

I have 2 problems you all hopefully have suggestions for... (thanks in advance)

Problem 1:

I'm interested in opening ND2 file format programmatically in Java via a SCIFIO object used with an ImageJ context but can't seem to get it to work. (see listing A) Error message indicates format not found.

Hopefully relevant details of what I am currently doing with maven imports are below. (see listing B)

Suggestions? Is there a BioFormats dependency I am not bringing in that is necessary to expose/discover all the additional proprietary formats or do I have to add the proprietary formats myself using a combination of a bioformats artifact I'm not aware of and adding each format using the mechanism provided by scifio-bf-compat? I thought it used to be automatic upon adding the scifio and scifio-bf-compat dependencies. Any help is appreciated. I looked in scifio tutorials but couldn't figure it out. Sorry.

Problem 2:

After resolution of problem 1, I'd like to leverage recent changes to the bioformats package that addresses a bug in ND2 metadata handling that was affecting me (https://trac.openmicroscopy.org.uk/ome/ticket/12548 <https://trac.openmicroscopy.org.uk/ome/ticket/12548>). The link suggests using bioformats 5.1.x vs 5.0.x which also requires use a few other updated jars (as noted near end of ticket). Suggestions on the best way to do this given my use case? It looks like the parent pom of scifio-bf-compat (pom-scijava) specifies <bio-formats.version>5.0.7</bio-formats.version>. Is it likely to be "risky" to leverage the most recent changes for ND2 compatibility?

Thanks,

Jay

%%%%%%%%%%%%%
Listing A
%%%%%%%%%%%%%

final SCIFIO scifio = new SCIFIO(ij.getContext());
Reader reader;
try
{
	reader = scifio.initializer().initializeReader(nd2File, new SCIFIOConfig().checkerSetOpen(true));
}
catch (Exception e)
{
	e.printStackTrace();
	return false;
}


%%%%%%%%%%%%%
Listing B
%%%%%%%%%%%%%

My project parent pom is 

	<parent>
		<groupId>net.imagej</groupId>
		<artifactId>pom-imagej</artifactId>
		<version>5.12.0</version>
	</parent>

 I have the following maven dependencies

		<dependency>
			<groupId>io.scif</groupId>
			<artifactId>scifio</artifactId>
		</dependency>
		<dependency>
			<groupId>io.scif</groupId>
			<artifactId>scifio-bf-compat</artifactId>
			<scope>runtime</scope>
		</dependency>

A "limited" list of 30 formats show up in the DefaultFormatService currently and don't include ND2. (see Listing C)


%%%%%%%%%%%%%
Listing C
%%%%%%%%%%%%%

(*) Formats in DefaultFormatService

ImageJ ij = new ImageJ();
Set<Format> formats = ij.scifio().format().getAllFormats();

returns

[Bio-Formats Compatibility Format, Animated PNG, Audio Video Interleave, Windows Bitmap, DICOM, Encapsulated PostScript, Flexible Image Transport System, Simulated data, Graphics Interchange Format, Image Cytometry Standard, JPEG-2000, JPEG, Java source code, Multiple Network Graphics, Micro-Manager, NRRD, OBF, PCX, Portable Gray Map, Text, Zip, QuickTime, PICT, plugin:class io.scif.ome.formats.OMEXMLFormat, Tile JPEG, QuickTime, plugin:class io.scif.ome.formats.OMETIFFFormat, Tagged Image File Format, Minimal TIFF, Tagged Image File Format]


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150303/b48a001e/attachment.html>

From ctrueden at wisc.edu  Tue Mar  3 11:28:59 2015
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Tue, 3 Mar 2015 11:28:59 -0600
Subject: [ImageJ-devel] Scifio question - how to use (recently updated)
 bioformats proprietary formats (programmatically)
In-Reply-To: <B8F667E0-F684-42FF-ADA8-4D3E063CCEA4@gmail.com>
References: <B8F667E0-F684-42FF-ADA8-4D3E063CCEA4@gmail.com>
Message-ID: <CADN69ykuapN6sLdcop6F6Kw=F=OGuj+FN5DSMAbiLQvFmrJyGw@mail.gmail.com>

Hi Jay,

> I thought it used to be automatic upon adding the scifio and
> scifio-bf-compat dependencies.

Yeah, that's correct.

> A "limited" list of 30 formats show up in the DefaultFormatService
> currently and don't include ND2.

The format that supports ND2 (and all Bio-Formats formats) is the
"Bio-Formats Compatibility Format" at the front of your list.

You'll need to debug into the code to find out why the BioFormatsFormat is
not being selected properly for your ND2 file.

> It looks like the parent pom of scifio-bf-compat (pom-scijava)
> specifies <bio-formats.version>5.0.7</bio-formats.version>.
> Is it likely to be "risky" to leverage the most recent changes
> for ND2 compatibility?

Yes, it will not work. The scifio-bf-compat component has not yet been
updated to use the Bio-Formats 5.1.x codebase.

The good news is: updating it to use the OME 5.1 API was easy. I pushed a
branch:

https://github.com/scifio/scifio-bf-compat/compare/ome-5.1

You can use it during development by:

* Cloning scifio-bf-compat.
* Switching to the ome-5.1 branch.
* Importing scifio-bf-compat into your Eclipse.
* Setting your project's bio-formats.version property to 5.1.0-SNAPSHOT.
* Setting your project's scifio-bf-compat.version property to
1.11.1-SNAPSHOT.

And then Eclipse should switch to a project coupling for scifio-bf-compat
and use the branch.

But you'll want to stay on a corresponding branch of your own project
development until the OME 5.1.0 release.

Regards,
Curtis

On Tue, Mar 3, 2015 at 10:42 AM, Jay Warrick <jay.w.warrick at gmail.com>
wrote:

> Hi All,
>
> I have 2 problems you all hopefully have suggestions for... (thanks in
> advance)
>
> *Problem 1:*
>
> I'm interested in opening ND2 file format programmatically in Java via a
> SCIFIO object used with an ImageJ context but can't seem to get it to work.
> (see listing A) Error message indicates format not found.
>
> Hopefully relevant details of what I am currently doing with maven imports
> are below. (see listing B)
>
> Suggestions? Is there a BioFormats dependency I am not bringing in that is
> necessary to expose/discover all the additional proprietary formats or do I
> have to add the proprietary formats myself using a combination of a
> bioformats artifact I'm not aware of and adding each format using the
> mechanism provided by scifio-bf-compat? I thought it used to be automatic
> upon adding the scifio and scifio-bf-compat dependencies. Any help is
> appreciated. I looked in scifio tutorials but couldn't figure it out. Sorry.
>
> *Problem 2:*
>
> After resolution of problem 1, I'd like to leverage recent changes to the
> bioformats package that addresses a bug in ND2 metadata handling that was
> affecting me (https://trac.openmicroscopy.org.uk/ome/ticket/12548). The
> link suggests using bioformats 5.1.x vs 5.0.x which also requires use a few
> other updated jars (as noted near end of ticket). Suggestions on the best
> way to do this given my use case? It looks like the parent pom of
> scifio-bf-compat (pom-scijava)
> specifies <bio-formats.version>5.0.7</bio-formats.version>. Is it likely to
> be "risky" to leverage the most recent changes for ND2 compatibility?
>
> Thanks,
>
> Jay
>
> %%%%%%%%%%%%%
> Listing A
> %%%%%%%%%%%%%
>
> final SCIFIO scifio = new SCIFIO(ij.getContext());
> Reader reader;
> try
> {
> reader = scifio.initializer().initializeReader(nd2File, new
>  SCIFIOConfig().checkerSetOpen(true));
> }
> catch (Exception e)
> {
> e.printStackTrace();
> return false;
> }
>
>
> %%%%%%%%%%%%%
> Listing B
> %%%%%%%%%%%%%
>
> My project parent pom is
>
> <parent>
> <groupId>net.imagej</groupId>
> <artifactId>pom-imagej</artifactId>
> <version>5.12.0</version>
> </parent>
>
>  I have the following maven dependencies
>
> <dependency>
> <groupId>io.scif</groupId>
> <artifactId>scifio</artifactId>
> </dependency>
> <dependency>
> <groupId>io.scif</groupId>
> <artifactId>scifio-bf-compat</artifactId>
> <scope>runtime</scope>
> </dependency>
>
> A "limited" list of 30 formats show up in the DefaultFormatService
> currently and don't include ND2. (see Listing C)
>
>
> %%%%%%%%%%%%%
> Listing C
> %%%%%%%%%%%%%
>
> (*) Formats in DefaultFormatService
>
> ImageJ ij = new ImageJ();
> Set<Format> formats = ij.scifio().format().getAllFormats();
>
> returns
>
> [Bio-Formats Compatibility Format, Animated PNG, Audio Video Interleave,
> Windows Bitmap, DICOM, Encapsulated PostScript, Flexible Image Transport
> System, Simulated data, Graphics Interchange Format, Image Cytometry
> Standard, JPEG-2000, JPEG, Java source code, Multiple Network Graphics,
> Micro-Manager, NRRD, OBF, PCX, Portable Gray Map, Text, Zip, QuickTime,
> PICT, plugin:class io.scif.ome.formats.OMEXMLFormat, Tile JPEG, QuickTime,
> plugin:class io.scif.ome.formats.OMETIFFFormat, Tagged Image File Format,
> Minimal TIFF, Tagged Image File Format]
>
>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150303/c0e57b98/attachment-0001.html>

From jay.w.warrick at gmail.com  Tue Mar  3 15:54:27 2015
From: jay.w.warrick at gmail.com (Jay Warrick)
Date: Tue, 3 Mar 2015 15:54:27 -0600
Subject: [ImageJ-devel] Scifio question - how to use (recently updated)
	bioformats proprietary formats (programmatically)
In-Reply-To: <CADN69ykuapN6sLdcop6F6Kw=F=OGuj+FN5DSMAbiLQvFmrJyGw@mail.gmail.com>
References: <B8F667E0-F684-42FF-ADA8-4D3E063CCEA4@gmail.com>
	<CADN69ykuapN6sLdcop6F6Kw=F=OGuj+FN5DSMAbiLQvFmrJyGw@mail.gmail.com>
Message-ID: <7C4B2278-0C3A-4428-B91F-219ECCDCE0DD@gmail.com>

Hi Curtis,

Super helpful feedback. Thanks for the tips on leveraging the newest OME stuff.

Re: Problem 1 - Did some debugging. As you already know, the scifio-bf-compat dependency is pulling in the formats-api-5.0.7.jar artifact which contains some crucial classes for all this. Critical to matching a file with an appropriate reader is the loci.formats.ImageReader class which has a static method (getDefaultReaderClasses()) that should populate a cache of readers based on the readers.txt file (short example snippet in listing #1). As you can see from the snippet, the readers are expected to be contained within the loci.formats.in package. During population of this cache, each attempt to load a class listed in the file is met with a ClassNotFoundException. In confirmation of this, when I look in that package within the formats-api-5.0.7.jar artifact, none of these readers exist. Thus, the cache of readers does not get populated and Scifio is not able to match my file with any reader. Seems like this is the issue, right? However, it would seem like this would affect almost ANY proprietary format, which tells me I am likely doing something weird if this hasn't come up yet in feedback from others. 

Suggestions? I re-downloaded the artifact directly from maven.imagej.net <http://maven.imagej.net/> again to check. I change the extension to zip and looked in the corresponding folder and did not find any of the readers I would expect.

%%%%%%%%%%%%%%
Listin #1  - short snippet of readers.txt file.
%%%%%%%%%%%%%%

# standalone readers with unique file extensions
loci.formats.in.PGMReader             # pgm
loci.formats.in.FitsReader            # fits
loci.formats.in.PCXReader             # pcx


> On Mar 3, 2015, at 11:28 AM, Curtis Rueden <ctrueden at wisc.edu> wrote:
> 
> Hi Jay,
> 
> > I thought it used to be automatic upon adding the scifio and
> > scifio-bf-compat dependencies.
> 
> Yeah, that's correct.
> 
> > A "limited" list of 30 formats show up in the DefaultFormatService
> > currently and don't include ND2.
> 
> The format that supports ND2 (and all Bio-Formats formats) is the "Bio-Formats Compatibility Format" at the front of your list.
> 
> You'll need to debug into the code to find out why the BioFormatsFormat is not being selected properly for your ND2 file.
> 
> > It looks like the parent pom of scifio-bf-compat (pom-scijava)
> > specifies <bio-formats.version>5.0.7</bio-formats.version>.
> > Is it likely to be "risky" to leverage the most recent changes
> > for ND2 compatibility?
> 
> Yes, it will not work. The scifio-bf-compat component has not yet been updated to use the Bio-Formats 5.1.x codebase.
> 
> The good news is: updating it to use the OME 5.1 API was easy. I pushed a branch:
> 
> https://github.com/scifio/scifio-bf-compat/compare/ome-5.1 <https://github.com/scifio/scifio-bf-compat/compare/ome-5.1>
> 
> You can use it during development by:
> 
> * Cloning scifio-bf-compat.
> * Switching to the ome-5.1 branch.
> * Importing scifio-bf-compat into your Eclipse.
> * Setting your project's bio-formats.version property to 5.1.0-SNAPSHOT.
> * Setting your project's scifio-bf-compat.version property to 1.11.1-SNAPSHOT.
> 
> And then Eclipse should switch to a project coupling for scifio-bf-compat and use the branch.
> 
> But you'll want to stay on a corresponding branch of your own project development until the OME 5.1.0 release.
> 
> Regards,
> Curtis
> 
> On Tue, Mar 3, 2015 at 10:42 AM, Jay Warrick <jay.w.warrick at gmail.com <mailto:jay.w.warrick at gmail.com>> wrote:
> Hi All,
> 
> I have 2 problems you all hopefully have suggestions for... (thanks in advance)
> 
> Problem 1:
> 
> I'm interested in opening ND2 file format programmatically in Java via a SCIFIO object used with an ImageJ context but can't seem to get it to work. (see listing A) Error message indicates format not found.
> 
> Hopefully relevant details of what I am currently doing with maven imports are below. (see listing B)
> 
> Suggestions? Is there a BioFormats dependency I am not bringing in that is necessary to expose/discover all the additional proprietary formats or do I have to add the proprietary formats myself using a combination of a bioformats artifact I'm not aware of and adding each format using the mechanism provided by scifio-bf-compat? I thought it used to be automatic upon adding the scifio and scifio-bf-compat dependencies. Any help is appreciated. I looked in scifio tutorials but couldn't figure it out. Sorry.
> 
> Problem 2:
> 
> After resolution of problem 1, I'd like to leverage recent changes to the bioformats package that addresses a bug in ND2 metadata handling that was affecting me (https://trac.openmicroscopy.org.uk/ome/ticket/12548 <https://trac.openmicroscopy.org.uk/ome/ticket/12548>). The link suggests using bioformats 5.1.x vs 5.0.x which also requires use a few other updated jars (as noted near end of ticket). Suggestions on the best way to do this given my use case? It looks like the parent pom of scifio-bf-compat (pom-scijava) specifies <bio-formats.version>5.0.7</bio-formats.version>. Is it likely to be "risky" to leverage the most recent changes for ND2 compatibility?
> 
> Thanks,
> 
> Jay
> 
> %%%%%%%%%%%%%
> Listing A
> %%%%%%%%%%%%%
> 
> final SCIFIO scifio = new SCIFIO(ij.getContext());
> Reader reader;
> try
> {
> 	reader = scifio.initializer().initializeReader(nd2File, new SCIFIOConfig().checkerSetOpen(true));
> }
> catch (Exception e)
> {
> 	e.printStackTrace();
> 	return false;
> }
> 
> 
> %%%%%%%%%%%%%
> Listing B
> %%%%%%%%%%%%%
> 
> My project parent pom is 
> 
> 	<parent>
> 		<groupId>net.imagej</groupId>
> 		<artifactId>pom-imagej</artifactId>
> 		<version>5.12.0</version>
> 	</parent>
> 
>  I have the following maven dependencies
> 
> 		<dependency>
> 			<groupId>io.scif</groupId>
> 			<artifactId>scifio</artifactId>
> 		</dependency>
> 		<dependency>
> 			<groupId>io.scif</groupId>
> 			<artifactId>scifio-bf-compat</artifactId>
> 			<scope>runtime</scope>
> 		</dependency>
> 
> A "limited" list of 30 formats show up in the DefaultFormatService currently and don't include ND2. (see Listing C)
> 
> 
> %%%%%%%%%%%%%
> Listing C
> %%%%%%%%%%%%%
> 
> (*) Formats in DefaultFormatService
> 
> ImageJ ij = new ImageJ();
> Set<Format> formats = ij.scifio().format().getAllFormats();
> 
> returns
> 
> [Bio-Formats Compatibility Format, Animated PNG, Audio Video Interleave, Windows Bitmap, DICOM, Encapsulated PostScript, Flexible Image Transport System, Simulated data, Graphics Interchange Format, Image Cytometry Standard, JPEG-2000, JPEG, Java source code, Multiple Network Graphics, Micro-Manager, NRRD, OBF, PCX, Portable Gray Map, Text, Zip, QuickTime, PICT, plugin:class io.scif.ome.formats.OMEXMLFormat, Tile JPEG, QuickTime, plugin:class io.scif.ome.formats.OMETIFFFormat, Tagged Image File Format, Minimal TIFF, Tagged Image File Format]
> 
> 
> 
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net <mailto:ImageJ-devel at imagej.net>
> http://imagej.net/mailman/listinfo/imagej-devel <http://imagej.net/mailman/listinfo/imagej-devel>
> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150303/1d71fb5c/attachment-0001.html>

From hiner at wisc.edu  Wed Mar  4 08:45:59 2015
From: hiner at wisc.edu (Mark Hiner)
Date: Wed, 4 Mar 2015 08:45:59 -0600
Subject: [ImageJ-devel] Scifio question - how to use (recently updated)
 bioformats proprietary formats (programmatically)
In-Reply-To: <7C4B2278-0C3A-4428-B91F-219ECCDCE0DD@gmail.com>
References: <B8F667E0-F684-42FF-ADA8-4D3E063CCEA4@gmail.com>
	<CADN69ykuapN6sLdcop6F6Kw=F=OGuj+FN5DSMAbiLQvFmrJyGw@mail.gmail.com>
	<7C4B2278-0C3A-4428-B91F-219ECCDCE0DD@gmail.com>
Message-ID: <CA+B=mGqqMjCt_iqaZP6Ag0scVgq6y3arOV3DH_56AMCMgx+Uyg@mail.gmail.com>

Hi Jay,

>In confirmation of this, when I look in that package within
the formats-api-5.0.7.jar artifact, none of these readers exist.

Proprietary readers are in the formats-gpl component[1]. formats-api just
provides base interfaces. For downloads I would recommend looking at the
OME downloads pages[2] or, of course, using Maven to pull in the
formats-gpl dependency. Note that scifio-bf-compat does not pull in
formats-gpl itself - it just provides the framework for adapting
Bio-Foramts classes.

Best,
Mark

[1]
https://github.com/openmicroscopy/bioformats/tree/develop/components/formats-gpl
[2] http://downloads.openmicroscopy.org/bio-formats/5.0.7/

On Tue, Mar 3, 2015 at 3:54 PM, Jay Warrick <jay.w.warrick at gmail.com> wrote:

> Hi Curtis,
>
> Super helpful feedback. Thanks for the tips on leveraging the newest OME
> stuff.
>
> Re: Problem 1 - Did some debugging. As you already know, the
> scifio-bf-compat dependency is pulling in the formats-api-5.0.7.jar
> artifact which contains some crucial classes for all this. Critical to
> matching a file with an appropriate reader is the loci.formats.ImageReader
> class which has a static method (getDefaultReaderClasses()) that should
> populate a cache of readers based on the readers.txt file (short example
> snippet in listing #1). As you can see from the snippet, the readers are
> expected to be contained within the loci.formats.in package. During
> population of this cache, each attempt to load a class listed in the file
> is met with a ClassNotFoundException. In confirmation of this, when I look
> in that package within the formats-api-5.0.7.jar artifact, none of these
> readers exist. Thus, the cache of readers does not get populated and Scifio
> is not able to match my file with any reader. Seems like this is the issue,
> right? However, it would seem like this would affect almost ANY proprietary
> format, which tells me I am likely doing something weird if this hasn't
> come up yet in feedback from others.
>
> Suggestions? I re-downloaded the artifact directly from maven.imagej.net again
> to check. I change the extension to zip and looked in the corresponding
> folder and did not find any of the readers I would expect.
>
> %%%%%%%%%%%%%%
> Listin #1  - short snippet of readers.txt file.
> %%%%%%%%%%%%%%
>
> # standalone readers with unique file extensions
> loci.formats.in.PGMReader             # pgm
> loci.formats.in.FitsReader            # fits
> loci.formats.in.PCXReader             # pcx
>
>
> On Mar 3, 2015, at 11:28 AM, Curtis Rueden <ctrueden at wisc.edu> wrote:
>
> Hi Jay,
>
> > I thought it used to be automatic upon adding the scifio and
> > scifio-bf-compat dependencies.
>
> Yeah, that's correct.
>
> > A "limited" list of 30 formats show up in the DefaultFormatService
> > currently and don't include ND2.
>
> The format that supports ND2 (and all Bio-Formats formats) is the
> "Bio-Formats Compatibility Format" at the front of your list.
>
> You'll need to debug into the code to find out why the BioFormatsFormat is
> not being selected properly for your ND2 file.
>
> > It looks like the parent pom of scifio-bf-compat (pom-scijava)
> > specifies <bio-formats.version>5.0.7</bio-formats.version>.
> > Is it likely to be "risky" to leverage the most recent changes
> > for ND2 compatibility?
>
> Yes, it will not work. The scifio-bf-compat component has not yet been
> updated to use the Bio-Formats 5.1.x codebase.
>
> The good news is: updating it to use the OME 5.1 API was easy. I pushed a
> branch:
>
> https://github.com/scifio/scifio-bf-compat/compare/ome-5.1
>
> You can use it during development by:
>
> * Cloning scifio-bf-compat.
> * Switching to the ome-5.1 branch.
> * Importing scifio-bf-compat into your Eclipse.
> * Setting your project's bio-formats.version property to 5.1.0-SNAPSHOT.
> * Setting your project's scifio-bf-compat.version property to
> 1.11.1-SNAPSHOT.
>
> And then Eclipse should switch to a project coupling for scifio-bf-compat
> and use the branch.
>
> But you'll want to stay on a corresponding branch of your own project
> development until the OME 5.1.0 release.
>
> Regards,
> Curtis
>
> On Tue, Mar 3, 2015 at 10:42 AM, Jay Warrick <jay.w.warrick at gmail.com>
> wrote:
>
>> Hi All,
>>
>> I have 2 problems you all hopefully have suggestions for... (thanks in
>> advance)
>>
>> *Problem 1:*
>>
>> I'm interested in opening ND2 file format programmatically in Java via a
>> SCIFIO object used with an ImageJ context but can't seem to get it to work.
>> (see listing A) Error message indicates format not found.
>>
>> Hopefully relevant details of what I am currently doing with maven
>> imports are below. (see listing B)
>>
>> Suggestions? Is there a BioFormats dependency I am not bringing in that
>> is necessary to expose/discover all the additional proprietary formats or
>> do I have to add the proprietary formats myself using a combination of a
>> bioformats artifact I'm not aware of and adding each format using the
>> mechanism provided by scifio-bf-compat? I thought it used to be automatic
>> upon adding the scifio and scifio-bf-compat dependencies. Any help is
>> appreciated. I looked in scifio tutorials but couldn't figure it out. Sorry.
>>
>> *Problem 2:*
>>
>> After resolution of problem 1, I'd like to leverage recent changes to the
>> bioformats package that addresses a bug in ND2 metadata handling that was
>> affecting me (https://trac.openmicroscopy.org.uk/ome/ticket/12548). The
>> link suggests using bioformats 5.1.x vs 5.0.x which also requires use a few
>> other updated jars (as noted near end of ticket). Suggestions on the best
>> way to do this given my use case? It looks like the parent pom of
>> scifio-bf-compat (pom-scijava)
>> specifies <bio-formats.version>5.0.7</bio-formats.version>. Is it likely to
>> be "risky" to leverage the most recent changes for ND2 compatibility?
>>
>> Thanks,
>>
>> Jay
>>
>> %%%%%%%%%%%%%
>> Listing A
>> %%%%%%%%%%%%%
>>
>> final SCIFIO scifio = new SCIFIO(ij.getContext());
>> Reader reader;
>> try
>> {
>> reader = scifio.initializer().initializeReader(nd2File, new
>>  SCIFIOConfig().checkerSetOpen(true));
>> }
>> catch (Exception e)
>> {
>> e.printStackTrace();
>> return false;
>> }
>>
>>
>> %%%%%%%%%%%%%
>> Listing B
>> %%%%%%%%%%%%%
>>
>> My project parent pom is
>>
>> <parent>
>> <groupId>net.imagej</groupId>
>> <artifactId>pom-imagej</artifactId>
>> <version>5.12.0</version>
>> </parent>
>>
>>  I have the following maven dependencies
>>
>> <dependency>
>> <groupId>io.scif</groupId>
>> <artifactId>scifio</artifactId>
>> </dependency>
>> <dependency>
>> <groupId>io.scif</groupId>
>> <artifactId>scifio-bf-compat</artifactId>
>> <scope>runtime</scope>
>> </dependency>
>>
>> A "limited" list of 30 formats show up in the DefaultFormatService
>> currently and don't include ND2. (see Listing C)
>>
>>
>> %%%%%%%%%%%%%
>> Listing C
>> %%%%%%%%%%%%%
>>
>> (*) Formats in DefaultFormatService
>>
>> ImageJ ij = new ImageJ();
>> Set<Format> formats = ij.scifio().format().getAllFormats();
>>
>> returns
>>
>> [Bio-Formats Compatibility Format, Animated PNG, Audio Video Interleave,
>> Windows Bitmap, DICOM, Encapsulated PostScript, Flexible Image Transport
>> System, Simulated data, Graphics Interchange Format, Image Cytometry
>> Standard, JPEG-2000, JPEG, Java source code, Multiple Network Graphics,
>> Micro-Manager, NRRD, OBF, PCX, Portable Gray Map, Text, Zip, QuickTime,
>> PICT, plugin:class io.scif.ome.formats.OMEXMLFormat, Tile JPEG, QuickTime,
>> plugin:class io.scif.ome.formats.OMETIFFFormat, Tagged Image File Format,
>> Minimal TIFF, Tagged Image File Format]
>>
>>
>>
>> _______________________________________________
>> ImageJ-devel mailing list
>> ImageJ-devel at imagej.net
>> http://imagej.net/mailman/listinfo/imagej-devel
>>
>>
>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150304/7656ac46/attachment.html>

From ctrueden at wisc.edu  Wed Mar  4 11:54:47 2015
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Wed, 4 Mar 2015 11:54:47 -0600
Subject: [ImageJ-devel] Scifio question - how to use (recently updated)
 bioformats proprietary formats (programmatically)
In-Reply-To: <CA+B=mGqqMjCt_iqaZP6Ag0scVgq6y3arOV3DH_56AMCMgx+Uyg@mail.gmail.com>
References: <B8F667E0-F684-42FF-ADA8-4D3E063CCEA4@gmail.com>
	<CADN69ykuapN6sLdcop6F6Kw=F=OGuj+FN5DSMAbiLQvFmrJyGw@mail.gmail.com>
	<7C4B2278-0C3A-4428-B91F-219ECCDCE0DD@gmail.com>
	<CA+B=mGqqMjCt_iqaZP6Ag0scVgq6y3arOV3DH_56AMCMgx+Uyg@mail.gmail.com>
Message-ID: <CADN69ymg46VaxhFqFKie+vJoJqUWJ4G-24=Y2_TyZwkPVb=_WA@mail.gmail.com>

Hi Jay,

> Note that scifio-bf-compat does not pull in formats-gpl itself

To expand on Mark's statement a bit: I forgot that you will also need to
add a dependency on formats-gpl if you want to enable support for all the
proprietary file formats supported by Bio-Formats.

I updated the scifio-bf-compat README with detailed instructions; see:
   https://github.com/scifio/scifio-bf-compat#usage

HTH,
Curtis

On Wed, Mar 4, 2015 at 8:45 AM, Mark Hiner <hiner at wisc.edu> wrote:

> Hi Jay,
>
> >In confirmation of this, when I look in that package within
> the formats-api-5.0.7.jar artifact, none of these readers exist.
>
> Proprietary readers are in the formats-gpl component[1]. formats-api just
> provides base interfaces. For downloads I would recommend looking at the
> OME downloads pages[2] or, of course, using Maven to pull in the
> formats-gpl dependency. Note that scifio-bf-compat does not pull in
> formats-gpl itself - it just provides the framework for adapting
> Bio-Foramts classes.
>
> Best,
> Mark
>
> [1]
> https://github.com/openmicroscopy/bioformats/tree/develop/components/formats-gpl
> [2] http://downloads.openmicroscopy.org/bio-formats/5.0.7/
>
> On Tue, Mar 3, 2015 at 3:54 PM, Jay Warrick <jay.w.warrick at gmail.com>
> wrote:
>
>> Hi Curtis,
>>
>> Super helpful feedback. Thanks for the tips on leveraging the newest OME
>> stuff.
>>
>> Re: Problem 1 - Did some debugging. As you already know, the
>> scifio-bf-compat dependency is pulling in the formats-api-5.0.7.jar
>> artifact which contains some crucial classes for all this. Critical to
>> matching a file with an appropriate reader is the loci.formats.ImageReader
>> class which has a static method (getDefaultReaderClasses()) that should
>> populate a cache of readers based on the readers.txt file (short example
>> snippet in listing #1). As you can see from the snippet, the readers are
>> expected to be contained within the loci.formats.in package. During
>> population of this cache, each attempt to load a class listed in the file
>> is met with a ClassNotFoundException. In confirmation of this, when I look
>> in that package within the formats-api-5.0.7.jar artifact, none of these
>> readers exist. Thus, the cache of readers does not get populated and Scifio
>> is not able to match my file with any reader. Seems like this is the issue,
>> right? However, it would seem like this would affect almost ANY proprietary
>> format, which tells me I am likely doing something weird if this hasn't
>> come up yet in feedback from others.
>>
>> Suggestions? I re-downloaded the artifact directly from maven.imagej.net again
>> to check. I change the extension to zip and looked in the corresponding
>> folder and did not find any of the readers I would expect.
>>
>> %%%%%%%%%%%%%%
>> Listin #1  - short snippet of readers.txt file.
>> %%%%%%%%%%%%%%
>>
>> # standalone readers with unique file extensions
>> loci.formats.in.PGMReader             # pgm
>> loci.formats.in.FitsReader            # fits
>> loci.formats.in.PCXReader             # pcx
>>
>>
>> On Mar 3, 2015, at 11:28 AM, Curtis Rueden <ctrueden at wisc.edu> wrote:
>>
>> Hi Jay,
>>
>> > I thought it used to be automatic upon adding the scifio and
>> > scifio-bf-compat dependencies.
>>
>> Yeah, that's correct.
>>
>> > A "limited" list of 30 formats show up in the DefaultFormatService
>> > currently and don't include ND2.
>>
>> The format that supports ND2 (and all Bio-Formats formats) is the
>> "Bio-Formats Compatibility Format" at the front of your list.
>>
>> You'll need to debug into the code to find out why the BioFormatsFormat
>> is not being selected properly for your ND2 file.
>>
>> > It looks like the parent pom of scifio-bf-compat (pom-scijava)
>> > specifies <bio-formats.version>5.0.7</bio-formats.version>.
>> > Is it likely to be "risky" to leverage the most recent changes
>> > for ND2 compatibility?
>>
>> Yes, it will not work. The scifio-bf-compat component has not yet been
>> updated to use the Bio-Formats 5.1.x codebase.
>>
>> The good news is: updating it to use the OME 5.1 API was easy. I pushed a
>> branch:
>>
>> https://github.com/scifio/scifio-bf-compat/compare/ome-5.1
>>
>> You can use it during development by:
>>
>> * Cloning scifio-bf-compat.
>> * Switching to the ome-5.1 branch.
>> * Importing scifio-bf-compat into your Eclipse.
>> * Setting your project's bio-formats.version property to 5.1.0-SNAPSHOT.
>> * Setting your project's scifio-bf-compat.version property to
>> 1.11.1-SNAPSHOT.
>>
>> And then Eclipse should switch to a project coupling for scifio-bf-compat
>> and use the branch.
>>
>> But you'll want to stay on a corresponding branch of your own project
>> development until the OME 5.1.0 release.
>>
>> Regards,
>> Curtis
>>
>> On Tue, Mar 3, 2015 at 10:42 AM, Jay Warrick <jay.w.warrick at gmail.com>
>> wrote:
>>
>>> Hi All,
>>>
>>> I have 2 problems you all hopefully have suggestions for... (thanks in
>>> advance)
>>>
>>> *Problem 1:*
>>>
>>> I'm interested in opening ND2 file format programmatically in Java via a
>>> SCIFIO object used with an ImageJ context but can't seem to get it to work.
>>> (see listing A) Error message indicates format not found.
>>>
>>> Hopefully relevant details of what I am currently doing with maven
>>> imports are below. (see listing B)
>>>
>>> Suggestions? Is there a BioFormats dependency I am not bringing in that
>>> is necessary to expose/discover all the additional proprietary formats or
>>> do I have to add the proprietary formats myself using a combination of a
>>> bioformats artifact I'm not aware of and adding each format using the
>>> mechanism provided by scifio-bf-compat? I thought it used to be automatic
>>> upon adding the scifio and scifio-bf-compat dependencies. Any help is
>>> appreciated. I looked in scifio tutorials but couldn't figure it out. Sorry.
>>>
>>> *Problem 2:*
>>>
>>> After resolution of problem 1, I'd like to leverage recent changes to
>>> the bioformats package that addresses a bug in ND2 metadata handling that
>>> was affecting me (https://trac.openmicroscopy.org.uk/ome/ticket/12548).
>>> The link suggests using bioformats 5.1.x vs 5.0.x which also requires use a
>>> few other updated jars (as noted near end of ticket). Suggestions on the
>>> best way to do this given my use case? It looks like the parent pom of
>>> scifio-bf-compat (pom-scijava)
>>> specifies <bio-formats.version>5.0.7</bio-formats.version>. Is it likely to
>>> be "risky" to leverage the most recent changes for ND2 compatibility?
>>>
>>> Thanks,
>>>
>>> Jay
>>>
>>> %%%%%%%%%%%%%
>>> Listing A
>>> %%%%%%%%%%%%%
>>>
>>> final SCIFIO scifio = new SCIFIO(ij.getContext());
>>> Reader reader;
>>> try
>>> {
>>> reader = scifio.initializer().initializeReader(nd2File, new
>>>  SCIFIOConfig().checkerSetOpen(true));
>>> }
>>> catch (Exception e)
>>> {
>>> e.printStackTrace();
>>> return false;
>>> }
>>>
>>>
>>> %%%%%%%%%%%%%
>>> Listing B
>>> %%%%%%%%%%%%%
>>>
>>> My project parent pom is
>>>
>>> <parent>
>>> <groupId>net.imagej</groupId>
>>> <artifactId>pom-imagej</artifactId>
>>> <version>5.12.0</version>
>>> </parent>
>>>
>>>  I have the following maven dependencies
>>>
>>> <dependency>
>>> <groupId>io.scif</groupId>
>>> <artifactId>scifio</artifactId>
>>> </dependency>
>>> <dependency>
>>> <groupId>io.scif</groupId>
>>> <artifactId>scifio-bf-compat</artifactId>
>>> <scope>runtime</scope>
>>> </dependency>
>>>
>>> A "limited" list of 30 formats show up in the DefaultFormatService
>>> currently and don't include ND2. (see Listing C)
>>>
>>>
>>> %%%%%%%%%%%%%
>>> Listing C
>>> %%%%%%%%%%%%%
>>>
>>> (*) Formats in DefaultFormatService
>>>
>>> ImageJ ij = new ImageJ();
>>> Set<Format> formats = ij.scifio().format().getAllFormats();
>>>
>>> returns
>>>
>>> [Bio-Formats Compatibility Format, Animated PNG, Audio Video Interleave,
>>> Windows Bitmap, DICOM, Encapsulated PostScript, Flexible Image Transport
>>> System, Simulated data, Graphics Interchange Format, Image Cytometry
>>> Standard, JPEG-2000, JPEG, Java source code, Multiple Network Graphics,
>>> Micro-Manager, NRRD, OBF, PCX, Portable Gray Map, Text, Zip, QuickTime,
>>> PICT, plugin:class io.scif.ome.formats.OMEXMLFormat, Tile JPEG, QuickTime,
>>> plugin:class io.scif.ome.formats.OMETIFFFormat, Tagged Image File Format,
>>> Minimal TIFF, Tagged Image File Format]
>>>
>>>
>>>
>>> _______________________________________________
>>> ImageJ-devel mailing list
>>> ImageJ-devel at imagej.net
>>> http://imagej.net/mailman/listinfo/imagej-devel
>>>
>>>
>>
>>
>> _______________________________________________
>> ImageJ-devel mailing list
>> ImageJ-devel at imagej.net
>> http://imagej.net/mailman/listinfo/imagej-devel
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150304/4a16c7ce/attachment-0001.html>

From jay.w.warrick at gmail.com  Wed Mar  4 12:02:17 2015
From: jay.w.warrick at gmail.com (Jay Warrick)
Date: Wed, 4 Mar 2015 12:02:17 -0600
Subject: [ImageJ-devel] Scifio question - how to use (recently updated)
	bioformats proprietary formats (programmatically)
In-Reply-To: <CA+B=mGqqMjCt_iqaZP6Ag0scVgq6y3arOV3DH_56AMCMgx+Uyg@mail.gmail.com>
References: <B8F667E0-F684-42FF-ADA8-4D3E063CCEA4@gmail.com>
	<CADN69ykuapN6sLdcop6F6Kw=F=OGuj+FN5DSMAbiLQvFmrJyGw@mail.gmail.com>
	<7C4B2278-0C3A-4428-B91F-219ECCDCE0DD@gmail.com>
	<CA+B=mGqqMjCt_iqaZP6Ag0scVgq6y3arOV3DH_56AMCMgx+Uyg@mail.gmail.com>
Message-ID: <3E84E13F-A708-4FD8-954F-E3F86D474B22@gmail.com>

Yay! That solved it. Thanks. I wasn't aware that I needed to specify this third dependency. For some reason, I didn't need when this last time I was working with ND2 files. Just the 1st two dependencies at least appeared to suffice... maybe something else I was doing at the time brought it in without my knowledge.

For documentation's sake for others, this appears to work. Thanks!!!

		<dependency>
			<groupId>io.scif</groupId>
			<artifactId>scifio</artifactId>
		</dependency>
		<dependency>
			<groupId>io.scif</groupId>
			<artifactId>scifio-bf-compat</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
 			<groupId>ome</groupId>
 			<artifactId>formats-gpl</artifactId>
		</dependency>

Best,

Jay

> On Mar 4, 2015, at 8:45 AM, Mark Hiner <hiner at wisc.edu> wrote:
> 
> Hi Jay,
> 
> >In confirmation of this, when I look in that package within the formats-api-5.0.7.jar artifact, none of these readers exist.
> 
> Proprietary readers are in the formats-gpl component[1]. formats-api just provides base interfaces. For downloads I would recommend looking at the OME downloads pages[2] or, of course, using Maven to pull in the formats-gpl dependency. Note that scifio-bf-compat does not pull in formats-gpl itself - it just provides the framework for adapting Bio-Foramts classes.
> 
> Best,
> Mark
> 
> [1] https://github.com/openmicroscopy/bioformats/tree/develop/components/formats-gpl <https://github.com/openmicroscopy/bioformats/tree/develop/components/formats-gpl>
> [2] http://downloads.openmicroscopy.org/bio-formats/5.0.7/ <http://downloads.openmicroscopy.org/bio-formats/5.0.7/>
> 
> On Tue, Mar 3, 2015 at 3:54 PM, Jay Warrick <jay.w.warrick at gmail.com <mailto:jay.w.warrick at gmail.com>> wrote:
> Hi Curtis,
> 
> Super helpful feedback. Thanks for the tips on leveraging the newest OME stuff.
> 
> Re: Problem 1 - Did some debugging. As you already know, the scifio-bf-compat dependency is pulling in the formats-api-5.0.7.jar artifact which contains some crucial classes for all this. Critical to matching a file with an appropriate reader is the loci.formats.ImageReader class which has a static method (getDefaultReaderClasses()) that should populate a cache of readers based on the readers.txt file (short example snippet in listing #1). As you can see from the snippet, the readers are expected to be contained within the loci.formats.in <http://loci.formats.in/> package. During population of this cache, each attempt to load a class listed in the file is met with a ClassNotFoundException. In confirmation of this, when I look in that package within the formats-api-5.0.7.jar artifact, none of these readers exist. Thus, the cache of readers does not get populated and Scifio is not able to match my file with any reader. Seems like this is the issue, right? However, it would seem like this would affect almost ANY proprietary format, which tells me I am likely doing something weird if this hasn't come up yet in feedback from others. 
> 
> Suggestions? I re-downloaded the artifact directly from maven.imagej.net <http://maven.imagej.net/> again to check. I change the extension to zip and looked in the corresponding folder and did not find any of the readers I would expect.
> 
> %%%%%%%%%%%%%%
> Listin #1  - short snippet of readers.txt file.
> %%%%%%%%%%%%%%
> 
> # standalone readers with unique file extensions
> loci.formats.in.PGMReader             # pgm
> loci.formats.in.FitsReader            # fits
> loci.formats.in.PCXReader             # pcx
> 
> 
>> On Mar 3, 2015, at 11:28 AM, Curtis Rueden <ctrueden at wisc.edu <mailto:ctrueden at wisc.edu>> wrote:
>> 
>> Hi Jay,
>> 
>> > I thought it used to be automatic upon adding the scifio and
>> > scifio-bf-compat dependencies.
>> 
>> Yeah, that's correct.
>> 
>> > A "limited" list of 30 formats show up in the DefaultFormatService
>> > currently and don't include ND2.
>> 
>> The format that supports ND2 (and all Bio-Formats formats) is the "Bio-Formats Compatibility Format" at the front of your list.
>> 
>> You'll need to debug into the code to find out why the BioFormatsFormat is not being selected properly for your ND2 file.
>> 
>> > It looks like the parent pom of scifio-bf-compat (pom-scijava)
>> > specifies <bio-formats.version>5.0.7</bio-formats.version>.
>> > Is it likely to be "risky" to leverage the most recent changes
>> > for ND2 compatibility?
>> 
>> Yes, it will not work. The scifio-bf-compat component has not yet been updated to use the Bio-Formats 5.1.x codebase.
>> 
>> The good news is: updating it to use the OME 5.1 API was easy. I pushed a branch:
>> 
>> https://github.com/scifio/scifio-bf-compat/compare/ome-5.1 <https://github.com/scifio/scifio-bf-compat/compare/ome-5.1>
>> 
>> You can use it during development by:
>> 
>> * Cloning scifio-bf-compat.
>> * Switching to the ome-5.1 branch.
>> * Importing scifio-bf-compat into your Eclipse.
>> * Setting your project's bio-formats.version property to 5.1.0-SNAPSHOT.
>> * Setting your project's scifio-bf-compat.version property to 1.11.1-SNAPSHOT.
>> 
>> And then Eclipse should switch to a project coupling for scifio-bf-compat and use the branch.
>> 
>> But you'll want to stay on a corresponding branch of your own project development until the OME 5.1.0 release.
>> 
>> Regards,
>> Curtis
>> 
>> On Tue, Mar 3, 2015 at 10:42 AM, Jay Warrick <jay.w.warrick at gmail.com <mailto:jay.w.warrick at gmail.com>> wrote:
>> Hi All,
>> 
>> I have 2 problems you all hopefully have suggestions for... (thanks in advance)
>> 
>> Problem 1:
>> 
>> I'm interested in opening ND2 file format programmatically in Java via a SCIFIO object used with an ImageJ context but can't seem to get it to work. (see listing A) Error message indicates format not found.
>> 
>> Hopefully relevant details of what I am currently doing with maven imports are below. (see listing B)
>> 
>> Suggestions? Is there a BioFormats dependency I am not bringing in that is necessary to expose/discover all the additional proprietary formats or do I have to add the proprietary formats myself using a combination of a bioformats artifact I'm not aware of and adding each format using the mechanism provided by scifio-bf-compat? I thought it used to be automatic upon adding the scifio and scifio-bf-compat dependencies. Any help is appreciated. I looked in scifio tutorials but couldn't figure it out. Sorry.
>> 
>> Problem 2:
>> 
>> After resolution of problem 1, I'd like to leverage recent changes to the bioformats package that addresses a bug in ND2 metadata handling that was affecting me (https://trac.openmicroscopy.org.uk/ome/ticket/12548 <https://trac.openmicroscopy.org.uk/ome/ticket/12548>). The link suggests using bioformats 5.1.x vs 5.0.x which also requires use a few other updated jars (as noted near end of ticket). Suggestions on the best way to do this given my use case? It looks like the parent pom of scifio-bf-compat (pom-scijava) specifies <bio-formats.version>5.0.7</bio-formats.version>. Is it likely to be "risky" to leverage the most recent changes for ND2 compatibility?
>> 
>> Thanks,
>> 
>> Jay
>> 
>> %%%%%%%%%%%%%
>> Listing A
>> %%%%%%%%%%%%%
>> 
>> final SCIFIO scifio = new SCIFIO(ij.getContext());
>> Reader reader;
>> try
>> {
>> 	reader = scifio.initializer().initializeReader(nd2File, new SCIFIOConfig().checkerSetOpen(true));
>> }
>> catch (Exception e)
>> {
>> 	e.printStackTrace();
>> 	return false;
>> }
>> 
>> 
>> %%%%%%%%%%%%%
>> Listing B
>> %%%%%%%%%%%%%
>> 
>> My project parent pom is 
>> 
>> 	<parent>
>> 		<groupId>net.imagej</groupId>
>> 		<artifactId>pom-imagej</artifactId>
>> 		<version>5.12.0</version>
>> 	</parent>
>> 
>>  I have the following maven dependencies
>> 
>> 		<dependency>
>> 			<groupId>io.scif</groupId>
>> 			<artifactId>scifio</artifactId>
>> 		</dependency>
>> 		<dependency>
>> 			<groupId>io.scif</groupId>
>> 			<artifactId>scifio-bf-compat</artifactId>
>> 			<scope>runtime</scope>
>> 		</dependency>
>> 
>> A "limited" list of 30 formats show up in the DefaultFormatService currently and don't include ND2. (see Listing C)
>> 
>> 
>> %%%%%%%%%%%%%
>> Listing C
>> %%%%%%%%%%%%%
>> 
>> (*) Formats in DefaultFormatService
>> 
>> ImageJ ij = new ImageJ();
>> Set<Format> formats = ij.scifio().format().getAllFormats();
>> 
>> returns
>> 
>> [Bio-Formats Compatibility Format, Animated PNG, Audio Video Interleave, Windows Bitmap, DICOM, Encapsulated PostScript, Flexible Image Transport System, Simulated data, Graphics Interchange Format, Image Cytometry Standard, JPEG-2000, JPEG, Java source code, Multiple Network Graphics, Micro-Manager, NRRD, OBF, PCX, Portable Gray Map, Text, Zip, QuickTime, PICT, plugin:class io.scif.ome.formats.OMEXMLFormat, Tile JPEG, QuickTime, plugin:class io.scif.ome.formats.OMETIFFFormat, Tagged Image File Format, Minimal TIFF, Tagged Image File Format]
>> 
>> 
>> 
>> _______________________________________________
>> ImageJ-devel mailing list
>> ImageJ-devel at imagej.net <mailto:ImageJ-devel at imagej.net>
>> http://imagej.net/mailman/listinfo/imagej-devel <http://imagej.net/mailman/listinfo/imagej-devel>
>> 
>> 
> 
> 
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net <mailto:ImageJ-devel at imagej.net>
> http://imagej.net/mailman/listinfo/imagej-devel <http://imagej.net/mailman/listinfo/imagej-devel>
> 
> 
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150304/4b7f25aa/attachment-0001.html>

From hiner at wisc.edu  Wed Mar  4 12:25:29 2015
From: hiner at wisc.edu (Mark Hiner)
Date: Wed, 4 Mar 2015 12:25:29 -0600
Subject: [ImageJ-devel] Scifio question - how to use (recently updated)
 bioformats proprietary formats (programmatically)
In-Reply-To: <3E84E13F-A708-4FD8-954F-E3F86D474B22@gmail.com>
References: <B8F667E0-F684-42FF-ADA8-4D3E063CCEA4@gmail.com>
	<CADN69ykuapN6sLdcop6F6Kw=F=OGuj+FN5DSMAbiLQvFmrJyGw@mail.gmail.com>
	<7C4B2278-0C3A-4428-B91F-219ECCDCE0DD@gmail.com>
	<CA+B=mGqqMjCt_iqaZP6Ag0scVgq6y3arOV3DH_56AMCMgx+Uyg@mail.gmail.com>
	<3E84E13F-A708-4FD8-954F-E3F86D474B22@gmail.com>
Message-ID: <CA+B=mGpA++SMcQcaTOHHfaGqPoJ6PkDXBRD_eQRqNGvPpWJakQ@mail.gmail.com>

Hi Jay,

> For some reason, I didn't need when this last time I was working with ND2
files.

There used to be a runtime formats-gpl dependency, which was removed in
this (poorly documented) commit[1]. Anyone consuming scifio-bf-compat after
that point would need to specify their own formats-gpl (or other library
containing Bio-Formats reader implementations).

Best,
Mark

[1]
https://github.com/scifio/scifio-bf-compat/commit/e011263264c120f287f246676884ef8c56ca289b#diff-600376dffeb79835ede4a0b285078036

On Wed, Mar 4, 2015 at 12:02 PM, Jay Warrick <jay.w.warrick at gmail.com>
wrote:

> Yay! That solved it. Thanks. I wasn't aware that I needed to specify this
> third dependency. For some reason, I didn't need when this last time I was
> working with ND2 files. Just the 1st two dependencies at least appeared to
> suffice... maybe something else I was doing at the time brought it in
> without my knowledge.
>
> For documentation's sake for others, this appears to work. Thanks!!!
>
> <dependency>
> <groupId>io.scif</groupId>
> <artifactId>scifio</artifactId>
> </dependency>
> <dependency>
> <groupId>io.scif</groupId>
> <artifactId>scifio-bf-compat</artifactId>
> <scope>runtime</scope>
> </dependency>
> <dependency>
>   <groupId>ome</groupId>
>   <artifactId>formats-gpl</artifactId>
> </dependency>
>
> Best,
>
> Jay
>
> On Mar 4, 2015, at 8:45 AM, Mark Hiner <hiner at wisc.edu> wrote:
>
> Hi Jay,
>
> >In confirmation of this, when I look in that package within
> the formats-api-5.0.7.jar artifact, none of these readers exist.
>
> Proprietary readers are in the formats-gpl component[1]. formats-api just
> provides base interfaces. For downloads I would recommend looking at the
> OME downloads pages[2] or, of course, using Maven to pull in the
> formats-gpl dependency. Note that scifio-bf-compat does not pull in
> formats-gpl itself - it just provides the framework for adapting
> Bio-Foramts classes.
>
> Best,
> Mark
>
> [1]
> https://github.com/openmicroscopy/bioformats/tree/develop/components/formats-gpl
> [2] http://downloads.openmicroscopy.org/bio-formats/5.0.7/
>
> On Tue, Mar 3, 2015 at 3:54 PM, Jay Warrick <jay.w.warrick at gmail.com>
> wrote:
>
>> Hi Curtis,
>>
>> Super helpful feedback. Thanks for the tips on leveraging the newest OME
>> stuff.
>>
>> Re: Problem 1 - Did some debugging. As you already know, the
>> scifio-bf-compat dependency is pulling in the formats-api-5.0.7.jar
>> artifact which contains some crucial classes for all this. Critical to
>> matching a file with an appropriate reader is the loci.formats.ImageReader
>> class which has a static method (getDefaultReaderClasses()) that should
>> populate a cache of readers based on the readers.txt file (short example
>> snippet in listing #1). As you can see from the snippet, the readers are
>> expected to be contained within the loci.formats.in package. During
>> population of this cache, each attempt to load a class listed in the file
>> is met with a ClassNotFoundException. In confirmation of this, when I look
>> in that package within the formats-api-5.0.7.jar artifact, none of these
>> readers exist. Thus, the cache of readers does not get populated and Scifio
>> is not able to match my file with any reader. Seems like this is the issue,
>> right? However, it would seem like this would affect almost ANY proprietary
>> format, which tells me I am likely doing something weird if this hasn't
>> come up yet in feedback from others.
>>
>> Suggestions? I re-downloaded the artifact directly from maven.imagej.net again
>> to check. I change the extension to zip and looked in the corresponding
>> folder and did not find any of the readers I would expect.
>>
>> %%%%%%%%%%%%%%
>> Listin #1  - short snippet of readers.txt file.
>> %%%%%%%%%%%%%%
>>
>> # standalone readers with unique file extensions
>> loci.formats.in.PGMReader             # pgm
>> loci.formats.in.FitsReader            # fits
>> loci.formats.in.PCXReader             # pcx
>>
>>
>> On Mar 3, 2015, at 11:28 AM, Curtis Rueden <ctrueden at wisc.edu> wrote:
>>
>> Hi Jay,
>>
>> > I thought it used to be automatic upon adding the scifio and
>> > scifio-bf-compat dependencies.
>>
>> Yeah, that's correct.
>>
>> > A "limited" list of 30 formats show up in the DefaultFormatService
>> > currently and don't include ND2.
>>
>> The format that supports ND2 (and all Bio-Formats formats) is the
>> "Bio-Formats Compatibility Format" at the front of your list.
>>
>> You'll need to debug into the code to find out why the BioFormatsFormat
>> is not being selected properly for your ND2 file.
>>
>> > It looks like the parent pom of scifio-bf-compat (pom-scijava)
>> > specifies <bio-formats.version>5.0.7</bio-formats.version>.
>> > Is it likely to be "risky" to leverage the most recent changes
>> > for ND2 compatibility?
>>
>> Yes, it will not work. The scifio-bf-compat component has not yet been
>> updated to use the Bio-Formats 5.1.x codebase.
>>
>> The good news is: updating it to use the OME 5.1 API was easy. I pushed a
>> branch:
>>
>> https://github.com/scifio/scifio-bf-compat/compare/ome-5.1
>>
>> You can use it during development by:
>>
>> * Cloning scifio-bf-compat.
>> * Switching to the ome-5.1 branch.
>> * Importing scifio-bf-compat into your Eclipse.
>> * Setting your project's bio-formats.version property to 5.1.0-SNAPSHOT.
>> * Setting your project's scifio-bf-compat.version property to
>> 1.11.1-SNAPSHOT.
>>
>> And then Eclipse should switch to a project coupling for scifio-bf-compat
>> and use the branch.
>>
>> But you'll want to stay on a corresponding branch of your own project
>> development until the OME 5.1.0 release.
>>
>> Regards,
>> Curtis
>>
>> On Tue, Mar 3, 2015 at 10:42 AM, Jay Warrick <jay.w.warrick at gmail.com>
>> wrote:
>>
>>> Hi All,
>>>
>>> I have 2 problems you all hopefully have suggestions for... (thanks in
>>> advance)
>>>
>>> *Problem 1:*
>>>
>>> I'm interested in opening ND2 file format programmatically in Java via a
>>> SCIFIO object used with an ImageJ context but can't seem to get it to work.
>>> (see listing A) Error message indicates format not found.
>>>
>>> Hopefully relevant details of what I am currently doing with maven
>>> imports are below. (see listing B)
>>>
>>> Suggestions? Is there a BioFormats dependency I am not bringing in that
>>> is necessary to expose/discover all the additional proprietary formats or
>>> do I have to add the proprietary formats myself using a combination of a
>>> bioformats artifact I'm not aware of and adding each format using the
>>> mechanism provided by scifio-bf-compat? I thought it used to be automatic
>>> upon adding the scifio and scifio-bf-compat dependencies. Any help is
>>> appreciated. I looked in scifio tutorials but couldn't figure it out. Sorry.
>>>
>>> *Problem 2:*
>>>
>>> After resolution of problem 1, I'd like to leverage recent changes to
>>> the bioformats package that addresses a bug in ND2 metadata handling that
>>> was affecting me (https://trac.openmicroscopy.org.uk/ome/ticket/12548).
>>> The link suggests using bioformats 5.1.x vs 5.0.x which also requires use a
>>> few other updated jars (as noted near end of ticket). Suggestions on the
>>> best way to do this given my use case? It looks like the parent pom of
>>> scifio-bf-compat (pom-scijava)
>>> specifies <bio-formats.version>5.0.7</bio-formats.version>. Is it likely to
>>> be "risky" to leverage the most recent changes for ND2 compatibility?
>>>
>>> Thanks,
>>>
>>> Jay
>>>
>>> %%%%%%%%%%%%%
>>> Listing A
>>> %%%%%%%%%%%%%
>>>
>>> final SCIFIO scifio = new SCIFIO(ij.getContext());
>>> Reader reader;
>>> try
>>> {
>>> reader = scifio.initializer().initializeReader(nd2File, new
>>>  SCIFIOConfig().checkerSetOpen(true));
>>> }
>>> catch (Exception e)
>>> {
>>> e.printStackTrace();
>>> return false;
>>> }
>>>
>>>
>>> %%%%%%%%%%%%%
>>> Listing B
>>> %%%%%%%%%%%%%
>>>
>>> My project parent pom is
>>>
>>> <parent>
>>> <groupId>net.imagej</groupId>
>>> <artifactId>pom-imagej</artifactId>
>>> <version>5.12.0</version>
>>> </parent>
>>>
>>>  I have the following maven dependencies
>>>
>>> <dependency>
>>> <groupId>io.scif</groupId>
>>> <artifactId>scifio</artifactId>
>>> </dependency>
>>> <dependency>
>>> <groupId>io.scif</groupId>
>>> <artifactId>scifio-bf-compat</artifactId>
>>> <scope>runtime</scope>
>>> </dependency>
>>>
>>> A "limited" list of 30 formats show up in the DefaultFormatService
>>> currently and don't include ND2. (see Listing C)
>>>
>>>
>>> %%%%%%%%%%%%%
>>> Listing C
>>> %%%%%%%%%%%%%
>>>
>>> (*) Formats in DefaultFormatService
>>>
>>> ImageJ ij = new ImageJ();
>>> Set<Format> formats = ij.scifio().format().getAllFormats();
>>>
>>> returns
>>>
>>> [Bio-Formats Compatibility Format, Animated PNG, Audio Video Interleave,
>>> Windows Bitmap, DICOM, Encapsulated PostScript, Flexible Image Transport
>>> System, Simulated data, Graphics Interchange Format, Image Cytometry
>>> Standard, JPEG-2000, JPEG, Java source code, Multiple Network Graphics,
>>> Micro-Manager, NRRD, OBF, PCX, Portable Gray Map, Text, Zip, QuickTime,
>>> PICT, plugin:class io.scif.ome.formats.OMEXMLFormat, Tile JPEG, QuickTime,
>>> plugin:class io.scif.ome.formats.OMETIFFFormat, Tagged Image File Format,
>>> Minimal TIFF, Tagged Image File Format]
>>>
>>>
>>>
>>> _______________________________________________
>>> ImageJ-devel mailing list
>>> ImageJ-devel at imagej.net
>>> http://imagej.net/mailman/listinfo/imagej-devel
>>>
>>>
>>
>>
>> _______________________________________________
>> ImageJ-devel mailing list
>> ImageJ-devel at imagej.net
>> http://imagej.net/mailman/listinfo/imagej-devel
>>
>>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150304/d1646c9f/attachment-0001.html>

From jay.w.warrick at gmail.com  Wed Mar  4 13:07:35 2015
From: jay.w.warrick at gmail.com (Jay Warrick)
Date: Wed, 4 Mar 2015 13:07:35 -0600
Subject: [ImageJ-devel] Scifio question - how to use (recently updated)
	bioformats proprietary formats (programmatically)
In-Reply-To: <CA+B=mGpA++SMcQcaTOHHfaGqPoJ6PkDXBRD_eQRqNGvPpWJakQ@mail.gmail.com>
References: <B8F667E0-F684-42FF-ADA8-4D3E063CCEA4@gmail.com>
	<CADN69ykuapN6sLdcop6F6Kw=F=OGuj+FN5DSMAbiLQvFmrJyGw@mail.gmail.com>
	<7C4B2278-0C3A-4428-B91F-219ECCDCE0DD@gmail.com>
	<CA+B=mGqqMjCt_iqaZP6Ag0scVgq6y3arOV3DH_56AMCMgx+Uyg@mail.gmail.com>
	<3E84E13F-A708-4FD8-954F-E3F86D474B22@gmail.com>
	<CA+B=mGpA++SMcQcaTOHHfaGqPoJ6PkDXBRD_eQRqNGvPpWJakQ@mail.gmail.com>
Message-ID: <44235D03-C20D-4A0E-9728-5A8620F98B64@gmail.com>

Thanks Mark and Curtis for the explanations and updates of the ReadMe. I think this is a more explicit and flexible approach. 

Cheers,

Jay

> On Mar 4, 2015, at 12:25 PM, Mark Hiner <hiner at wisc.edu> wrote:
> 
> Hi Jay,
> 
> > For some reason, I didn't need when this last time I was working with ND2 files.
> 
> There used to be a runtime formats-gpl dependency, which was removed in this (poorly documented) commit[1]. Anyone consuming scifio-bf-compat after that point would need to specify their own formats-gpl (or other library containing Bio-Formats reader implementations).
> 
> Best,
> Mark
> 
> [1] https://github.com/scifio/scifio-bf-compat/commit/e011263264c120f287f246676884ef8c56ca289b#diff-600376dffeb79835ede4a0b285078036 <https://github.com/scifio/scifio-bf-compat/commit/e011263264c120f287f246676884ef8c56ca289b#diff-600376dffeb79835ede4a0b285078036>
> 
> On Wed, Mar 4, 2015 at 12:02 PM, Jay Warrick <jay.w.warrick at gmail.com <mailto:jay.w.warrick at gmail.com>> wrote:
> Yay! That solved it. Thanks. I wasn't aware that I needed to specify this third dependency. For some reason, I didn't need when this last time I was working with ND2 files. Just the 1st two dependencies at least appeared to suffice... maybe something else I was doing at the time brought it in without my knowledge.
> 
> For documentation's sake for others, this appears to work. Thanks!!!
> 
> 		<dependency>
> 			<groupId>io.scif</groupId>
> 			<artifactId>scifio</artifactId>
> 		</dependency>
> 		<dependency>
> 			<groupId>io.scif</groupId>
> 			<artifactId>scifio-bf-compat</artifactId>
> 			<scope>runtime</scope>
> 		</dependency>
> 		<dependency>
>  			<groupId>ome</groupId>
>  			<artifactId>formats-gpl</artifactId>
> 		</dependency>
> 
> Best,
> 
> Jay
> 
>> On Mar 4, 2015, at 8:45 AM, Mark Hiner <hiner at wisc.edu <mailto:hiner at wisc.edu>> wrote:
>> 
>> Hi Jay,
>> 
>> >In confirmation of this, when I look in that package within the formats-api-5.0.7.jar artifact, none of these readers exist.
>> 
>> Proprietary readers are in the formats-gpl component[1]. formats-api just provides base interfaces. For downloads I would recommend looking at the OME downloads pages[2] or, of course, using Maven to pull in the formats-gpl dependency. Note that scifio-bf-compat does not pull in formats-gpl itself - it just provides the framework for adapting Bio-Foramts classes.
>> 
>> Best,
>> Mark
>> 
>> [1] https://github.com/openmicroscopy/bioformats/tree/develop/components/formats-gpl <https://github.com/openmicroscopy/bioformats/tree/develop/components/formats-gpl>
>> [2] http://downloads.openmicroscopy.org/bio-formats/5.0.7/ <http://downloads.openmicroscopy.org/bio-formats/5.0.7/>
>> 
>> On Tue, Mar 3, 2015 at 3:54 PM, Jay Warrick <jay.w.warrick at gmail.com <mailto:jay.w.warrick at gmail.com>> wrote:
>> Hi Curtis,
>> 
>> Super helpful feedback. Thanks for the tips on leveraging the newest OME stuff.
>> 
>> Re: Problem 1 - Did some debugging. As you already know, the scifio-bf-compat dependency is pulling in the formats-api-5.0.7.jar artifact which contains some crucial classes for all this. Critical to matching a file with an appropriate reader is the loci.formats.ImageReader class which has a static method (getDefaultReaderClasses()) that should populate a cache of readers based on the readers.txt file (short example snippet in listing #1). As you can see from the snippet, the readers are expected to be contained within the loci.formats.in <http://loci.formats.in/> package. During population of this cache, each attempt to load a class listed in the file is met with a ClassNotFoundException. In confirmation of this, when I look in that package within the formats-api-5.0.7.jar artifact, none of these readers exist. Thus, the cache of readers does not get populated and Scifio is not able to match my file with any reader. Seems like this is the issue, right? However, it would seem like this would affect almost ANY proprietary format, which tells me I am likely doing something weird if this hasn't come up yet in feedback from others. 
>> 
>> Suggestions? I re-downloaded the artifact directly from maven.imagej.net <http://maven.imagej.net/> again to check. I change the extension to zip and looked in the corresponding folder and did not find any of the readers I would expect.
>> 
>> %%%%%%%%%%%%%%
>> Listin #1  - short snippet of readers.txt file.
>> %%%%%%%%%%%%%%
>> 
>> # standalone readers with unique file extensions
>> loci.formats.in.PGMReader             # pgm
>> loci.formats.in.FitsReader            # fits
>> loci.formats.in.PCXReader             # pcx
>> 
>> 
>>> On Mar 3, 2015, at 11:28 AM, Curtis Rueden <ctrueden at wisc.edu <mailto:ctrueden at wisc.edu>> wrote:
>>> 
>>> Hi Jay,
>>> 
>>> > I thought it used to be automatic upon adding the scifio and
>>> > scifio-bf-compat dependencies.
>>> 
>>> Yeah, that's correct.
>>> 
>>> > A "limited" list of 30 formats show up in the DefaultFormatService
>>> > currently and don't include ND2.
>>> 
>>> The format that supports ND2 (and all Bio-Formats formats) is the "Bio-Formats Compatibility Format" at the front of your list.
>>> 
>>> You'll need to debug into the code to find out why the BioFormatsFormat is not being selected properly for your ND2 file.
>>> 
>>> > It looks like the parent pom of scifio-bf-compat (pom-scijava)
>>> > specifies <bio-formats.version>5.0.7</bio-formats.version>.
>>> > Is it likely to be "risky" to leverage the most recent changes
>>> > for ND2 compatibility?
>>> 
>>> Yes, it will not work. The scifio-bf-compat component has not yet been updated to use the Bio-Formats 5.1.x codebase.
>>> 
>>> The good news is: updating it to use the OME 5.1 API was easy. I pushed a branch:
>>> 
>>> https://github.com/scifio/scifio-bf-compat/compare/ome-5.1 <https://github.com/scifio/scifio-bf-compat/compare/ome-5.1>
>>> 
>>> You can use it during development by:
>>> 
>>> * Cloning scifio-bf-compat.
>>> * Switching to the ome-5.1 branch.
>>> * Importing scifio-bf-compat into your Eclipse.
>>> * Setting your project's bio-formats.version property to 5.1.0-SNAPSHOT.
>>> * Setting your project's scifio-bf-compat.version property to 1.11.1-SNAPSHOT.
>>> 
>>> And then Eclipse should switch to a project coupling for scifio-bf-compat and use the branch.
>>> 
>>> But you'll want to stay on a corresponding branch of your own project development until the OME 5.1.0 release.
>>> 
>>> Regards,
>>> Curtis
>>> 
>>> On Tue, Mar 3, 2015 at 10:42 AM, Jay Warrick <jay.w.warrick at gmail.com <mailto:jay.w.warrick at gmail.com>> wrote:
>>> Hi All,
>>> 
>>> I have 2 problems you all hopefully have suggestions for... (thanks in advance)
>>> 
>>> Problem 1:
>>> 
>>> I'm interested in opening ND2 file format programmatically in Java via a SCIFIO object used with an ImageJ context but can't seem to get it to work. (see listing A) Error message indicates format not found.
>>> 
>>> Hopefully relevant details of what I am currently doing with maven imports are below. (see listing B)
>>> 
>>> Suggestions? Is there a BioFormats dependency I am not bringing in that is necessary to expose/discover all the additional proprietary formats or do I have to add the proprietary formats myself using a combination of a bioformats artifact I'm not aware of and adding each format using the mechanism provided by scifio-bf-compat? I thought it used to be automatic upon adding the scifio and scifio-bf-compat dependencies. Any help is appreciated. I looked in scifio tutorials but couldn't figure it out. Sorry.
>>> 
>>> Problem 2:
>>> 
>>> After resolution of problem 1, I'd like to leverage recent changes to the bioformats package that addresses a bug in ND2 metadata handling that was affecting me (https://trac.openmicroscopy.org.uk/ome/ticket/12548 <https://trac.openmicroscopy.org.uk/ome/ticket/12548>). The link suggests using bioformats 5.1.x vs 5.0.x which also requires use a few other updated jars (as noted near end of ticket). Suggestions on the best way to do this given my use case? It looks like the parent pom of scifio-bf-compat (pom-scijava) specifies <bio-formats.version>5.0.7</bio-formats.version>. Is it likely to be "risky" to leverage the most recent changes for ND2 compatibility?
>>> 
>>> Thanks,
>>> 
>>> Jay
>>> 
>>> %%%%%%%%%%%%%
>>> Listing A
>>> %%%%%%%%%%%%%
>>> 
>>> final SCIFIO scifio = new SCIFIO(ij.getContext());
>>> Reader reader;
>>> try
>>> {
>>> 	reader = scifio.initializer().initializeReader(nd2File, new SCIFIOConfig().checkerSetOpen(true));
>>> }
>>> catch (Exception e)
>>> {
>>> 	e.printStackTrace();
>>> 	return false;
>>> }
>>> 
>>> 
>>> %%%%%%%%%%%%%
>>> Listing B
>>> %%%%%%%%%%%%%
>>> 
>>> My project parent pom is 
>>> 
>>> 	<parent>
>>> 		<groupId>net.imagej</groupId>
>>> 		<artifactId>pom-imagej</artifactId>
>>> 		<version>5.12.0</version>
>>> 	</parent>
>>> 
>>>  I have the following maven dependencies
>>> 
>>> 		<dependency>
>>> 			<groupId>io.scif</groupId>
>>> 			<artifactId>scifio</artifactId>
>>> 		</dependency>
>>> 		<dependency>
>>> 			<groupId>io.scif</groupId>
>>> 			<artifactId>scifio-bf-compat</artifactId>
>>> 			<scope>runtime</scope>
>>> 		</dependency>
>>> 
>>> A "limited" list of 30 formats show up in the DefaultFormatService currently and don't include ND2. (see Listing C)
>>> 
>>> 
>>> %%%%%%%%%%%%%
>>> Listing C
>>> %%%%%%%%%%%%%
>>> 
>>> (*) Formats in DefaultFormatService
>>> 
>>> ImageJ ij = new ImageJ();
>>> Set<Format> formats = ij.scifio().format().getAllFormats();
>>> 
>>> returns
>>> 
>>> [Bio-Formats Compatibility Format, Animated PNG, Audio Video Interleave, Windows Bitmap, DICOM, Encapsulated PostScript, Flexible Image Transport System, Simulated data, Graphics Interchange Format, Image Cytometry Standard, JPEG-2000, JPEG, Java source code, Multiple Network Graphics, Micro-Manager, NRRD, OBF, PCX, Portable Gray Map, Text, Zip, QuickTime, PICT, plugin:class io.scif.ome.formats.OMEXMLFormat, Tile JPEG, QuickTime, plugin:class io.scif.ome.formats.OMETIFFFormat, Tagged Image File Format, Minimal TIFF, Tagged Image File Format]
>>> 
>>> 
>>> 
>>> _______________________________________________
>>> ImageJ-devel mailing list
>>> ImageJ-devel at imagej.net <mailto:ImageJ-devel at imagej.net>
>>> http://imagej.net/mailman/listinfo/imagej-devel <http://imagej.net/mailman/listinfo/imagej-devel>
>>> 
>>> 
>> 
>> 
>> _______________________________________________
>> ImageJ-devel mailing list
>> ImageJ-devel at imagej.net <mailto:ImageJ-devel at imagej.net>
>> http://imagej.net/mailman/listinfo/imagej-devel <http://imagej.net/mailman/listinfo/imagej-devel>
>> 
>> 
>> _______________________________________________
>> ImageJ-devel mailing list
>> ImageJ-devel at imagej.net <mailto:ImageJ-devel at imagej.net>
>> http://imagej.net/mailman/listinfo/imagej-devel <http://imagej.net/mailman/listinfo/imagej-devel>
> 
> 
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150304/1cfb15c2/attachment-0001.html>

From hadrien.mary at gmail.com  Thu Mar  5 12:01:42 2015
From: hadrien.mary at gmail.com (Hadrien Mary)
Date: Thu, 5 Mar 2015 19:01:42 +0100
Subject: [ImageJ-devel] Javadoc down ?
Message-ID: <CAEpSnnbn+B7X_BWGwb1GhdWpKhbe0gkc4YStcnS0xa0yfWV9NQ@mail.gmail.com>

See http://javadoc.imagej.net/Fiji/

Best

--
Hadrien Mary

Ph.D student in Biology
Tournier-Gachet Team
CNRS - LBCMCP - UMR 5088

Universit? de Toulouse - B?t. 4R3B1
118, route de Narbonne - 31062 Toulouse


From hiner at wisc.edu  Thu Mar  5 12:19:59 2015
From: hiner at wisc.edu (Mark Hiner)
Date: Thu, 5 Mar 2015 12:19:59 -0600
Subject: [ImageJ-devel] Javadoc down ?
In-Reply-To: <CAEpSnnbn+B7X_BWGwb1GhdWpKhbe0gkc4YStcnS0xa0yfWV9NQ@mail.gmail.com>
References: <CAEpSnnbn+B7X_BWGwb1GhdWpKhbe0gkc4YStcnS0xa0yfWV9NQ@mail.gmail.com>
Message-ID: <CA+B=mGrrDukqcpZpF3ofWc1D1WgR2NvF-jD8J7LFOeMVk0mJ7A@mail.gmail.com>

Thanks so much for noticing this Hadrien. Looks like our javadoc got blown
away this morning. Haven't identified what happened yet, but it's in the
process of being re-generated. http://javadoc.imagej.net/Fiji/ is back, at
least.

Best,
Mark

On Thu, Mar 5, 2015 at 12:01 PM, Hadrien Mary <hadrien.mary at gmail.com>
wrote:

> See http://javadoc.imagej.net/Fiji/
>
> Best
>
> --
> Hadrien Mary
>
> Ph.D student in Biology
> Tournier-Gachet Team
> CNRS - LBCMCP - UMR 5088
>
> Universit? de Toulouse - B?t. 4R3B1
> 118, route de Narbonne - 31062 Toulouse
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150305/e5831cc6/attachment.html>

From hiner at wisc.edu  Thu Mar  5 12:46:02 2015
From: hiner at wisc.edu (Mark Hiner)
Date: Thu, 5 Mar 2015 12:46:02 -0600
Subject: [ImageJ-devel] Javadoc down ?
In-Reply-To: <CA+B=mGrrDukqcpZpF3ofWc1D1WgR2NvF-jD8J7LFOeMVk0mJ7A@mail.gmail.com>
References: <CAEpSnnbn+B7X_BWGwb1GhdWpKhbe0gkc4YStcnS0xa0yfWV9NQ@mail.gmail.com>
	<CA+B=mGrrDukqcpZpF3ofWc1D1WgR2NvF-jD8J7LFOeMVk0mJ7A@mail.gmail.com>
Message-ID: <CA+B=mGpRHHM3xa2kzuZ_tvPDf-vu+ABFQqBjsjjUjfRY0_MVtA@mail.gmail.com>

All the Javadoc should be back up. Sorry for the inconvenience!

Thanks again,
Mark

On Thu, Mar 5, 2015 at 12:19 PM, Mark Hiner <hiner at wisc.edu> wrote:

> Thanks so much for noticing this Hadrien. Looks like our javadoc got blown
> away this morning. Haven't identified what happened yet, but it's in the
> process of being re-generated. http://javadoc.imagej.net/Fiji/ is back,
> at least.
>
> Best,
> Mark
>
> On Thu, Mar 5, 2015 at 12:01 PM, Hadrien Mary <hadrien.mary at gmail.com>
> wrote:
>
>> See http://javadoc.imagej.net/Fiji/
>>
>> Best
>>
>> --
>> Hadrien Mary
>>
>> Ph.D student in Biology
>> Tournier-Gachet Team
>> CNRS - LBCMCP - UMR 5088
>>
>> Universit? de Toulouse - B?t. 4R3B1
>> 118, route de Narbonne - 31062 Toulouse
>>
>> _______________________________________________
>> ImageJ-devel mailing list
>> ImageJ-devel at imagej.net
>> http://imagej.net/mailman/listinfo/imagej-devel
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150305/8c4e6d64/attachment.html>

From pietzsch at mpi-cbg.de  Thu Mar  5 17:02:22 2015
From: pietzsch at mpi-cbg.de (Tobias Pietzsch)
Date: Fri, 6 Mar 2015 00:02:22 +0100
Subject: [ImageJ-devel] Build failed in Jenkins: ImgLib2-Algorithm #13
In-Reply-To: <1230953436.8.1425596200363.JavaMail.jenkins@dev>
References: <1230953436.8.1425596200363.JavaMail.jenkins@dev>
Message-ID: <CB356316-18B2-4B60-84E0-4DF786FB0653@mpi-cbg.de>

Hi,

I pushed some changes to imglib2-algorithm and got Jenkins complaining. The problem happens after BUILD SUCCESS:

Archiving artifacts
Recording test results
ERROR: Publisher hudson.tasks.junit.JUnitResultArchiver aborted due to exception
java.lang.NoClassDefFoundError: jenkins/MasterToSlaveFileCallable
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClassCond(ClassLoader.java:631)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:615)
	at jenkins.util.AntClassLoader.defineClassFromData(AntClassLoader.java:1138)
	at hudson.ClassicPluginStrategy$AntClassLoader2.defineClassFromData(ClassicPluginStrategy.java:756)
	at jenkins.util.AntClassLoader.getClassFromStream(AntClassLoader.java:1309)
	at jenkins.util.AntClassLoader.findClassInComponents(AntClassLoader.java:1365)
	at jenkins.util.AntClassLoader.findClass(AntClassLoader.java:1325)
	at jenkins.util.AntClassLoader.loadClass(AntClassLoader.java:1078)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
	at hudson.tasks.junit.JUnitParser.parseResult(JUnitParser.java:90)
	at hudson.tasks.junit.JUnitResultArchiver.parse(JUnitResultArchiver.java:120)
	at hudson.tasks.junit.JUnitResultArchiver.perform(JUnitResultArchiver.java:137)
	at hudson.tasks.BuildStepCompatibilityLayer.perform(BuildStepCompatibilityLayer.java:74)
	at hudson.tasks.BuildStepMonitor$1.perform(BuildStepMonitor.java:20)
	at hudson.model.AbstractBuild$AbstractBuildExecution.perform(AbstractBuild.java:770)
	at hudson.model.AbstractBuild$AbstractBuildExecution.performAllBuildSteps(AbstractBuild.java:734)
	at hudson.model.Build$BuildExecution.post2(Build.java:183)
	at hudson.model.AbstractBuild$AbstractBuildExecution.post(AbstractBuild.java:683)
	at hudson.model.Run.execute(Run.java:1770)
	at hudson.model.FreeStyleBuild.run(FreeStyleBuild.java:43)
	at hudson.model.ResourceController.execute(ResourceController.java:89)
	at hudson.model.Executor.run(Executor.java:240)
Caused by: java.lang.ClassNotFoundException: jenkins.MasterToSlaveFileCallable
	at jenkins.util.AntClassLoader.findClassInComponents(AntClassLoader.java:1375)
	at jenkins.util.AntClassLoader.findClass(AntClassLoader.java:1325)
	at jenkins.util.AntClassLoader.loadClass(AntClassLoader.java:1078)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
	... 23 more

Does anyone know what I can do about it?

thanks,
Tobias


On 05 Mar 2015, at 23:56, jenkins at imagej.net wrote:

> See <http://jenkins.imagej.net/job/ImgLib2-Algorithm/13/changes>
> 
> Changes:
> 
> [Tobias Pietzsch] new KDTree searches SplitHyperPlaneKDTree and ClipConvexPolytopeKDTree:
> 
> ------------------------------------------
> [...truncated 296 lines...]
> INFO: basic authentication scheme selected
> 936/468 B   
> Mar 5, 2015 4:56:39 PM org.apache.commons.httpclient.auth.AuthChallengeProcessor selectAuthScheme
> INFO: basic authentication scheme selected
> Mar 5, 2015 4:56:39 PM org.apache.commons.httpclient.auth.AuthChallengeProcessor selectAuthScheme
> INFO: basic authentication scheme selected
> Mar 5, 2015 4:56:39 PM org.apache.commons.httpclient.auth.AuthChallengeProcessor selectAuthScheme
> INFO: basic authentication scheme selected
> Mar 5, 2015 4:56:39 PM org.apache.commons.httpclient.auth.AuthChallengeProcessor selectAuthScheme
> INFO: basic authentication scheme selected
> 
> Uploaded: http://maven.imagej.net/content/repositories/snapshots/net/imglib2/imglib2-algorithm/maven-metadata.xml (936 B at 12.2 KB/sec)
> Uploading: dav:http://maven.imagej.net/content/repositories/snapshots/net/imglib2/imglib2-algorithm/0.2.1-SNAPSHOT/imglib2-algorithm-0.2.1-20150305.225639-6-sources.jar
> Mar 5, 2015 4:56:39 PM org.apache.commons.httpclient.auth.AuthChallengeProcessor selectAuthScheme
> INFO: basic authentication scheme selected
> 4/242 KB    
> 8/242 KB   
> 12/242 KB   
> 16/242 KB   
> 20/242 KB   
> 24/242 KB   
> 28/242 KB   
> 32/242 KB   
> 36/242 KB   
> 40/242 KB   
> 44/242 KB   
> 48/242 KB   
> 52/242 KB   
> 56/242 KB   
> 60/242 KB   
> 64/242 KB   
> 68/242 KB   
> 72/242 KB   
> 76/242 KB   
> 80/242 KB   
> 84/242 KB   
> 88/242 KB   
> 92/242 KB   
> 96/242 KB   
> 100/242 KB   
> 104/242 KB   
> 108/242 KB   
> 112/242 KB   
> 116/242 KB   
> 120/242 KB   
> 124/242 KB   
> 128/242 KB   
> 132/242 KB   
> 136/242 KB   
> 140/242 KB   
> 144/242 KB   
> 148/242 KB   
> 152/242 KB   
> 156/242 KB   
> 160/242 KB   
> 164/242 KB   
> 168/242 KB   
> 172/242 KB   
> 176/242 KB   
> 180/242 KB   
> 184/242 KB   
> 188/242 KB   
> 192/242 KB   
> 196/242 KB   
> 200/242 KB   
> 204/242 KB   
> 208/242 KB   
> 212/242 KB   
> 216/242 KB   
> 220/242 KB   
> 224/242 KB   
> 228/242 KB   
> 232/242 KB   
> 236/242 KB   
> 240/242 KB   
> 242/242 KB   
> Mar 5, 2015 4:56:39 PM org.apache.commons.httpclient.auth.AuthChallengeProcessor selectAuthScheme
> INFO: basic authentication scheme selected
> 246/242 KB   
> 250/242 KB   
> 254/242 KB   
> 258/242 KB   
> 262/242 KB   
> 266/242 KB   
> 270/242 KB   
> 274/242 KB   
> 278/242 KB   
> 282/242 KB   
> 286/242 KB   
> 290/242 KB   
> 294/242 KB   
> 298/242 KB   
> 302/242 KB   
> 306/242 KB   
> 310/242 KB   
> 314/242 KB   
> 318/242 KB   
> 322/242 KB   
> 326/242 KB   
> 330/242 KB   
> 334/242 KB   
> 338/242 KB   
> 342/242 KB   
> 346/242 KB   
> 350/242 KB   
> 354/242 KB   
> 358/242 KB   
> 362/242 KB   
> 366/242 KB   
> 370/242 KB   
> 374/242 KB   
> 378/242 KB   
> 382/242 KB   
> 386/242 KB   
> 390/242 KB   
> 394/242 KB   
> 398/242 KB   
> 402/242 KB   
> 406/242 KB   
> 410/242 KB   
> 414/242 KB   
> 418/242 KB   
> 422/242 KB   
> 426/242 KB   
> 430/242 KB   
> 434/242 KB   
> 438/242 KB   
> 442/242 KB   
> 446/242 KB   
> 450/242 KB   
> 454/242 KB   
> 458/242 KB   
> 462/242 KB   
> 466/242 KB   
> 470/242 KB   
> 474/242 KB   
> 478/242 KB   
> 482/242 KB   
> 483/242 KB   
> Mar 5, 2015 4:56:39 PM org.apache.commons.httpclient.auth.AuthChallengeProcessor selectAuthScheme
> INFO: basic authentication scheme selected
> Mar 5, 2015 4:56:39 PM org.apache.commons.httpclient.auth.AuthChallengeProcessor selectAuthScheme
> INFO: basic authentication scheme selected
> Mar 5, 2015 4:56:39 PM org.apache.commons.httpclient.auth.AuthChallengeProcessor selectAuthScheme
> INFO: basic authentication scheme selected
> Mar 5, 2015 4:56:39 PM org.apache.commons.httpclient.auth.AuthChallengeProcessor selectAuthScheme
> INFO: basic authentication scheme selected
> 
> Uploaded: dav:http://maven.imagej.net/content/repositories/snapshots/net/imglib2/imglib2-algorithm/0.2.1-SNAPSHOT/imglib2-algorithm-0.2.1-20150305.225639-6-sources.jar (483 KB at 4821.2 KB/sec)
> Uploading: http://maven.imagej.net/content/repositories/snapshots/net/imglib2/imglib2-algorithm/0.2.1-SNAPSHOT/maven-metadata.xml
> Mar 5, 2015 4:56:39 PM org.apache.commons.httpclient.auth.AuthChallengeProcessor selectAuthScheme
> INFO: basic authentication scheme selected
> 2/2 KB       
> Mar 5, 2015 4:56:39 PM org.apache.commons.httpclient.auth.AuthChallengeProcessor selectAuthScheme
> INFO: basic authentication scheme selected
> 3/2 KB   
> Mar 5, 2015 4:56:39 PM org.apache.commons.httpclient.auth.AuthChallengeProcessor selectAuthScheme
> INFO: basic authentication scheme selected
> Mar 5, 2015 4:56:39 PM org.apache.commons.httpclient.auth.AuthChallengeProcessor selectAuthScheme
> INFO: basic authentication scheme selected
> Mar 5, 2015 4:56:39 PM org.apache.commons.httpclient.auth.AuthChallengeProcessor selectAuthScheme
> INFO: basic authentication scheme selected
> Mar 5, 2015 4:56:39 PM org.apache.commons.httpclient.auth.AuthChallengeProcessor selectAuthScheme
> INFO: basic authentication scheme selected
> 
> Uploaded: http://maven.imagej.net/content/repositories/snapshots/net/imglib2/imglib2-algorithm/0.2.1-SNAPSHOT/maven-metadata.xml (3 KB at 19.3 KB/sec)
> Uploading: dav:http://maven.imagej.net/content/repositories/snapshots/net/imglib2/imglib2-algorithm/0.2.1-SNAPSHOT/imglib2-algorithm-0.2.1-20150305.225639-6-tests.jar
> Mar 5, 2015 4:56:39 PM org.apache.commons.httpclient.auth.AuthChallengeProcessor selectAuthScheme
> INFO: basic authentication scheme selected
> 4/10 KB   
> 8/10 KB   
> 10/10 KB   
> Mar 5, 2015 4:56:39 PM org.apache.commons.httpclient.auth.AuthChallengeProcessor selectAuthScheme
> INFO: basic authentication scheme selected
> 14/10 KB   
> 18/10 KB   
> 20/10 KB   
> Mar 5, 2015 4:56:40 PM org.apache.commons.httpclient.auth.AuthChallengeProcessor selectAuthScheme
> INFO: basic authentication scheme selected
> Mar 5, 2015 4:56:40 PM org.apache.commons.httpclient.auth.AuthChallengeProcessor selectAuthScheme
> INFO: basic authentication scheme selected
> Mar 5, 2015 4:56:40 PM org.apache.commons.httpclient.auth.AuthChallengeProcessor selectAuthScheme
> INFO: basic authentication scheme selected
> Mar 5, 2015 4:56:40 PM org.apache.commons.httpclient.auth.AuthChallengeProcessor selectAuthScheme
> INFO: basic authentication scheme selected
> 
> Uploaded: dav:http://maven.imagej.net/content/repositories/snapshots/net/imglib2/imglib2-algorithm/0.2.1-SNAPSHOT/imglib2-algorithm-0.2.1-20150305.225639-6-tests.jar (20 KB at 212.2 KB/sec)
> Uploading: http://maven.imagej.net/content/repositories/snapshots/net/imglib2/imglib2-algorithm/0.2.1-SNAPSHOT/maven-metadata.xml
> Mar 5, 2015 4:56:40 PM org.apache.commons.httpclient.auth.AuthChallengeProcessor selectAuthScheme
> INFO: basic authentication scheme selected
> 2/2 KB     
> Mar 5, 2015 4:56:40 PM org.apache.commons.httpclient.auth.AuthChallengeProcessor selectAuthScheme
> INFO: basic authentication scheme selected
> 3/2 KB   
> Mar 5, 2015 4:56:40 PM org.apache.commons.httpclient.auth.AuthChallengeProcessor selectAuthScheme
> INFO: basic authentication scheme selected
> Mar 5, 2015 4:56:40 PM org.apache.commons.httpclient.auth.AuthChallengeProcessor selectAuthScheme
> INFO: basic authentication scheme selected
> Mar 5, 2015 4:56:40 PM org.apache.commons.httpclient.auth.AuthChallengeProcessor selectAuthScheme
> INFO: basic authentication scheme selected
> Mar 5, 2015 4:56:40 PM org.apache.commons.httpclient.auth.AuthChallengeProcessor selectAuthScheme
> INFO: basic authentication scheme selected
> 
> Uploaded: http://maven.imagej.net/content/repositories/snapshots/net/imglib2/imglib2-algorithm/0.2.1-SNAPSHOT/maven-metadata.xml (3 KB at 33.1 KB/sec)
> [INFO] ------------------------------------------------------------------------
> [INFO] BUILD SUCCESS
> [INFO] ------------------------------------------------------------------------
> [INFO] Total time: 8.202s
> [INFO] Finished at: Thu Mar 05 16:56:40 CST 2015
> [INFO] Final Memory: 20M/367M
> [INFO] ------------------------------------------------------------------------
> Archiving artifacts
> Recording test results
> ERROR: Publisher hudson.tasks.junit.JUnitResultArchiver aborted due to exception
> java.lang.NoClassDefFoundError: jenkins/MasterToSlaveFileCallable
> 	at java.lang.ClassLoader.defineClass1(Native Method)
> 	at java.lang.ClassLoader.defineClassCond(ClassLoader.java:631)
> 	at java.lang.ClassLoader.defineClass(ClassLoader.java:615)
> 	at jenkins.util.AntClassLoader.defineClassFromData(AntClassLoader.java:1138)
> 	at hudson.ClassicPluginStrategy$AntClassLoader2.defineClassFromData(ClassicPluginStrategy.java:756)
> 	at jenkins.util.AntClassLoader.getClassFromStream(AntClassLoader.java:1309)
> 	at jenkins.util.AntClassLoader.findClassInComponents(AntClassLoader.java:1365)
> 	at jenkins.util.AntClassLoader.findClass(AntClassLoader.java:1325)
> 	at jenkins.util.AntClassLoader.loadClass(AntClassLoader.java:1078)
> 	at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
> 	at hudson.tasks.junit.JUnitParser.parseResult(JUnitParser.java:90)
> 	at hudson.tasks.junit.JUnitResultArchiver.parse(JUnitResultArchiver.java:120)
> 	at hudson.tasks.junit.JUnitResultArchiver.perform(JUnitResultArchiver.java:137)
> 	at hudson.tasks.BuildStepCompatibilityLayer.perform(BuildStepCompatibilityLayer.java:74)
> 	at hudson.tasks.BuildStepMonitor$1.perform(BuildStepMonitor.java:20)
> 	at hudson.model.AbstractBuild$AbstractBuildExecution.perform(AbstractBuild.java:770)
> 	at hudson.model.AbstractBuild$AbstractBuildExecution.performAllBuildSteps(AbstractBuild.java:734)
> 	at hudson.model.Build$BuildExecution.post2(Build.java:183)
> 	at hudson.model.AbstractBuild$AbstractBuildExecution.post(AbstractBuild.java:683)
> 	at hudson.model.Run.execute(Run.java:1770)
> 	at hudson.model.FreeStyleBuild.run(FreeStyleBuild.java:43)
> 	at hudson.model.ResourceController.execute(ResourceController.java:89)
> 	at hudson.model.Executor.run(Executor.java:240)
> Caused by: java.lang.ClassNotFoundException: jenkins.MasterToSlaveFileCallable
> 	at jenkins.util.AntClassLoader.findClassInComponents(AntClassLoader.java:1375)
> 	at jenkins.util.AntClassLoader.findClass(AntClassLoader.java:1325)
> 	at jenkins.util.AntClassLoader.loadClass(AntClassLoader.java:1078)
> 	at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
> 	... 23 more
> Performance: Percentage of errors greater or equal than 0% sets the build as unstable
> Performance: Percentage of errors greater or equal than 0% sets the build as failure
> 
> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150306/214ade27/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150306/214ade27/attachment-0001.pgp>

From wagner at biomedical-imaging.de  Mon Mar  9 14:47:23 2015
From: wagner at biomedical-imaging.de (Thorsten Wagner)
Date: Mon, 09 Mar 2015 20:47:23 +0100
Subject: [ImageJ-devel] ImgLib2 and RGB Stack Images / Extending TrackMate
Message-ID: <1425930443.14263.0.camel@biomedical-imaging.de>

Dear list,

I currently want to extend TrackMate with a spot feature for RGB Stacks.
I want to calculate the hue of the center for each spot to filter the
particle by color before connecting the dots to tracks.

However, TrackMate uses ImgLib2 and I wondering how to work with RGB
Stack images. I cant find any examples how to do that.

Any help is highly appreciated!

Cheers,
Thorsten




From tinevez at pasteur.fr  Mon Mar  9 14:55:47 2015
From: tinevez at pasteur.fr (tinevez at pasteur.fr)
Date: Mon, 9 Mar 2015 19:55:47 +0000
Subject: [ImageJ-devel]
 =?utf-8?q?ImgLib2_and_RGB_Stack_Images_/_Extending?=
 =?utf-8?q?_TrackMate?=
In-Reply-To: <1425930443.14263.0.camel@biomedical-imaging.de>
References: <1425930443.14263.0.camel@biomedical-imaging.de>
Message-ID: <20150309195743.8E56A381051@mail-interne3.pasteur.fr>

Hi Thorsten, 


I think the way is to wrap your image into a ARGBType ImgLib2 images. 

But you would have to change TrackMate because right now the GUI refuses to start with a RGB image. 


Best

jy







--
Jean-Yves Tinevez
PFID - Imagopole
Institut Pasteur
25-28, rue du Docteur Roux
75724 Paris cedex 15 
France
mob: +33 7 88 17 97 69
tel: +33 1 45 68 82 18
fax: +33 1 44 38 92 54





De : Thorsten Wagner
Envoy? : ?lundi? ?9? ?mars? ?2015 ?20?:?47
? : imagej-devel at imagej.net





Dear list,

I currently want to extend TrackMate with a spot feature for RGB Stacks.
I want to calculate the hue of the center for each spot to filter the
particle by color before connecting the dots to tracks.

However, TrackMate uses ImgLib2 and I wondering how to work with RGB
Stack images. I cant find any examples how to do that.

Any help is highly appreciated!

Cheers,
Thorsten



_______________________________________________
ImageJ-devel mailing list
ImageJ-devel at imagej.net
http://imagej.net/mailman/listinfo/imagej-devel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150309/472b5334/attachment.html>

From wagner at biomedical-imaging.de  Mon Mar  9 15:25:37 2015
From: wagner at biomedical-imaging.de (Thorsten Wagner)
Date: Mon, 09 Mar 2015 21:25:37 +0100
Subject: [ImageJ-devel] ImgLib2 and RGB Stack Images / Extending
 TrackMate
In-Reply-To: <20150309195743.8E56A381051@mail-interne3.pasteur.fr>
References: <1425930443.14263.0.camel@biomedical-imaging.de>
	<20150309195743.8E56A381051@mail-interne3.pasteur.fr>
Message-ID: <1425932737.14263.3.camel@biomedical-imaging.de>

Dear Jean-Yves,

thank you for your answer. I will have look into the ARGBType of the
ImgLib2. You are right, TrackMate refuses to start with RGB images but
it does not to refuse to start with RGB-Stack images. So my thought was,
that I can simply work with RGB-Stack images instead of RGB images?

Cheers,
Thorsten 

Am Montag, den 09.03.2015, 19:55 +0000 schrieb tinevez at pasteur.fr:
> Hi Thorsten, 
> 
> 
> I think the way is to wrap your image into a ARGBType ImgLib2 images. 
> But you would have to change TrackMate because right now the GUI
> refuses to start with a RGB image. 
> 
> 
> Best
> jy
> 
> 
> 
> 
> --
> Jean-Yves Tinevez
> PFID - Imagopole
> Institut Pasteur
> 25-28, rue du Docteur Roux
> 75724 Paris cedex 15 
> France
> mob: +33 7 88 17 97 69
> tel: +33 1 45 68 82 18
> fax: +33 1 44 38 92 54
> 
> 
> De : Thorsten Wagner
> Envoy? : ?lundi? ?9? ?mars? ?2015 ?20?:?47
> ? : imagej-devel at imagej.net
> 
> 
> Dear list,
> 
> I currently want to extend TrackMate with a spot feature for RGB
> Stacks.
> I want to calculate the hue of the center for each spot to filter the
> particle by color before connecting the dots to tracks.
> 
> However, TrackMate uses ImgLib2 and I wondering how to work with RGB
> Stack images. I cant find any examples how to do that.
> 
> Any help is highly appreciated!
> 
> Cheers,
> Thorsten
> 
> 
> 
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
> 



From tinevez at pasteur.fr  Mon Mar  9 15:33:17 2015
From: tinevez at pasteur.fr (tinevez at pasteur.fr)
Date: Mon, 9 Mar 2015 20:33:17 +0000
Subject: [ImageJ-devel]
 =?utf-8?q?ImgLib2_and_RGB_Stack_Images_/_Extending?=
 =?utf-8?q?_TrackMate?=
In-Reply-To: <1425932737.14263.3.camel@biomedical-imaging.de>
References: <1425930443.14263.0.camel@biomedical-imaging.de>
	<20150309195743.8E56A381051@mail-interne3.pasteur.fr>,
	<1425932737.14263.3.camel@biomedical-imaging.de>
Message-ID: <20150309203544.F2306381051@mail-interne3.pasteur.fr>

Ah! But yes absolutely. 

Then what you need is the multi channel analyzer module that Benoit Lombardo did in the MPI-CBG.

It will measure spot features in all the channels you provide it with.

You will find it here:

https://github.com/tinevez/TrackMate-extras






best

jy
--
Jean-Yves Tinevez
PFID - Imagopole
Institut Pasteur
25-28, rue du Docteur Roux
75724 Paris cedex 15 
France
mob: +33 7 88 17 97 69
tel: +33 1 45 68 82 18
fax: +33 1 44 38 92 54





De : wagner at biomedical-imaging.de
Envoy? : ?lundi? ?9? ?mars? ?2015 ?21?:?25
? : tinevez at pasteur.fr
Cc : imagej-devel at imagej.net





Dear Jean-Yves,

thank you for your answer. I will have look into the ARGBType of the
ImgLib2. You are right, TrackMate refuses to start with RGB images but
it does not to refuse to start with RGB-Stack images. So my thought was,
that I can simply work with RGB-Stack images instead of RGB images?

Cheers,
Thorsten 

Am Montag, den 09.03.2015, 19:55 +0000 schrieb tinevez at pasteur.fr:
> Hi Thorsten, 
> 
> 
> I think the way is to wrap your image into a ARGBType ImgLib2 images. 
> But you would have to change TrackMate because right now the GUI
> refuses to start with a RGB image. 
> 
> 
> Best
> jy
> 
> 
> 
> 
> --
> Jean-Yves Tinevez
> PFID - Imagopole
> Institut Pasteur
> 25-28, rue du Docteur Roux
> 75724 Paris cedex 15 
> France
> mob: +33 7 88 17 97 69
> tel: +33 1 45 68 82 18
> fax: +33 1 44 38 92 54
> 
> 
> De : Thorsten Wagner
> Envoy? : ?lundi? ?9? ?mars? ?2015 ?20?:?47
> ? : imagej-devel at imagej.net
> 
> 
> Dear list,
> 
> I currently want to extend TrackMate with a spot feature for RGB
> Stacks.
> I want to calculate the hue of the center for each spot to filter the
> particle by color before connecting the dots to tracks.
> 
> However, TrackMate uses ImgLib2 and I wondering how to work with RGB
> Stack images. I cant find any examples how to do that.
> 
> Any help is highly appreciated!
> 
> Cheers,
> Thorsten
> 
> 
> 
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150309/cd3b8d5d/attachment.html>

From ctrueden at wisc.edu  Wed Mar 11 15:18:54 2015
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Wed, 11 Mar 2015 15:18:54 -0500
Subject: [ImageJ-devel] Imagej-launcher build woes
In-Reply-To: <2128044.60890.1425597890235.JavaMail.webmail@bluewin.ch>
References: <2128044.60890.1425597890235.JavaMail.webmail@bluewin.ch>
Message-ID: <CADN69ykdOR3a9ogYfcWai-UDmr8sr1Z1MdMCm5OhtruBS=v2uA@mail.gmail.com>

Hi Gerold,

The launcher is the most complex component of ImageJ to build, because it
has native code and must be built on several platforms. We use the NAR
Maven plugin to do it.

>From your build log, it seems the build actually worked from NetBeans --
which is believable, since NetBeans's Maven support basically just
delegates completely to Maven to do the build.

> I would appreciate any help to resolve this issue.

So I am not sure what "issue" you are having. You want to know where the
final executable ended up?

One option is to use the "build" shell script that comes with the launcher.
It is in the base directory of the imagej-launcher directory structure. It
builds the launcher, then copies it into the base directory as both
"ImageJ" and "debug".

Regards,
Curtis


On Thu, Mar 5, 2015 at 5:24 PM, geroldr at bluewin.ch <geroldr at bluewin.ch>
wrote:

> Hello Curtis,
>
> I am a beginner with ImageJ and Netbeans, but am giving it a go...
>
> I just tried to download and build using Netbeans 8.02 with no changes
> except to the file:
> /imagej-launcher/src/main/c/ImageJ.c
>
> where I commented out the garbage collector options.
>
> The build gives me the following results:
>
> cd /home/foxel/NetBeansProjects/imagej-launcher;
> JAVA_HOME=/usr/lib/jvm/zulu-8-amd64
> /home/foxel/netbeans-8.0.2/java/maven/bin/mvn install
> Scanning for projects...
>
> ------------------------------------------------------------------------
> Building ImageJ Launcher 3.3.1-SNAPSHOT
> ------------------------------------------------------------------------
>
> --- nar-maven-plugin:3.2.0:nar-validate (default-nar-validate) @
> imagej-launcher ---
> Using AOL: amd64-Linux-gcc
>
> --- maven-enforcer-plugin:1.3.1:enforce (enforce-rules) @ imagej-launcher
> ---
> Adding ignorable dependency: null:jcodings:null
>   Adding ignore: org/jcodings/*
> Adding ignorable dependency: null:jnr-constants:null
>   Adding ignore: com/kenai/constantine/*
>   Adding ignore: jnr/constants/*
> Adding ignorable dependency: null:jnr-ffi:null
>   Adding ignore: jnr/ffi/*
> Adding ignorable dependency: null:VIB-lib:null
>   Adding ignore: javax/media/j3d/
> Adding ignorable dependency: null:j3d-core:null
>   Adding ignore: javax/media/j3d/
> Adding ignorable dependency: null:joda-time:null
>   Adding ignore: *
> Adding ignorable dependency: null:slf4j-log4j12:null
>   Adding ignore: org/slf4j/impl/*
> Adding ignorable dependency: batik:batik:null
>   Adding ignore: *
> Adding ignorable dependency: jama:jama:null
>   Adding ignore: Jama/*
> Adding ignorable dependency: com.sun:tools:null
>   Adding ignore: *
>
> --- buildnumber-maven-plugin:1.3:create (default) @ imagej-launcher ---
> Executing: /bin/sh -c cd /home/foxel/NetBeansProjects/imagej-launcher &&
> git rev-parse --verify HEAD
> Working directory: /home/foxel/NetBeansProjects/imagej-launcher
> Storing buildNumber: 3e061521a554e4786eebcb6397ee77bb69396703 at
> timestamp: 1425595836078
> Storing buildScmBranch: master
>
> --- nar-maven-plugin:3.2.0:nar-download (default-nar-download) @
> imagej-launcher ---
> Preparing Nar dependencies
> Unpacking 0 dependencies to
> /home/foxel/NetBeansProjects/imagej-launcher/target/nar
>
> --- nar-maven-plugin:3.2.0:nar-unpack (default-nar-unpack) @
> imagej-launcher ---
> Unpacking 0 dependencies to
> /home/foxel/NetBeansProjects/imagej-launcher/target/nar
>
> --- nar-maven-plugin:3.2.0:nar-gnu-configure (default-nar-gnu-configure) @
> imagej-launcher ---
>
> --- nar-maven-plugin:3.2.0:nar-system-generate
> (default-nar-system-generate) @ imagej-launcher ---
>
> --- maven-resources-plugin:2.6:resources (default-resources) @
> imagej-launcher ---
> Using 'UTF-8' encoding to copy filtered resources.
> skip non existing resourceDirectory
> /home/foxel/NetBeansProjects/imagej-launcher/src/main/resources
>
> --- nar-maven-plugin:3.2.0:nar-resources (default-nar-resources) @
> imagej-launcher ---
> Copied 0 resources
>
> --- nar-maven-plugin:3.2.0:nar-gnu-resources (default-nar-gnu-resources) @
> imagej-launcher ---
>
> --- nar-maven-plugin:3.2.0:nar-vcproj (default-nar-vcproj) @
> imagej-launcher ---
>
> --- maven-compiler-plugin:3.1:compile (default-compile) @ imagej-launcher
> ---
> Nothing to compile - all classes are up to date
>
> --- nar-maven-plugin:3.2.0:nar-javah (default-nar-javah) @ imagej-launcher
> ---
>
> --- nar-maven-plugin:3.2.0:nar-gnu-make (default-nar-gnu-make) @
> imagej-launcher ---
>
> --- nar-maven-plugin:3.2.0:nar-compile (default-nar-compile) @
> imagej-launcher ---
> Preparing Nar dependencies
> Unpacking 0 dependencies to
> /home/foxel/NetBeansProjects/imagej-launcher/target/nar
> Compiling 10 native files
> Starting dependency analysis for 10 files.
> Starting dependency analysis for 10 files.
> 10 files are up to date.
> 10 files are up to date.
> 0 files to be recompiled from dependency analysis.
> 0 files to be recompiled from dependency analysis.
> 0 total files to be compiled.
> 0 total files to be compiled.
>
> --- nar-maven-plugin:3.2.0:nar-gnu-process (default-nar-gnu-process) @
> imagej-launcher ---
>
> --- nar-maven-plugin:3.2.0:nar-process-libraries
> (default-nar-process-libraries) @ imagej-launcher ---
> [info] Running process libraries
> [info] Processing library Library: type: executable
>
> --- nar-maven-plugin:3.2.0:nar-prepare-package
> (default-nar-prepare-package-1) @ imagej-launcher ---
>
> --- maven-resources-plugin:2.6:testResources (default-testResources) @
> imagej-launcher ---
> Using 'UTF-8' encoding to copy filtered resources.
> skip non existing resourceDirectory
> /home/foxel/NetBeansProjects/imagej-launcher/src/test/resources
>
> --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @
> imagej-launcher ---
> Nothing to compile - all classes are up to date
>
> --- nar-maven-plugin:3.2.0:nar-testCompile (default-nar-testCompile) @
> imagej-launcher ---
> Preparing Nar dependencies
> Unpacking 0 dependencies to
> /home/foxel/NetBeansProjects/imagej-launcher/target/test-nar
> Unpacking 0 dependencies to
> /home/foxel/NetBeansProjects/imagej-launcher/target/test-nar
>
> --- maven-surefire-plugin:2.17:test (default-test) @ imagej-launcher ---
> Tests are skipped.
>
> --- nar-maven-plugin:3.2.0:nar-test (default-nar-test) @ imagej-launcher
> ---
> Preparing Nar dependencies
> Unpacking 0 dependencies to
> /home/foxel/NetBeansProjects/imagej-launcher/target/test-nar
>
> --- exec-maven-plugin:1.3.1:java (default) @ imagej-launcher ---
> Warning: killAfter is now deprecated. Do you need it ? Please comment on
> MEXEC-6.
> Cannot find
> '/home/foxel/NetBeansProjects/imagej-launcher/target/nar/imagej-launcher-3.3.1-SNAPSHOT-amd64-Linux-gcc-executable/bin/amd64-Linux-gcc/imagej-launcher.exe';
> not changing icon
>
> --- nar-maven-plugin:3.2.0:nar-prepare-package
> (default-nar-prepare-package) @ imagej-launcher ---
>
> --- nar-maven-plugin:3.2.0:nar-package (default-nar-package) @
> imagej-launcher ---
> Building zip:
> /home/foxel/NetBeansProjects/imagej-launcher/target/imagej-launcher-3.3.1-SNAPSHOT-noarch.nar
> Building zip:
> /home/foxel/NetBeansProjects/imagej-launcher/target/imagej-launcher-3.3.1-SNAPSHOT-amd64-Linux-gcc-executable.nar
>
> --- maven-jar-plugin:2.5:jar (default-jar) @ imagej-launcher ---
> Building jar:
> /home/foxel/NetBeansProjects/imagej-launcher/target/imagej-launcher-3.3.1-SNAPSHOT.jar
>
> --- maven-source-plugin:2.3:jar-no-fork (default) @ imagej-launcher ---
>
> --- maven-jar-plugin:2.5:test-jar (default) @ imagej-launcher ---
> Building jar:
> /home/foxel/NetBeansProjects/imagej-launcher/target/imagej-launcher-3.3.1-SNAPSHOT-tests.jar
>
> --- nar-maven-plugin:3.2.0:nar-integration-test
> (default-nar-integration-test) @ imagej-launcher ---
> Preparing Nar dependencies
> Unpacking 0 dependencies to
> /home/foxel/NetBeansProjects/imagej-launcher/target/test-nar
> Surefire report directory:
> /home/foxel/NetBeansProjects/imagej-launcher/target/surefire-reports
>
> --- maven-install-plugin:2.5.1:install (default-install) @ imagej-launcher
> ---
> Installing
> /home/foxel/NetBeansProjects/imagej-launcher/target/imagej-launcher-3.3.1-SNAPSHOT.jar
> to
> /home/foxel/.m2/repository/net/imagej/imagej-launcher/3.3.1-SNAPSHOT/imagej-launcher-3.3.1-SNAPSHOT.nar
> Installing /home/foxel/NetBeansProjects/imagej-launcher/pom.xml to
> /home/foxel/.m2/repository/net/imagej/imagej-launcher/3.3.1-SNAPSHOT/imagej-launcher-3.3.1-SNAPSHOT.pom
> Installing
> /home/foxel/NetBeansProjects/imagej-launcher/target/imagej-launcher-3.3.1-SNAPSHOT-noarch.nar
> to
> /home/foxel/.m2/repository/net/imagej/imagej-launcher/3.3.1-SNAPSHOT/imagej-launcher-3.3.1-SNAPSHOT-noarch.nar
> Installing
> /home/foxel/NetBeansProjects/imagej-launcher/target/imagej-launcher-3.3.1-SNAPSHOT-amd64-Linux-gcc-executable.nar
> to
> /home/foxel/.m2/repository/net/imagej/imagej-launcher/3.3.1-SNAPSHOT/imagej-launcher-3.3.1-SNAPSHOT-amd64-Linux-gcc-executable.nar
> Installing
> /home/foxel/NetBeansProjects/imagej-launcher/target/imagej-launcher-3.3.1-SNAPSHOT-sources.jar
> to
> /home/foxel/.m2/repository/net/imagej/imagej-launcher/3.3.1-SNAPSHOT/imagej-launcher-3.3.1-SNAPSHOT-sources.jar
> Installing
> /home/foxel/NetBeansProjects/imagej-launcher/target/imagej-launcher-3.3.1-SNAPSHOT-tests.jar
> to
> /home/foxel/.m2/repository/net/imagej/imagej-launcher/3.3.1-SNAPSHOT/imagej-launcher-3.3.1-SNAPSHOT-tests.jar
>
> --- imagej-maven-plugin:0.5.4:copy-jars (copy-jars) @ imagej-launcher ---
> ------------------------------------------------------------------------
> BUILD SUCCESS
> ------------------------------------------------------------------------
> Total time: 4.494s
> Finished at: Thu Mar 05 23:50:38 CET 2015
> Final Memory: 23M/538M
>
>
> I would appreciate any help to resolve this issue.
>
> Thanks again for your contributions to an impressive project.
>
> Best wishes,
>
> Gerold
>
> --
> Gerold Rupprecht
> 10, rue Louis-Curval
> CH-1206 Gen?ve, Suisse
>
> Mobile: +41 79 914 29 52
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150311/c41ea38b/attachment.html>

From hiner at wisc.edu  Fri Mar 13 13:43:01 2015
From: hiner at wisc.edu (Mark Hiner)
Date: Fri, 13 Mar 2015 13:43:01 -0500
Subject: [ImageJ-devel] About memory usage with Fiji/JVM
In-Reply-To: <CAEpSnnZcSKfGSxiPiFSoegHc0pP=PbMNC9WxaAvGT7xh9LV3Hg@mail.gmail.com>
References: <CAEpSnnZcSKfGSxiPiFSoegHc0pP=PbMNC9WxaAvGT7xh9LV3Hg@mail.gmail.com>
Message-ID: <CA+B=mGrsX_Bco5hhWBFysMQG2oW7h=eUs27AaUef5h4c3ZvyMw@mail.gmail.com>

Hi Hadrien,

>My hypothesis is that when loading an image, Fiji/SCIFIO look at free
>memory in the system but not in the JVM. Is that possible ?

Yes, this is almost certainly what's happening. Unfortunately I am not
aware of a way to differentiate between memory that is still in use, and
memory that just hasn't been deallocated.

By default in these situations SCIFIO will look at the available memory,
see that there's not enough to open the dataset and open it virtually. Note
that it actually would be possible to open the full dataset - as the memory
allocation approached the JVM's limit, it would automatically be released.

Right now this can be worked around programmatically by specifying a PLANAR
or ARRAY[1] ImgMode in the SCIFIOConfig[2]. The Bio-Formats importer lets
you specify whether the image should be opened virtually or not. The only
other option is to click the status bar to force garbage collection.

We also have plans to improve the SCIFIO importer[3] to expose these
settings in the UI. Ultimately the hope is that virtual (cell) images will
incur minimal performance penalties though[4], making this issue moot.

Thanks!
- Mark

[1]
https://github.com/scifio/scifio/blob/scifio-0.21.1/src/main/java/io/scif/config/SCIFIOConfig.java#L124
[2]
https://github.com/scifio/scifio/blob/scifio-0.21.1/src/main/java/io/scif/config/SCIFIOConfig.java#L370-373
[3] https://github.com/imagej/imagej-plugins-commands/issues/4
[4] https://github.com/scifio/scifio/issues/201


On Mon, Jan 26, 2015 at 5:57 AM, Hadrien Mary <hadrien.mary at gmail.com>
wrote:

> Hi,
>
> New SCIFIO I/O system in Fiji/IJ2 automatically detects wether virtual
> stack is needed according to system memory available and image size
> (if I understood correctly).
>
> Virtual stack is fine but it always better to work without when you
> can. For example working with timelapse stacks, sliding time is much
> faster when image is not a virtual stack (and it makes sense since RAM
> memory access is much faster than hard drive memory access...).
>
> Saying that I noticed something: when I close a big image (no virtual
> stack because moving time slider is fast), java does not release
> memory to system (and it's a normal behaviour according to this
>
> http://stackoverflow.com/questions/22912063/automatically-release-unused-memory-in-imagej-fiji
> ).
> Now when I load the same kind of image (same size), the JVM should use
> the free memory released by the previously closed image isn't it ? I
> have the feeling that it does not because, when I move the time slider
> on the second image, it's very slow....
>
> Some numbers:
>
> - image size : 4.6GB
> - Fiji memory after start : 0.3GB
> - Fiji memory after loading first image: 6.9GiB
> - Fiji memory after closing first image: 6.9GiB
> - Fiji memory after loading second image: 6.9GiB
>
> My hypothesis is that when loading an image, Fiji/SCIFIO look at free
> memory in the system but not in the JVM. Is that possible ? Did you
> already noticed that ?
>
> PS: I have attached to this mail some properties of my system.
>
> Best,
>
> --
> Hadrien Mary
>
> Ph.D student in Biology
> Tournier-Gachet Team
> CNRS - LBCMCP - UMR 5088
>
> Universit? de Toulouse - B?t. 4R3B1
> 118, route de Narbonne - 31062 Toulouse
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150313/c629d59d/attachment.html>

From hadrien.mary at gmail.com  Fri Mar 13 13:54:51 2015
From: hadrien.mary at gmail.com (Hadrien Mary)
Date: Fri, 13 Mar 2015 19:54:51 +0100
Subject: [ImageJ-devel] About memory usage with Fiji/JVM
In-Reply-To: <CA+B=mGrsX_Bco5hhWBFysMQG2oW7h=eUs27AaUef5h4c3ZvyMw@mail.gmail.com>
References: <CAEpSnnZcSKfGSxiPiFSoegHc0pP=PbMNC9WxaAvGT7xh9LV3Hg@mail.gmail.com>
	<CA+B=mGrsX_Bco5hhWBFysMQG2oW7h=eUs27AaUef5h4c3ZvyMw@mail.gmail.com>
Message-ID: <CAEpSnnb=RkMLLicQSabzHhqyNdbS3O7ftDUsSFR=n+n0F6iOkA@mail.gmail.com>

Thank you Mark for the answer.

About ImgMode I wonder what is the difference between these three modes :

- ArrayImgFactory
- CellImgFactory
- PlanarImgFactory

Sorry if it is something obvious but I often see these modes without
knowing how they work.

Best,

--
Hadrien Mary

Ph.D student in Biology
Tournier-Gachet Team
CNRS - LBCMCP - UMR 5088

Universit? de Toulouse - B?t. 4R3B1
118, route de Narbonne - 31062 Toulouse


On Fri, Mar 13, 2015 at 7:43 PM, Mark Hiner <hiner at wisc.edu> wrote:
> Hi Hadrien,
>
>>My hypothesis is that when loading an image, Fiji/SCIFIO look at free
>>memory in the system but not in the JVM. Is that possible ?
>
> Yes, this is almost certainly what's happening. Unfortunately I am not aware
> of a way to differentiate between memory that is still in use, and memory
> that just hasn't been deallocated.
>
> By default in these situations SCIFIO will look at the available memory, see
> that there's not enough to open the dataset and open it virtually. Note that
> it actually would be possible to open the full dataset - as the memory
> allocation approached the JVM's limit, it would automatically be released.
>
> Right now this can be worked around programmatically by specifying a PLANAR
> or ARRAY[1] ImgMode in the SCIFIOConfig[2]. The Bio-Formats importer lets
> you specify whether the image should be opened virtually or not. The only
> other option is to click the status bar to force garbage collection.
>
> We also have plans to improve the SCIFIO importer[3] to expose these
> settings in the UI. Ultimately the hope is that virtual (cell) images will
> incur minimal performance penalties though[4], making this issue moot.
>
> Thanks!
> - Mark
>
> [1]
> https://github.com/scifio/scifio/blob/scifio-0.21.1/src/main/java/io/scif/config/SCIFIOConfig.java#L124
> [2]
> https://github.com/scifio/scifio/blob/scifio-0.21.1/src/main/java/io/scif/config/SCIFIOConfig.java#L370-373
> [3] https://github.com/imagej/imagej-plugins-commands/issues/4
> [4] https://github.com/scifio/scifio/issues/201
>
>
> On Mon, Jan 26, 2015 at 5:57 AM, Hadrien Mary <hadrien.mary at gmail.com>
> wrote:
>>
>> Hi,
>>
>> New SCIFIO I/O system in Fiji/IJ2 automatically detects wether virtual
>> stack is needed according to system memory available and image size
>> (if I understood correctly).
>>
>> Virtual stack is fine but it always better to work without when you
>> can. For example working with timelapse stacks, sliding time is much
>> faster when image is not a virtual stack (and it makes sense since RAM
>> memory access is much faster than hard drive memory access...).
>>
>> Saying that I noticed something: when I close a big image (no virtual
>> stack because moving time slider is fast), java does not release
>> memory to system (and it's a normal behaviour according to this
>>
>> http://stackoverflow.com/questions/22912063/automatically-release-unused-memory-in-imagej-fiji).
>> Now when I load the same kind of image (same size), the JVM should use
>> the free memory released by the previously closed image isn't it ? I
>> have the feeling that it does not because, when I move the time slider
>> on the second image, it's very slow....
>>
>> Some numbers:
>>
>> - image size : 4.6GB
>> - Fiji memory after start : 0.3GB
>> - Fiji memory after loading first image: 6.9GiB
>> - Fiji memory after closing first image: 6.9GiB
>> - Fiji memory after loading second image: 6.9GiB
>>
>> My hypothesis is that when loading an image, Fiji/SCIFIO look at free
>> memory in the system but not in the JVM. Is that possible ? Did you
>> already noticed that ?
>>
>> PS: I have attached to this mail some properties of my system.
>>
>> Best,
>>
>> --
>> Hadrien Mary
>>
>> Ph.D student in Biology
>> Tournier-Gachet Team
>> CNRS - LBCMCP - UMR 5088
>>
>> Universit? de Toulouse - B?t. 4R3B1
>> 118, route de Narbonne - 31062 Toulouse
>>
>> _______________________________________________
>> ImageJ-devel mailing list
>> ImageJ-devel at imagej.net
>> http://imagej.net/mailman/listinfo/imagej-devel
>>
>


From hiner at wisc.edu  Fri Mar 13 14:03:03 2015
From: hiner at wisc.edu (Mark Hiner)
Date: Fri, 13 Mar 2015 14:03:03 -0500
Subject: [ImageJ-devel] About memory usage with Fiji/JVM
In-Reply-To: <CAEpSnnb=RkMLLicQSabzHhqyNdbS3O7ftDUsSFR=n+n0F6iOkA@mail.gmail.com>
References: <CAEpSnnZcSKfGSxiPiFSoegHc0pP=PbMNC9WxaAvGT7xh9LV3Hg@mail.gmail.com>
	<CA+B=mGrsX_Bco5hhWBFysMQG2oW7h=eUs27AaUef5h4c3ZvyMw@mail.gmail.com>
	<CAEpSnnb=RkMLLicQSabzHhqyNdbS3O7ftDUsSFR=n+n0F6iOkA@mail.gmail.com>
Message-ID: <CA+B=mGpw4KB4UbSXSiGnQy_U8KdC8_FF4cs5-5wq0qBuZqDf-A@mail.gmail.com>

>Sorry if it is something obvious but I often see these modes without
knowing how they work.

No problem at all.

This option decides which underlying ImgLib2 data structure is preferred to
back the image data: Array[1], Planar[2], or Cell[3].

Cell is the virtual option that reads planes on demand from disk (or
cache). Array is faster but historically some operations could only operate
on PlanarImgs.

You might find the ImgLib2 examples[4] helpful, as well.

[1]
https://github.com/imglib/imglib2/blob/imglib2-2.2.1/src/main/java/net/imglib2/img/array/ArrayImg.java
[2]
https://github.com/imglib/imglib2/blob/imglib2-2.2.1/src/main/java/net/imglib2/img/planar/PlanarImg.java
[3]
https://github.com/scifio/scifio/blob/scifio-0.21.1/src/main/java/io/scif/img/cell/SCIFIOCellImg.java
[4] http://fiji.sc/ImgLib2_Examples

On Fri, Mar 13, 2015 at 1:54 PM, Hadrien Mary <hadrien.mary at gmail.com>
wrote:

> Thank you Mark for the answer.
>
> About ImgMode I wonder what is the difference between these three modes :
>
> - ArrayImgFactory
> - CellImgFactory
> - PlanarImgFactory
>
> Sorry if it is something obvious but I often see these modes without
> knowing how they work.
>
> Best,
>
> --
> Hadrien Mary
>
> Ph.D student in Biology
> Tournier-Gachet Team
> CNRS - LBCMCP - UMR 5088
>
> Universit? de Toulouse - B?t. 4R3B1
> 118, route de Narbonne - 31062 Toulouse
>
>
> On Fri, Mar 13, 2015 at 7:43 PM, Mark Hiner <hiner at wisc.edu> wrote:
> > Hi Hadrien,
> >
> >>My hypothesis is that when loading an image, Fiji/SCIFIO look at free
> >>memory in the system but not in the JVM. Is that possible ?
> >
> > Yes, this is almost certainly what's happening. Unfortunately I am not
> aware
> > of a way to differentiate between memory that is still in use, and memory
> > that just hasn't been deallocated.
> >
> > By default in these situations SCIFIO will look at the available memory,
> see
> > that there's not enough to open the dataset and open it virtually. Note
> that
> > it actually would be possible to open the full dataset - as the memory
> > allocation approached the JVM's limit, it would automatically be
> released.
> >
> > Right now this can be worked around programmatically by specifying a
> PLANAR
> > or ARRAY[1] ImgMode in the SCIFIOConfig[2]. The Bio-Formats importer lets
> > you specify whether the image should be opened virtually or not. The only
> > other option is to click the status bar to force garbage collection.
> >
> > We also have plans to improve the SCIFIO importer[3] to expose these
> > settings in the UI. Ultimately the hope is that virtual (cell) images
> will
> > incur minimal performance penalties though[4], making this issue moot.
> >
> > Thanks!
> > - Mark
> >
> > [1]
> >
> https://github.com/scifio/scifio/blob/scifio-0.21.1/src/main/java/io/scif/config/SCIFIOConfig.java#L124
> > [2]
> >
> https://github.com/scifio/scifio/blob/scifio-0.21.1/src/main/java/io/scif/config/SCIFIOConfig.java#L370-373
> > [3] https://github.com/imagej/imagej-plugins-commands/issues/4
> > [4] https://github.com/scifio/scifio/issues/201
> >
> >
> > On Mon, Jan 26, 2015 at 5:57 AM, Hadrien Mary <hadrien.mary at gmail.com>
> > wrote:
> >>
> >> Hi,
> >>
> >> New SCIFIO I/O system in Fiji/IJ2 automatically detects wether virtual
> >> stack is needed according to system memory available and image size
> >> (if I understood correctly).
> >>
> >> Virtual stack is fine but it always better to work without when you
> >> can. For example working with timelapse stacks, sliding time is much
> >> faster when image is not a virtual stack (and it makes sense since RAM
> >> memory access is much faster than hard drive memory access...).
> >>
> >> Saying that I noticed something: when I close a big image (no virtual
> >> stack because moving time slider is fast), java does not release
> >> memory to system (and it's a normal behaviour according to this
> >>
> >>
> http://stackoverflow.com/questions/22912063/automatically-release-unused-memory-in-imagej-fiji
> ).
> >> Now when I load the same kind of image (same size), the JVM should use
> >> the free memory released by the previously closed image isn't it ? I
> >> have the feeling that it does not because, when I move the time slider
> >> on the second image, it's very slow....
> >>
> >> Some numbers:
> >>
> >> - image size : 4.6GB
> >> - Fiji memory after start : 0.3GB
> >> - Fiji memory after loading first image: 6.9GiB
> >> - Fiji memory after closing first image: 6.9GiB
> >> - Fiji memory after loading second image: 6.9GiB
> >>
> >> My hypothesis is that when loading an image, Fiji/SCIFIO look at free
> >> memory in the system but not in the JVM. Is that possible ? Did you
> >> already noticed that ?
> >>
> >> PS: I have attached to this mail some properties of my system.
> >>
> >> Best,
> >>
> >> --
> >> Hadrien Mary
> >>
> >> Ph.D student in Biology
> >> Tournier-Gachet Team
> >> CNRS - LBCMCP - UMR 5088
> >>
> >> Universit? de Toulouse - B?t. 4R3B1
> >> 118, route de Narbonne - 31062 Toulouse
> >>
> >> _______________________________________________
> >> ImageJ-devel mailing list
> >> ImageJ-devel at imagej.net
> >> http://imagej.net/mailman/listinfo/imagej-devel
> >>
> >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150313/c4b5740f/attachment-0001.html>

From saalfelds at janelia.hhmi.org  Sat Mar 14 22:12:37 2015
From: saalfelds at janelia.hhmi.org (Stephan Saalfeld)
Date: Sat, 14 Mar 2015 23:12:37 -0400
Subject: [ImageJ-devel] SemVer policies for ImageJ2 and Fiji
Message-ID: <1426389157.18823.111.camel@saalfeld-thinkpad>

Dear list,

a recent SPIM_Registration bug report on GitHub

https://github.com/bigdataviewer/SPIM_Registration/issues/10#issuecomment-79721014

resulted in a discussion about the correct way of assigning version
numbers to individual artifacts.

We have earlier settled to follow SemVer

http://semver.org/

which has reasonably clear guidelines under what circumstances to
increase which of three version counters.

<quote src="http://semver.org/">
1. MAJOR version when you make incompatible API changes,
2. MINOR version when you add functionality in a backwards-compatible
manner, and
3. PATCH version when you make backwards-compatible bug fixes.
</quote>

It is unspecified, however, how version changes in dependency artifacts
affect the version of the consuming artifact, i.e. do they bubble or do
they not?  In my current understanding, there are two competing
objectives, deployment (advocated and executed by @dscho and @ctrueden),
and development (advocated and executed by @axtimwalde and @ctrueden, we
see that @ctrueden is ambivalent, @axtimwalde too, as always, just that
you know):

1.
Developer perspective: Don't bubble!  Developers that use the public API
of an artifact X in their code use SemVer to reason whether on upgrade
of X they will have to change their code or simply recompile with no
modification.  Dependency version bubbling would break this contract,
because it signalizes API incompatibility in X when a dependency Y of X
introduces incompatible changes, although this incompatibility does not
affect the public API of X.  Deployment of a set of artifacts following
this contract requires complete inspection of the entire set of
artifacts to guarantee consistency of the deployed version by other
means (maven pom tracing?) because the SemVer versions of individual
artifacts do not encode the necessary information.  I have the
impression that the developer perspective, ignoring it not being helpful
for deployment, was the driver of the SemVer specification and have a
preference for it because...

2.
Deployer perspective: Bubble?  Deployers could use SemVer to reason
whether a new version of an artifact has ANY incompatible changes
anywhere in its dependency tree.  This is useful to know when an
artifact in the tree can be released *without* considering its
dependents *and* dependencies (PATCH increase).  However, whenever the
version number signalizes incompatibility (MAJOR) or new features
(MINOR), further inspection of the entire dependency tree is required
because consistency cannot be derived from SemVer versions alone.  The
only definite conclusion that can be made from observing that an
artifact changes its MAJOR or MINOR version, i.e. becomes incompatible,
is that all dependents will need to be updated/ recompiled or that
there's a problem, consistency across artifacts cannot be guaranteed.
I.e. the bubbling scheme, at every individual artifact, sends a signal
when further inspection is required.  This information, however is
binary, and a single counter would suffice to do that.  If patch
counters are desired, one would need two.  The MAJOR and MINOR counters
are redundant.

Short:
Non-bubbling SemVer tells a developer whether her code will compile with
a given dependency artifact (PATCH and MINOR).  Bubbling SemVer tells a
deployer when a single artifact can be deployed without considering its
environment (PATCH).  Both things exclude each other.  In this setup, I
find the benefit for developers stronger and therefore prefer
non-bubbling SemVer.

An interesting animal are dependency management poms (BOMs) such as
pom-fiji or pom-mpicbg.  Their `public API' is the composite of  managed
dependencies and therefore it has to bubble the SemVer versions of the
managed dependencies.  This is different from artifacts that consume a
dependency, consuming and managing are different.  I may be wrong, but I
have the impression that these two things often get confused.

Please let me know your thoughts.

Thanks,
Stephan






From saalfelds at janelia.hhmi.org  Sun Mar 15 21:38:42 2015
From: saalfelds at janelia.hhmi.org (Stephan Saalfeld)
Date: Sun, 15 Mar 2015 22:38:42 -0400
Subject: [ImageJ-devel] SemVer policies for ImageJ2 and Fiji
In-Reply-To: <1426389157.18823.111.camel@saalfeld-thinkpad>
References: <1426389157.18823.111.camel@saalfeld-thinkpad>
Message-ID: <1426473522.18823.132.camel@saalfeld-thinkpad>

Dear ImageJ developers,

my earlier statement about the conclusion that can be drawn from
bubbling versions in a deployment context are wrong.

Counter proof: Artifact X fixes a bug in one of its public methods, and
accordingly increases the PATCH counter.  Artifact Y depends on artifact
X and knew about the bug and had a workaround in place to compensate for
it.  On upgrade of dependency version for X, it removes the workaround,
public API remains unchanged.  This is a patch and X had increased the
PATCH counter, so Y increases the PATCH counter.  Neither X nor Y can be
deployed independently.  The deployment system (or person) has to
inspect the entire dependency tree to calculate a correct state or a
conflict.  The same is true in the non-bubbling situation.  Ergo,
bubbling versioning has no advantage over non-bubbling versioning in a
deployment context.

This leads me to the conclusion that non-bubbling versioning is better
because it carries local information for developers that non-bubbling
versioning does not, i.e. in what way the API of the versioned artifact
was changed.

I expect to be wrong still and that I missed something important.

Looking forward to your responses.

Thanks,
Stephan



On Sat, 2015-03-14 at 23:12 -0400, Stephan Saalfeld wrote: 
> Dear list,
> 
> a recent SPIM_Registration bug report on GitHub
> 
> https://github.com/bigdataviewer/SPIM_Registration/issues/10#issuecomment-79721014
> 
> resulted in a discussion about the correct way of assigning version
> numbers to individual artifacts.
> 
> We have earlier settled to follow SemVer
> 
> http://semver.org/
> 
> which has reasonably clear guidelines under what circumstances to
> increase which of three version counters.
> 
> <quote src="http://semver.org/">
> 1. MAJOR version when you make incompatible API changes,
> 2. MINOR version when you add functionality in a backwards-compatible
> manner, and
> 3. PATCH version when you make backwards-compatible bug fixes.
> </quote>
> 
> It is unspecified, however, how version changes in dependency artifacts
> affect the version of the consuming artifact, i.e. do they bubble or do
> they not?  In my current understanding, there are two competing
> objectives, deployment (advocated and executed by @dscho and @ctrueden),
> and development (advocated and executed by @axtimwalde and @ctrueden, we
> see that @ctrueden is ambivalent, @axtimwalde too, as always, just that
> you know):
> 
> 1.
> Developer perspective: Don't bubble!  Developers that use the public API
> of an artifact X in their code use SemVer to reason whether on upgrade
> of X they will have to change their code or simply recompile with no
> modification.  Dependency version bubbling would break this contract,
> because it signalizes API incompatibility in X when a dependency Y of X
> introduces incompatible changes, although this incompatibility does not
> affect the public API of X.  Deployment of a set of artifacts following
> this contract requires complete inspection of the entire set of
> artifacts to guarantee consistency of the deployed version by other
> means (maven pom tracing?) because the SemVer versions of individual
> artifacts do not encode the necessary information.  I have the
> impression that the developer perspective, ignoring it not being helpful
> for deployment, was the driver of the SemVer specification and have a
> preference for it because...
> 
> 2.
> Deployer perspective: Bubble?  Deployers could use SemVer to reason
> whether a new version of an artifact has ANY incompatible changes
> anywhere in its dependency tree.  This is useful to know when an
> artifact in the tree can be released *without* considering its
> dependents *and* dependencies (PATCH increase).  However, whenever the
> version number signalizes incompatibility (MAJOR) or new features
> (MINOR), further inspection of the entire dependency tree is required
> because consistency cannot be derived from SemVer versions alone.  The
> only definite conclusion that can be made from observing that an
> artifact changes its MAJOR or MINOR version, i.e. becomes incompatible,
> is that all dependents will need to be updated/ recompiled or that
> there's a problem, consistency across artifacts cannot be guaranteed.
> I.e. the bubbling scheme, at every individual artifact, sends a signal
> when further inspection is required.  This information, however is
> binary, and a single counter would suffice to do that.  If patch
> counters are desired, one would need two.  The MAJOR and MINOR counters
> are redundant.
> 
> Short:
> Non-bubbling SemVer tells a developer whether her code will compile with
> a given dependency artifact (PATCH and MINOR).  Bubbling SemVer tells a
> deployer when a single artifact can be deployed without considering its
> environment (PATCH).  Both things exclude each other.  In this setup, I
> find the benefit for developers stronger and therefore prefer
> non-bubbling SemVer.
> 
> An interesting animal are dependency management poms (BOMs) such as
> pom-fiji or pom-mpicbg.  Their `public API' is the composite of  managed
> dependencies and therefore it has to bubble the SemVer versions of the
> managed dependencies.  This is different from artifacts that consume a
> dependency, consuming and managing are different.  I may be wrong, but I
> have the impression that these two things often get confused.
> 
> Please let me know your thoughts.
> 
> Thanks,
> Stephan
> 
> 
> 



From hiner at wisc.edu  Mon Mar 16 13:18:41 2015
From: hiner at wisc.edu (Mark Hiner)
Date: Mon, 16 Mar 2015 13:18:41 -0500
Subject: [ImageJ-devel] SemVer policies for ImageJ2 and Fiji
In-Reply-To: <1426473522.18823.132.camel@saalfeld-thinkpad>
References: <1426389157.18823.111.camel@saalfeld-thinkpad>
	<1426473522.18823.132.camel@saalfeld-thinkpad>
Message-ID: <CA+B=mGpn+P0Aiz6kueB=_dkY_HfrNhOSV3gL1ziMQWfGdkrN8w@mail.gmail.com>

Hi Stephan,

Thanks for starting this thread!

For those interested, there was further discussion in IRC
<http://code.imagej.net/chatlogs/imagejdev?times=prefix&start-date=2015-03-16&end-date=2015-03-16#20150316T155138>
today, and Curtis and I chatted briefly face-to-face.

Basically, we agree that semver must be limited in scope to the public API
of a given project. Checking for dependency convergence must be handled
separately. Bubbling versions through dependencies is not significantly
meaningful.

Documentation on this (and other versioning issues) is on the wiki:
http://imagej.net/Architecture#Versioning

>Artifact Y depends on artifact X and knew about the bug and had a
workaround in place to compensate for it

As a side note, semver does not guarantee preservation of unintentional
behavior. As long as behavior is fixed in a way that's backwards-compatible
with public API, only patch versions need to change.

However, the idea is that a BOM will account for such a change, to avoid
dependency skew.

Best,
Mark


On Sun, Mar 15, 2015 at 9:38 PM, Stephan Saalfeld <
saalfelds at janelia.hhmi.org> wrote:

> Dear ImageJ developers,
>
> my earlier statement about the conclusion that can be drawn from
> bubbling versions in a deployment context are wrong.
>
> Counter proof: Artifact X fixes a bug in one of its public methods, and
> accordingly increases the PATCH counter.  Artifact Y depends on artifact
> X and knew about the bug and had a workaround in place to compensate for
> it.  On upgrade of dependency version for X, it removes the workaround,
> public API remains unchanged.  This is a patch and X had increased the
> PATCH counter, so Y increases the PATCH counter.  Neither X nor Y can be
> deployed independently.  The deployment system (or person) has to
> inspect the entire dependency tree to calculate a correct state or a
> conflict.  The same is true in the non-bubbling situation.  Ergo,
> bubbling versioning has no advantage over non-bubbling versioning in a
> deployment context.
>
> This leads me to the conclusion that non-bubbling versioning is better
> because it carries local information for developers that non-bubbling
> versioning does not, i.e. in what way the API of the versioned artifact
> was changed.
>
> I expect to be wrong still and that I missed something important.
>
> Looking forward to your responses.
>
> Thanks,
> Stephan
>
>
>
> On Sat, 2015-03-14 at 23:12 -0400, Stephan Saalfeld wrote:
> > Dear list,
> >
> > a recent SPIM_Registration bug report on GitHub
> >
> >
> https://github.com/bigdataviewer/SPIM_Registration/issues/10#issuecomment-79721014
> >
> > resulted in a discussion about the correct way of assigning version
> > numbers to individual artifacts.
> >
> > We have earlier settled to follow SemVer
> >
> > http://semver.org/
> >
> > which has reasonably clear guidelines under what circumstances to
> > increase which of three version counters.
> >
> > <quote src="http://semver.org/">
> > 1. MAJOR version when you make incompatible API changes,
> > 2. MINOR version when you add functionality in a backwards-compatible
> > manner, and
> > 3. PATCH version when you make backwards-compatible bug fixes.
> > </quote>
> >
> > It is unspecified, however, how version changes in dependency artifacts
> > affect the version of the consuming artifact, i.e. do they bubble or do
> > they not?  In my current understanding, there are two competing
> > objectives, deployment (advocated and executed by @dscho and @ctrueden),
> > and development (advocated and executed by @axtimwalde and @ctrueden, we
> > see that @ctrueden is ambivalent, @axtimwalde too, as always, just that
> > you know):
> >
> > 1.
> > Developer perspective: Don't bubble!  Developers that use the public API
> > of an artifact X in their code use SemVer to reason whether on upgrade
> > of X they will have to change their code or simply recompile with no
> > modification.  Dependency version bubbling would break this contract,
> > because it signalizes API incompatibility in X when a dependency Y of X
> > introduces incompatible changes, although this incompatibility does not
> > affect the public API of X.  Deployment of a set of artifacts following
> > this contract requires complete inspection of the entire set of
> > artifacts to guarantee consistency of the deployed version by other
> > means (maven pom tracing?) because the SemVer versions of individual
> > artifacts do not encode the necessary information.  I have the
> > impression that the developer perspective, ignoring it not being helpful
> > for deployment, was the driver of the SemVer specification and have a
> > preference for it because...
> >
> > 2.
> > Deployer perspective: Bubble?  Deployers could use SemVer to reason
> > whether a new version of an artifact has ANY incompatible changes
> > anywhere in its dependency tree.  This is useful to know when an
> > artifact in the tree can be released *without* considering its
> > dependents *and* dependencies (PATCH increase).  However, whenever the
> > version number signalizes incompatibility (MAJOR) or new features
> > (MINOR), further inspection of the entire dependency tree is required
> > because consistency cannot be derived from SemVer versions alone.  The
> > only definite conclusion that can be made from observing that an
> > artifact changes its MAJOR or MINOR version, i.e. becomes incompatible,
> > is that all dependents will need to be updated/ recompiled or that
> > there's a problem, consistency across artifacts cannot be guaranteed.
> > I.e. the bubbling scheme, at every individual artifact, sends a signal
> > when further inspection is required.  This information, however is
> > binary, and a single counter would suffice to do that.  If patch
> > counters are desired, one would need two.  The MAJOR and MINOR counters
> > are redundant.
> >
> > Short:
> > Non-bubbling SemVer tells a developer whether her code will compile with
> > a given dependency artifact (PATCH and MINOR).  Bubbling SemVer tells a
> > deployer when a single artifact can be deployed without considering its
> > environment (PATCH).  Both things exclude each other.  In this setup, I
> > find the benefit for developers stronger and therefore prefer
> > non-bubbling SemVer.
> >
> > An interesting animal are dependency management poms (BOMs) such as
> > pom-fiji or pom-mpicbg.  Their `public API' is the composite of  managed
> > dependencies and therefore it has to bubble the SemVer versions of the
> > managed dependencies.  This is different from artifacts that consume a
> > dependency, consuming and managing are different.  I may be wrong, but I
> > have the impression that these two things often get confused.
> >
> > Please let me know your thoughts.
> >
> > Thanks,
> > Stephan
> >
> >
> >
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150316/03c61f3a/attachment.html>

From hiner at wisc.edu  Mon Mar 16 14:38:39 2015
From: hiner at wisc.edu (Mark Hiner)
Date: Mon, 16 Mar 2015 14:38:39 -0500
Subject: [ImageJ-devel] Breaking API changes and BOM version bumps
Message-ID: <CA+B=mGoSZHDK1pCX95+5do9H9jjywT=3zf_t0-xLnn_af=QY8g@mail.gmail.com>

Hi all,

 I wanted to share a brief case study on the current dependency skew of
ImgLib2-algorithm-related components.

 Last week, an innocent-looking commit
<https://github.com/imglib/imglib2-algorithm/commit/e1460f140a0b03554fcb6f3d14ca43362d7d86a5>
was merged into imglib2-algorithm. It then made its way into a patch
release of imglib2-algorithm, and patch release of pom-imagej
<https://github.com/imagej/pom-imagej/commit/d28f954494f76898d80296b168b5352238d25915>.
Unfortunately, even a trivial package move like this is actually a breaking
API change, and both the component and pom releases should have incremented
a major version to indicate this.

 Further, pom-imagej now declares a set of components that are incompatible
with each other - as components downstream of imglib2-algorithm are not
updated to use the new packages. Thus if these libraries were consolidated
(e.g. to upload to Fiji), there would be hit by dependency skew.

 For those interested, there are two possible solutions:

1) Track down all uses of the old packages, update them, cut releases,
update pom-imagej.
or
2) Add deprecated, trivial extensions of the moved classes back to the old
locations, which can then be removed at a later date.

 Naturally, #2 is much simpler and thus looking more attractive right now.
:) Either way, developers should be aware of the current problems with
pom-imagej 5.12.3 and 5.13.0 (the latter also points to an unreleased
ij1-patcher, due to incompatibilities with ImageJ 1.49p - so certainly
don't use that one).

 Our versioning practices are on the wiki:
http://imagej.net/Architecture#Versioning but please let us know if
anything is unclear or hard to find.

 The burden of manually accounting for SemVer changes is hopefully one we
will soon be free from. For now, it's just something we have to consider
whenever we cut releases.

Best,
Mark
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150316/7b28654f/attachment.html>

From tinevez at pasteur.fr  Mon Mar 16 15:58:46 2015
From: tinevez at pasteur.fr (tinevez at pasteur.fr)
Date: Mon, 16 Mar 2015 20:58:46 +0000
Subject: [ImageJ-devel]
	=?utf-8?q?Breaking_API_changes_and_BOM_version_bum?= =?utf-8?q?ps?=
In-Reply-To: <CA+B=mGoSZHDK1pCX95+5do9H9jjywT=3zf_t0-xLnn_af=QY8g@mail.gmail.com>
References: <CA+B=mGoSZHDK1pCX95+5do9H9jjywT=3zf_t0-xLnn_af=QY8g@mail.gmail.com>
Message-ID: <20150316210027.01EFC381093@mail-interne3.pasteur.fr>

Fudge fudge fudge I did this. 

I am really sorry this is something I vastly overlooked. 



Next pizza & beer are on me.





De : Mark Hiner
Envoy? : ?lundi? ?16? ?mars? ?2015 ?20?:?38
? : Tobias Pietzsch, Jean-Yves Tinevez
Cc : imagej-devel at imagej.net











Hi all,

 I wanted to share a brief case study on the current dependency skew of ImgLib2-algorithm-related components.

 Last week, an innocent-looking commit was merged into imglib2-algorithm. It then made its way into a patch release of imglib2-algorithm, and patch release of pom-imagej. Unfortunately, even a trivial package move like this is actually a breaking API change, and both the component and pom releases should have incremented a major version to indicate this.


 Further, pom-imagej now declares a set of components that are incompatible with each other - as components downstream of imglib2-algorithm are not updated to use the new packages. Thus if these libraries were consolidated (e.g. to upload to Fiji), there would be hit by dependency skew.

 For those interested, there are two possible solutions:

1) Track down all uses of the old packages, update them, cut releases, update pom-imagej.
or
2) Add deprecated, trivial extensions of the moved classes back to the old locations, which can then be removed at a later date.

 Naturally, #2 is much simpler and thus looking more attractive right now. :) Either way, developers should be aware of the current problems with pom-imagej 5.12.3 and 5.13.0 (the latter also points to an unreleased ij1-patcher, due to incompatibilities with ImageJ 1.49p - so certainly don't use that one).









 Our versioning practices are on the wiki: http://imagej.net/Architecture#Versioning but please let us know if anything is unclear or hard to find.



 The burden of manually accounting for SemVer changes is hopefully one we will soon be free from. For now, it's just something we have to consider whenever we cut releases.



Best,


Mark
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150316/5e779923/attachment-0001.html>

From pietzsch at mpi-cbg.de  Mon Mar 16 16:43:47 2015
From: pietzsch at mpi-cbg.de (Tobias Pietzsch)
Date: Mon, 16 Mar 2015 22:43:47 +0100
Subject: [ImageJ-devel] Breaking API changes and BOM version bumps
In-Reply-To: <20150316210027.01EFC381093@mail-interne3.pasteur.fr>
References: <CA+B=mGoSZHDK1pCX95+5do9H9jjywT=3zf_t0-xLnn_af=QY8g@mail.gmail.com>
	<20150316210027.01EFC381093@mail-interne3.pasteur.fr>
Message-ID: <45F928D8-091B-4303-97CE-FE1FBA8C1337@mpi-cbg.de>

Hmm, actually I think I?m to blame in this case because I did the release without properly thinking about the version numbers.
If you could point me to packages that are hit by the imglib-algorithm change, I?ll try to fix them.
best regards,
Tobias

On 16 Mar 2015, at 21:58, <tinevez at pasteur.fr> <tinevez at pasteur.fr> wrote:

> Fudge fudge fudge I did this.
> I am really sorry this is something I vastly overlooked. 
> Next pizza & beer are on me.
> 
> De : Mark Hiner
> Envoy? : ?lundi? ?16? ?mars? ?2015 ?20?:?38
> ? : Tobias Pietzsch, Jean-Yves Tinevez
> Cc : imagej-devel at imagej.net
> 
> Hi all,
> 
>  I wanted to share a brief case study on the current dependency skew of ImgLib2-algorithm-related components.
> 
>  Last week, an innocent-looking commit was merged into imglib2-algorithm. It then made its way into a patch release of imglib2-algorithm, and patch release of pom-imagej. Unfortunately, even a trivial package move like this is actually a breaking API change, and both the component and pom releases should have incremented a major version to indicate this.
> 
>  Further, pom-imagej now declares a set of components that are incompatible with each other - as components downstream of imglib2-algorithm are not updated to use the new packages. Thus if these libraries were consolidated (e.g. to upload to Fiji), there would be hit by dependency skew.
> 
>  For those interested, there are two possible solutions:
> 
> 1) Track down all uses of the old packages, update them, cut releases, update pom-imagej.
> or
> 2) Add deprecated, trivial extensions of the moved classes back to the old locations, which can then be removed at a later date.
> 
>  Naturally, #2 is much simpler and thus looking more attractive right now. :) Either way, developers should be aware of the current problems with pom-imagej 5.12.3 and 5.13.0 (the latter also points to an unreleased ij1-patcher, due to incompatibilities with ImageJ 1.49p - so certainly don't use that one).
> 
>  Our versioning practices are on the wiki: http://imagej.net/Architecture#Versioning but please let us know if anything is unclear or hard to find.
> 
>  The burden of manually accounting for SemVer changes is hopefully one we will soon be free from. For now, it's just something we have to consider whenever we cut releases.
> 
> Best,
> Mark

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150316/a4f316b3/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150316/a4f316b3/attachment.pgp>

From hiner at wisc.edu  Mon Mar 16 18:03:30 2015
From: hiner at wisc.edu (Mark Hiner)
Date: Mon, 16 Mar 2015 18:03:30 -0500
Subject: [ImageJ-devel] Breaking API changes and BOM version bumps
In-Reply-To: <45F928D8-091B-4303-97CE-FE1FBA8C1337@mpi-cbg.de>
References: <CA+B=mGoSZHDK1pCX95+5do9H9jjywT=3zf_t0-xLnn_af=QY8g@mail.gmail.com>
	<20150316210027.01EFC381093@mail-interne3.pasteur.fr>
	<45F928D8-091B-4303-97CE-FE1FBA8C1337@mpi-cbg.de>
Message-ID: <CA+B=mGoDU_2--cxR53JDzuUosd6kpxigZop5nB3ox1zpAxc3MQ@mail.gmail.com>

>Next pizza & beer are on me.

You should rename packages more often! :)

Neither of you should be hard on yourselves - our release history is filled
with mistakes like this, and worse. Until dependency convergence is
automatically tied to the release process, there will be more.

>If you could point me to packages that are hit by the imglib-algorithm
change

Potentially affected components that I know of:
BDV-core
TrackMate
imglib2-tests
imglib2-algorithm-gpl

I really do have to fix ij1-patcher before uploading anyway, and just
adding back the moved classes would be minimal effort. So the situation is
far from dire.

Best,
Mark

On Mon, Mar 16, 2015 at 4:43 PM, Tobias Pietzsch <pietzsch at mpi-cbg.de>
wrote:

> Hmm, actually I think I?m to blame in this case because I did the release
> without properly thinking about the version numbers.
> If you could point me to packages that are hit by the imglib-algorithm
> change, I?ll try to fix them.
> best regards,
> Tobias
>
> On 16 Mar 2015, at 21:58, <tinevez at pasteur.fr> <tinevez at pasteur.fr> wrote:
>
> Fudge fudge fudge I did this.
> I am really sorry this is something I vastly overlooked.
> Next pizza & beer are on me.
>
> *De :* Mark Hiner <hiner at wisc.edu>
> *Envoy? :* ?lundi? ?16? ?mars? ?2015 ?20?:?38
> *? :* Tobias Pietzsch <pietzsch at mpi-cbg.de>, Jean-Yves Tinevez
> <tinevez at pasteur.fr>
> *Cc :* imagej-devel at imagej.net
>
> Hi all,
>
>  I wanted to share a brief case study on the current dependency skew of
> ImgLib2-algorithm-related components.
>
>  Last week, an innocent-looking commit
> <https://github.com/imglib/imglib2-algorithm/commit/e1460f140a0b03554fcb6f3d14ca43362d7d86a5>
>  was merged into imglib2-algorithm. It then made its way into a patch
> release of imglib2-algorithm, and patch release of pom-imagej
> <https://github.com/imagej/pom-imagej/commit/d28f954494f76898d80296b168b5352238d25915>.
> Unfortunately, even a trivial package move like this is actually a breaking
> API change, and both the component and pom releases should have incremented
> a major version to indicate this.
>
>  Further, pom-imagej now declares a set of components that are
> incompatible with each other - as components downstream of
> imglib2-algorithm are not updated to use the new packages. Thus if these
> libraries were consolidated (e.g. to upload to Fiji), there would be hit by
> dependency skew.
>
>  For those interested, there are two possible solutions:
>
> 1) Track down all uses of the old packages, update them, cut releases,
> update pom-imagej.
> or
> 2) Add deprecated, trivial extensions of the moved classes back to the old
> locations, which can then be removed at a later date.
>
>  Naturally, #2 is much simpler and thus looking more attractive right now.
> :) Either way, developers should be aware of the current problems with
> pom-imagej 5.12.3 and 5.13.0 (the latter also points to an unreleased
> ij1-patcher, due to incompatibilities with ImageJ 1.49p - so certainly
> don't use that one).
>
>  Our versioning practices are on the wiki:
> http://imagej.net/Architecture#Versioning but please let us know if
> anything is unclear or hard to find.
>
>  The burden of manually accounting for SemVer changes is hopefully one we
> will soon be free from. For now, it's just something we have to consider
> whenever we cut releases.
>
> Best,
> Mark
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150316/06354095/attachment.html>

From pietzsch at mpi-cbg.de  Mon Mar 16 18:06:49 2015
From: pietzsch at mpi-cbg.de (Tobias Pietzsch)
Date: Tue, 17 Mar 2015 00:06:49 +0100
Subject: [ImageJ-devel] Breaking API changes and BOM version bumps
In-Reply-To: <CA+B=mGoDU_2--cxR53JDzuUosd6kpxigZop5nB3ox1zpAxc3MQ@mail.gmail.com>
References: <CA+B=mGoSZHDK1pCX95+5do9H9jjywT=3zf_t0-xLnn_af=QY8g@mail.gmail.com>
	<20150316210027.01EFC381093@mail-interne3.pasteur.fr>
	<45F928D8-091B-4303-97CE-FE1FBA8C1337@mpi-cbg.de>
	<CA+B=mGoDU_2--cxR53JDzuUosd6kpxigZop5nB3ox1zpAxc3MQ@mail.gmail.com>
Message-ID: <B0016FD7-A1D3-4010-853C-C9BB58F4E422@mpi-cbg.de>

Hi Mark,

imglib2-tests and
imglib2-algorithm-gpl
are fixed already.

I?ll check BDV and TrackMate tommorrow.

all the best,
Tobias

On 17 Mar 2015, at 00:03, Mark Hiner <hiner at wisc.edu> wrote:

> >Next pizza & beer are on me.
> 
> You should rename packages more often! :)
> 
> Neither of you should be hard on yourselves - our release history is filled with mistakes like this, and worse. Until dependency convergence is automatically tied to the release process, there will be more.
> 
> >If you could point me to packages that are hit by the imglib-algorithm change
> 
> Potentially affected components that I know of:
> BDV-core
> TrackMate
> imglib2-tests
> imglib2-algorithm-gpl
> 
> I really do have to fix ij1-patcher before uploading anyway, and just adding back the moved classes would be minimal effort. So the situation is far from dire.
> 
> Best,
> Mark
> 
> On Mon, Mar 16, 2015 at 4:43 PM, Tobias Pietzsch <pietzsch at mpi-cbg.de> wrote:
> Hmm, actually I think I?m to blame in this case because I did the release without properly thinking about the version numbers.
> If you could point me to packages that are hit by the imglib-algorithm change, I?ll try to fix them.
> best regards,
> Tobias
> 
> On 16 Mar 2015, at 21:58, <tinevez at pasteur.fr> <tinevez at pasteur.fr> wrote:
> 
>> Fudge fudge fudge I did this.
>> I am really sorry this is something I vastly overlooked. 
>> Next pizza & beer are on me.
>> 
>> De : Mark Hiner
>> Envoy? : ?lundi? ?16? ?mars? ?2015 ?20?:?38
>> ? : Tobias Pietzsch, Jean-Yves Tinevez
>> Cc : imagej-devel at imagej.net
>> 
>> Hi all,
>> 
>>  I wanted to share a brief case study on the current dependency skew of ImgLib2-algorithm-related components.
>> 
>>  Last week, an innocent-looking commit was merged into imglib2-algorithm. It then made its way into a patch release of imglib2-algorithm, and patch release of pom-imagej. Unfortunately, even a trivial package move like this is actually a breaking API change, and both the component and pom releases should have incremented a major version to indicate this.
>> 
>>  Further, pom-imagej now declares a set of components that are incompatible with each other - as components downstream of imglib2-algorithm are not updated to use the new packages. Thus if these libraries were consolidated (e.g. to upload to Fiji), there would be hit by dependency skew.
>> 
>>  For those interested, there are two possible solutions:
>> 
>> 1) Track down all uses of the old packages, update them, cut releases, update pom-imagej.
>> or
>> 2) Add deprecated, trivial extensions of the moved classes back to the old locations, which can then be removed at a later date.
>> 
>>  Naturally, #2 is much simpler and thus looking more attractive right now. :) Either way, developers should be aware of the current problems with pom-imagej 5.12.3 and 5.13.0 (the latter also points to an unreleased ij1-patcher, due to incompatibilities with ImageJ 1.49p - so certainly don't use that one).
>> 
>>  Our versioning practices are on the wiki: http://imagej.net/Architecture#Versioning but please let us know if anything is unclear or hard to find.
>> 
>>  The burden of manually accounting for SemVer changes is hopefully one we will soon be free from. For now, it's just something we have to consider whenever we cut releases.
>> 
>> Best,
>> Mark
> 
> 
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150317/1ac12b5f/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150317/1ac12b5f/attachment-0001.pgp>

From leek at broadinstitute.org  Wed Mar 18 08:47:45 2015
From: leek at broadinstitute.org (Lee Kamentsky)
Date: Wed, 18 Mar 2015 10:47:45 -0300
Subject: [ImageJ-devel] imagej-loader / dlopen args
Message-ID: <CAHLFyjcMtGvxdA7mf_ikvnqxWH6VaPv3eN35WvwDFewyjwdF4w@mail.gmail.com>

Hi dscho,
I'm programming "monkey see, monkey do" style. I have very little idea what
I'm doing, trying to replicate the logic for mac loading dylibs in
imagej-loader.

I've gotten pretty far, but at the end, I'm seeing the error,
"JavaNativeFoundation: GetGlobalVM: JNI_GetCreatedJavaVMs() failed to get
any VM" when I start an AWT app.

I am guessing that this is why you dlopened libjli here
<https://github.com/imagej/imagej-launcher/blob/master/src/main/c/ImageJ.c#L264>.
I do the same, but (so far) with Python's ctypes.CDLL. That doesn't let you
specify RTLD_LAZY as a dlopen mode. So, I think that's the big difference
between how you do things and how I do them. My first question is whether
RTLD_LAZY is needed as the mode. My second question is why you needed to
load libjli.dylib in the first place and, if you might grant me a third
wish, my third question is whether you've seen this error before.

Thanks in advance, Mr. Wizard.

--Lee
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150318/8a97ef2d/attachment.html>

From hiner at wisc.edu  Wed Mar 18 11:42:20 2015
From: hiner at wisc.edu (Mark Hiner)
Date: Wed, 18 Mar 2015 11:42:20 -0500
Subject: [ImageJ-devel] Breaking API changes and BOM version bumps
In-Reply-To: <B0016FD7-A1D3-4010-853C-C9BB58F4E422@mpi-cbg.de>
References: <CA+B=mGoSZHDK1pCX95+5do9H9jjywT=3zf_t0-xLnn_af=QY8g@mail.gmail.com>
	<20150316210027.01EFC381093@mail-interne3.pasteur.fr>
	<45F928D8-091B-4303-97CE-FE1FBA8C1337@mpi-cbg.de>
	<CA+B=mGoDU_2--cxR53JDzuUosd6kpxigZop5nB3ox1zpAxc3MQ@mail.gmail.com>
	<B0016FD7-A1D3-4010-853C-C9BB58F4E422@mpi-cbg.de>
Message-ID: <CA+B=mGoXANRm7Gbasfu_23Oz40fkU18Bv3_Q1RGMwAZqCDAg3Q@mail.gmail.com>

Hi Tobias,

>I really do have to fix ij1-patcher before uploading anyway

Just wanted to let you know that the latest ij1-patcher and imagej-legacy
are released.

Let me know if you run into any problems!

Thanks,
Mark

On Mon, Mar 16, 2015 at 6:06 PM, Tobias Pietzsch <pietzsch at mpi-cbg.de>
wrote:

> Hi Mark,
>
> imglib2-tests and
> imglib2-algorithm-gpl
> are fixed already.
>
> I?ll check BDV and TrackMate tommorrow.
>
> all the best,
> Tobias
>
> On 17 Mar 2015, at 00:03, Mark Hiner <hiner at wisc.edu> wrote:
>
> >Next pizza & beer are on me.
>
> You should rename packages more often! :)
>
> Neither of you should be hard on yourselves - our release history is
> filled with mistakes like this, and worse. Until dependency convergence is
> automatically tied to the release process, there will be more.
>
> >If you could point me to packages that are hit by the imglib-algorithm
> change
>
> Potentially affected components that I know of:
> BDV-core
> TrackMate
> imglib2-tests
> imglib2-algorithm-gpl
>
> I really do have to fix ij1-patcher before uploading anyway, and just
> adding back the moved classes would be minimal effort. So the situation is
> far from dire.
>
> Best,
> Mark
>
> On Mon, Mar 16, 2015 at 4:43 PM, Tobias Pietzsch <pietzsch at mpi-cbg.de>
> wrote:
>
>> Hmm, actually I think I?m to blame in this case because I did the release
>> without properly thinking about the version numbers.
>> If you could point me to packages that are hit by the imglib-algorithm
>> change, I?ll try to fix them.
>> best regards,
>> Tobias
>>
>> On 16 Mar 2015, at 21:58, <tinevez at pasteur.fr> <tinevez at pasteur.fr>
>> wrote:
>>
>> Fudge fudge fudge I did this.
>> I am really sorry this is something I vastly overlooked.
>> Next pizza & beer are on me.
>>
>> *De :* Mark Hiner <hiner at wisc.edu>
>> *Envoy? :* ?lundi? ?16? ?mars? ?2015 ?20?:?38
>> *? :* Tobias Pietzsch <pietzsch at mpi-cbg.de>, Jean-Yves Tinevez
>> <tinevez at pasteur.fr>
>> *Cc :* imagej-devel at imagej.net
>>
>> Hi all,
>>
>>  I wanted to share a brief case study on the current dependency skew of
>> ImgLib2-algorithm-related components.
>>
>>  Last week, an innocent-looking commit
>> <https://github.com/imglib/imglib2-algorithm/commit/e1460f140a0b03554fcb6f3d14ca43362d7d86a5>
>>  was merged into imglib2-algorithm. It then made its way into a patch
>> release of imglib2-algorithm, and patch release of pom-imagej
>> <https://github.com/imagej/pom-imagej/commit/d28f954494f76898d80296b168b5352238d25915>.
>> Unfortunately, even a trivial package move like this is actually a breaking
>> API change, and both the component and pom releases should have incremented
>> a major version to indicate this.
>>
>>  Further, pom-imagej now declares a set of components that are
>> incompatible with each other - as components downstream of
>> imglib2-algorithm are not updated to use the new packages. Thus if these
>> libraries were consolidated (e.g. to upload to Fiji), there would be hit by
>> dependency skew.
>>
>>  For those interested, there are two possible solutions:
>>
>> 1) Track down all uses of the old packages, update them, cut releases,
>> update pom-imagej.
>> or
>> 2) Add deprecated, trivial extensions of the moved classes back to the
>> old locations, which can then be removed at a later date.
>>
>>  Naturally, #2 is much simpler and thus looking more attractive right
>> now. :) Either way, developers should be aware of the current problems with
>> pom-imagej 5.12.3 and 5.13.0 (the latter also points to an unreleased
>> ij1-patcher, due to incompatibilities with ImageJ 1.49p - so certainly
>> don't use that one).
>>
>>  Our versioning practices are on the wiki:
>> http://imagej.net/Architecture#Versioning but please let us know if
>> anything is unclear or hard to find.
>>
>>  The burden of manually accounting for SemVer changes is hopefully one we
>> will soon be free from. For now, it's just something we have to consider
>> whenever we cut releases.
>>
>> Best,
>> Mark
>>
>>
>>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150318/379cbdd6/attachment.html>

From tinevez at pasteur.fr  Wed Mar 18 11:47:06 2015
From: tinevez at pasteur.fr (Jean-Yves Tinevez)
Date: Wed, 18 Mar 2015 17:47:06 +0100
Subject: [ImageJ-devel] Breaking API changes and BOM version bumps
In-Reply-To: <CA+B=mGoXANRm7Gbasfu_23Oz40fkU18Bv3_Q1RGMwAZqCDAg3Q@mail.gmail.com>
References: <CA+B=mGoSZHDK1pCX95+5do9H9jjywT=3zf_t0-xLnn_af=QY8g@mail.gmail.com>
	<20150316210027.01EFC381093@mail-interne3.pasteur.fr>
	<45F928D8-091B-4303-97CE-FE1FBA8C1337@mpi-cbg.de>
	<CA+B=mGoDU_2--cxR53JDzuUosd6kpxigZop5nB3ox1zpAxc3MQ@mail.gmail.com>
	<B0016FD7-A1D3-4010-853C-C9BB58F4E422@mpi-cbg.de>
	<CA+B=mGoXANRm7Gbasfu_23Oz40fkU18Bv3_Q1RGMwAZqCDAg3Q@mail.gmail.com>
Message-ID: <01FEB554-2398-4D3F-A01F-8E708E54395C@pasteur.fr>


> On 18 mars 2015, at 17:42, Mark Hiner <hiner at wisc.edu> wrote:
> 
> Hi Tobias,
> 
> >I really do have to fix ij1-patcher before uploading anyway
> 
> Just wanted to let you know that the latest ij1-patcher and imagej-legacy are released.
> 
> Let me know if you run into any problems!

Hi all

Quick question: I am looking on the headless problem I mention in another mail. 
Are these 2 jars involved in the headless option? If not, what one is?
Best
jy

From johannes.schindelin at gmx.de  Wed Mar 18 14:32:23 2015
From: johannes.schindelin at gmx.de (Johannes Schindelin)
Date: Wed, 18 Mar 2015 20:32:23 +0100
Subject: [ImageJ-devel] imagej-loader / dlopen args
In-Reply-To: <CAHLFyjcMtGvxdA7mf_ikvnqxWH6VaPv3eN35WvwDFewyjwdF4w@mail.gmail.com>
References: <CAHLFyjcMtGvxdA7mf_ikvnqxWH6VaPv3eN35WvwDFewyjwdF4w@mail.gmail.com>
Message-ID: <ab90ddc2ce2e23f37dbb6a56260acc08@www.dscho.org>

Hi Lee,

On 2015-03-18 14:47, Lee Kamentsky wrote:

> I'm programming "monkey see, monkey do" style. I have very little idea 
> what
> I'm doing, trying to replicate the logic for mac loading dylibs in
> imagej-loader.
> 
> I've gotten pretty far, but at the end, I'm seeing the error,
> "JavaNativeFoundation: GetGlobalVM: JNI_GetCreatedJavaVMs() failed to 
> get
> any VM" when I start an AWT app.

Do you expect a JVM to be running already? If not, you should [create 
one](https://github.com/imagej/imagej-launcher/blob/3e061521a/src/main/c/ImageJ.c#L307-L322).

> I am guessing that this is why you dlopened libjli here
> <https://github.com/imagej/imagej-launcher/blob/master/src/main/c/ImageJ.c#L264>.

Heh, I have to admit that I did not remember at all why I did that. 
Happily, even I learned to write kick-ass commit messages, and I also 
learned the awesomeness of the `Blame` button on GitHub: 
https://github.com/imagej/imagej-launcher/blame/master/src/main/c/ImageJ.c#L264 
(I vaguely remember writing that commit message after spending something 
between twenty and thirty super-focused hours on hunting down this bug, 
that was not really fun, that one hunt).

> I do the same, but (so far) with Python's ctypes.CDLL. That doesn't let 
> you
> specify RTLD_LAZY as a dlopen mode. So, I think that's the big 
> difference
> between how you do things and how I do them. My first question is 
> whether
> RTLD_LAZY is needed as the mode. My second question is why you needed 
> to
> load libjli.dylib in the first place and, if you might grant me a third
> wish, my third question is whether you've seen this error before.

The JLI library is only needed for forward compatibility, so that MacOSX 
does not annoy the user by a "Do you want to install Java 6?" popup.

And yes, I have seen an error like that before, but only when trying to 
attach to a running JVM from within Matlab (Matlab's very own GUI is 
written in Java... so there is already a JVM running in a Matlab 
instance although it is a bit tricky to get at it under certain 
circumstances, but it is impossible to run two Oracle JVMs in the same 
process in any case).

> Thanks in advance, Mr. Wizard.

Sorry, oh ye mighty Python God, I fear my input was not really helpful 
to your cause. But maybe you have a project for me to clone, with 
instructions that might let this poor Python pilgrim reproduce the 
issue?

Ciao,
Dscho


From leek at broadinstitute.org  Wed Mar 18 15:29:26 2015
From: leek at broadinstitute.org (Lee Kamentsky)
Date: Wed, 18 Mar 2015 17:29:26 -0300
Subject: [ImageJ-devel] imagej-loader / dlopen args
In-Reply-To: <ab90ddc2ce2e23f37dbb6a56260acc08@www.dscho.org>
References: <CAHLFyjcMtGvxdA7mf_ikvnqxWH6VaPv3eN35WvwDFewyjwdF4w@mail.gmail.com>
	<ab90ddc2ce2e23f37dbb6a56260acc08@www.dscho.org>
Message-ID: <CAHLFyjcMye1WNfmhVkC8HJ=H4Sw4oQ92s0jHZg5Yghw7udB8MA@mail.gmail.com>

Thanks,

On Wed, Mar 18, 2015 at 4:32 PM, Johannes Schindelin <
johannes.schindelin at gmx.de> wrote:

> Hi Lee,
>
> On 2015-03-18 14:47, Lee Kamentsky wrote:
>
>  I'm programming "monkey see, monkey do" style. I have very little idea
>> what
>> I'm doing, trying to replicate the logic for mac loading dylibs in
>> imagej-loader.
>>
>> I've gotten pretty far, but at the end, I'm seeing the error,
>> "JavaNativeFoundation: GetGlobalVM: JNI_GetCreatedJavaVMs() failed to get
>> any VM" when I start an AWT app.
>>
>
> Do you expect a JVM to be running already? If not, you should [create one](
> https://github.com/imagej/imagej-launcher/blob/
> 3e061521a/src/main/c/ImageJ.c#L307-L322).
>
>  I am guessing that this is why you dlopened libjli here
>> <https://github.com/imagej/imagej-launcher/blob/master/
>> src/main/c/ImageJ.c#L264>.
>>
>
> Heh, I have to admit that I did not remember at all why I did that.
> Happily, even I learned to write kick-ass commit messages, and I also
> learned the awesomeness of the `Blame` button on GitHub:
> https://github.com/imagej/imagej-launcher/blame/master/
> src/main/c/ImageJ.c#L264 (I vaguely remember writing that commit message
> after spending something between twenty and thirty super-focused hours on
> hunting down this bug, that was not really fun, that one hunt).
>
>  I do the same, but (so far) with Python's ctypes.CDLL. That doesn't let
>> you
>> specify RTLD_LAZY as a dlopen mode. So, I think that's the big difference
>> between how you do things and how I do them. My first question is whether
>> RTLD_LAZY is needed as the mode. My second question is why you needed to
>> load libjli.dylib in the first place and, if you might grant me a third
>> wish, my third question is whether you've seen this error before.
>>
>
> The JLI library is only needed for forward compatibility, so that MacOSX
> does not annoy the user by a "Do you want to install Java 6?" popup.
>
> And yes, I have seen an error like that before, but only when trying to
> attach to a running JVM from within Matlab (Matlab's very own GUI is
> written in Java... so there is already a JVM running in a Matlab instance
> although it is a bit tricky to get at it under certain circumstances, but
> it is impossible to run two Oracle JVMs in the same process in any case).
>
>  Thanks in advance, Mr. Wizard.
>>
>
> Sorry, oh ye mighty Python God, I fear my input was not really helpful to
> your cause. But maybe you have a project for me to clone, with instructions
> that might let this poor Python pilgrim reproduce the issue?
>
> Ciao,
> Dscho
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150318/c50c0eff/attachment.html>

From leek at broadinstitute.org  Wed Mar 18 15:35:54 2015
From: leek at broadinstitute.org (Lee Kamentsky)
Date: Wed, 18 Mar 2015 17:35:54 -0300
Subject: [ImageJ-devel] imagej-loader / dlopen args
In-Reply-To: <ab90ddc2ce2e23f37dbb6a56260acc08@www.dscho.org>
References: <CAHLFyjcMtGvxdA7mf_ikvnqxWH6VaPv3eN35WvwDFewyjwdF4w@mail.gmail.com>
	<ab90ddc2ce2e23f37dbb6a56260acc08@www.dscho.org>
Message-ID: <CAHLFyjee=0HCOhi1Zi0Jt6BSyMf8O88ErVyAfkVm-4BupjF4rA@mail.gmail.com>

OOps hit send too fast. But thanks.,

On Wed, Mar 18, 2015 at 4:32 PM, Johannes Schindelin <
johannes.schindelin at gmx.de> wrote:

> Hi Lee,
>
> On 2015-03-18 14:47, Lee Kamentsky wrote:
>
>  I'm programming "monkey see, monkey do" style. I have very little idea
>> what
>> I'm doing, trying to replicate the logic for mac loading dylibs in
>> imagej-loader.
>>
>> I've gotten pretty far, but at the end, I'm seeing the error,
>> "JavaNativeFoundation: GetGlobalVM: JNI_GetCreatedJavaVMs() failed to get
>> any VM" when I start an AWT app.
>>
>
> Do you expect a JVM to be running already? If not, you should [create one](
> https://github.com/imagej/imagej-launcher/blob/
> 3e061521a/src/main/c/ImageJ.c#L307-L322).
>

Nope - this happens when I am shutting down the JVM after starting AWT.

>  But maybe you have a project for me to clone, with instructions that
> might let this poor Python pilgrim reproduce the issue?
>
> The head of the master branch of
http://github.com/CellProfiler/python-javabridge and running "python
demo/demo_uicallback.py" should demostrate the problem when you quit. If it
doesn't, I fixed it.

Ciao,
> Dscho
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150318/0652723c/attachment.html>

From jay.w.warrick at gmail.com  Wed Mar 18 18:42:59 2015
From: jay.w.warrick at gmail.com (Jay Warrick)
Date: Wed, 18 Mar 2015 18:42:59 -0500
Subject: [ImageJ-devel] external plugins
Message-ID: <B526B846-EF29-470C-8176-768D33FEF592@gmail.com>

Hi All,

I am using the scijava plugin framework, ImageJ2, and its Plugin service. I would like to allow other people to write a plugin for my software. I'm open to suggestions but I'd probably like to enable them to place their java/jar/class plugin file in a folder, and I could look into that folder to load their plugin. I'm thinking along the lines of how how old ImageJ did things. Does anyone have suggestions or example code (e.g., in FIJI somewhere) for loading/compiling such plugin files during runtime. One of the main things I can't quite envision is how to process the annotations of an external .java file at runtime so that I can utilize that information (e.g., in conjunction with the PluginService). If there is an inherent problem in what I'm hoping to do, please let me know :-) (e.g., if I am provided compiled code, I suspect I might need an annotation index to go with it if I need that information).

I figured you guys have tackled this problem thoroughly already and thus would be a good resource. Thanks in advance!

Regards,

Jay



From saalfelds at janelia.hhmi.org  Wed Mar 18 22:33:29 2015
From: saalfelds at janelia.hhmi.org (Stephan Saalfeld)
Date: Wed, 18 Mar 2015 23:33:29 -0400
Subject: [ImageJ-devel] Eclipse hickup with enforcer rules of pom-fiji >
	7.2.0
Message-ID: <1426736009.14099.50.camel@saalfelds-ws1.janelia.priv>

Hi ImageJ developers,

Eclipse complains

Some Enforcer rules have failed. Look above for specific messages
explaining why the rule failed.
(org.apache.maven.plugins:maven-enforcer-plugin:1.3.1:enforce:enforce-rules:validate)

in my TrakEM2 master for each module.  No further information (neither
above nor below) is provided.

A terminal `mvn clean install`, however, succeeds without complaints.
So I assume that this is an Eclipse specific quirk.  I have Kepler
Service Release 1 installed.

Do you know about this [, do you have an idea what it is[, and do you
know how to fix it]]]?

Thanks in any case,
Stephan



From warrick at wisc.edu  Thu Mar 19 05:50:25 2015
From: warrick at wisc.edu (Jay Warrick)
Date: Thu, 19 Mar 2015 05:50:25 -0500
Subject: [ImageJ-devel] Eclipse hickup with enforcer rules of pom-fiji
	>	7.2.0
In-Reply-To: <1426736009.14099.50.camel@saalfelds-ws1.janelia.priv>
References: <1426736009.14099.50.camel@saalfelds-ws1.janelia.priv>
Message-ID: <37AB78E3-1B22-4EA9-A13D-60DF52B25BB8@wisc.edu>

Not sure if this helps... but once when I had issues with maven through eclipse once, I believe I found once that eclipse was running a different version of maven than what I would run at the command line. I think you can have the run be a bit more verbose and it will print you out some information about the maven version being used. Probably not it but might be worth checking.

In general though, I find fewer issues running maven from command line vs through eclipse. Often not sure exactly why.

Cheers,

Jay

> On Mar 18, 2015, at 10:33 PM, Stephan Saalfeld <saalfelds at janelia.hhmi.org> wrote:
> 
> Hi ImageJ developers,
> 
> Eclipse complains
> 
> Some Enforcer rules have failed. Look above for specific messages
> explaining why the rule failed.
> (org.apache.maven.plugins:maven-enforcer-plugin:1.3.1:enforce:enforce-rules:validate)
> 
> in my TrakEM2 master for each module.  No further information (neither
> above nor below) is provided.
> 
> A terminal `mvn clean install`, however, succeeds without complaints.
> So I assume that this is an Eclipse specific quirk.  I have Kepler
> Service Release 1 installed.
> 
> Do you know about this [, do you have an idea what it is[, and do you
> know how to fix it]]]?
> 
> Thanks in any case,
> Stephan
> 
> 
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel



From warrick at wisc.edu  Thu Mar 19 06:16:03 2015
From: warrick at wisc.edu (Jay Warrick)
Date: Thu, 19 Mar 2015 06:16:03 -0500
Subject: [ImageJ-devel] Eclipse hickup with enforcer rules of pom-fiji	>
 7.2.0
In-Reply-To: <37AB78E3-1B22-4EA9-A13D-60DF52B25BB8@wisc.edu>
References: <1426736009.14099.50.camel@saalfelds-ws1.janelia.priv>
	<37AB78E3-1B22-4EA9-A13D-60DF52B25BB8@wisc.edu>
Message-ID: <841A8880-22DD-4E79-9C96-3E2BE7DDA97B@wisc.edu>

Sorry for all the uses of "once". I had just woken up :-)

> On Mar 19, 2015, at 5:50 AM, Jay Warrick <warrick at wisc.edu> wrote:
> 
> Not sure if this helps... but once when I had issues with maven through eclipse once, I believe I found once that eclipse was running a different version of maven than what I would run at the command line. I think you can have the run be a bit more verbose and it will print you out some information about the maven version being used. Probably not it but might be worth checking.
> 
> In general though, I find fewer issues running maven from command line vs through eclipse. Often not sure exactly why.
> 
> Cheers,
> 
> Jay
> 
>> On Mar 18, 2015, at 10:33 PM, Stephan Saalfeld <saalfelds at janelia.hhmi.org> wrote:
>> 
>> Hi ImageJ developers,
>> 
>> Eclipse complains
>> 
>> Some Enforcer rules have failed. Look above for specific messages
>> explaining why the rule failed.
>> (org.apache.maven.plugins:maven-enforcer-plugin:1.3.1:enforce:enforce-rules:validate)
>> 
>> in my TrakEM2 master for each module.  No further information (neither
>> above nor below) is provided.
>> 
>> A terminal `mvn clean install`, however, succeeds without complaints.
>> So I assume that this is an Eclipse specific quirk.  I have Kepler
>> Service Release 1 installed.
>> 
>> Do you know about this [, do you have an idea what it is[, and do you
>> know how to fix it]]]?
>> 
>> Thanks in any case,
>> Stephan
>> 
>> 
>> _______________________________________________
>> ImageJ-devel mailing list
>> ImageJ-devel at imagej.net
>> http://imagej.net/mailman/listinfo/imagej-devel
> 
> 
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel



From hiner at wisc.edu  Thu Mar 19 08:51:05 2015
From: hiner at wisc.edu (Mark Hiner)
Date: Thu, 19 Mar 2015 08:51:05 -0500
Subject: [ImageJ-devel] external plugins
In-Reply-To: <B526B846-EF29-470C-8176-768D33FEF592@gmail.com>
References: <B526B846-EF29-470C-8176-768D33FEF592@gmail.com>
Message-ID: <CA+B=mGotMP2ryO-Uo84WnGPAN82D0VXUKiue-KFJdRWFz-z==g@mail.gmail.com>

Hi Jay,

>One of the main things I can't quite envision is how to process the
annotations of an external .java file at runtime so that I can utilize that
information

You shouldn't have to do this yourself. By using the SciJava plugin
framework you get discovery of all annotated plugins on your classpath, and
processing/indexing of those plugins, for free.

I'm assuming the paradigm that would match your needs is a
HandlerService[1]. The service would perform some function (e.g. opening a
path) and the behavior of that function would be extensible via
HandlerPlugins[2] (e.g. a plugin for handling URLs, files on disk, files in
a database, etc...).

The simplest example of "service chooses a plugin appropriate for the
circumstances" is the AnimalService tutorial[3]. Note that it's not
actually a HandlerService but could easily be converted to one. More
complex examples would be the IOService[4] or SCIFIO's FormatService[5].

Best,
Mark

[1]
https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/plugin/HandlerService.java
[2]
https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/plugin/HandlerPlugin.java
[3]
https://github.com/imagej/imagej-tutorials/tree/00394f9f5010d1787b9bf584b6e90eed01beec0d/create-a-new-plugin-type/src/main/java
[4]
https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/io/IOService.java
[5]
https://github.com/scifio/scifio/blob/scifio-0.21.1/src/main/java/io/scif/services/FormatService.java

On Wed, Mar 18, 2015 at 6:42 PM, Jay Warrick <jay.w.warrick at gmail.com>
wrote:

> Hi All,
>
> I am using the scijava plugin framework, ImageJ2, and its Plugin service.
> I would like to allow other people to write a plugin for my software. I'm
> open to suggestions but I'd probably like to enable them to place their
> java/jar/class plugin file in a folder, and I could look into that folder
> to load their plugin. I'm thinking along the lines of how how old ImageJ
> did things. Does anyone have suggestions or example code (e.g., in FIJI
> somewhere) for loading/compiling such plugin files during runtime. One of
> the main things I can't quite envision is how to process the annotations of
> an external .java file at runtime so that I can utilize that information
> (e.g., in conjunction with the PluginService). If there is an inherent
> problem in what I'm hoping to do, please let me know :-) (e.g., if I am
> provided compiled code, I suspect I might need an annotation index to go
> with it if I need that information).
>
> I figured you guys have tackled this problem thoroughly already and thus
> would be a good resource. Thanks in advance!
>
> Regards,
>
> Jay
>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150319/9eec5460/attachment.html>

From jay.w.warrick at gmail.com  Thu Mar 19 11:32:00 2015
From: jay.w.warrick at gmail.com (Jay Warrick)
Date: Thu, 19 Mar 2015 11:32:00 -0500
Subject: [ImageJ-devel] external plugins
In-Reply-To: <CA+B=mGotMP2ryO-Uo84WnGPAN82D0VXUKiue-KFJdRWFz-z==g@mail.gmail.com>
References: <B526B846-EF29-470C-8176-768D33FEF592@gmail.com>
	<CA+B=mGotMP2ryO-Uo84WnGPAN82D0VXUKiue-KFJdRWFz-z==g@mail.gmail.com>
Message-ID: <FE35E84B-49B1-4E3C-8BFB-DC8B5839B77E@gmail.com>

Thanks, Mark. I should likely be using this Handler methodology in a few places in my software, including in this case. However, I'm still concerned about detection of the plugin given the scenario I'm thinking of. But, maybe you can help me understand. I have already been able to build my software project around the SciJava plugin framework and ImageJ's PluginService to automatically recognize the plugins that are part of my own software project. The SciJava framework does its job beautifully to automatically discover the plugins I've developed within my software. However, what about the following scenario?

Person (A) downloads the binary of my software from me (B). Person (A) also downloads the .java/.class file of a just a plugin that would work within my software from third person (C). Person (A) wants to run my binary and load/use the plugin from person (C) at runtime. How would the SciJava plugin framework know how to automatically discover this plugin? 

My recollection is that the list of plugins loaded by the PluginService are determined from a java annotation index file that is created during early in the build process. Thus, I thought that if my program is already compiled and running before I specify where this "external plugin" resides and load the class, the PluginService would be unaware of the external plugin. Am I correct? If it can detect it, then it appears I'm home free and am worrying for nothing, which would be awesome.

Thanks!

Jay


> On Mar 19, 2015, at 8:51 AM, Mark Hiner <hiner at wisc.edu> wrote:
> 
> Hi Jay,
> 
> >One of the main things I can't quite envision is how to process the annotations of an external .java file at runtime so that I can utilize that information
> 
> You shouldn't have to do this yourself. By using the SciJava plugin framework you get discovery of all annotated plugins on your classpath, and processing/indexing of those plugins, for free.
> 
> I'm assuming the paradigm that would match your needs is a HandlerService[1]. The service would perform some function (e.g. opening a path) and the behavior of that function would be extensible via HandlerPlugins[2] (e.g. a plugin for handling URLs, files on disk, files in a database, etc...).
> 
> The simplest example of "service chooses a plugin appropriate for the circumstances" is the AnimalService tutorial[3]. Note that it's not actually a HandlerService but could easily be converted to one. More complex examples would be the IOService[4] or SCIFIO's FormatService[5].
> 
> Best,
> Mark
> 
> [1] https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/plugin/HandlerService.java <https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/plugin/HandlerService.java>
> [2] https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/plugin/HandlerPlugin.java <https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/plugin/HandlerPlugin.java>
> [3] https://github.com/imagej/imagej-tutorials/tree/00394f9f5010d1787b9bf584b6e90eed01beec0d/create-a-new-plugin-type/src/main/java <https://github.com/imagej/imagej-tutorials/tree/00394f9f5010d1787b9bf584b6e90eed01beec0d/create-a-new-plugin-type/src/main/java>
> [4] https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/io/IOService.java <https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/io/IOService.java>
> [5] https://github.com/scifio/scifio/blob/scifio-0.21.1/src/main/java/io/scif/services/FormatService.java <https://github.com/scifio/scifio/blob/scifio-0.21.1/src/main/java/io/scif/services/FormatService.java>
> 
> On Wed, Mar 18, 2015 at 6:42 PM, Jay Warrick <jay.w.warrick at gmail.com <mailto:jay.w.warrick at gmail.com>> wrote:
> Hi All,
> 
> I am using the scijava plugin framework, ImageJ2, and its Plugin service. I would like to allow other people to write a plugin for my software. I'm open to suggestions but I'd probably like to enable them to place their java/jar/class plugin file in a folder, and I could look into that folder to load their plugin. I'm thinking along the lines of how how old ImageJ did things. Does anyone have suggestions or example code (e.g., in FIJI somewhere) for loading/compiling such plugin files during runtime. One of the main things I can't quite envision is how to process the annotations of an external .java file at runtime so that I can utilize that information (e.g., in conjunction with the PluginService). If there is an inherent problem in what I'm hoping to do, please let me know :-) (e.g., if I am provided compiled code, I suspect I might need an annotation index to go with it if I need that information).
> 
> I figured you guys have tackled this problem thoroughly already and thus would be a good resource. Thanks in advance!
> 
> Regards,
> 
> Jay
> 
> 
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net <mailto:ImageJ-devel at imagej.net>
> http://imagej.net/mailman/listinfo/imagej-devel <http://imagej.net/mailman/listinfo/imagej-devel>
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150319/20372dd1/attachment.html>

From ctrueden at wisc.edu  Thu Mar 19 11:36:56 2015
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Thu, 19 Mar 2015 11:36:56 -0500
Subject: [ImageJ-devel] external plugins
In-Reply-To: <FE35E84B-49B1-4E3C-8BFB-DC8B5839B77E@gmail.com>
References: <B526B846-EF29-470C-8176-768D33FEF592@gmail.com>
	<CA+B=mGotMP2ryO-Uo84WnGPAN82D0VXUKiue-KFJdRWFz-z==g@mail.gmail.com>
	<FE35E84B-49B1-4E3C-8BFB-DC8B5839B77E@gmail.com>
Message-ID: <CADN69ykPpinHToA++ycnARGxKCqmwez5dkufPUCHQP5LB3+PsQ@mail.gmail.com>

Hi Jay,

> Person (A) also downloads the .java/.class file of a just a plugin
> that would work within my software from third person (C).

This is the scenario we are trying to move away from: distributing bare
.java or .class files. As long as plugins are distributed as .jar files
which contain the plugin annotation metadata (in
META-INF/json/org.scijava.plugin.Plugin), then all is well.

> Person (A) wants to run my binary and load/use the plugin from person
> (C) at runtime. How would the SciJava plugin framework know how to
> automatically discover this plugin?

The plugin (as a .jar file) is placed somewhere where it will be included
in the classpath at launch time. As long as the new .jar file is on the
classpath, it will be discovered at runtime.

> I thought that if my program is already compiled and running before I
> specify where this "external plugin" resides and load the class, the
> PluginService would be unaware of the external plugin.

Is it really a requirement that users be able to load additional plugins
_after_ your program starts up, without restarting the program? If not,
then I wouldn't worry about making this work, as it adds complexity for
little gain. Just put the new plugin somewhere on the classpath, start JEX,
and all is well.

If you really need to be able to load plugins after startup, this _can_ be
done. But you have to manually add them to the plugin service via the
addPlugins API method.

Regards,
Curtis

On Thu, Mar 19, 2015 at 11:32 AM, Jay Warrick <jay.w.warrick at gmail.com>
wrote:

> Thanks, Mark. I should likely be using this Handler methodology in a few
> places in my software, including in this case. However, I'm still concerned
> about detection of the plugin given the scenario I'm thinking of. But,
> maybe you can help me understand. I have already been able to build my
> software project around the SciJava plugin framework and ImageJ's
> PluginService to automatically recognize the plugins that are part of my
> own software project. The SciJava framework does its job beautifully to
> automatically discover the plugins I've developed within my software.
> However, what about the following scenario?
>
> Person (A) downloads the binary of my software from me (B). Person (A)
> also downloads the .java/.class file of a just a plugin that would work
> within my software from third person (C). Person (A) wants to run my binary
> and load/use the plugin from person (C) at runtime. How would the SciJava
> plugin framework know how to automatically discover this plugin?
>
> My recollection is that the list of plugins loaded by the PluginService
> are determined from a java annotation index file that is created during
> early in the build process. Thus, I thought that if my program is already
> compiled and running before I specify where this "external plugin" resides
> and load the class, the PluginService would be unaware of the external
> plugin. Am I correct? If it can detect it, then it appears I'm home free
> and am worrying for nothing, which would be awesome.
>
> Thanks!
>
> Jay
>
>
> On Mar 19, 2015, at 8:51 AM, Mark Hiner <hiner at wisc.edu> wrote:
>
> Hi Jay,
>
> >One of the main things I can't quite envision is how to process the
> annotations of an external .java file at runtime so that I can utilize that
> information
>
> You shouldn't have to do this yourself. By using the SciJava plugin
> framework you get discovery of all annotated plugins on your classpath, and
> processing/indexing of those plugins, for free.
>
> I'm assuming the paradigm that would match your needs is a
> HandlerService[1]. The service would perform some function (e.g. opening a
> path) and the behavior of that function would be extensible via
> HandlerPlugins[2] (e.g. a plugin for handling URLs, files on disk, files in
> a database, etc...).
>
> The simplest example of "service chooses a plugin appropriate for the
> circumstances" is the AnimalService tutorial[3]. Note that it's not
> actually a HandlerService but could easily be converted to one. More
> complex examples would be the IOService[4] or SCIFIO's FormatService[5].
>
> Best,
> Mark
>
> [1]
> https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/plugin/HandlerService.java
> [2]
> https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/plugin/HandlerPlugin.java
> [3]
> https://github.com/imagej/imagej-tutorials/tree/00394f9f5010d1787b9bf584b6e90eed01beec0d/create-a-new-plugin-type/src/main/java
> [4]
> https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/io/IOService.java
> [5]
> https://github.com/scifio/scifio/blob/scifio-0.21.1/src/main/java/io/scif/services/FormatService.java
>
> On Wed, Mar 18, 2015 at 6:42 PM, Jay Warrick <jay.w.warrick at gmail.com>
> wrote:
>
>> Hi All,
>>
>> I am using the scijava plugin framework, ImageJ2, and its Plugin service.
>> I would like to allow other people to write a plugin for my software. I'm
>> open to suggestions but I'd probably like to enable them to place their
>> java/jar/class plugin file in a folder, and I could look into that folder
>> to load their plugin. I'm thinking along the lines of how how old ImageJ
>> did things. Does anyone have suggestions or example code (e.g., in FIJI
>> somewhere) for loading/compiling such plugin files during runtime. One of
>> the main things I can't quite envision is how to process the annotations of
>> an external .java file at runtime so that I can utilize that information
>> (e.g., in conjunction with the PluginService). If there is an inherent
>> problem in what I'm hoping to do, please let me know :-) (e.g., if I am
>> provided compiled code, I suspect I might need an annotation index to go
>> with it if I need that information).
>>
>> I figured you guys have tackled this problem thoroughly already and thus
>> would be a good resource. Thanks in advance!
>>
>> Regards,
>>
>> Jay
>>
>>
>> _______________________________________________
>> ImageJ-devel mailing list
>> ImageJ-devel at imagej.net
>> http://imagej.net/mailman/listinfo/imagej-devel
>>
>
>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150319/0eec9998/attachment-0001.html>

From ctrueden at wisc.edu  Thu Mar 19 12:18:53 2015
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Thu, 19 Mar 2015 12:18:53 -0500
Subject: [ImageJ-devel] Eclipse hickup with enforcer rules of pom-fiji >
	7.2.0
In-Reply-To: <1426736009.14099.50.camel@saalfelds-ws1.janelia.priv>
References: <1426736009.14099.50.camel@saalfelds-ws1.janelia.priv>
Message-ID: <CADN69yk+mTzxrjbB42PsfXvCRdtdGErFE-2Z8-wjiSH2AHsYnA@mail.gmail.com>

Hi Stephan,

> Do you know about this [, do you have an idea what it is[

Probably, this started happening because of this change:

https://github.com/scijava/pom-scijava/commit/5e6bddae9fcc965722c0fce1e2996c2e49b60411

Which in general is a _good_ thing because it's better for Eclipse to tell
you than for Jenkins to tell you later after you pushed to master.

If there are enforcer issues, they should be addressed, or if unaddressable
the enforcer can be squelched so that CLI and Jenkins also do not complain.

The weird thing here is that your Eclipse is complaining but our CLI is
not. Jay may be on to something about a Maven version discrepancy. Why are
you still on Kepler? You could try upgrading to Luna?I know of at least one
annoying Maven-related bug that was fixed. You could also try using the Run
As > Maven build... and specifying the "Debug Output" option (which passes
the -X flag to Maven), and see if that tells you anything interesting.

Regards,
Curtis

On Wed, Mar 18, 2015 at 10:33 PM, Stephan Saalfeld <
saalfelds at janelia.hhmi.org> wrote:

> Hi ImageJ developers,
>
> Eclipse complains
>
> Some Enforcer rules have failed. Look above for specific messages
> explaining why the rule failed.
>
> (org.apache.maven.plugins:maven-enforcer-plugin:1.3.1:enforce:enforce-rules:validate)
>
> in my TrakEM2 master for each module.  No further information (neither
> above nor below) is provided.
>
> A terminal `mvn clean install`, however, succeeds without complaints.
> So I assume that this is an Eclipse specific quirk.  I have Kepler
> Service Release 1 installed.
>
> Do you know about this [, do you have an idea what it is[, and do you
> know how to fix it]]]?
>
> Thanks in any case,
> Stephan
>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150319/98c1391e/attachment.html>

From jay.w.warrick at gmail.com  Thu Mar 19 12:50:42 2015
From: jay.w.warrick at gmail.com (Jay Warrick)
Date: Thu, 19 Mar 2015 12:50:42 -0500
Subject: [ImageJ-devel] external plugins
In-Reply-To: <CADN69ykPpinHToA++ycnARGxKCqmwez5dkufPUCHQP5LB3+PsQ@mail.gmail.com>
References: <B526B846-EF29-470C-8176-768D33FEF592@gmail.com>
	<CA+B=mGotMP2ryO-Uo84WnGPAN82D0VXUKiue-KFJdRWFz-z==g@mail.gmail.com>
	<FE35E84B-49B1-4E3C-8BFB-DC8B5839B77E@gmail.com>
	<CADN69ykPpinHToA++ycnARGxKCqmwez5dkufPUCHQP5LB3+PsQ@mail.gmail.com>
Message-ID: <6A76ED20-F814-4FD8-91BC-7F9AE7131D05@gmail.com>

Sweet. Thanks for the clarification. I'm fine with requiring compiled jars. I was prepared to use something like the addPlugins API but certainly see the simplicity of the restart method and will likely try that for now.

What might be the best way to include these compiled jars in my class path upon launching the binary? Would one option be to edit the simple launch script for the software by adding a classpath argument to the "java ..." command?


> On Mar 19, 2015, at 11:36 AM, Curtis Rueden <ctrueden at wisc.edu> wrote:
> 
> Hi Jay,
> 
> > Person (A) also downloads the .java/.class file of a just a plugin
> > that would work within my software from third person (C).
> 
> This is the scenario we are trying to move away from: distributing bare .java or .class files. As long as plugins are distributed as .jar files which contain the plugin annotation metadata (in META-INF/json/org.scijava.plugin.Plugin), then all is well.
> 
> > Person (A) wants to run my binary and load/use the plugin from person
> > (C) at runtime. How would the SciJava plugin framework know how to
> > automatically discover this plugin? 
> 
> The plugin (as a .jar file) is placed somewhere where it will be included in the classpath at launch time. As long as the new .jar file is on the classpath, it will be discovered at runtime.
> 
> > I thought that if my program is already compiled and running before I
> > specify where this "external plugin" resides and load the class, the
> > PluginService would be unaware of the external plugin.
> 
> Is it really a requirement that users be able to load additional plugins _after_ your program starts up, without restarting the program? If not, then I wouldn't worry about making this work, as it adds complexity for little gain. Just put the new plugin somewhere on the classpath, start JEX, and all is well.
> 
> If you really need to be able to load plugins after startup, this _can_ be done. But you have to manually add them to the plugin service via the addPlugins API method.
> 
> Regards,
> Curtis
> 
> On Thu, Mar 19, 2015 at 11:32 AM, Jay Warrick <jay.w.warrick at gmail.com <mailto:jay.w.warrick at gmail.com>> wrote:
> Thanks, Mark. I should likely be using this Handler methodology in a few places in my software, including in this case. However, I'm still concerned about detection of the plugin given the scenario I'm thinking of. But, maybe you can help me understand. I have already been able to build my software project around the SciJava plugin framework and ImageJ's PluginService to automatically recognize the plugins that are part of my own software project. The SciJava framework does its job beautifully to automatically discover the plugins I've developed within my software. However, what about the following scenario?
> 
> Person (A) downloads the binary of my software from me (B). Person (A) also downloads the .java/.class file of a just a plugin that would work within my software from third person (C). Person (A) wants to run my binary and load/use the plugin from person (C) at runtime. How would the SciJava plugin framework know how to automatically discover this plugin? 
> 
> My recollection is that the list of plugins loaded by the PluginService are determined from a java annotation index file that is created during early in the build process. Thus, I thought that if my program is already compiled and running before I specify where this "external plugin" resides and load the class, the PluginService would be unaware of the external plugin. Am I correct? If it can detect it, then it appears I'm home free and am worrying for nothing, which would be awesome.
> 
> Thanks!
> 
> Jay
> 
> 
>> On Mar 19, 2015, at 8:51 AM, Mark Hiner <hiner at wisc.edu <mailto:hiner at wisc.edu>> wrote:
>> 
>> Hi Jay,
>> 
>> >One of the main things I can't quite envision is how to process the annotations of an external .java file at runtime so that I can utilize that information
>> 
>> You shouldn't have to do this yourself. By using the SciJava plugin framework you get discovery of all annotated plugins on your classpath, and processing/indexing of those plugins, for free.
>> 
>> I'm assuming the paradigm that would match your needs is a HandlerService[1]. The service would perform some function (e.g. opening a path) and the behavior of that function would be extensible via HandlerPlugins[2] (e.g. a plugin for handling URLs, files on disk, files in a database, etc...).
>> 
>> The simplest example of "service chooses a plugin appropriate for the circumstances" is the AnimalService tutorial[3]. Note that it's not actually a HandlerService but could easily be converted to one. More complex examples would be the IOService[4] or SCIFIO's FormatService[5].
>> 
>> Best,
>> Mark
>> 
>> [1] https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/plugin/HandlerService.java <https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/plugin/HandlerService.java>
>> [2] https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/plugin/HandlerPlugin.java <https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/plugin/HandlerPlugin.java>
>> [3] https://github.com/imagej/imagej-tutorials/tree/00394f9f5010d1787b9bf584b6e90eed01beec0d/create-a-new-plugin-type/src/main/java <https://github.com/imagej/imagej-tutorials/tree/00394f9f5010d1787b9bf584b6e90eed01beec0d/create-a-new-plugin-type/src/main/java>
>> [4] https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/io/IOService.java <https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/io/IOService.java>
>> [5] https://github.com/scifio/scifio/blob/scifio-0.21.1/src/main/java/io/scif/services/FormatService.java <https://github.com/scifio/scifio/blob/scifio-0.21.1/src/main/java/io/scif/services/FormatService.java>
>> 
>> On Wed, Mar 18, 2015 at 6:42 PM, Jay Warrick <jay.w.warrick at gmail.com <mailto:jay.w.warrick at gmail.com>> wrote:
>> Hi All,
>> 
>> I am using the scijava plugin framework, ImageJ2, and its Plugin service. I would like to allow other people to write a plugin for my software. I'm open to suggestions but I'd probably like to enable them to place their java/jar/class plugin file in a folder, and I could look into that folder to load their plugin. I'm thinking along the lines of how how old ImageJ did things. Does anyone have suggestions or example code (e.g., in FIJI somewhere) for loading/compiling such plugin files during runtime. One of the main things I can't quite envision is how to process the annotations of an external .java file at runtime so that I can utilize that information (e.g., in conjunction with the PluginService). If there is an inherent problem in what I'm hoping to do, please let me know :-) (e.g., if I am provided compiled code, I suspect I might need an annotation index to go with it if I need that information).
>> 
>> I figured you guys have tackled this problem thoroughly already and thus would be a good resource. Thanks in advance!
>> 
>> Regards,
>> 
>> Jay
>> 
>> 
>> _______________________________________________
>> ImageJ-devel mailing list
>> ImageJ-devel at imagej.net <mailto:ImageJ-devel at imagej.net>
>> http://imagej.net/mailman/listinfo/imagej-devel <http://imagej.net/mailman/listinfo/imagej-devel>
>> 
> 
> 
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net <mailto:ImageJ-devel at imagej.net>
> http://imagej.net/mailman/listinfo/imagej-devel <http://imagej.net/mailman/listinfo/imagej-devel>
> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150319/41e93966/attachment.html>

From saalfelds at janelia.hhmi.org  Thu Mar 19 12:53:43 2015
From: saalfelds at janelia.hhmi.org (Stephan Saalfeld)
Date: Thu, 19 Mar 2015 13:53:43 -0400
Subject: [ImageJ-devel] Eclipse hickup with enforcer rules of pom-fiji >
 7.2.0
In-Reply-To: <CADN69yk+mTzxrjbB42PsfXvCRdtdGErFE-2Z8-wjiSH2AHsYnA@mail.gmail.com>
References: <1426736009.14099.50.camel@saalfelds-ws1.janelia.priv>
	<CADN69yk+mTzxrjbB42PsfXvCRdtdGErFE-2Z8-wjiSH2AHsYnA@mail.gmail.com>
Message-ID: <1426787623.14099.76.camel@saalfelds-ws1.janelia.priv>

Hi Curtis and Jay,

I upgraded to Luna with the same effect.  7.2.0 works, 8.0.0 triggers
the unspecific complaint as show in the OP.

Run As > Maven build... + Debug Output

says:

[INFO] Property 'imagej.app.directory' unset; Skipping copy-jars
[INFO]
------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO] 
[INFO] Aggregator project for Albert Cardona's TrakEM2 software suite
SUCCESS [  5.098 s]
[INFO] jars/VectorString.jar ............................. SUCCESS [
8.813 s]
[INFO] mpicbg-trakem2 .................................... SUCCESS [
8.074 s]
[INFO] plugins/TrakEM2_.jar .............................. SUCCESS
[ 28.727 s]
[INFO] jars/T2-NIT.jar ................................... SUCCESS
[ 14.724 s]
[INFO] jars/T2-TreelineGraph.jar ......................... SUCCESS
[ 13.202 s]
[INFO]
------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO]
------------------------------------------------------------------------
[INFO] Total time: 01:19 min
[INFO] Finished at: 2015-03-19T13:45:46-05:00
[INFO] Final Memory: 250M/3444M
[INFO]
------------------------------------------------------------------------





But the error mark (red x) persists on all mudules' pom files with the
unspecific error message.

Next test, running Maven build... in mpicbg-trakem2-1.2.3-SNAPSHOT, or
any of the other modules where the error manifests leads to more
informative output:


The following dependencies either are SNAPSHOT versions (V), contain 
SNAPSHOT parents (P), or contain SNAPSHOT dependencies (D):

 (P)  sc.fiji:mpicbg-trakem2:1.2.3-SNAPSHOT

[INFO]
------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO]
------------------------------------------------------------------------
[INFO] Total time: 3.043 s
[INFO] Finished at: 2015-03-19T13:48:20-05:00
[INFO] Final Memory: 33M/1930M
[INFO]
------------------------------------------------------------------------
[ERROR] Failed to execute goal
org.apache.maven.plugins:maven-enforcer-plugin:1.3.1:enforce
(enforce-rules) on project mpicbg-trakem2: Some Enforcer rules have
failed. Look above for specific messages explaining why the rule failed.
-> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to
execute goal
org.apache.maven.plugins:maven-enforcer-plugin:1.3.1:enforce
(enforce-rules) on project mpicbg-trakem2: Some Enforcer rules have
failed. Look above for specific messages explaining why the rule failed.
	at
org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:216)
	at
org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at
org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at
org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:108)
	at
org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:76)
	at
org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
	at
org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:116)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:361)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:155)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:584)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:213)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:157)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at
org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
	at
org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
	at
org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
	at
org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
Caused by: org.apache.maven.plugin.MojoExecutionException: Some Enforcer
rules have failed. Look above for specific messages explaining why the
rule failed.
	at
org.apache.maven.plugins.enforcer.EnforceMojo.execute(EnforceMojo.java:209)
	at
org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:133)
	at
org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)
	... 19 more
[ERROR] 
[ERROR] 
[ERROR] For more information about the errors and possible solutions,
please read the following articles:
[ERROR] [Help 1]
http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException



Wait, mpicbg-trakem2-1.2.3-SNAPSHOT is the project that I am building,
not a dependency thereof---and it is at a SNAPSHOT version---yes,
because I am in development cycle---that should work---no?

Thanks for your help,
Stephan



On Thu, 2015-03-19 at 12:18 -0500, Curtis Rueden wrote:
> Hi Stephan,
> 
> > Do you know about this [, do you have an idea what it is[
> 
> Probably, this started happening because of this change:
> 
> https://github.com/scijava/pom-scijava/commit/5e6bddae9fcc965722c0fce1e2996c2e49b60411
> 
> Which in general is a _good_ thing because it's better for Eclipse to tell
> you than for Jenkins to tell you later after you pushed to master.
> 
> If there are enforcer issues, they should be addressed, or if unaddressable
> the enforcer can be squelched so that CLI and Jenkins also do not complain.
> 
> The weird thing here is that your Eclipse is complaining but our CLI is
> not. Jay may be on to something about a Maven version discrepancy. Why are
> you still on Kepler? You could try upgrading to Luna?I know of at least one
> annoying Maven-related bug that was fixed. You could also try using the Run
> As > Maven build... and specifying the "Debug Output" option (which passes
> the -X flag to Maven), and see if that tells you anything interesting.
> 
> Regards,
> Curtis
> 
> On Wed, Mar 18, 2015 at 10:33 PM, Stephan Saalfeld <
> saalfelds at janelia.hhmi.org> wrote:
> 
> > Hi ImageJ developers,
> >
> > Eclipse complains
> >
> > Some Enforcer rules have failed. Look above for specific messages
> > explaining why the rule failed.
> >
> > (org.apache.maven.plugins:maven-enforcer-plugin:1.3.1:enforce:enforce-rules:validate)
> >
> > in my TrakEM2 master for each module.  No further information (neither
> > above nor below) is provided.
> >
> > A terminal `mvn clean install`, however, succeeds without complaints.
> > So I assume that this is an Eclipse specific quirk.  I have Kepler
> > Service Release 1 installed.
> >
> > Do you know about this [, do you have an idea what it is[, and do you
> > know how to fix it]]]?
> >
> > Thanks in any case,
> > Stephan
> >
> >
> > _______________________________________________
> > ImageJ-devel mailing list
> > ImageJ-devel at imagej.net
> > http://imagej.net/mailman/listinfo/imagej-devel
> >



From ctrueden at wisc.edu  Thu Mar 19 13:15:01 2015
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Thu, 19 Mar 2015 13:15:01 -0500
Subject: [ImageJ-devel] external plugins
In-Reply-To: <6A76ED20-F814-4FD8-91BC-7F9AE7131D05@gmail.com>
References: <B526B846-EF29-470C-8176-768D33FEF592@gmail.com>
	<CA+B=mGotMP2ryO-Uo84WnGPAN82D0VXUKiue-KFJdRWFz-z==g@mail.gmail.com>
	<FE35E84B-49B1-4E3C-8BFB-DC8B5839B77E@gmail.com>
	<CADN69ykPpinHToA++ycnARGxKCqmwez5dkufPUCHQP5LB3+PsQ@mail.gmail.com>
	<6A76ED20-F814-4FD8-91BC-7F9AE7131D05@gmail.com>
Message-ID: <CADN69ynPXZXn141-sJcGNLdJGoQ8JqZz=kg+9C2Ymk6EU5FRgw@mail.gmail.com>

Hi Jay,

> What might be the best way to include these compiled jars in my class
> path upon launching the binary?

Well, one option would be to make JEX into a plugin for ImageJ, with a JEX
update site. Then JARs in the jars/ and plugins/ directories would
automatically be on the classpath, thanks to the ImageJ launcher.

Otherwise, deployment of Java applications is a rough issue, man. If you
don't want to use ImageJ's solution (the Launcher), then you can research
it yourself and go your own way. There are a million and one ways to do it,
and they all have their pros and cons. One popular option is launch4j [1].
Actually, I would love to switch ImageJ to something more industry standard
like that, but it's quite a lot of effort and surely there would be some
serious backwards incompatibilities...

Regards,
Curtis

[1] http://launch4j.sourceforge.net/

On Thu, Mar 19, 2015 at 12:50 PM, Jay Warrick <jay.w.warrick at gmail.com>
wrote:

> Sweet. Thanks for the clarification. I'm fine with requiring compiled
> jars. I was prepared to use something like the addPlugins API but certainly
> see the simplicity of the restart method and will likely try that for now.
>
> What might be the best way to include these compiled jars in my class path
> upon launching the binary? Would one option be to edit the simple launch
> script for the software by adding a classpath argument to the "java ..."
> command?
>
>
> On Mar 19, 2015, at 11:36 AM, Curtis Rueden <ctrueden at wisc.edu> wrote:
>
> Hi Jay,
>
> > Person (A) also downloads the .java/.class file of a just a plugin
> > that would work within my software from third person (C).
>
> This is the scenario we are trying to move away from: distributing bare
> .java or .class files. As long as plugins are distributed as .jar files
> which contain the plugin annotation metadata (in
> META-INF/json/org.scijava.plugin.Plugin), then all is well.
>
> > Person (A) wants to run my binary and load/use the plugin from person
> > (C) at runtime. How would the SciJava plugin framework know how to
> > automatically discover this plugin?
>
> The plugin (as a .jar file) is placed somewhere where it will be included
> in the classpath at launch time. As long as the new .jar file is on the
> classpath, it will be discovered at runtime.
>
> > I thought that if my program is already compiled and running before I
> > specify where this "external plugin" resides and load the class, the
> > PluginService would be unaware of the external plugin.
>
> Is it really a requirement that users be able to load additional plugins
> _after_ your program starts up, without restarting the program? If not,
> then I wouldn't worry about making this work, as it adds complexity for
> little gain. Just put the new plugin somewhere on the classpath, start JEX,
> and all is well.
>
> If you really need to be able to load plugins after startup, this _can_ be
> done. But you have to manually add them to the plugin service via the
> addPlugins API method.
>
> Regards,
> Curtis
>
> On Thu, Mar 19, 2015 at 11:32 AM, Jay Warrick <jay.w.warrick at gmail.com>
> wrote:
>
>> Thanks, Mark. I should likely be using this Handler methodology in a few
>> places in my software, including in this case. However, I'm still concerned
>> about detection of the plugin given the scenario I'm thinking of. But,
>> maybe you can help me understand. I have already been able to build my
>> software project around the SciJava plugin framework and ImageJ's
>> PluginService to automatically recognize the plugins that are part of my
>> own software project. The SciJava framework does its job beautifully to
>> automatically discover the plugins I've developed within my software.
>> However, what about the following scenario?
>>
>> Person (A) downloads the binary of my software from me (B). Person (A)
>> also downloads the .java/.class file of a just a plugin that would work
>> within my software from third person (C). Person (A) wants to run my binary
>> and load/use the plugin from person (C) at runtime. How would the SciJava
>> plugin framework know how to automatically discover this plugin?
>>
>> My recollection is that the list of plugins loaded by the PluginService
>> are determined from a java annotation index file that is created during
>> early in the build process. Thus, I thought that if my program is already
>> compiled and running before I specify where this "external plugin" resides
>> and load the class, the PluginService would be unaware of the external
>> plugin. Am I correct? If it can detect it, then it appears I'm home free
>> and am worrying for nothing, which would be awesome.
>>
>> Thanks!
>>
>> Jay
>>
>>
>> On Mar 19, 2015, at 8:51 AM, Mark Hiner <hiner at wisc.edu> wrote:
>>
>> Hi Jay,
>>
>> >One of the main things I can't quite envision is how to process the
>> annotations of an external .java file at runtime so that I can utilize that
>> information
>>
>> You shouldn't have to do this yourself. By using the SciJava plugin
>> framework you get discovery of all annotated plugins on your classpath, and
>> processing/indexing of those plugins, for free.
>>
>> I'm assuming the paradigm that would match your needs is a
>> HandlerService[1]. The service would perform some function (e.g. opening a
>> path) and the behavior of that function would be extensible via
>> HandlerPlugins[2] (e.g. a plugin for handling URLs, files on disk, files in
>> a database, etc...).
>>
>> The simplest example of "service chooses a plugin appropriate for the
>> circumstances" is the AnimalService tutorial[3]. Note that it's not
>> actually a HandlerService but could easily be converted to one. More
>> complex examples would be the IOService[4] or SCIFIO's FormatService[5].
>>
>> Best,
>> Mark
>>
>> [1]
>> https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/plugin/HandlerService.java
>> [2]
>> https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/plugin/HandlerPlugin.java
>> [3]
>> https://github.com/imagej/imagej-tutorials/tree/00394f9f5010d1787b9bf584b6e90eed01beec0d/create-a-new-plugin-type/src/main/java
>> [4]
>> https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/io/IOService.java
>> [5]
>> https://github.com/scifio/scifio/blob/scifio-0.21.1/src/main/java/io/scif/services/FormatService.java
>>
>> On Wed, Mar 18, 2015 at 6:42 PM, Jay Warrick <jay.w.warrick at gmail.com>
>> wrote:
>>
>>> Hi All,
>>>
>>> I am using the scijava plugin framework, ImageJ2, and its Plugin
>>> service. I would like to allow other people to write a plugin for my
>>> software. I'm open to suggestions but I'd probably like to enable them to
>>> place their java/jar/class plugin file in a folder, and I could look into
>>> that folder to load their plugin. I'm thinking along the lines of how how
>>> old ImageJ did things. Does anyone have suggestions or example code (e.g.,
>>> in FIJI somewhere) for loading/compiling such plugin files during runtime.
>>> One of the main things I can't quite envision is how to process the
>>> annotations of an external .java file at runtime so that I can utilize that
>>> information (e.g., in conjunction with the PluginService). If there is an
>>> inherent problem in what I'm hoping to do, please let me know :-) (e.g., if
>>> I am provided compiled code, I suspect I might need an annotation index to
>>> go with it if I need that information).
>>>
>>> I figured you guys have tackled this problem thoroughly already and thus
>>> would be a good resource. Thanks in advance!
>>>
>>> Regards,
>>>
>>> Jay
>>>
>>>
>>> _______________________________________________
>>> ImageJ-devel mailing list
>>> ImageJ-devel at imagej.net
>>> http://imagej.net/mailman/listinfo/imagej-devel
>>>
>>
>>
>>
>> _______________________________________________
>> ImageJ-devel mailing list
>> ImageJ-devel at imagej.net
>> http://imagej.net/mailman/listinfo/imagej-devel
>>
>>
>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150319/fa13e341/attachment.html>

From hiner at wisc.edu  Thu Mar 19 13:25:26 2015
From: hiner at wisc.edu (Mark Hiner)
Date: Thu, 19 Mar 2015 13:25:26 -0500
Subject: [ImageJ-devel] Eclipse hickup with enforcer rules of pom-fiji >
	7.2.0
In-Reply-To: <1426787623.14099.76.camel@saalfelds-ws1.janelia.priv>
References: <1426736009.14099.50.camel@saalfelds-ws1.janelia.priv>
	<CADN69yk+mTzxrjbB42PsfXvCRdtdGErFE-2Z8-wjiSH2AHsYnA@mail.gmail.com>
	<1426787623.14099.76.camel@saalfelds-ws1.janelia.priv>
Message-ID: <CA+B=mGpLjoCtwwP7KaasMuseNEkk401vdj0+LPSgbqvMKu8m_Q@mail.gmail.com>

Hi Stephan,

>Wait, mpicbg-trakem2-1.2.3-SNAPSHOT is the project that I am building

>The following dependencies either are SNAPSHOT versions (V), contain
>SNAPSHOT parents (P), or contain SNAPSHOT dependencies (D):
>(P)  sc.fiji:mpicbg-trakem2:1.2.3-SNAPSHOT

It is fine that mpicbg-trakem2 is a SNAPSHOT. The (P) indicates that a
SNAPSHOT parent is making things unhappy. If the object was not allowed to
be a SNAPSHOT you would see a (V). But it is misleading to call it a
dependency.. consider it reworded.

For SNAPSHOT-coupled multi-module builds, the contract is that SNAPSHOTS
are allowed as long as everything is built from the top-level. If you built
from a submodule, Maven could resolve the SNAPSHOT parent remotely, which
would then not be guaranteed to match the parent in your multi-module
project.

Eclipse is problematic because it splits each submodule out to the same
level as the parent pom, and resolves each individually, thus causing
RequireReproducibleBuilds to fail.

I will look into ways of obtaining the reactor's parent pom locally[1], so
that we can build submodules directly.

Best,
- Mark

[1] https://github.com/scijava/scijava-maven-plugin/issues/12

On Thu, Mar 19, 2015 at 12:53 PM, Stephan Saalfeld <
saalfelds at janelia.hhmi.org> wrote:

> Hi Curtis and Jay,
>
> I upgraded to Luna with the same effect.  7.2.0 works, 8.0.0 triggers
> the unspecific complaint as show in the OP.
>
> Run As > Maven build... + Debug Output
>
> says:
>
> [INFO] Property 'imagej.app.directory' unset; Skipping copy-jars
> [INFO]
> ------------------------------------------------------------------------
> [INFO] Reactor Summary:
> [INFO]
> [INFO] Aggregator project for Albert Cardona's TrakEM2 software suite
> SUCCESS [  5.098 s]
> [INFO] jars/VectorString.jar ............................. SUCCESS [
> 8.813 s]
> [INFO] mpicbg-trakem2 .................................... SUCCESS [
> 8.074 s]
> [INFO] plugins/TrakEM2_.jar .............................. SUCCESS
> [ 28.727 s]
> [INFO] jars/T2-NIT.jar ................................... SUCCESS
> [ 14.724 s]
> [INFO] jars/T2-TreelineGraph.jar ......................... SUCCESS
> [ 13.202 s]
> [INFO]
> ------------------------------------------------------------------------
> [INFO] BUILD SUCCESS
> [INFO]
> ------------------------------------------------------------------------
> [INFO] Total time: 01:19 min
> [INFO] Finished at: 2015-03-19T13:45:46-05:00
> [INFO] Final Memory: 250M/3444M
> [INFO]
> ------------------------------------------------------------------------
>
>
>
>
>
> But the error mark (red x) persists on all mudules' pom files with the
> unspecific error message.
>
> Next test, running Maven build... in mpicbg-trakem2-1.2.3-SNAPSHOT, or
> any of the other modules where the error manifests leads to more
> informative output:
>
>
> The following dependencies either are SNAPSHOT versions (V), contain
> SNAPSHOT parents (P), or contain SNAPSHOT dependencies (D):
>
>  (P)  sc.fiji:mpicbg-trakem2:1.2.3-SNAPSHOT
>
> [INFO]
> ------------------------------------------------------------------------
> [INFO] BUILD FAILURE
> [INFO]
> ------------------------------------------------------------------------
> [INFO] Total time: 3.043 s
> [INFO] Finished at: 2015-03-19T13:48:20-05:00
> [INFO] Final Memory: 33M/1930M
> [INFO]
> ------------------------------------------------------------------------
> [ERROR] Failed to execute goal
> org.apache.maven.plugins:maven-enforcer-plugin:1.3.1:enforce
> (enforce-rules) on project mpicbg-trakem2: Some Enforcer rules have
> failed. Look above for specific messages explaining why the rule failed.
> -> [Help 1]
> org.apache.maven.lifecycle.LifecycleExecutionException: Failed to
> execute goal
> org.apache.maven.plugins:maven-enforcer-plugin:1.3.1:enforce
> (enforce-rules) on project mpicbg-trakem2: Some Enforcer rules have
> failed. Look above for specific messages explaining why the rule failed.
>         at
>
> org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:216)
>         at
>
> org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
>         at
>
> org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
>         at
>
> org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:108)
>         at
>
> org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:76)
>         at
>
> org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
>         at
>
> org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:116)
>         at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:361)
>         at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:155)
>         at org.apache.maven.cli.MavenCli.execute(MavenCli.java:584)
>         at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:213)
>         at org.apache.maven.cli.MavenCli.main(MavenCli.java:157)
>         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
>         at
>
> sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
>         at
>
> sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
>         at java.lang.reflect.Method.invoke(Method.java:606)
>         at
>
> org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
>         at
> org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
>         at
>
> org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
>         at
> org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
> Caused by: org.apache.maven.plugin.MojoExecutionException: Some Enforcer
> rules have failed. Look above for specific messages explaining why the
> rule failed.
>         at
> org.apache.maven.plugins.enforcer.EnforceMojo.execute(EnforceMojo.java:209)
>         at
>
> org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:133)
>         at
>
> org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)
>         ... 19 more
> [ERROR]
> [ERROR]
> [ERROR] For more information about the errors and possible solutions,
> please read the following articles:
> [ERROR] [Help 1]
> http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
>
>
>
> Wait, mpicbg-trakem2-1.2.3-SNAPSHOT is the project that I am building,
> not a dependency thereof---and it is at a SNAPSHOT version---yes,
> because I am in development cycle---that should work---no?
>
> Thanks for your help,
> Stephan
>
>
>
> On Thu, 2015-03-19 at 12:18 -0500, Curtis Rueden wrote:
> > Hi Stephan,
> >
> > > Do you know about this [, do you have an idea what it is[
> >
> > Probably, this started happening because of this change:
> >
> >
> https://github.com/scijava/pom-scijava/commit/5e6bddae9fcc965722c0fce1e2996c2e49b60411
> >
> > Which in general is a _good_ thing because it's better for Eclipse to
> tell
> > you than for Jenkins to tell you later after you pushed to master.
> >
> > If there are enforcer issues, they should be addressed, or if
> unaddressable
> > the enforcer can be squelched so that CLI and Jenkins also do not
> complain.
> >
> > The weird thing here is that your Eclipse is complaining but our CLI is
> > not. Jay may be on to something about a Maven version discrepancy. Why
> are
> > you still on Kepler? You could try upgrading to Luna?I know of at least
> one
> > annoying Maven-related bug that was fixed. You could also try using the
> Run
> > As > Maven build... and specifying the "Debug Output" option (which
> passes
> > the -X flag to Maven), and see if that tells you anything interesting.
> >
> > Regards,
> > Curtis
> >
> > On Wed, Mar 18, 2015 at 10:33 PM, Stephan Saalfeld <
> > saalfelds at janelia.hhmi.org> wrote:
> >
> > > Hi ImageJ developers,
> > >
> > > Eclipse complains
> > >
> > > Some Enforcer rules have failed. Look above for specific messages
> > > explaining why the rule failed.
> > >
> > >
> (org.apache.maven.plugins:maven-enforcer-plugin:1.3.1:enforce:enforce-rules:validate)
> > >
> > > in my TrakEM2 master for each module.  No further information (neither
> > > above nor below) is provided.
> > >
> > > A terminal `mvn clean install`, however, succeeds without complaints.
> > > So I assume that this is an Eclipse specific quirk.  I have Kepler
> > > Service Release 1 installed.
> > >
> > > Do you know about this [, do you have an idea what it is[, and do you
> > > know how to fix it]]]?
> > >
> > > Thanks in any case,
> > > Stephan
> > >
> > >
> > > _______________________________________________
> > > ImageJ-devel mailing list
> > > ImageJ-devel at imagej.net
> > > http://imagej.net/mailman/listinfo/imagej-devel
> > >
>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150319/cd17ad39/attachment-0001.html>

From saalfelds at janelia.hhmi.org  Thu Mar 19 13:36:54 2015
From: saalfelds at janelia.hhmi.org (Stephan Saalfeld)
Date: Thu, 19 Mar 2015 14:36:54 -0400
Subject: [ImageJ-devel] Eclipse hickup with enforcer rules of pom-fiji >
 7.2.0
In-Reply-To: <CA+B=mGpLjoCtwwP7KaasMuseNEkk401vdj0+LPSgbqvMKu8m_Q@mail.gmail.com>
References: <1426736009.14099.50.camel@saalfelds-ws1.janelia.priv>
	<CADN69yk+mTzxrjbB42PsfXvCRdtdGErFE-2Z8-wjiSH2AHsYnA@mail.gmail.com>
	<1426787623.14099.76.camel@saalfelds-ws1.janelia.priv>
	<CA+B=mGpLjoCtwwP7KaasMuseNEkk401vdj0+LPSgbqvMKu8m_Q@mail.gmail.com>
Message-ID: <1426790214.14099.99.camel@saalfelds-ws1.janelia.priv>

Hi Mark,

> It is fine that mpicbg-trakem2 is a SNAPSHOT. The (P) indicates that a
> SNAPSHOT parent is making things unhappy. If the object was not allowed to
> be a SNAPSHOT you would see a (V). But it is misleading to call it a
> dependency.. consider it reworded.
> 

Sorry, I didn't get this.  Could you reword please ;) (I mean,
seriously, I didn't get it)?  A trial:

The complaint is that pom-trakem2, which is mpicbg-trakem2's parent is
at a SNAPSHOT-version?

> For SNAPSHOT-coupled multi-module builds, the contract is that SNAPSHOTS
> are allowed as long as everything is built from the top-level. If you built
> from a submodule, Maven could resolve the SNAPSHOT parent remotely, which
> would then not be guaranteed to match the parent in your multi-module
> project.
> 

I guess I got it.

> Eclipse is problematic because it splits each submodule out to the same
> level as the parent pom, and resolves each individually, thus causing
> RequireReproducibleBuilds to fail.
> 

That sounds like a perfect explanation.  But since Eclipse is the
primary development platform, that should definitely work.  I actually
think that it is more important that builds build in Eclipse without red
x-es than that builds are reproducible.  I am reverting to
pom-fiji-7.2.0 in the meantime to give myself peace of mind.

> I will look into ways of obtaining the reactor's parent pom locally[1], so
> that we can build submodules directly.
> 

Thanks a lot!

Best,
Stephan


> [1] https://github.com/scijava/scijava-maven-plugin/issues/12
> 
> On Thu, Mar 19, 2015 at 12:53 PM, Stephan Saalfeld <
> saalfelds at janelia.hhmi.org> wrote:
> 
> > Hi Curtis and Jay,
> >
> > I upgraded to Luna with the same effect.  7.2.0 works, 8.0.0 triggers
> > the unspecific complaint as show in the OP.
> >
> > Run As > Maven build... + Debug Output
> >
> > says:
> >
> > [INFO] Property 'imagej.app.directory' unset; Skipping copy-jars
> > [INFO]
> > ------------------------------------------------------------------------
> > [INFO] Reactor Summary:
> > [INFO]
> > [INFO] Aggregator project for Albert Cardona's TrakEM2 software suite
> > SUCCESS [  5.098 s]
> > [INFO] jars/VectorString.jar ............................. SUCCESS [
> > 8.813 s]
> > [INFO] mpicbg-trakem2 .................................... SUCCESS [
> > 8.074 s]
> > [INFO] plugins/TrakEM2_.jar .............................. SUCCESS
> > [ 28.727 s]
> > [INFO] jars/T2-NIT.jar ................................... SUCCESS
> > [ 14.724 s]
> > [INFO] jars/T2-TreelineGraph.jar ......................... SUCCESS
> > [ 13.202 s]
> > [INFO]
> > ------------------------------------------------------------------------
> > [INFO] BUILD SUCCESS
> > [INFO]
> > ------------------------------------------------------------------------
> > [INFO] Total time: 01:19 min
> > [INFO] Finished at: 2015-03-19T13:45:46-05:00
> > [INFO] Final Memory: 250M/3444M
> > [INFO]
> > ------------------------------------------------------------------------
> >
> >
> >
> >
> >
> > But the error mark (red x) persists on all mudules' pom files with the
> > unspecific error message.
> >
> > Next test, running Maven build... in mpicbg-trakem2-1.2.3-SNAPSHOT, or
> > any of the other modules where the error manifests leads to more
> > informative output:
> >
> >
> > The following dependencies either are SNAPSHOT versions (V), contain
> > SNAPSHOT parents (P), or contain SNAPSHOT dependencies (D):
> >
> >  (P)  sc.fiji:mpicbg-trakem2:1.2.3-SNAPSHOT
> >
> > [INFO]
> > ------------------------------------------------------------------------
> > [INFO] BUILD FAILURE
> > [INFO]
> > ------------------------------------------------------------------------
> > [INFO] Total time: 3.043 s
> > [INFO] Finished at: 2015-03-19T13:48:20-05:00
> > [INFO] Final Memory: 33M/1930M
> > [INFO]
> > ------------------------------------------------------------------------
> > [ERROR] Failed to execute goal
> > org.apache.maven.plugins:maven-enforcer-plugin:1.3.1:enforce
> > (enforce-rules) on project mpicbg-trakem2: Some Enforcer rules have
> > failed. Look above for specific messages explaining why the rule failed.
> > -> [Help 1]
> > org.apache.maven.lifecycle.LifecycleExecutionException: Failed to
> > execute goal
> > org.apache.maven.plugins:maven-enforcer-plugin:1.3.1:enforce
> > (enforce-rules) on project mpicbg-trakem2: Some Enforcer rules have
> > failed. Look above for specific messages explaining why the rule failed.
> >         at
> >
> > org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:216)
> >         at
> >
> > org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
> >         at
> >
> > org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
> >         at
> >
> > org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:108)
> >         at
> >
> > org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:76)
> >         at
> >
> > org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
> >         at
> >
> > org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:116)
> >         at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:361)
> >         at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:155)
> >         at org.apache.maven.cli.MavenCli.execute(MavenCli.java:584)
> >         at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:213)
> >         at org.apache.maven.cli.MavenCli.main(MavenCli.java:157)
> >         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
> >         at
> >
> > sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
> >         at
> >
> > sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
> >         at java.lang.reflect.Method.invoke(Method.java:606)
> >         at
> >
> > org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
> >         at
> > org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
> >         at
> >
> > org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
> >         at
> > org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
> > Caused by: org.apache.maven.plugin.MojoExecutionException: Some Enforcer
> > rules have failed. Look above for specific messages explaining why the
> > rule failed.
> >         at
> > org.apache.maven.plugins.enforcer.EnforceMojo.execute(EnforceMojo.java:209)
> >         at
> >
> > org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:133)
> >         at
> >
> > org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)
> >         ... 19 more
> > [ERROR]
> > [ERROR]
> > [ERROR] For more information about the errors and possible solutions,
> > please read the following articles:
> > [ERROR] [Help 1]
> > http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
> >
> >
> >
> > Wait, mpicbg-trakem2-1.2.3-SNAPSHOT is the project that I am building,
> > not a dependency thereof---and it is at a SNAPSHOT version---yes,
> > because I am in development cycle---that should work---no?
> >
> > Thanks for your help,
> > Stephan
> >
> >
> >
> > On Thu, 2015-03-19 at 12:18 -0500, Curtis Rueden wrote:
> > > Hi Stephan,
> > >
> > > > Do you know about this [, do you have an idea what it is[
> > >
> > > Probably, this started happening because of this change:
> > >
> > >
> > https://github.com/scijava/pom-scijava/commit/5e6bddae9fcc965722c0fce1e2996c2e49b60411
> > >
> > > Which in general is a _good_ thing because it's better for Eclipse to
> > tell
> > > you than for Jenkins to tell you later after you pushed to master.
> > >
> > > If there are enforcer issues, they should be addressed, or if
> > unaddressable
> > > the enforcer can be squelched so that CLI and Jenkins also do not
> > complain.
> > >
> > > The weird thing here is that your Eclipse is complaining but our CLI is
> > > not. Jay may be on to something about a Maven version discrepancy. Why
> > are
> > > you still on Kepler? You could try upgrading to Luna?I know of at least
> > one
> > > annoying Maven-related bug that was fixed. You could also try using the
> > Run
> > > As > Maven build... and specifying the "Debug Output" option (which
> > passes
> > > the -X flag to Maven), and see if that tells you anything interesting.
> > >
> > > Regards,
> > > Curtis
> > >
> > > On Wed, Mar 18, 2015 at 10:33 PM, Stephan Saalfeld <
> > > saalfelds at janelia.hhmi.org> wrote:
> > >
> > > > Hi ImageJ developers,
> > > >
> > > > Eclipse complains
> > > >
> > > > Some Enforcer rules have failed. Look above for specific messages
> > > > explaining why the rule failed.
> > > >
> > > >
> > (org.apache.maven.plugins:maven-enforcer-plugin:1.3.1:enforce:enforce-rules:validate)
> > > >
> > > > in my TrakEM2 master for each module.  No further information (neither
> > > > above nor below) is provided.
> > > >
> > > > A terminal `mvn clean install`, however, succeeds without complaints.
> > > > So I assume that this is an Eclipse specific quirk.  I have Kepler
> > > > Service Release 1 installed.
> > > >
> > > > Do you know about this [, do you have an idea what it is[, and do you
> > > > know how to fix it]]]?
> > > >
> > > > Thanks in any case,
> > > > Stephan
> > > >
> > > >
> > > > _______________________________________________
> > > > ImageJ-devel mailing list
> > > > ImageJ-devel at imagej.net
> > > > http://imagej.net/mailman/listinfo/imagej-devel
> > > >
> >
> >
> > _______________________________________________
> > ImageJ-devel mailing list
> > ImageJ-devel at imagej.net
> > http://imagej.net/mailman/listinfo/imagej-devel
> >



From ctrueden at wisc.edu  Thu Mar 19 13:50:02 2015
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Thu, 19 Mar 2015 13:50:02 -0500
Subject: [ImageJ-devel] Eclipse hickup with enforcer rules of pom-fiji >
	7.2.0
In-Reply-To: <1426790214.14099.99.camel@saalfelds-ws1.janelia.priv>
References: <1426736009.14099.50.camel@saalfelds-ws1.janelia.priv>
	<CADN69yk+mTzxrjbB42PsfXvCRdtdGErFE-2Z8-wjiSH2AHsYnA@mail.gmail.com>
	<1426787623.14099.76.camel@saalfelds-ws1.janelia.priv>
	<CA+B=mGpLjoCtwwP7KaasMuseNEkk401vdj0+LPSgbqvMKu8m_Q@mail.gmail.com>
	<1426790214.14099.99.camel@saalfelds-ws1.janelia.priv>
Message-ID: <CADN69ymYPrpu+qoB-2DJue93jZPeA2S0-MpAAVshOvyaZMJHBg@mail.gmail.com>

Hi Stephan,

To reword Mark's explanation:

The current behavior is a bug, which happens when you try to build _only_
the submodule, rather than building at the top level of the multi-module
project.

It is triggered in Eclipse because Eclipse's project configuration runs
each submodule's build separately, in some sense.

Mark said he would change the scijava-maven-plugin's use of the word
"dependency" in the case of parent POM linkage, since a parent POM is not a
"dependency" in Maven terms. (This is what he meant by "consider it
reworded" -- like a genie saying "It's as good as done!")

We will also be exploring how to solve this bug in general, such that it
_does_ become possible to build only a submodule of a multi-module project,
without the enforcer throwing a tantrum.

Regards,
Curtis

On Thu, Mar 19, 2015 at 1:36 PM, Stephan Saalfeld <
saalfelds at janelia.hhmi.org> wrote:

> Hi Mark,
>
> > It is fine that mpicbg-trakem2 is a SNAPSHOT. The (P) indicates that a
> > SNAPSHOT parent is making things unhappy. If the object was not allowed
> to
> > be a SNAPSHOT you would see a (V). But it is misleading to call it a
> > dependency.. consider it reworded.
> >
>
> Sorry, I didn't get this.  Could you reword please ;) (I mean,
> seriously, I didn't get it)?  A trial:
>
> The complaint is that pom-trakem2, which is mpicbg-trakem2's parent is
> at a SNAPSHOT-version?
>
> > For SNAPSHOT-coupled multi-module builds, the contract is that SNAPSHOTS
> > are allowed as long as everything is built from the top-level. If you
> built
> > from a submodule, Maven could resolve the SNAPSHOT parent remotely, which
> > would then not be guaranteed to match the parent in your multi-module
> > project.
> >
>
> I guess I got it.
>
> > Eclipse is problematic because it splits each submodule out to the same
> > level as the parent pom, and resolves each individually, thus causing
> > RequireReproducibleBuilds to fail.
> >
>
> That sounds like a perfect explanation.  But since Eclipse is the
> primary development platform, that should definitely work.  I actually
> think that it is more important that builds build in Eclipse without red
> x-es than that builds are reproducible.  I am reverting to
> pom-fiji-7.2.0 in the meantime to give myself peace of mind.
>
> > I will look into ways of obtaining the reactor's parent pom locally[1],
> so
> > that we can build submodules directly.
> >
>
> Thanks a lot!
>
> Best,
> Stephan
>
>
> > [1] https://github.com/scijava/scijava-maven-plugin/issues/12
> >
> > On Thu, Mar 19, 2015 at 12:53 PM, Stephan Saalfeld <
> > saalfelds at janelia.hhmi.org> wrote:
> >
> > > Hi Curtis and Jay,
> > >
> > > I upgraded to Luna with the same effect.  7.2.0 works, 8.0.0 triggers
> > > the unspecific complaint as show in the OP.
> > >
> > > Run As > Maven build... + Debug Output
> > >
> > > says:
> > >
> > > [INFO] Property 'imagej.app.directory' unset; Skipping copy-jars
> > > [INFO]
> > >
> ------------------------------------------------------------------------
> > > [INFO] Reactor Summary:
> > > [INFO]
> > > [INFO] Aggregator project for Albert Cardona's TrakEM2 software suite
> > > SUCCESS [  5.098 s]
> > > [INFO] jars/VectorString.jar ............................. SUCCESS [
> > > 8.813 s]
> > > [INFO] mpicbg-trakem2 .................................... SUCCESS [
> > > 8.074 s]
> > > [INFO] plugins/TrakEM2_.jar .............................. SUCCESS
> > > [ 28.727 s]
> > > [INFO] jars/T2-NIT.jar ................................... SUCCESS
> > > [ 14.724 s]
> > > [INFO] jars/T2-TreelineGraph.jar ......................... SUCCESS
> > > [ 13.202 s]
> > > [INFO]
> > >
> ------------------------------------------------------------------------
> > > [INFO] BUILD SUCCESS
> > > [INFO]
> > >
> ------------------------------------------------------------------------
> > > [INFO] Total time: 01:19 min
> > > [INFO] Finished at: 2015-03-19T13:45:46-05:00
> > > [INFO] Final Memory: 250M/3444M
> > > [INFO]
> > >
> ------------------------------------------------------------------------
> > >
> > >
> > >
> > >
> > >
> > > But the error mark (red x) persists on all mudules' pom files with the
> > > unspecific error message.
> > >
> > > Next test, running Maven build... in mpicbg-trakem2-1.2.3-SNAPSHOT, or
> > > any of the other modules where the error manifests leads to more
> > > informative output:
> > >
> > >
> > > The following dependencies either are SNAPSHOT versions (V), contain
> > > SNAPSHOT parents (P), or contain SNAPSHOT dependencies (D):
> > >
> > >  (P)  sc.fiji:mpicbg-trakem2:1.2.3-SNAPSHOT
> > >
> > > [INFO]
> > >
> ------------------------------------------------------------------------
> > > [INFO] BUILD FAILURE
> > > [INFO]
> > >
> ------------------------------------------------------------------------
> > > [INFO] Total time: 3.043 s
> > > [INFO] Finished at: 2015-03-19T13:48:20-05:00
> > > [INFO] Final Memory: 33M/1930M
> > > [INFO]
> > >
> ------------------------------------------------------------------------
> > > [ERROR] Failed to execute goal
> > > org.apache.maven.plugins:maven-enforcer-plugin:1.3.1:enforce
> > > (enforce-rules) on project mpicbg-trakem2: Some Enforcer rules have
> > > failed. Look above for specific messages explaining why the rule
> failed.
> > > -> [Help 1]
> > > org.apache.maven.lifecycle.LifecycleExecutionException: Failed to
> > > execute goal
> > > org.apache.maven.plugins:maven-enforcer-plugin:1.3.1:enforce
> > > (enforce-rules) on project mpicbg-trakem2: Some Enforcer rules have
> > > failed. Look above for specific messages explaining why the rule
> failed.
> > >         at
> > >
> > >
> org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:216)
> > >         at
> > >
> > >
> org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
> > >         at
> > >
> > >
> org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
> > >         at
> > >
> > >
> org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:108)
> > >         at
> > >
> > >
> org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:76)
> > >         at
> > >
> > >
> org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
> > >         at
> > >
> > >
> org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:116)
> > >         at
> org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:361)
> > >         at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:155)
> > >         at org.apache.maven.cli.MavenCli.execute(MavenCli.java:584)
> > >         at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:213)
> > >         at org.apache.maven.cli.MavenCli.main(MavenCli.java:157)
> > >         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
> > >         at
> > >
> > >
> sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
> > >         at
> > >
> > >
> sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
> > >         at java.lang.reflect.Method.invoke(Method.java:606)
> > >         at
> > >
> > >
> org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
> > >         at
> > >
> org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
> > >         at
> > >
> > >
> org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
> > >         at
> > >
> org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
> > > Caused by: org.apache.maven.plugin.MojoExecutionException: Some
> Enforcer
> > > rules have failed. Look above for specific messages explaining why the
> > > rule failed.
> > >         at
> > >
> org.apache.maven.plugins.enforcer.EnforceMojo.execute(EnforceMojo.java:209)
> > >         at
> > >
> > >
> org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:133)
> > >         at
> > >
> > >
> org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)
> > >         ... 19 more
> > > [ERROR]
> > > [ERROR]
> > > [ERROR] For more information about the errors and possible solutions,
> > > please read the following articles:
> > > [ERROR] [Help 1]
> > >
> http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
> > >
> > >
> > >
> > > Wait, mpicbg-trakem2-1.2.3-SNAPSHOT is the project that I am building,
> > > not a dependency thereof---and it is at a SNAPSHOT version---yes,
> > > because I am in development cycle---that should work---no?
> > >
> > > Thanks for your help,
> > > Stephan
> > >
> > >
> > >
> > > On Thu, 2015-03-19 at 12:18 -0500, Curtis Rueden wrote:
> > > > Hi Stephan,
> > > >
> > > > > Do you know about this [, do you have an idea what it is[
> > > >
> > > > Probably, this started happening because of this change:
> > > >
> > > >
> > >
> https://github.com/scijava/pom-scijava/commit/5e6bddae9fcc965722c0fce1e2996c2e49b60411
> > > >
> > > > Which in general is a _good_ thing because it's better for Eclipse to
> > > tell
> > > > you than for Jenkins to tell you later after you pushed to master.
> > > >
> > > > If there are enforcer issues, they should be addressed, or if
> > > unaddressable
> > > > the enforcer can be squelched so that CLI and Jenkins also do not
> > > complain.
> > > >
> > > > The weird thing here is that your Eclipse is complaining but our CLI
> is
> > > > not. Jay may be on to something about a Maven version discrepancy.
> Why
> > > are
> > > > you still on Kepler? You could try upgrading to Luna?I know of at
> least
> > > one
> > > > annoying Maven-related bug that was fixed. You could also try using
> the
> > > Run
> > > > As > Maven build... and specifying the "Debug Output" option (which
> > > passes
> > > > the -X flag to Maven), and see if that tells you anything
> interesting.
> > > >
> > > > Regards,
> > > > Curtis
> > > >
> > > > On Wed, Mar 18, 2015 at 10:33 PM, Stephan Saalfeld <
> > > > saalfelds at janelia.hhmi.org> wrote:
> > > >
> > > > > Hi ImageJ developers,
> > > > >
> > > > > Eclipse complains
> > > > >
> > > > > Some Enforcer rules have failed. Look above for specific messages
> > > > > explaining why the rule failed.
> > > > >
> > > > >
> > >
> (org.apache.maven.plugins:maven-enforcer-plugin:1.3.1:enforce:enforce-rules:validate)
> > > > >
> > > > > in my TrakEM2 master for each module.  No further information
> (neither
> > > > > above nor below) is provided.
> > > > >
> > > > > A terminal `mvn clean install`, however, succeeds without
> complaints.
> > > > > So I assume that this is an Eclipse specific quirk.  I have Kepler
> > > > > Service Release 1 installed.
> > > > >
> > > > > Do you know about this [, do you have an idea what it is[, and do
> you
> > > > > know how to fix it]]]?
> > > > >
> > > > > Thanks in any case,
> > > > > Stephan
> > > > >
> > > > >
> > > > > _______________________________________________
> > > > > ImageJ-devel mailing list
> > > > > ImageJ-devel at imagej.net
> > > > > http://imagej.net/mailman/listinfo/imagej-devel
> > > > >
> > >
> > >
> > > _______________________________________________
> > > ImageJ-devel mailing list
> > > ImageJ-devel at imagej.net
> > > http://imagej.net/mailman/listinfo/imagej-devel
> > >
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150319/690e24c6/attachment-0001.html>

From jay.w.warrick at gmail.com  Thu Mar 19 15:30:22 2015
From: jay.w.warrick at gmail.com (Jay Warrick)
Date: Thu, 19 Mar 2015 15:30:22 -0500
Subject: [ImageJ-devel] external plugins
In-Reply-To: <CADN69ynPXZXn141-sJcGNLdJGoQ8JqZz=kg+9C2Ymk6EU5FRgw@mail.gmail.com>
References: <B526B846-EF29-470C-8176-768D33FEF592@gmail.com>
	<CA+B=mGotMP2ryO-Uo84WnGPAN82D0VXUKiue-KFJdRWFz-z==g@mail.gmail.com>
	<FE35E84B-49B1-4E3C-8BFB-DC8B5839B77E@gmail.com>
	<CADN69ykPpinHToA++ycnARGxKCqmwez5dkufPUCHQP5LB3+PsQ@mail.gmail.com>
	<6A76ED20-F814-4FD8-91BC-7F9AE7131D05@gmail.com>
	<CADN69ynPXZXn141-sJcGNLdJGoQ8JqZz=kg+9C2Ymk6EU5FRgw@mail.gmail.com>
Message-ID: <E65C206D-8821-4EF4-8FA5-D81CF0D141F7@gmail.com>

Thanks man. It turns out that it isn't too bad to load the class files on the fly from a jar, check which jar entries are classes that extend JEXPlugin, load them, get the @Plugin annotation, create a PluginInfo, then create my JEXPluginInfo from that (something I already had code for) which parses the other annotations I made for my plugins. I can then use this JEXPluginInfo to instantiate my fully functional JEXCrunchablePlugin (also code I already had) that actually does the image processing and can be added to my list of plugins available in the software. I only demonstrated feasibility today for getting to the functional JEXCrunchablePlugin instance and will incorporate more fully soon.

Thanks for pointing out that I should likely just rely on compiled jars and pointing out the addPlugin method. It made this process much simpler.

Thanks Curtis and Mark for your help.

Best,

Jay


> On Mar 19, 2015, at 1:15 PM, Curtis Rueden <ctrueden at wisc.edu> wrote:
> 
> Hi Jay,
> 
> > What might be the best way to include these compiled jars in my class
> > path upon launching the binary?
> 
> Well, one option would be to make JEX into a plugin for ImageJ, with a JEX update site. Then JARs in the jars/ and plugins/ directories would automatically be on the classpath, thanks to the ImageJ launcher.
> 
> Otherwise, deployment of Java applications is a rough issue, man. If you don't want to use ImageJ's solution (the Launcher), then you can research it yourself and go your own way. There are a million and one ways to do it, and they all have their pros and cons. One popular option is launch4j [1]. Actually, I would love to switch ImageJ to something more industry standard like that, but it's quite a lot of effort and surely there would be some serious backwards incompatibilities...
> 
> Regards,
> Curtis
> 
> [1] http://launch4j.sourceforge.net/ <http://launch4j.sourceforge.net/>
> 
> On Thu, Mar 19, 2015 at 12:50 PM, Jay Warrick <jay.w.warrick at gmail.com <mailto:jay.w.warrick at gmail.com>> wrote:
> Sweet. Thanks for the clarification. I'm fine with requiring compiled jars. I was prepared to use something like the addPlugins API but certainly see the simplicity of the restart method and will likely try that for now.
> 
> What might be the best way to include these compiled jars in my class path upon launching the binary? Would one option be to edit the simple launch script for the software by adding a classpath argument to the "java ..." command?
> 
> 
>> On Mar 19, 2015, at 11:36 AM, Curtis Rueden <ctrueden at wisc.edu <mailto:ctrueden at wisc.edu>> wrote:
>> 
>> Hi Jay,
>> 
>> > Person (A) also downloads the .java/.class file of a just a plugin
>> > that would work within my software from third person (C).
>> 
>> This is the scenario we are trying to move away from: distributing bare .java or .class files. As long as plugins are distributed as .jar files which contain the plugin annotation metadata (in META-INF/json/org.scijava.plugin.Plugin), then all is well.
>> 
>> > Person (A) wants to run my binary and load/use the plugin from person
>> > (C) at runtime. How would the SciJava plugin framework know how to
>> > automatically discover this plugin? 
>> 
>> The plugin (as a .jar file) is placed somewhere where it will be included in the classpath at launch time. As long as the new .jar file is on the classpath, it will be discovered at runtime.
>> 
>> > I thought that if my program is already compiled and running before I
>> > specify where this "external plugin" resides and load the class, the
>> > PluginService would be unaware of the external plugin.
>> 
>> Is it really a requirement that users be able to load additional plugins _after_ your program starts up, without restarting the program? If not, then I wouldn't worry about making this work, as it adds complexity for little gain. Just put the new plugin somewhere on the classpath, start JEX, and all is well.
>> 
>> If you really need to be able to load plugins after startup, this _can_ be done. But you have to manually add them to the plugin service via the addPlugins API method.
>> 
>> Regards,
>> Curtis
>> 
>> On Thu, Mar 19, 2015 at 11:32 AM, Jay Warrick <jay.w.warrick at gmail.com <mailto:jay.w.warrick at gmail.com>> wrote:
>> Thanks, Mark. I should likely be using this Handler methodology in a few places in my software, including in this case. However, I'm still concerned about detection of the plugin given the scenario I'm thinking of. But, maybe you can help me understand. I have already been able to build my software project around the SciJava plugin framework and ImageJ's PluginService to automatically recognize the plugins that are part of my own software project. The SciJava framework does its job beautifully to automatically discover the plugins I've developed within my software. However, what about the following scenario?
>> 
>> Person (A) downloads the binary of my software from me (B). Person (A) also downloads the .java/.class file of a just a plugin that would work within my software from third person (C). Person (A) wants to run my binary and load/use the plugin from person (C) at runtime. How would the SciJava plugin framework know how to automatically discover this plugin? 
>> 
>> My recollection is that the list of plugins loaded by the PluginService are determined from a java annotation index file that is created during early in the build process. Thus, I thought that if my program is already compiled and running before I specify where this "external plugin" resides and load the class, the PluginService would be unaware of the external plugin. Am I correct? If it can detect it, then it appears I'm home free and am worrying for nothing, which would be awesome.
>> 
>> Thanks!
>> 
>> Jay
>> 
>> 
>>> On Mar 19, 2015, at 8:51 AM, Mark Hiner <hiner at wisc.edu <mailto:hiner at wisc.edu>> wrote:
>>> 
>>> Hi Jay,
>>> 
>>> >One of the main things I can't quite envision is how to process the annotations of an external .java file at runtime so that I can utilize that information
>>> 
>>> You shouldn't have to do this yourself. By using the SciJava plugin framework you get discovery of all annotated plugins on your classpath, and processing/indexing of those plugins, for free.
>>> 
>>> I'm assuming the paradigm that would match your needs is a HandlerService[1]. The service would perform some function (e.g. opening a path) and the behavior of that function would be extensible via HandlerPlugins[2] (e.g. a plugin for handling URLs, files on disk, files in a database, etc...).
>>> 
>>> The simplest example of "service chooses a plugin appropriate for the circumstances" is the AnimalService tutorial[3]. Note that it's not actually a HandlerService but could easily be converted to one. More complex examples would be the IOService[4] or SCIFIO's FormatService[5].
>>> 
>>> Best,
>>> Mark
>>> 
>>> [1] https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/plugin/HandlerService.java <https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/plugin/HandlerService.java>
>>> [2] https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/plugin/HandlerPlugin.java <https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/plugin/HandlerPlugin.java>
>>> [3] https://github.com/imagej/imagej-tutorials/tree/00394f9f5010d1787b9bf584b6e90eed01beec0d/create-a-new-plugin-type/src/main/java <https://github.com/imagej/imagej-tutorials/tree/00394f9f5010d1787b9bf584b6e90eed01beec0d/create-a-new-plugin-type/src/main/java>
>>> [4] https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/io/IOService.java <https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/io/IOService.java>
>>> [5] https://github.com/scifio/scifio/blob/scifio-0.21.1/src/main/java/io/scif/services/FormatService.java <https://github.com/scifio/scifio/blob/scifio-0.21.1/src/main/java/io/scif/services/FormatService.java>
>>> 
>>> On Wed, Mar 18, 2015 at 6:42 PM, Jay Warrick <jay.w.warrick at gmail.com <mailto:jay.w.warrick at gmail.com>> wrote:
>>> Hi All,
>>> 
>>> I am using the scijava plugin framework, ImageJ2, and its Plugin service. I would like to allow other people to write a plugin for my software. I'm open to suggestions but I'd probably like to enable them to place their java/jar/class plugin file in a folder, and I could look into that folder to load their plugin. I'm thinking along the lines of how how old ImageJ did things. Does anyone have suggestions or example code (e.g., in FIJI somewhere) for loading/compiling such plugin files during runtime. One of the main things I can't quite envision is how to process the annotations of an external .java file at runtime so that I can utilize that information (e.g., in conjunction with the PluginService). If there is an inherent problem in what I'm hoping to do, please let me know :-) (e.g., if I am provided compiled code, I suspect I might need an annotation index to go with it if I need that information).
>>> 
>>> I figured you guys have tackled this problem thoroughly already and thus would be a good resource. Thanks in advance!
>>> 
>>> Regards,
>>> 
>>> Jay
>>> 
>>> 
>>> _______________________________________________
>>> ImageJ-devel mailing list
>>> ImageJ-devel at imagej.net <mailto:ImageJ-devel at imagej.net>
>>> http://imagej.net/mailman/listinfo/imagej-devel <http://imagej.net/mailman/listinfo/imagej-devel>
>>> 
>> 
>> 
>> _______________________________________________
>> ImageJ-devel mailing list
>> ImageJ-devel at imagej.net <mailto:ImageJ-devel at imagej.net>
>> http://imagej.net/mailman/listinfo/imagej-devel <http://imagej.net/mailman/listinfo/imagej-devel>
>> 
>> 
> 
> 
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net <mailto:ImageJ-devel at imagej.net>
> http://imagej.net/mailman/listinfo/imagej-devel <http://imagej.net/mailman/listinfo/imagej-devel>
> 
> 
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150319/5e39fcb4/attachment.html>

From jay.w.warrick at gmail.com  Thu Mar 19 15:33:42 2015
From: jay.w.warrick at gmail.com (Jay Warrick)
Date: Thu, 19 Mar 2015 15:33:42 -0500
Subject: [ImageJ-devel] external plugins
In-Reply-To: <E65C206D-8821-4EF4-8FA5-D81CF0D141F7@gmail.com>
References: <B526B846-EF29-470C-8176-768D33FEF592@gmail.com>
	<CA+B=mGotMP2ryO-Uo84WnGPAN82D0VXUKiue-KFJdRWFz-z==g@mail.gmail.com>
	<FE35E84B-49B1-4E3C-8BFB-DC8B5839B77E@gmail.com>
	<CADN69ykPpinHToA++ycnARGxKCqmwez5dkufPUCHQP5LB3+PsQ@mail.gmail.com>
	<6A76ED20-F814-4FD8-91BC-7F9AE7131D05@gmail.com>
	<CADN69ynPXZXn141-sJcGNLdJGoQ8JqZz=kg+9C2Ymk6EU5FRgw@mail.gmail.com>
	<E65C206D-8821-4EF4-8FA5-D81CF0D141F7@gmail.com>
Message-ID: <B3BC993A-EC18-4222-853A-E15E552FF24D@gmail.com>

After writing this. Likely the more straight forward approach would have been to directly use the annotation index in the jar instead of searching jar entries. Either way I suppose :-)

> On Mar 19, 2015, at 3:30 PM, Jay Warrick <jay.w.warrick at gmail.com> wrote:
> 
> Thanks man. It turns out that it isn't too bad to load the class files on the fly from a jar, check which jar entries are classes that extend JEXPlugin, load them, get the @Plugin annotation, create a PluginInfo, then create my JEXPluginInfo from that (something I already had code for) which parses the other annotations I made for my plugins. I can then use this JEXPluginInfo to instantiate my fully functional JEXCrunchablePlugin (also code I already had) that actually does the image processing and can be added to my list of plugins available in the software. I only demonstrated feasibility today for getting to the functional JEXCrunchablePlugin instance and will incorporate more fully soon.
> 
> Thanks for pointing out that I should likely just rely on compiled jars and pointing out the addPlugin method. It made this process much simpler.
> 
> Thanks Curtis and Mark for your help.
> 
> Best,
> 
> Jay
> 
> 
>> On Mar 19, 2015, at 1:15 PM, Curtis Rueden <ctrueden at wisc.edu <mailto:ctrueden at wisc.edu>> wrote:
>> 
>> Hi Jay,
>> 
>> > What might be the best way to include these compiled jars in my class
>> > path upon launching the binary?
>> 
>> Well, one option would be to make JEX into a plugin for ImageJ, with a JEX update site. Then JARs in the jars/ and plugins/ directories would automatically be on the classpath, thanks to the ImageJ launcher.
>> 
>> Otherwise, deployment of Java applications is a rough issue, man. If you don't want to use ImageJ's solution (the Launcher), then you can research it yourself and go your own way. There are a million and one ways to do it, and they all have their pros and cons. One popular option is launch4j [1]. Actually, I would love to switch ImageJ to something more industry standard like that, but it's quite a lot of effort and surely there would be some serious backwards incompatibilities...
>> 
>> Regards,
>> Curtis
>> 
>> [1] http://launch4j.sourceforge.net/ <http://launch4j.sourceforge.net/>
>> 
>> On Thu, Mar 19, 2015 at 12:50 PM, Jay Warrick <jay.w.warrick at gmail.com <mailto:jay.w.warrick at gmail.com>> wrote:
>> Sweet. Thanks for the clarification. I'm fine with requiring compiled jars. I was prepared to use something like the addPlugins API but certainly see the simplicity of the restart method and will likely try that for now.
>> 
>> What might be the best way to include these compiled jars in my class path upon launching the binary? Would one option be to edit the simple launch script for the software by adding a classpath argument to the "java ..." command?
>> 
>> 
>>> On Mar 19, 2015, at 11:36 AM, Curtis Rueden <ctrueden at wisc.edu <mailto:ctrueden at wisc.edu>> wrote:
>>> 
>>> Hi Jay,
>>> 
>>> > Person (A) also downloads the .java/.class file of a just a plugin
>>> > that would work within my software from third person (C).
>>> 
>>> This is the scenario we are trying to move away from: distributing bare .java or .class files. As long as plugins are distributed as .jar files which contain the plugin annotation metadata (in META-INF/json/org.scijava.plugin.Plugin), then all is well.
>>> 
>>> > Person (A) wants to run my binary and load/use the plugin from person
>>> > (C) at runtime. How would the SciJava plugin framework know how to
>>> > automatically discover this plugin? 
>>> 
>>> The plugin (as a .jar file) is placed somewhere where it will be included in the classpath at launch time. As long as the new .jar file is on the classpath, it will be discovered at runtime.
>>> 
>>> > I thought that if my program is already compiled and running before I
>>> > specify where this "external plugin" resides and load the class, the
>>> > PluginService would be unaware of the external plugin.
>>> 
>>> Is it really a requirement that users be able to load additional plugins _after_ your program starts up, without restarting the program? If not, then I wouldn't worry about making this work, as it adds complexity for little gain. Just put the new plugin somewhere on the classpath, start JEX, and all is well.
>>> 
>>> If you really need to be able to load plugins after startup, this _can_ be done. But you have to manually add them to the plugin service via the addPlugins API method.
>>> 
>>> Regards,
>>> Curtis
>>> 
>>> On Thu, Mar 19, 2015 at 11:32 AM, Jay Warrick <jay.w.warrick at gmail.com <mailto:jay.w.warrick at gmail.com>> wrote:
>>> Thanks, Mark. I should likely be using this Handler methodology in a few places in my software, including in this case. However, I'm still concerned about detection of the plugin given the scenario I'm thinking of. But, maybe you can help me understand. I have already been able to build my software project around the SciJava plugin framework and ImageJ's PluginService to automatically recognize the plugins that are part of my own software project. The SciJava framework does its job beautifully to automatically discover the plugins I've developed within my software. However, what about the following scenario?
>>> 
>>> Person (A) downloads the binary of my software from me (B). Person (A) also downloads the .java/.class file of a just a plugin that would work within my software from third person (C). Person (A) wants to run my binary and load/use the plugin from person (C) at runtime. How would the SciJava plugin framework know how to automatically discover this plugin? 
>>> 
>>> My recollection is that the list of plugins loaded by the PluginService are determined from a java annotation index file that is created during early in the build process. Thus, I thought that if my program is already compiled and running before I specify where this "external plugin" resides and load the class, the PluginService would be unaware of the external plugin. Am I correct? If it can detect it, then it appears I'm home free and am worrying for nothing, which would be awesome.
>>> 
>>> Thanks!
>>> 
>>> Jay
>>> 
>>> 
>>>> On Mar 19, 2015, at 8:51 AM, Mark Hiner <hiner at wisc.edu <mailto:hiner at wisc.edu>> wrote:
>>>> 
>>>> Hi Jay,
>>>> 
>>>> >One of the main things I can't quite envision is how to process the annotations of an external .java file at runtime so that I can utilize that information
>>>> 
>>>> You shouldn't have to do this yourself. By using the SciJava plugin framework you get discovery of all annotated plugins on your classpath, and processing/indexing of those plugins, for free.
>>>> 
>>>> I'm assuming the paradigm that would match your needs is a HandlerService[1]. The service would perform some function (e.g. opening a path) and the behavior of that function would be extensible via HandlerPlugins[2] (e.g. a plugin for handling URLs, files on disk, files in a database, etc...).
>>>> 
>>>> The simplest example of "service chooses a plugin appropriate for the circumstances" is the AnimalService tutorial[3]. Note that it's not actually a HandlerService but could easily be converted to one. More complex examples would be the IOService[4] or SCIFIO's FormatService[5].
>>>> 
>>>> Best,
>>>> Mark
>>>> 
>>>> [1] https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/plugin/HandlerService.java <https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/plugin/HandlerService.java>
>>>> [2] https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/plugin/HandlerPlugin.java <https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/plugin/HandlerPlugin.java>
>>>> [3] https://github.com/imagej/imagej-tutorials/tree/00394f9f5010d1787b9bf584b6e90eed01beec0d/create-a-new-plugin-type/src/main/java <https://github.com/imagej/imagej-tutorials/tree/00394f9f5010d1787b9bf584b6e90eed01beec0d/create-a-new-plugin-type/src/main/java>
>>>> [4] https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/io/IOService.java <https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/io/IOService.java>
>>>> [5] https://github.com/scifio/scifio/blob/scifio-0.21.1/src/main/java/io/scif/services/FormatService.java <https://github.com/scifio/scifio/blob/scifio-0.21.1/src/main/java/io/scif/services/FormatService.java>
>>>> 
>>>> On Wed, Mar 18, 2015 at 6:42 PM, Jay Warrick <jay.w.warrick at gmail.com <mailto:jay.w.warrick at gmail.com>> wrote:
>>>> Hi All,
>>>> 
>>>> I am using the scijava plugin framework, ImageJ2, and its Plugin service. I would like to allow other people to write a plugin for my software. I'm open to suggestions but I'd probably like to enable them to place their java/jar/class plugin file in a folder, and I could look into that folder to load their plugin. I'm thinking along the lines of how how old ImageJ did things. Does anyone have suggestions or example code (e.g., in FIJI somewhere) for loading/compiling such plugin files during runtime. One of the main things I can't quite envision is how to process the annotations of an external .java file at runtime so that I can utilize that information (e.g., in conjunction with the PluginService). If there is an inherent problem in what I'm hoping to do, please let me know :-) (e.g., if I am provided compiled code, I suspect I might need an annotation index to go with it if I need that information).
>>>> 
>>>> I figured you guys have tackled this problem thoroughly already and thus would be a good resource. Thanks in advance!
>>>> 
>>>> Regards,
>>>> 
>>>> Jay
>>>> 
>>>> 
>>>> _______________________________________________
>>>> ImageJ-devel mailing list
>>>> ImageJ-devel at imagej.net <mailto:ImageJ-devel at imagej.net>
>>>> http://imagej.net/mailman/listinfo/imagej-devel <http://imagej.net/mailman/listinfo/imagej-devel>
>>>> 
>>> 
>>> 
>>> _______________________________________________
>>> ImageJ-devel mailing list
>>> ImageJ-devel at imagej.net <mailto:ImageJ-devel at imagej.net>
>>> http://imagej.net/mailman/listinfo/imagej-devel <http://imagej.net/mailman/listinfo/imagej-devel>
>>> 
>>> 
>> 
>> 
>> _______________________________________________
>> ImageJ-devel mailing list
>> ImageJ-devel at imagej.net <mailto:ImageJ-devel at imagej.net>
>> http://imagej.net/mailman/listinfo/imagej-devel <http://imagej.net/mailman/listinfo/imagej-devel>
>> 
>> 
>> _______________________________________________
>> ImageJ-devel mailing list
>> ImageJ-devel at imagej.net <mailto:ImageJ-devel at imagej.net>
>> http://imagej.net/mailman/listinfo/imagej-devel
> 
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150319/3a86c240/attachment-0001.html>

From ctrueden at wisc.edu  Thu Mar 19 15:38:49 2015
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Thu, 19 Mar 2015 15:38:49 -0500
Subject: [ImageJ-devel] external plugins
In-Reply-To: <B3BC993A-EC18-4222-853A-E15E552FF24D@gmail.com>
References: <B526B846-EF29-470C-8176-768D33FEF592@gmail.com>
	<CA+B=mGotMP2ryO-Uo84WnGPAN82D0VXUKiue-KFJdRWFz-z==g@mail.gmail.com>
	<FE35E84B-49B1-4E3C-8BFB-DC8B5839B77E@gmail.com>
	<CADN69ykPpinHToA++ycnARGxKCqmwez5dkufPUCHQP5LB3+PsQ@mail.gmail.com>
	<6A76ED20-F814-4FD8-91BC-7F9AE7131D05@gmail.com>
	<CADN69ynPXZXn141-sJcGNLdJGoQ8JqZz=kg+9C2Ymk6EU5FRgw@mail.gmail.com>
	<E65C206D-8821-4EF4-8FA5-D81CF0D141F7@gmail.com>
	<B3BC993A-EC18-4222-853A-E15E552FF24D@gmail.com>
Message-ID: <CADN69y=H+GcEcexunrEL_VQ+7bRLrnKAY8ocYsMP80kbDxb=1g@mail.gmail.com>

Hi Jay,

> Likely the more straight forward approach would have been to directly
> use the annotation index in the jar instead of searching jar entries.
> Either way I suppose :-)

Less code, yeah. But also much more performant. Your way not only fully
scans the JAR but also needs to load all the classes so they can be
inspected for @Plugin annotations. The SciJava way (based on the SezPoz
idea) is that you don't have to scan JARs or load classes -- you just read
a single resource file out of each JAR and you have all the information you
need.

-Curtis

On Thu, Mar 19, 2015 at 3:33 PM, Jay Warrick <jay.w.warrick at gmail.com>
wrote:

> After writing this. Likely the more straight forward approach would have
> been to directly use the annotation index in the jar instead of searching
> jar entries. Either way I suppose :-)
>
> On Mar 19, 2015, at 3:30 PM, Jay Warrick <jay.w.warrick at gmail.com> wrote:
>
> Thanks man. It turns out that it isn't too bad to load the class files on
> the fly from a jar, check which jar entries are classes that extend
> JEXPlugin, load them, get the @Plugin annotation, create a PluginInfo, then
> create my JEXPluginInfo from that (something I already had code for) which
> parses the other annotations I made for my plugins. I can then use this
> JEXPluginInfo to instantiate my fully functional JEXCrunchablePlugin (also
> code I already had) that actually does the image processing and can be
> added to my list of plugins available in the software. I only demonstrated
> feasibility today for getting to the functional JEXCrunchablePlugin
> instance and will incorporate more fully soon.
>
> Thanks for pointing out that I should likely just rely on compiled jars
> and pointing out the addPlugin method. It made this process much simpler.
>
> Thanks Curtis and Mark for your help.
>
> Best,
>
> Jay
>
>
> On Mar 19, 2015, at 1:15 PM, Curtis Rueden <ctrueden at wisc.edu> wrote:
>
> Hi Jay,
>
> > What might be the best way to include these compiled jars in my class
> > path upon launching the binary?
>
> Well, one option would be to make JEX into a plugin for ImageJ, with a JEX
> update site. Then JARs in the jars/ and plugins/ directories would
> automatically be on the classpath, thanks to the ImageJ launcher.
>
> Otherwise, deployment of Java applications is a rough issue, man. If you
> don't want to use ImageJ's solution (the Launcher), then you can research
> it yourself and go your own way. There are a million and one ways to do it,
> and they all have their pros and cons. One popular option is launch4j [1].
> Actually, I would love to switch ImageJ to something more industry standard
> like that, but it's quite a lot of effort and surely there would be some
> serious backwards incompatibilities...
>
> Regards,
> Curtis
>
> [1] http://launch4j.sourceforge.net/
>
> On Thu, Mar 19, 2015 at 12:50 PM, Jay Warrick <jay.w.warrick at gmail.com>
> wrote:
>
>> Sweet. Thanks for the clarification. I'm fine with requiring compiled
>> jars. I was prepared to use something like the addPlugins API but certainly
>> see the simplicity of the restart method and will likely try that for now.
>>
>> What might be the best way to include these compiled jars in my class
>> path upon launching the binary? Would one option be to edit the simple
>> launch script for the software by adding a classpath argument to the "java
>> ..." command?
>>
>>
>> On Mar 19, 2015, at 11:36 AM, Curtis Rueden <ctrueden at wisc.edu> wrote:
>>
>> Hi Jay,
>>
>> > Person (A) also downloads the .java/.class file of a just a plugin
>> > that would work within my software from third person (C).
>>
>> This is the scenario we are trying to move away from: distributing bare
>> .java or .class files. As long as plugins are distributed as .jar files
>> which contain the plugin annotation metadata (in
>> META-INF/json/org.scijava.plugin.Plugin), then all is well.
>>
>> > Person (A) wants to run my binary and load/use the plugin from person
>> > (C) at runtime. How would the SciJava plugin framework know how to
>> > automatically discover this plugin?
>>
>> The plugin (as a .jar file) is placed somewhere where it will be included
>> in the classpath at launch time. As long as the new .jar file is on the
>> classpath, it will be discovered at runtime.
>>
>> > I thought that if my program is already compiled and running before I
>> > specify where this "external plugin" resides and load the class, the
>> > PluginService would be unaware of the external plugin.
>>
>> Is it really a requirement that users be able to load additional plugins
>> _after_ your program starts up, without restarting the program? If not,
>> then I wouldn't worry about making this work, as it adds complexity for
>> little gain. Just put the new plugin somewhere on the classpath, start JEX,
>> and all is well.
>>
>> If you really need to be able to load plugins after startup, this _can_
>> be done. But you have to manually add them to the plugin service via the
>> addPlugins API method.
>>
>> Regards,
>> Curtis
>>
>> On Thu, Mar 19, 2015 at 11:32 AM, Jay Warrick <jay.w.warrick at gmail.com>
>> wrote:
>>
>>> Thanks, Mark. I should likely be using this Handler methodology in a few
>>> places in my software, including in this case. However, I'm still concerned
>>> about detection of the plugin given the scenario I'm thinking of. But,
>>> maybe you can help me understand. I have already been able to build my
>>> software project around the SciJava plugin framework and ImageJ's
>>> PluginService to automatically recognize the plugins that are part of my
>>> own software project. The SciJava framework does its job beautifully to
>>> automatically discover the plugins I've developed within my software.
>>> However, what about the following scenario?
>>>
>>> Person (A) downloads the binary of my software from me (B). Person (A)
>>> also downloads the .java/.class file of a just a plugin that would work
>>> within my software from third person (C). Person (A) wants to run my binary
>>> and load/use the plugin from person (C) at runtime. How would the SciJava
>>> plugin framework know how to automatically discover this plugin?
>>>
>>> My recollection is that the list of plugins loaded by the PluginService
>>> are determined from a java annotation index file that is created during
>>> early in the build process. Thus, I thought that if my program is already
>>> compiled and running before I specify where this "external plugin" resides
>>> and load the class, the PluginService would be unaware of the external
>>> plugin. Am I correct? If it can detect it, then it appears I'm home free
>>> and am worrying for nothing, which would be awesome.
>>>
>>> Thanks!
>>>
>>> Jay
>>>
>>>
>>> On Mar 19, 2015, at 8:51 AM, Mark Hiner <hiner at wisc.edu> wrote:
>>>
>>> Hi Jay,
>>>
>>> >One of the main things I can't quite envision is how to process the
>>> annotations of an external .java file at runtime so that I can utilize that
>>> information
>>>
>>> You shouldn't have to do this yourself. By using the SciJava plugin
>>> framework you get discovery of all annotated plugins on your classpath, and
>>> processing/indexing of those plugins, for free.
>>>
>>> I'm assuming the paradigm that would match your needs is a
>>> HandlerService[1]. The service would perform some function (e.g. opening a
>>> path) and the behavior of that function would be extensible via
>>> HandlerPlugins[2] (e.g. a plugin for handling URLs, files on disk, files in
>>> a database, etc...).
>>>
>>> The simplest example of "service chooses a plugin appropriate for the
>>> circumstances" is the AnimalService tutorial[3]. Note that it's not
>>> actually a HandlerService but could easily be converted to one. More
>>> complex examples would be the IOService[4] or SCIFIO's FormatService[5].
>>>
>>> Best,
>>> Mark
>>>
>>> [1]
>>> https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/plugin/HandlerService.java
>>> [2]
>>> https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/plugin/HandlerPlugin.java
>>> [3]
>>> https://github.com/imagej/imagej-tutorials/tree/00394f9f5010d1787b9bf584b6e90eed01beec0d/create-a-new-plugin-type/src/main/java
>>> [4]
>>> https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/io/IOService.java
>>> [5]
>>> https://github.com/scifio/scifio/blob/scifio-0.21.1/src/main/java/io/scif/services/FormatService.java
>>>
>>> On Wed, Mar 18, 2015 at 6:42 PM, Jay Warrick <jay.w.warrick at gmail.com>
>>> wrote:
>>>
>>>> Hi All,
>>>>
>>>> I am using the scijava plugin framework, ImageJ2, and its Plugin
>>>> service. I would like to allow other people to write a plugin for my
>>>> software. I'm open to suggestions but I'd probably like to enable them to
>>>> place their java/jar/class plugin file in a folder, and I could look into
>>>> that folder to load their plugin. I'm thinking along the lines of how how
>>>> old ImageJ did things. Does anyone have suggestions or example code (e.g.,
>>>> in FIJI somewhere) for loading/compiling such plugin files during runtime.
>>>> One of the main things I can't quite envision is how to process the
>>>> annotations of an external .java file at runtime so that I can utilize that
>>>> information (e.g., in conjunction with the PluginService). If there is an
>>>> inherent problem in what I'm hoping to do, please let me know :-) (e.g., if
>>>> I am provided compiled code, I suspect I might need an annotation index to
>>>> go with it if I need that information).
>>>>
>>>> I figured you guys have tackled this problem thoroughly already and
>>>> thus would be a good resource. Thanks in advance!
>>>>
>>>> Regards,
>>>>
>>>> Jay
>>>>
>>>>
>>>> _______________________________________________
>>>> ImageJ-devel mailing list
>>>> ImageJ-devel at imagej.net
>>>> http://imagej.net/mailman/listinfo/imagej-devel
>>>>
>>>
>>>
>>>
>>> _______________________________________________
>>> ImageJ-devel mailing list
>>> ImageJ-devel at imagej.net
>>> http://imagej.net/mailman/listinfo/imagej-devel
>>>
>>>
>>
>>
>> _______________________________________________
>> ImageJ-devel mailing list
>> ImageJ-devel at imagej.net
>> http://imagej.net/mailman/listinfo/imagej-devel
>>
>>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150319/1c8ae365/attachment.html>

From jay.w.warrick at gmail.com  Thu Mar 19 15:45:44 2015
From: jay.w.warrick at gmail.com (Jay Warrick)
Date: Thu, 19 Mar 2015 15:45:44 -0500
Subject: [ImageJ-devel] external plugins
In-Reply-To: <CADN69y=H+GcEcexunrEL_VQ+7bRLrnKAY8ocYsMP80kbDxb=1g@mail.gmail.com>
References: <B526B846-EF29-470C-8176-768D33FEF592@gmail.com>
	<CA+B=mGotMP2ryO-Uo84WnGPAN82D0VXUKiue-KFJdRWFz-z==g@mail.gmail.com>
	<FE35E84B-49B1-4E3C-8BFB-DC8B5839B77E@gmail.com>
	<CADN69ykPpinHToA++ycnARGxKCqmwez5dkufPUCHQP5LB3+PsQ@mail.gmail.com>
	<6A76ED20-F814-4FD8-91BC-7F9AE7131D05@gmail.com>
	<CADN69ynPXZXn141-sJcGNLdJGoQ8JqZz=kg+9C2Ymk6EU5FRgw@mail.gmail.com>
	<E65C206D-8821-4EF4-8FA5-D81CF0D141F7@gmail.com>
	<B3BC993A-EC18-4222-853A-E15E552FF24D@gmail.com>
	<CADN69y=H+GcEcexunrEL_VQ+7bRLrnKAY8ocYsMP80kbDxb=1g@mail.gmail.com>
Message-ID: <673A26A8-EFF5-47FF-B169-0BB840827869@gmail.com>

Agree. Thanks.

> On Mar 19, 2015, at 3:38 PM, Curtis Rueden <ctrueden at wisc.edu> wrote:
> 
> Hi Jay,
> 
> > Likely the more straight forward approach would have been to directly
> > use the annotation index in the jar instead of searching jar entries.
> > Either way I suppose :-)
> 
> Less code, yeah. But also much more performant. Your way not only fully scans the JAR but also needs to load all the classes so they can be inspected for @Plugin annotations. The SciJava way (based on the SezPoz idea) is that you don't have to scan JARs or load classes -- you just read a single resource file out of each JAR and you have all the information you need.
> 
> -Curtis
> 
> On Thu, Mar 19, 2015 at 3:33 PM, Jay Warrick <jay.w.warrick at gmail.com <mailto:jay.w.warrick at gmail.com>> wrote:
> After writing this. Likely the more straight forward approach would have been to directly use the annotation index in the jar instead of searching jar entries. Either way I suppose :-)
> 
>> On Mar 19, 2015, at 3:30 PM, Jay Warrick <jay.w.warrick at gmail.com <mailto:jay.w.warrick at gmail.com>> wrote:
>> 
>> Thanks man. It turns out that it isn't too bad to load the class files on the fly from a jar, check which jar entries are classes that extend JEXPlugin, load them, get the @Plugin annotation, create a PluginInfo, then create my JEXPluginInfo from that (something I already had code for) which parses the other annotations I made for my plugins. I can then use this JEXPluginInfo to instantiate my fully functional JEXCrunchablePlugin (also code I already had) that actually does the image processing and can be added to my list of plugins available in the software. I only demonstrated feasibility today for getting to the functional JEXCrunchablePlugin instance and will incorporate more fully soon.
>> 
>> Thanks for pointing out that I should likely just rely on compiled jars and pointing out the addPlugin method. It made this process much simpler.
>> 
>> Thanks Curtis and Mark for your help.
>> 
>> Best,
>> 
>> Jay
>> 
>> 
>>> On Mar 19, 2015, at 1:15 PM, Curtis Rueden <ctrueden at wisc.edu <mailto:ctrueden at wisc.edu>> wrote:
>>> 
>>> Hi Jay,
>>> 
>>> > What might be the best way to include these compiled jars in my class
>>> > path upon launching the binary?
>>> 
>>> Well, one option would be to make JEX into a plugin for ImageJ, with a JEX update site. Then JARs in the jars/ and plugins/ directories would automatically be on the classpath, thanks to the ImageJ launcher.
>>> 
>>> Otherwise, deployment of Java applications is a rough issue, man. If you don't want to use ImageJ's solution (the Launcher), then you can research it yourself and go your own way. There are a million and one ways to do it, and they all have their pros and cons. One popular option is launch4j [1]. Actually, I would love to switch ImageJ to something more industry standard like that, but it's quite a lot of effort and surely there would be some serious backwards incompatibilities...
>>> 
>>> Regards,
>>> Curtis
>>> 
>>> [1] http://launch4j.sourceforge.net/ <http://launch4j.sourceforge.net/>
>>> 
>>> On Thu, Mar 19, 2015 at 12:50 PM, Jay Warrick <jay.w.warrick at gmail.com <mailto:jay.w.warrick at gmail.com>> wrote:
>>> Sweet. Thanks for the clarification. I'm fine with requiring compiled jars. I was prepared to use something like the addPlugins API but certainly see the simplicity of the restart method and will likely try that for now.
>>> 
>>> What might be the best way to include these compiled jars in my class path upon launching the binary? Would one option be to edit the simple launch script for the software by adding a classpath argument to the "java ..." command?
>>> 
>>> 
>>>> On Mar 19, 2015, at 11:36 AM, Curtis Rueden <ctrueden at wisc.edu <mailto:ctrueden at wisc.edu>> wrote:
>>>> 
>>>> Hi Jay,
>>>> 
>>>> > Person (A) also downloads the .java/.class file of a just a plugin
>>>> > that would work within my software from third person (C).
>>>> 
>>>> This is the scenario we are trying to move away from: distributing bare .java or .class files. As long as plugins are distributed as .jar files which contain the plugin annotation metadata (in META-INF/json/org.scijava.plugin.Plugin), then all is well.
>>>> 
>>>> > Person (A) wants to run my binary and load/use the plugin from person
>>>> > (C) at runtime. How would the SciJava plugin framework know how to
>>>> > automatically discover this plugin? 
>>>> 
>>>> The plugin (as a .jar file) is placed somewhere where it will be included in the classpath at launch time. As long as the new .jar file is on the classpath, it will be discovered at runtime.
>>>> 
>>>> > I thought that if my program is already compiled and running before I
>>>> > specify where this "external plugin" resides and load the class, the
>>>> > PluginService would be unaware of the external plugin.
>>>> 
>>>> Is it really a requirement that users be able to load additional plugins _after_ your program starts up, without restarting the program? If not, then I wouldn't worry about making this work, as it adds complexity for little gain. Just put the new plugin somewhere on the classpath, start JEX, and all is well.
>>>> 
>>>> If you really need to be able to load plugins after startup, this _can_ be done. But you have to manually add them to the plugin service via the addPlugins API method.
>>>> 
>>>> Regards,
>>>> Curtis
>>>> 
>>>> On Thu, Mar 19, 2015 at 11:32 AM, Jay Warrick <jay.w.warrick at gmail.com <mailto:jay.w.warrick at gmail.com>> wrote:
>>>> Thanks, Mark. I should likely be using this Handler methodology in a few places in my software, including in this case. However, I'm still concerned about detection of the plugin given the scenario I'm thinking of. But, maybe you can help me understand. I have already been able to build my software project around the SciJava plugin framework and ImageJ's PluginService to automatically recognize the plugins that are part of my own software project. The SciJava framework does its job beautifully to automatically discover the plugins I've developed within my software. However, what about the following scenario?
>>>> 
>>>> Person (A) downloads the binary of my software from me (B). Person (A) also downloads the .java/.class file of a just a plugin that would work within my software from third person (C). Person (A) wants to run my binary and load/use the plugin from person (C) at runtime. How would the SciJava plugin framework know how to automatically discover this plugin? 
>>>> 
>>>> My recollection is that the list of plugins loaded by the PluginService are determined from a java annotation index file that is created during early in the build process. Thus, I thought that if my program is already compiled and running before I specify where this "external plugin" resides and load the class, the PluginService would be unaware of the external plugin. Am I correct? If it can detect it, then it appears I'm home free and am worrying for nothing, which would be awesome.
>>>> 
>>>> Thanks!
>>>> 
>>>> Jay
>>>> 
>>>> 
>>>>> On Mar 19, 2015, at 8:51 AM, Mark Hiner <hiner at wisc.edu <mailto:hiner at wisc.edu>> wrote:
>>>>> 
>>>>> Hi Jay,
>>>>> 
>>>>> >One of the main things I can't quite envision is how to process the annotations of an external .java file at runtime so that I can utilize that information
>>>>> 
>>>>> You shouldn't have to do this yourself. By using the SciJava plugin framework you get discovery of all annotated plugins on your classpath, and processing/indexing of those plugins, for free.
>>>>> 
>>>>> I'm assuming the paradigm that would match your needs is a HandlerService[1]. The service would perform some function (e.g. opening a path) and the behavior of that function would be extensible via HandlerPlugins[2] (e.g. a plugin for handling URLs, files on disk, files in a database, etc...).
>>>>> 
>>>>> The simplest example of "service chooses a plugin appropriate for the circumstances" is the AnimalService tutorial[3]. Note that it's not actually a HandlerService but could easily be converted to one. More complex examples would be the IOService[4] or SCIFIO's FormatService[5].
>>>>> 
>>>>> Best,
>>>>> Mark
>>>>> 
>>>>> [1] https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/plugin/HandlerService.java <https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/plugin/HandlerService.java>
>>>>> [2] https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/plugin/HandlerPlugin.java <https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/plugin/HandlerPlugin.java>
>>>>> [3] https://github.com/imagej/imagej-tutorials/tree/00394f9f5010d1787b9bf584b6e90eed01beec0d/create-a-new-plugin-type/src/main/java <https://github.com/imagej/imagej-tutorials/tree/00394f9f5010d1787b9bf584b6e90eed01beec0d/create-a-new-plugin-type/src/main/java>
>>>>> [4] https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/io/IOService.java <https://github.com/scijava/scijava-common/blob/scijava-common-2.39.0/src/main/java/org/scijava/io/IOService.java>
>>>>> [5] https://github.com/scifio/scifio/blob/scifio-0.21.1/src/main/java/io/scif/services/FormatService.java <https://github.com/scifio/scifio/blob/scifio-0.21.1/src/main/java/io/scif/services/FormatService.java>
>>>>> 
>>>>> On Wed, Mar 18, 2015 at 6:42 PM, Jay Warrick <jay.w.warrick at gmail.com <mailto:jay.w.warrick at gmail.com>> wrote:
>>>>> Hi All,
>>>>> 
>>>>> I am using the scijava plugin framework, ImageJ2, and its Plugin service. I would like to allow other people to write a plugin for my software. I'm open to suggestions but I'd probably like to enable them to place their java/jar/class plugin file in a folder, and I could look into that folder to load their plugin. I'm thinking along the lines of how how old ImageJ did things. Does anyone have suggestions or example code (e.g., in FIJI somewhere) for loading/compiling such plugin files during runtime. One of the main things I can't quite envision is how to process the annotations of an external .java file at runtime so that I can utilize that information (e.g., in conjunction with the PluginService). If there is an inherent problem in what I'm hoping to do, please let me know :-) (e.g., if I am provided compiled code, I suspect I might need an annotation index to go with it if I need that information).
>>>>> 
>>>>> I figured you guys have tackled this problem thoroughly already and thus would be a good resource. Thanks in advance!
>>>>> 
>>>>> Regards,
>>>>> 
>>>>> Jay
>>>>> 
>>>>> 
>>>>> _______________________________________________
>>>>> ImageJ-devel mailing list
>>>>> ImageJ-devel at imagej.net <mailto:ImageJ-devel at imagej.net>
>>>>> http://imagej.net/mailman/listinfo/imagej-devel <http://imagej.net/mailman/listinfo/imagej-devel>
>>>>> 
>>>> 
>>>> 
>>>> _______________________________________________
>>>> ImageJ-devel mailing list
>>>> ImageJ-devel at imagej.net <mailto:ImageJ-devel at imagej.net>
>>>> http://imagej.net/mailman/listinfo/imagej-devel <http://imagej.net/mailman/listinfo/imagej-devel>
>>>> 
>>>> 
>>> 
>>> 
>>> _______________________________________________
>>> ImageJ-devel mailing list
>>> ImageJ-devel at imagej.net <mailto:ImageJ-devel at imagej.net>
>>> http://imagej.net/mailman/listinfo/imagej-devel <http://imagej.net/mailman/listinfo/imagej-devel>
>>> 
>>> 
>>> _______________________________________________
>>> ImageJ-devel mailing list
>>> ImageJ-devel at imagej.net <mailto:ImageJ-devel at imagej.net>
>>> http://imagej.net/mailman/listinfo/imagej-devel <http://imagej.net/mailman/listinfo/imagej-devel>
>> 
>> _______________________________________________
>> ImageJ-devel mailing list
>> ImageJ-devel at imagej.net <mailto:ImageJ-devel at imagej.net>
>> http://imagej.net/mailman/listinfo/imagej-devel <http://imagej.net/mailman/listinfo/imagej-devel>
> 
> 
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net <mailto:ImageJ-devel at imagej.net>
> http://imagej.net/mailman/listinfo/imagej-devel <http://imagej.net/mailman/listinfo/imagej-devel>
> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150319/43c180d0/attachment-0001.html>

From warrick at wisc.edu  Thu Mar 19 15:51:40 2015
From: warrick at wisc.edu (Jay Warrick)
Date: Thu, 19 Mar 2015 15:51:40 -0500
Subject: [ImageJ-devel] Eclipse hickup with enforcer rules of pom-fiji >
 7.2.0
In-Reply-To: <CADN69ymYPrpu+qoB-2DJue93jZPeA2S0-MpAAVshOvyaZMJHBg@mail.gmail.com>
References: <1426736009.14099.50.camel@saalfelds-ws1.janelia.priv>
	<CADN69yk+mTzxrjbB42PsfXvCRdtdGErFE-2Z8-wjiSH2AHsYnA@mail.gmail.com>
	<1426787623.14099.76.camel@saalfelds-ws1.janelia.priv>
	<CA+B=mGpLjoCtwwP7KaasMuseNEkk401vdj0+LPSgbqvMKu8m_Q@mail.gmail.com>
	<1426790214.14099.99.camel@saalfelds-ws1.janelia.priv>
	<CADN69ymYPrpu+qoB-2DJue93jZPeA2S0-MpAAVshOvyaZMJHBg@mail.gmail.com>
Message-ID: <187D6BE7-0176-419E-9B66-AF748D876B12@wisc.edu>

Hard for me to follow if you guys have solved this one or now but, Re: the potential of a maven version discrepancy between Eclipse and the CLI, it looks like you can check the install/version of maven that eclipse is using by going to the menu Eclipse > Preferences > Maven > Installations 

Only now just found this now and I see it is a different install than I use at the command line. Looks like you can point it to a particular install though to make sure they are the same.

Cheers,

Jay

> On Mar 19, 2015, at 1:50 PM, Curtis Rueden <ctrueden at wisc.edu> wrote:
> 
> Hi Stephan,
> 
> To reword Mark's explanation:
> 
> The current behavior is a bug, which happens when you try to build _only_ the submodule, rather than building at the top level of the multi-module project.
> 
> It is triggered in Eclipse because Eclipse's project configuration runs each submodule's build separately, in some sense.
> 
> Mark said he would change the scijava-maven-plugin's use of the word "dependency" in the case of parent POM linkage, since a parent POM is not a "dependency" in Maven terms. (This is what he meant by "consider it reworded" -- like a genie saying "It's as good as done!")
> 
> We will also be exploring how to solve this bug in general, such that it _does_ become possible to build only a submodule of a multi-module project, without the enforcer throwing a tantrum.
> 
> Regards,
> Curtis
> 
> On Thu, Mar 19, 2015 at 1:36 PM, Stephan Saalfeld <saalfelds at janelia.hhmi.org <mailto:saalfelds at janelia.hhmi.org>> wrote:
> Hi Mark,
> 
> > It is fine that mpicbg-trakem2 is a SNAPSHOT. The (P) indicates that a
> > SNAPSHOT parent is making things unhappy. If the object was not allowed to
> > be a SNAPSHOT you would see a (V). But it is misleading to call it a
> > dependency.. consider it reworded.
> >
> 
> Sorry, I didn't get this.  Could you reword please ;) (I mean,
> seriously, I didn't get it)?  A trial:
> 
> The complaint is that pom-trakem2, which is mpicbg-trakem2's parent is
> at a SNAPSHOT-version?
> 
> > For SNAPSHOT-coupled multi-module builds, the contract is that SNAPSHOTS
> > are allowed as long as everything is built from the top-level. If you built
> > from a submodule, Maven could resolve the SNAPSHOT parent remotely, which
> > would then not be guaranteed to match the parent in your multi-module
> > project.
> >
> 
> I guess I got it.
> 
> > Eclipse is problematic because it splits each submodule out to the same
> > level as the parent pom, and resolves each individually, thus causing
> > RequireReproducibleBuilds to fail.
> >
> 
> That sounds like a perfect explanation.  But since Eclipse is the
> primary development platform, that should definitely work.  I actually
> think that it is more important that builds build in Eclipse without red
> x-es than that builds are reproducible.  I am reverting to
> pom-fiji-7.2.0 in the meantime to give myself peace of mind.
> 
> > I will look into ways of obtaining the reactor's parent pom locally[1], so
> > that we can build submodules directly.
> >
> 
> Thanks a lot!
> 
> Best,
> Stephan
> 
> 
> > [1] https://github.com/scijava/scijava-maven-plugin/issues/12 <https://github.com/scijava/scijava-maven-plugin/issues/12>
> >
> > On Thu, Mar 19, 2015 at 12:53 PM, Stephan Saalfeld <
> > saalfelds at janelia.hhmi.org <mailto:saalfelds at janelia.hhmi.org>> wrote:
> >
> > > Hi Curtis and Jay,
> > >
> > > I upgraded to Luna with the same effect.  7.2.0 works, 8.0.0 triggers
> > > the unspecific complaint as show in the OP.
> > >
> > > Run As > Maven build... + Debug Output
> > >
> > > says:
> > >
> > > [INFO] Property 'imagej.app.directory' unset; Skipping copy-jars
> > > [INFO]
> > > ------------------------------------------------------------------------
> > > [INFO] Reactor Summary:
> > > [INFO]
> > > [INFO] Aggregator project for Albert Cardona's TrakEM2 software suite
> > > SUCCESS [  5.098 s]
> > > [INFO] jars/VectorString.jar ............................. SUCCESS [
> > > 8.813 s]
> > > [INFO] mpicbg-trakem2 .................................... SUCCESS [
> > > 8.074 s]
> > > [INFO] plugins/TrakEM2_.jar .............................. SUCCESS
> > > [ 28.727 s]
> > > [INFO] jars/T2-NIT.jar ................................... SUCCESS
> > > [ 14.724 s]
> > > [INFO] jars/T2-TreelineGraph.jar ......................... SUCCESS
> > > [ 13.202 s]
> > > [INFO]
> > > ------------------------------------------------------------------------
> > > [INFO] BUILD SUCCESS
> > > [INFO]
> > > ------------------------------------------------------------------------
> > > [INFO] Total time: 01:19 min
> > > [INFO] Finished at: 2015-03-19T13:45:46-05:00
> > > [INFO] Final Memory: 250M/3444M
> > > [INFO]
> > > ------------------------------------------------------------------------
> > >
> > >
> > >
> > >
> > >
> > > But the error mark (red x) persists on all mudules' pom files with the
> > > unspecific error message.
> > >
> > > Next test, running Maven build... in mpicbg-trakem2-1.2.3-SNAPSHOT, or
> > > any of the other modules where the error manifests leads to more
> > > informative output:
> > >
> > >
> > > The following dependencies either are SNAPSHOT versions (V), contain
> > > SNAPSHOT parents (P), or contain SNAPSHOT dependencies (D):
> > >
> > >  (P)  sc.fiji:mpicbg-trakem2:1.2.3-SNAPSHOT
> > >
> > > [INFO]
> > > ------------------------------------------------------------------------
> > > [INFO] BUILD FAILURE
> > > [INFO]
> > > ------------------------------------------------------------------------
> > > [INFO] Total time: 3.043 s
> > > [INFO] Finished at: 2015-03-19T13:48:20-05:00
> > > [INFO] Final Memory: 33M/1930M
> > > [INFO]
> > > ------------------------------------------------------------------------
> > > [ERROR] Failed to execute goal
> > > org.apache.maven.plugins:maven-enforcer-plugin:1.3.1:enforce
> > > (enforce-rules) on project mpicbg-trakem2: Some Enforcer rules have
> > > failed. Look above for specific messages explaining why the rule failed.
> > > -> [Help 1]
> > > org.apache.maven.lifecycle.LifecycleExecutionException: Failed to
> > > execute goal
> > > org.apache.maven.plugins:maven-enforcer-plugin:1.3.1:enforce
> > > (enforce-rules) on project mpicbg-trakem2: Some Enforcer rules have
> > > failed. Look above for specific messages explaining why the rule failed.
> > >         at
> > >
> > > org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:216)
> > >         at
> > >
> > > org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
> > >         at
> > >
> > > org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
> > >         at
> > >
> > > org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:108)
> > >         at
> > >
> > > org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:76)
> > >         at
> > >
> > > org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
> > >         at
> > >
> > > org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:116)
> > >         at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:361)
> > >         at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:155)
> > >         at org.apache.maven.cli.MavenCli.execute(MavenCli.java:584)
> > >         at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:213)
> > >         at org.apache.maven.cli.MavenCli.main(MavenCli.java:157)
> > >         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
> > >         at
> > >
> > > sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
> > >         at
> > >
> > > sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
> > >         at java.lang.reflect.Method.invoke(Method.java:606)
> > >         at
> > >
> > > org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
> > >         at
> > > org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
> > >         at
> > >
> > > org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
> > >         at
> > > org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
> > > Caused by: org.apache.maven.plugin.MojoExecutionException: Some Enforcer
> > > rules have failed. Look above for specific messages explaining why the
> > > rule failed.
> > >         at
> > > org.apache.maven.plugins.enforcer.EnforceMojo.execute(EnforceMojo.java:209)
> > >         at
> > >
> > > org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:133)
> > >         at
> > >
> > > org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)
> > >         ... 19 more
> > > [ERROR]
> > > [ERROR]
> > > [ERROR] For more information about the errors and possible solutions,
> > > please read the following articles:
> > > [ERROR] [Help 1]
> > > http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException <http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException>
> > >
> > >
> > >
> > > Wait, mpicbg-trakem2-1.2.3-SNAPSHOT is the project that I am building,
> > > not a dependency thereof---and it is at a SNAPSHOT version---yes,
> > > because I am in development cycle---that should work---no?
> > >
> > > Thanks for your help,
> > > Stephan
> > >
> > >
> > >
> > > On Thu, 2015-03-19 at 12:18 -0500, Curtis Rueden wrote:
> > > > Hi Stephan,
> > > >
> > > > > Do you know about this [, do you have an idea what it is[
> > > >
> > > > Probably, this started happening because of this change:
> > > >
> > > >
> > > https://github.com/scijava/pom-scijava/commit/5e6bddae9fcc965722c0fce1e2996c2e49b60411 <https://github.com/scijava/pom-scijava/commit/5e6bddae9fcc965722c0fce1e2996c2e49b60411>
> > > >
> > > > Which in general is a _good_ thing because it's better for Eclipse to
> > > tell
> > > > you than for Jenkins to tell you later after you pushed to master.
> > > >
> > > > If there are enforcer issues, they should be addressed, or if
> > > unaddressable
> > > > the enforcer can be squelched so that CLI and Jenkins also do not
> > > complain.
> > > >
> > > > The weird thing here is that your Eclipse is complaining but our CLI is
> > > > not. Jay may be on to something about a Maven version discrepancy. Why
> > > are
> > > > you still on Kepler? You could try upgrading to Luna?I know of at least
> > > one
> > > > annoying Maven-related bug that was fixed. You could also try using the
> > > Run
> > > > As > Maven build... and specifying the "Debug Output" option (which
> > > passes
> > > > the -X flag to Maven), and see if that tells you anything interesting.
> > > >
> > > > Regards,
> > > > Curtis
> > > >
> > > > On Wed, Mar 18, 2015 at 10:33 PM, Stephan Saalfeld <
> > > > saalfelds at janelia.hhmi.org <mailto:saalfelds at janelia.hhmi.org>> wrote:
> > > >
> > > > > Hi ImageJ developers,
> > > > >
> > > > > Eclipse complains
> > > > >
> > > > > Some Enforcer rules have failed. Look above for specific messages
> > > > > explaining why the rule failed.
> > > > >
> > > > >
> > > (org.apache.maven.plugins:maven-enforcer-plugin:1.3.1:enforce:enforce-rules:validate)
> > > > >
> > > > > in my TrakEM2 master for each module.  No further information (neither
> > > > > above nor below) is provided.
> > > > >
> > > > > A terminal `mvn clean install`, however, succeeds without complaints.
> > > > > So I assume that this is an Eclipse specific quirk.  I have Kepler
> > > > > Service Release 1 installed.
> > > > >
> > > > > Do you know about this [, do you have an idea what it is[, and do you
> > > > > know how to fix it]]]?
> > > > >
> > > > > Thanks in any case,
> > > > > Stephan
> > > > >
> > > > >
> > > > > _______________________________________________
> > > > > ImageJ-devel mailing list
> > > > > ImageJ-devel at imagej.net <mailto:ImageJ-devel at imagej.net>
> > > > > http://imagej.net/mailman/listinfo/imagej-devel <http://imagej.net/mailman/listinfo/imagej-devel>
> > > > >
> > >
> > >
> > > _______________________________________________
> > > ImageJ-devel mailing list
> > > ImageJ-devel at imagej.net <mailto:ImageJ-devel at imagej.net>
> > > http://imagej.net/mailman/listinfo/imagej-devel <http://imagej.net/mailman/listinfo/imagej-devel>
> > >
> 
> 
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150319/72d3d483/attachment-0001.html>

From pietzsch at mpi-cbg.de  Fri Mar 20 07:00:30 2015
From: pietzsch at mpi-cbg.de (Tobias Pietzsch)
Date: Fri, 20 Mar 2015 13:00:30 +0100
Subject: [ImageJ-devel] Breaking API changes and BOM version bumps
In-Reply-To: <CA+B=mGoXANRm7Gbasfu_23Oz40fkU18Bv3_Q1RGMwAZqCDAg3Q@mail.gmail.com>
References: <CA+B=mGoSZHDK1pCX95+5do9H9jjywT=3zf_t0-xLnn_af=QY8g@mail.gmail.com>
	<20150316210027.01EFC381093@mail-interne3.pasteur.fr>
	<45F928D8-091B-4303-97CE-FE1FBA8C1337@mpi-cbg.de>
	<CA+B=mGoDU_2--cxR53JDzuUosd6kpxigZop5nB3ox1zpAxc3MQ@mail.gmail.com>
	<B0016FD7-A1D3-4010-853C-C9BB58F4E422@mpi-cbg.de>
	<CA+B=mGoXANRm7Gbasfu_23Oz40fkU18Bv3_Q1RGMwAZqCDAg3Q@mail.gmail.com>
Message-ID: <2D79D318-8F33-4D42-9E08-345A915713AC@mpi-cbg.de>

Hi Mark,

I just released
pom-bigdataviewer 1.1.2
bigdataviewer-core 1.0.8
bigdataviewer_fiji 1.0.10
bigdataviewer-server 1.0.3
Parent of pom-bigdataviewer 1.1.2 is pom-fiji 8.0.0.

best regards,
Tobias

On 18 Mar 2015, at 17:42, Mark Hiner <hiner at wisc.edu> wrote:

> Hi Tobias,
> 
> >I really do have to fix ij1-patcher before uploading anyway
> 
> Just wanted to let you know that the latest ij1-patcher and imagej-legacy are released.
> 
> Let me know if you run into any problems!
> 
> Thanks,
> Mark
> 
> On Mon, Mar 16, 2015 at 6:06 PM, Tobias Pietzsch <pietzsch at mpi-cbg.de> wrote:
> Hi Mark,
> 
> imglib2-tests and
> imglib2-algorithm-gpl
> are fixed already.
> 
> I?ll check BDV and TrackMate tommorrow.
> 
> all the best,
> Tobias
> 
> On 17 Mar 2015, at 00:03, Mark Hiner <hiner at wisc.edu> wrote:
> 
>> >Next pizza & beer are on me.
>> 
>> You should rename packages more often! :)
>> 
>> Neither of you should be hard on yourselves - our release history is filled with mistakes like this, and worse. Until dependency convergence is automatically tied to the release process, there will be more.
>> 
>> >If you could point me to packages that are hit by the imglib-algorithm change
>> 
>> Potentially affected components that I know of:
>> BDV-core
>> TrackMate
>> imglib2-tests
>> imglib2-algorithm-gpl
>> 
>> I really do have to fix ij1-patcher before uploading anyway, and just adding back the moved classes would be minimal effort. So the situation is far from dire.
>> 
>> Best,
>> Mark
>> 
>> On Mon, Mar 16, 2015 at 4:43 PM, Tobias Pietzsch <pietzsch at mpi-cbg.de> wrote:
>> Hmm, actually I think I?m to blame in this case because I did the release without properly thinking about the version numbers.
>> If you could point me to packages that are hit by the imglib-algorithm change, I?ll try to fix them.
>> best regards,
>> Tobias
>> 
>> On 16 Mar 2015, at 21:58, <tinevez at pasteur.fr> <tinevez at pasteur.fr> wrote:
>> 
>>> Fudge fudge fudge I did this.
>>> I am really sorry this is something I vastly overlooked. 
>>> Next pizza & beer are on me.
>>> 
>>> De : Mark Hiner
>>> Envoy? : ?lundi? ?16? ?mars? ?2015 ?20?:?38
>>> ? : Tobias Pietzsch, Jean-Yves Tinevez
>>> Cc : imagej-devel at imagej.net
>>> 
>>> Hi all,
>>> 
>>>  I wanted to share a brief case study on the current dependency skew of ImgLib2-algorithm-related components.
>>> 
>>>  Last week, an innocent-looking commit was merged into imglib2-algorithm. It then made its way into a patch release of imglib2-algorithm, and patch release of pom-imagej. Unfortunately, even a trivial package move like this is actually a breaking API change, and both the component and pom releases should have incremented a major version to indicate this.
>>> 
>>>  Further, pom-imagej now declares a set of components that are incompatible with each other - as components downstream of imglib2-algorithm are not updated to use the new packages. Thus if these libraries were consolidated (e.g. to upload to Fiji), there would be hit by dependency skew.
>>> 
>>>  For those interested, there are two possible solutions:
>>> 
>>> 1) Track down all uses of the old packages, update them, cut releases, update pom-imagej.
>>> or
>>> 2) Add deprecated, trivial extensions of the moved classes back to the old locations, which can then be removed at a later date.
>>> 
>>>  Naturally, #2 is much simpler and thus looking more attractive right now. :) Either way, developers should be aware of the current problems with pom-imagej 5.12.3 and 5.13.0 (the latter also points to an unreleased ij1-patcher, due to incompatibilities with ImageJ 1.49p - so certainly don't use that one).
>>> 
>>>  Our versioning practices are on the wiki: http://imagej.net/Architecture#Versioning but please let us know if anything is unclear or hard to find.
>>> 
>>>  The burden of manually accounting for SemVer changes is hopefully one we will soon be free from. For now, it's just something we have to consider whenever we cut releases.
>>> 
>>> Best,
>>> Mark
>> 
>> 
>> _______________________________________________
>> ImageJ-devel mailing list
>> ImageJ-devel at imagej.net
>> http://imagej.net/mailman/listinfo/imagej-devel
> 
> 
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150320/24b76b18/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150320/24b76b18/attachment.pgp>

From ctrueden at wisc.edu  Fri Mar 20 11:11:08 2015
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Fri, 20 Mar 2015 11:11:08 -0500
Subject: [ImageJ-devel] Problems uploading jars to update site
In-Reply-To: <0881594441925351.WA.birgit.moellerinformatik.unihalle.de@list.nih.gov>
References: <0881594441925351.WA.birgit.moellerinformatik.unihalle.de@list.nih.gov>
Message-ID: <CADN69ymr97gxzwj8yLmAi4VVe2-Csc+f23ms=Lq1pghWC7A99A@mail.gmail.com>

Hi Birgit,

[Switching to imagej-devel, to avoid spamming ImageJ users with technical
mumbo jumbo.]

>  the Xalan jar is included in our dependencies only to due loci_tools
>  declaring that jar as a dependency. As during the update procedure we
>  were also told that loci_tools is now part of the bioformats package,
>  I wonder if we can get rid of that dependency by switching from
>  loci_tools to bioformats_package.

>From a Maven perspective, I would suggest depending on the actual
Bio-Formats components you are using, rather than any uber-JAR such as
loci_tools (deprecated) or bioformats_package (the current uber-jar).

There is a brief discussion of the pros and cons of uber-jars from an
ImageJ perspective here:

http://imagej.net/Frequently_Asked_Questions#How_can_I_call_ImageJ_from_my_software.3F

If you point me at the public SCM for your project, I'll gladly take a look
at your POM and make some suggestions. With Bio-Formats, the standard
approach is to add compile-time dependency on ome:formats-api:5.0.8, and
runtime dependencies on ome:formats-bsd:5.0.8 and ome:formats-gpl:5.0.8,
since those latter two components provide file format implementations
("plugin"-esque) which are not needed at compile time, but you want on the
classpath at runtime for all the file format support.

Regards,
Curtis

On Fri, Mar 20, 2015 at 7:57 AM, Birgit M?ller <
birgit.moeller at informatik.uni-halle.de> wrote:

> Hi Curtis!
>
> On Thu, 19 Mar 2015 12:37:30 -0500, Curtis Rueden <ctrueden at WISC.EDU>
> wrote:
> >Hi Birgit,
> >
> >> we are trying to set up an ImageJ update site for our plugin
> >> collection MiToBo.
> >
> >Sounds great!
> >
> >> Since we have a lot of dependencies we would like to test the setup
> >> first on our own local server
> >
> >Good idea.
> >
> >> but in the end we plan to provide Mitobo via an ImageJ Wiki update
> >> site.
> >
> >Well, if you have a dedicated server, you can just use that. There is no
> >requirement to use a personal update site. But I guess the URL "
> >http://sites.imagej.net/MiToBo" would be pretty friendly. :-)
>
> yes, I agree, and we will go for it soon :-)
>
> >> Amongst others we depend on two jars, sezpoz.jar and xalan.jar. Both
> >> jars seem to have been provided by the Fiji Update Site in former
> >> days, but are now declared obsolete.
> >
> >Indeed.
> >
> >> Since we need both of them we tried to upload them to our own site,
> >> however, this fails. First Fiji claims about changed checksums for
> >> both jar files. After recalculating the checksums and trying to
> >> upload them again, the updater throws the following exception:
> >>
> >> Upload failed: java.lang.NoClassDefFoundError:
> >> org/apache/xml/serializer/TreeWalker
> >
> >How bizarre. I wonder if this is something xalan-specific, since xalan
> >ships classes that are also part of the JRE itself. As a test, you could
> >temporarily delete your xalan JAR, restart ImageJ, and try to add _only_
> >the sezpoz JAR to your update site, and see whether you encounter the same
> >issue.
>
> It looks like it is really a Xalan issue. Skipping the Xalan jar
> everything works fine. Meanwhile I also figured out that the Xalan jar is
> included in our dependencies only to due loci_tools declaring that jar as a
> dependency. As during the update procedure we were also told that
> loci_tools is now part of the bioformats package, I wonder if we can get
> rid of that dependency by switching from loci_tools to bioformats_package.
> Moreover, if the Xalan jar is not present, our operators and plugins seem
> to work anyway, so maybe we even do not really need any stuff contained in
> that jar - but we will still need to investigate that further.
>
> >[...]
> >
> >Regards,
> >Curtis
> >
> >[...]
>
> For now, thanks for your elaborate reply.  If we encounter additional
> problems, I will get back to you and the list again. But, as suggested,
> next time I will post questions regarding update sites on the imagej-devel
> list instead of this one.
> Thanks and kind regards,
>
>  Birgit
>
> ---
>
> On Thu, 19 Mar 2015 12:37:30 -0500, Curtis Rueden <ctrueden at WISC.EDU>
> wrote:
>
> >Hi Birgit,
> >
> >> we are trying to set up an ImageJ update site for our plugin
> >> collection MiToBo.
> >
> >Sounds great!
> >
> >> Since we have a lot of dependencies we would like to test the setup
> >> first on our own local server
> >
> >Good idea.
> >
> >> but in the end we plan to provide Mitobo via an ImageJ Wiki update
> >> site.
> >
> >Well, if you have a dedicated server, you can just use that. There is no
> >requirement to use a personal update site. But I guess the URL "
> >http://sites.imagej.net/MiToBo" would be pretty friendly. :-)
> >
> >> Amongst others we depend on two jars, sezpoz.jar and xalan.jar. Both
> >> jars seem to have been provided by the Fiji Update Site in former
> >> days, but are now declared obsolete.
> >
> >Indeed.
> >
> >> Since we need both of them we tried to upload them to our own site,
> >> however, this fails. First Fiji claims about changed checksums for
> >> both jar files. After recalculating the checksums and trying to
> >> upload them again, the updater throws the following exception:
> >>
> >> Upload failed: java.lang.NoClassDefFoundError:
> >> org/apache/xml/serializer/TreeWalker
> >
> >How bizarre. I wonder if this is something xalan-specific, since xalan
> >ships classes that are also part of the JRE itself. As a test, you could
> >temporarily delete your xalan JAR, restart ImageJ, and try to add _only_
> >the sezpoz JAR to your update site, and see whether you encounter the same
> >issue.
> >
> >> What is Fiji's strategy to deal with cases where the same jar in
> >> different versions is provided by two update sites?
> >
> >IIRC, the ImageJ Updater (which is part of ImageJ2, and not specific to
> the
> >Fiji distribution) favors versions further down in the list of update
> >sites. That is: there is a linear order to the update sites, such that
> >files from sites further down the chain are considered to "shadow" the
> same
> >file from sites further up the chain. The reason I say "IIRC" is because I
> >am not 100% certain that chain order is only defined by the ordering
> listed
> >on the "List of update sites" wiki page. It may be that the order changes
> >for a local installation depending on when sites are toggled on and off.
> If
> >you are curious to dig in further, there is a unit test that verifies that
> >various multi-update-site features work properly [1], which you could play
> >with.
> >
> >The gist is that there is currently _no_ mechanism for defining
> >update-site-level dependencies, beyond just building on top of the ImageJ
> >and Fiji update sites. It is currently the user's responsibility to enable
> >update sites upon which your update site depends. Some day we may address
> >that issue as the number of update sites continues to grow, but it is not
> a
> >simple feature to add.
> >
> >> How does the updater try to determine depencies of plugins? In our
> >> case while checking our local jars it claimed to detect a cyclic
> >> dependency which was not there.
> >
> >It uses byte-code analysis to detect the dependencies. However, you can
> >tweak them before uploading by editing the list of dependencies directly
> in
> >the right-hand text box of the graphical updater window. This is sometimes
> >necessary in cases where there are undesired circular dependencies (e.g.,
> >slf4j-api and various slf4j bindings always detect as circular, due to the
> >design of SLF4J).
> >
> >Regards,
> >Curtis
> >
> >[1]
> >
> https://github.com/imagej/imagej-updater/blob/imagej-updater-0.7.1/src/test/java/net/imagej/updater/MultipleSitesTest.java
> >
> >On Sun, Mar 15, 2015 at 7:34 AM, Birgit M?ller <
> >birgit.moeller at informatik.uni-halle.de> wrote:
> >
> >> Dear all,
> >> we are trying to set up an ImageJ update site for our plugin collection
> >> MiToBo. Since we have a lot of dependencies we would like to test the
> setup
> >> first on our own local server, but in the end we plan to provide Mitobo
> via
> >> an ImageJ Wiki update site. Unfortunately we encountered some problems.
> >> Amongst others we depend on two jars, sezpoz.jar and xalan.jar. Both
> jars
> >> seem to have been provided by the Fiji Update Site in former days, but
> are
> >> now declared obsolete. Since we need both of them we tried to upload
> them
> >> to our own site, however, this fails. First Fiji claims about changed
> >> checksums for both jar files. After recalculating the checksums and
> trying
> >> to upload them again, the updater throws the following exception:
> >>
> >> Upload failed: java.lang.NoClassDefFoundError:
> >> org/apache/xml/serializer/TreeWalker
> >>
> >> Then the updater can only be canceled and trying to re-run it requires
> >> recalculation of checksums again. Nevertheless the upload fails again
> with
> >> the above exception. Does anyone have an idea why it is not possible to
> >> upload both jars to our own site? For other jars unseen by Fiji before
> >> there were no problems.
> >>
> >> And finally two general questions:
> >>
> >> - What is Fiji's strategy to deal with cases where the same jar in
> >> different versions is provided by two update sites?
> >>
> >> - How does the updater try to determine depencies of plugins? In our
> case
> >> while checking our local jars it claimed to detect a cyclic dependency
> >> which was not there.
> >>
> >> Thanks and best regards,
> >>
> >>  Birgit
> >>
> >>
> >> ------------------------------------------------------------------------
> >> Dr. rer. nat. Birgit Moeller
> >>
> >> Pattern Recognition & Bioinformatics
> >> Institute of Computer Science / Faculty of Natural Sciences III
> >> Martin Luther University Halle-Wittenberg
> >>
> >> office:     Room 4.12
> >> phone:      +49(0)345-55-24745
> >> fax:        +49(0)345-55-27039
> >> snail mail: Von-Seckendorff-Platz 1, 06120 Halle / Saale (Germany)
> >> e-mail:     birgit.moeller at informatik.uni-halle.de
> >> www:        http://www.informatik.uni-halle.de/moeller/
> >> ------------------------------------------------------------------------
> >>
> >> --
> >> ImageJ mailing list: http://imagej.nih.gov/ij/list.html
> >>
> >
> >--
> >ImageJ mailing list: http://imagej.nih.gov/ij/list.html
>
> --
> ImageJ mailing list: http://imagej.nih.gov/ij/list.html
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150320/25030f18/attachment-0001.html>

From birgit.moeller at informatik.uni-halle.de  Mon Mar 23 04:45:40 2015
From: birgit.moeller at informatik.uni-halle.de (Birgit Moeller)
Date: Mon, 23 Mar 2015 02:45:40 -0700 (PDT)
Subject: [ImageJ-devel] Problems uploading jars to update site
In-Reply-To: <CADN69ymr97gxzwj8yLmAi4VVe2-Csc+f23ms=Lq1pghWC7A99A@mail.gmail.com>
References: <CADN69ymr97gxzwj8yLmAi4VVe2-Csc+f23ms=Lq1pghWC7A99A@mail.gmail.com>
Message-ID: <1427103940117-941.post@n6.nabble.com>

Hi Curtis!


Curtis Rueden wrote
> Hi Birgit,
> [...]
> From a Maven perspective, I would suggest depending on the actual
> Bio-Formats components you are using, rather than any uber-JAR such as
> loci_tools (deprecated) or bioformats_package (the current uber-jar).
> 
> There is a brief discussion of the pros and cons of uber-jars from an
> ImageJ perspective here:
> 
> http://imagej.net/Frequently_Asked_Questions#How_can_I_call_ImageJ_from_my_software.3F

I totally agree that depending on the actual jars containing the components
has many advantages. Using the uber-jars in Alida/Mitobo is mainly a relict
of former days. In the beginning it was the easiest to simply use the
uber-jars to not miss anything. And until now we did not think much about
updating. But, for sure it would be best to change that now and we will do
that.


Curtis Rueden wrote
> If you point me at the public SCM for your project, I'll gladly take a
> look
> at your POM and make some suggestions. With Bio-Formats, the standard
> approach is to add compile-time dependency on ome:formats-api:5.0.8, and
> runtime dependencies on ome:formats-bsd:5.0.8 and ome:formats-gpl:5.0.8,
> since those latter two components provide file format implementations
> ("plugin"-esque) which are not needed at compile time, but you want on the
> classpath at runtime for all the file format support.
> 
> Regards,
> Curtis

We currently don't have an SCM being publically accessible, and our Maven
server crashed some days ago, so unfortunately I cannot point you to the
deployed artifacts or source directly. I will let you know immediately, when
our server is up again. But, in the meantime I can already tell you on what
functionality we currently depend being related to ImageJ and Bioformats.
Probably you can already give me a hint based on this information. We define
the following three dependencies:

    <dependency>
      <groupId>loci</groupId>
      <artifactId>loci_tools</artifactId>
      <version>4.4.8</version>
    </dependency>
    <dependency>
      <groupId>net.imglib2</groupId>
      <artifactId>imglib2</artifactId>
      <version>2.2.0</version>
    </dependency>
    <dependency>
      <groupId>net.imglib2</groupId>
      <artifactId>imglib2-algorithms</artifactId>
      <version>2.0.0-beta-10</version>
    </dependency>

We basically use functionality from the following Bioformats/Loci packages:
import loci.common.*;
import loci.common.services.*;
import loci.formats.*;
import loci.formats.gui.*;
import loci.formats.meta.*;
import loci.formats.out.*;
import loci.formats.services.*;
import ome.xml.model.*;

With regard to Imglib2 we use basic functionality from 

net.imglib2.img 
net.imglib2.type 

as well as component trees to be found in 

net.imglib2.algorithm.componenttree.

Regards,

 Birgit




Curtis Rueden wrote
> On Fri, Mar 20, 2015 at 7:57 AM, Birgit M?ller <

> birgit.moeller at .uni-halle

>> wrote:
> 
>> Hi Curtis!
>>
>> On Thu, 19 Mar 2015 12:37:30 -0500, Curtis Rueden &lt;

> ctrueden@

> &gt;
>> wrote:
>> >Hi Birgit,
>> >
>> >> we are trying to set up an ImageJ update site for our plugin
>> >> collection MiToBo.
>> >
>> >Sounds great!
>> >
>> >> Since we have a lot of dependencies we would like to test the setup
>> >> first on our own local server
>> >
>> >Good idea.
>> >
>> >> but in the end we plan to provide Mitobo via an ImageJ Wiki update
>> >> site.
>> >
>> >Well, if you have a dedicated server, you can just use that. There is no
>> >requirement to use a personal update site. But I guess the URL "
>> >http://sites.imagej.net/MiToBo" would be pretty friendly. :-)
>>
>> yes, I agree, and we will go for it soon :-)
>>
>> >> Amongst others we depend on two jars, sezpoz.jar and xalan.jar. Both
>> >> jars seem to have been provided by the Fiji Update Site in former
>> >> days, but are now declared obsolete.
>> >
>> >Indeed.
>> >
>> >> Since we need both of them we tried to upload them to our own site,
>> >> however, this fails. First Fiji claims about changed checksums for
>> >> both jar files. After recalculating the checksums and trying to
>> >> upload them again, the updater throws the following exception:
>> >>
>> >> Upload failed: java.lang.NoClassDefFoundError:
>> >> org/apache/xml/serializer/TreeWalker
>> >
>> >How bizarre. I wonder if this is something xalan-specific, since xalan
>> >ships classes that are also part of the JRE itself. As a test, you could
>> >temporarily delete your xalan JAR, restart ImageJ, and try to add _only_
>> >the sezpoz JAR to your update site, and see whether you encounter the
>> same
>> >issue.
>>
>> It looks like it is really a Xalan issue. Skipping the Xalan jar
>> everything works fine. Meanwhile I also figured out that the Xalan jar is
>> included in our dependencies only to due loci_tools declaring that jar as
>> a
>> dependency. As during the update procedure we were also told that
>> loci_tools is now part of the bioformats package, I wonder if we can get
>> rid of that dependency by switching from loci_tools to
>> bioformats_package.
>> Moreover, if the Xalan jar is not present, our operators and plugins seem
>> to work anyway, so maybe we even do not really need any stuff contained
>> in
>> that jar - but we will still need to investigate that further.
>>
>> >[...]
>> >
>> >Regards,
>> >Curtis
>> >
>> >[...]
>>
>> For now, thanks for your elaborate reply.  If we encounter additional
>> problems, I will get back to you and the list again. But, as suggested,
>> next time I will post questions regarding update sites on the
>> imagej-devel
>> list instead of this one.
>> Thanks and kind regards,
>>
>>  Birgit
>>
>> ---
>>
>> On Thu, 19 Mar 2015 12:37:30 -0500, Curtis Rueden &lt;

> ctrueden@

> &gt;
>> wrote:
>>
>> >Hi Birgit,
>> >
>> >> we are trying to set up an ImageJ update site for our plugin
>> >> collection MiToBo.
>> >
>> >Sounds great!
>> >
>> >> Since we have a lot of dependencies we would like to test the setup
>> >> first on our own local server
>> >
>> >Good idea.
>> >
>> >> but in the end we plan to provide Mitobo via an ImageJ Wiki update
>> >> site.
>> >
>> >Well, if you have a dedicated server, you can just use that. There is no
>> >requirement to use a personal update site. But I guess the URL "
>> >http://sites.imagej.net/MiToBo" would be pretty friendly. :-)
>> >
>> >> Amongst others we depend on two jars, sezpoz.jar and xalan.jar. Both
>> >> jars seem to have been provided by the Fiji Update Site in former
>> >> days, but are now declared obsolete.
>> >
>> >Indeed.
>> >
>> >> Since we need both of them we tried to upload them to our own site,
>> >> however, this fails. First Fiji claims about changed checksums for
>> >> both jar files. After recalculating the checksums and trying to
>> >> upload them again, the updater throws the following exception:
>> >>
>> >> Upload failed: java.lang.NoClassDefFoundError:
>> >> org/apache/xml/serializer/TreeWalker
>> >
>> >How bizarre. I wonder if this is something xalan-specific, since xalan
>> >ships classes that are also part of the JRE itself. As a test, you could
>> >temporarily delete your xalan JAR, restart ImageJ, and try to add _only_
>> >the sezpoz JAR to your update site, and see whether you encounter the
>> same
>> >issue.
>> >
>> >> What is Fiji's strategy to deal with cases where the same jar in
>> >> different versions is provided by two update sites?
>> >
>> >IIRC, the ImageJ Updater (which is part of ImageJ2, and not specific to
>> the
>> >Fiji distribution) favors versions further down in the list of update
>> >sites. That is: there is a linear order to the update sites, such that
>> >files from sites further down the chain are considered to "shadow" the
>> same
>> >file from sites further up the chain. The reason I say "IIRC" is because
>> I
>> >am not 100% certain that chain order is only defined by the ordering
>> listed
>> >on the "List of update sites" wiki page. It may be that the order
>> changes
>> >for a local installation depending on when sites are toggled on and off.
>> If
>> >you are curious to dig in further, there is a unit test that verifies
>> that
>> >various multi-update-site features work properly [1], which you could
>> play
>> >with.
>> >
>> >The gist is that there is currently _no_ mechanism for defining
>> >update-site-level dependencies, beyond just building on top of the
>> ImageJ
>> >and Fiji update sites. It is currently the user's responsibility to
>> enable
>> >update sites upon which your update site depends. Some day we may
>> address
>> >that issue as the number of update sites continues to grow, but it is
>> not
>> a
>> >simple feature to add.
>> >
>> >> How does the updater try to determine depencies of plugins? In our
>> >> case while checking our local jars it claimed to detect a cyclic
>> >> dependency which was not there.
>> >
>> >It uses byte-code analysis to detect the dependencies. However, you can
>> >tweak them before uploading by editing the list of dependencies directly
>> in
>> >the right-hand text box of the graphical updater window. This is
>> sometimes
>> >necessary in cases where there are undesired circular dependencies
>> (e.g.,
>> >slf4j-api and various slf4j bindings always detect as circular, due to
>> the
>> >design of SLF4J).
>> >
>> >Regards,
>> >Curtis
>> >
>> >[1]
>> >
>> https://github.com/imagej/imagej-updater/blob/imagej-updater-0.7.1/src/test/java/net/imagej/updater/MultipleSitesTest.java
>> >
>> >On Sun, Mar 15, 2015 at 7:34 AM, Birgit M?ller <
>> >

> birgit.moeller at .uni-halle

>> wrote:
>> >
>> >> Dear all,
>> >> we are trying to set up an ImageJ update site for our plugin
>> collection
>> >> MiToBo. Since we have a lot of dependencies we would like to test the
>> setup
>> >> first on our own local server, but in the end we plan to provide
>> Mitobo
>> via
>> >> an ImageJ Wiki update site. Unfortunately we encountered some
>> problems.
>> >> Amongst others we depend on two jars, sezpoz.jar and xalan.jar. Both
>> jars
>> >> seem to have been provided by the Fiji Update Site in former days, but
>> are
>> >> now declared obsolete. Since we need both of them we tried to upload
>> them
>> >> to our own site, however, this fails. First Fiji claims about changed
>> >> checksums for both jar files. After recalculating the checksums and
>> trying
>> >> to upload them again, the updater throws the following exception:
>> >>
>> >> Upload failed: java.lang.NoClassDefFoundError:
>> >> org/apache/xml/serializer/TreeWalker
>> >>
>> >> Then the updater can only be canceled and trying to re-run it requires
>> >> recalculation of checksums again. Nevertheless the upload fails again
>> with
>> >> the above exception. Does anyone have an idea why it is not possible
>> to
>> >> upload both jars to our own site? For other jars unseen by Fiji before
>> >> there were no problems.
>> >>
>> >> And finally two general questions:
>> >>
>> >> - What is Fiji's strategy to deal with cases where the same jar in
>> >> different versions is provided by two update sites?
>> >>
>> >> - How does the updater try to determine depencies of plugins? In our
>> case
>> >> while checking our local jars it claimed to detect a cyclic dependency
>> >> which was not there.
>> >>
>> >> Thanks and best regards,
>> >>
>> >>  Birgit
>> >>
>> >>
>> >>
>> ------------------------------------------------------------------------
>> >> Dr. rer. nat. Birgit Moeller
>> >>
>> >> Pattern Recognition & Bioinformatics
>> >> Institute of Computer Science / Faculty of Natural Sciences III
>> >> Martin Luther University Halle-Wittenberg
>> >>
>> >> office:     Room 4.12
>> >> phone:      +49(0)345-55-24745
>> >> fax:        +49(0)345-55-27039
>> >> snail mail: Von-Seckendorff-Platz 1, 06120 Halle / Saale (Germany)
>> >> e-mail:     

> birgit.moeller at .uni-halle

>> >> www:        http://www.informatik.uni-halle.de/moeller/
>> >>
>> ------------------------------------------------------------------------
>> >>
>> >> --
>> >> ImageJ mailing list: http://imagej.nih.gov/ij/list.html
>> >>
>> >
>> >--
>> >ImageJ mailing list: http://imagej.nih.gov/ij/list.html
>>
>> --
>> ImageJ mailing list: http://imagej.nih.gov/ij/list.html
>>
> 
> _______________________________________________
> ImageJ-devel mailing list

> ImageJ-devel@

> http://imagej.net/mailman/listinfo/imagej-devel





--
View this message in context: http://imagej-devel.54429.x6.nabble.com/Re-Problems-uploading-jars-to-update-site-tp940p941.html
Sent from the ImageJ-devel mailing list archive at Nabble.com.


From ctrueden at wisc.edu  Mon Mar 23 16:16:26 2015
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Mon, 23 Mar 2015 16:16:26 -0500
Subject: [ImageJ-devel] Problems uploading jars to update site
In-Reply-To: <1427103940117-941.post@n6.nabble.com>
References: <CADN69ymr97gxzwj8yLmAi4VVe2-Csc+f23ms=Lq1pghWC7A99A@mail.gmail.com>
	<1427103940117-941.post@n6.nabble.com>
Message-ID: <CADN69ym6hqD1JMqrM0LzpdnhaCBZBLb8UPZ-rCtLUH9RYpx9EQ@mail.gmail.com>

Hi Birgit,

So your main deps are:

> loci:loci_tools:4.4.8
> net.imglib2:imglib2:2.2.0
> net.imglib2:imglib2-algorithms:2.0.0-beta-10

There are a couple of problems.

1) The imglib2-algorithms artifact is obsolete. Since the 2.0.0 final
release of imglib2, the Algorithms library was renamed to imglib2-algorithm
instead, for consistency.

2) Bio-Formats 4.4.x is no longer shipped with Fiji. It currently ships
Bio-Formats 5.0.x, which will soon become 5.1.0 once the OME team finalizes
that version. MiToBo will have compatibility problems with Fiji as long as
it still depends on 4.4.8.

I advise extending pom-imagej (or alternately, import it in your
dependencyManagement section [1]) to inherit its Bill of Materials [2], to
get consistency of versioning. Otherwise, you are just taking a stab in the
dark at getting all the version numbers right. The BOM exists as a promise
to downstream projects that all the versions declared therein will work
together. In general, if you have not already read over the ImageJ
Architecture page [3], I would suggest doing so.

As of this writing, if you extend or import the newest pom-imagej 6.0.0,
you can then add the following dependencies:

> ome:formats-api (for loci.formats.*)
> ome:formats-common (for loci.common.*)
> ome:ome-xml (for ome.xml.*)
> ome:formats-bsd (runtime; for open file formats)
> ome:formats-gpl (runtime; for proprietary file formats)
> net.imglib2:imglib2
> net.imglib2:imglib2-algorithm

I did not bother to specify the version numbers above -- the whole point is
that you would leave off the "<version>...</version>" lines in your POM,
since they are managed by pom-imagej instead.

Happy to help if you need further information or assistance with this!

> We currently don't have an SCM being publically accessible

If you are willing to change that, we would be delighted to add more MiToBo
links in the relevant places of our SciJava propaganda. In particular:

* http://scijava.org/
* http://imagej.net/Philosophy

And on the Architecture page too, adding (e.g.) a MiToBo GitHub
organization, pom-mitobo, etc., to the various tables.

Currently we do include the MiToBo and Alida logos in our talks when we
mention SciJava module interoperability, but it would be nice to link to
more of your project resources.

Regards,
Curtis

[1]
https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Importing_Dependencies
[2] http://imagej.net/BOM
[3] http://imagej.net/Architecture

On Mon, Mar 23, 2015 at 4:45 AM, Birgit Moeller <
birgit.moeller at informatik.uni-halle.de> wrote:

> Hi Curtis!
>
>
> Curtis Rueden wrote
> > Hi Birgit,
> > [...]
> > From a Maven perspective, I would suggest depending on the actual
> > Bio-Formats components you are using, rather than any uber-JAR such as
> > loci_tools (deprecated) or bioformats_package (the current uber-jar).
> >
> > There is a brief discussion of the pros and cons of uber-jars from an
> > ImageJ perspective here:
> >
> >
> http://imagej.net/Frequently_Asked_Questions#How_can_I_call_ImageJ_from_my_software.3F
>
> I totally agree that depending on the actual jars containing the components
> has many advantages. Using the uber-jars in Alida/Mitobo is mainly a relict
> of former days. In the beginning it was the easiest to simply use the
> uber-jars to not miss anything. And until now we did not think much about
> updating. But, for sure it would be best to change that now and we will do
> that.
>
>
> Curtis Rueden wrote
> > If you point me at the public SCM for your project, I'll gladly take a
> > look
> > at your POM and make some suggestions. With Bio-Formats, the standard
> > approach is to add compile-time dependency on ome:formats-api:5.0.8, and
> > runtime dependencies on ome:formats-bsd:5.0.8 and ome:formats-gpl:5.0.8,
> > since those latter two components provide file format implementations
> > ("plugin"-esque) which are not needed at compile time, but you want on
> the
> > classpath at runtime for all the file format support.
> >
> > Regards,
> > Curtis
>
> We currently don't have an SCM being publically accessible, and our Maven
> server crashed some days ago, so unfortunately I cannot point you to the
> deployed artifacts or source directly. I will let you know immediately,
> when
> our server is up again. But, in the meantime I can already tell you on what
> functionality we currently depend being related to ImageJ and Bioformats.
> Probably you can already give me a hint based on this information. We
> define
> the following three dependencies:
>
>     <dependency>
>       <groupId>loci</groupId>
>       <artifactId>loci_tools</artifactId>
>       <version>4.4.8</version>
>     </dependency>
>     <dependency>
>       <groupId>net.imglib2</groupId>
>       <artifactId>imglib2</artifactId>
>       <version>2.2.0</version>
>     </dependency>
>     <dependency>
>       <groupId>net.imglib2</groupId>
>       <artifactId>imglib2-algorithms</artifactId>
>       <version>2.0.0-beta-10</version>
>     </dependency>
>
> We basically use functionality from the following Bioformats/Loci packages:
> import loci.common.*;
> import loci.common.services.*;
> import loci.formats.*;
> import loci.formats.gui.*;
> import loci.formats.meta.*;
> import loci.formats.out.*;
> import loci.formats.services.*;
> import ome.xml.model.*;
>
> With regard to Imglib2 we use basic functionality from
>
> net.imglib2.img
> net.imglib2.type
>
> as well as component trees to be found in
>
> net.imglib2.algorithm.componenttree.
>
> Regards,
>
>  Birgit
>
>
>
>
> Curtis Rueden wrote
> > On Fri, Mar 20, 2015 at 7:57 AM, Birgit M?ller <
>
> > birgit.moeller at .uni-halle
>
> >> wrote:
> >
> >> Hi Curtis!
> >>
> >> On Thu, 19 Mar 2015 12:37:30 -0500, Curtis Rueden &lt;
>
> > ctrueden@
>
> > &gt;
> >> wrote:
> >> >Hi Birgit,
> >> >
> >> >> we are trying to set up an ImageJ update site for our plugin
> >> >> collection MiToBo.
> >> >
> >> >Sounds great!
> >> >
> >> >> Since we have a lot of dependencies we would like to test the setup
> >> >> first on our own local server
> >> >
> >> >Good idea.
> >> >
> >> >> but in the end we plan to provide Mitobo via an ImageJ Wiki update
> >> >> site.
> >> >
> >> >Well, if you have a dedicated server, you can just use that. There is
> no
> >> >requirement to use a personal update site. But I guess the URL "
> >> >http://sites.imagej.net/MiToBo" would be pretty friendly. :-)
> >>
> >> yes, I agree, and we will go for it soon :-)
> >>
> >> >> Amongst others we depend on two jars, sezpoz.jar and xalan.jar. Both
> >> >> jars seem to have been provided by the Fiji Update Site in former
> >> >> days, but are now declared obsolete.
> >> >
> >> >Indeed.
> >> >
> >> >> Since we need both of them we tried to upload them to our own site,
> >> >> however, this fails. First Fiji claims about changed checksums for
> >> >> both jar files. After recalculating the checksums and trying to
> >> >> upload them again, the updater throws the following exception:
> >> >>
> >> >> Upload failed: java.lang.NoClassDefFoundError:
> >> >> org/apache/xml/serializer/TreeWalker
> >> >
> >> >How bizarre. I wonder if this is something xalan-specific, since xalan
> >> >ships classes that are also part of the JRE itself. As a test, you
> could
> >> >temporarily delete your xalan JAR, restart ImageJ, and try to add
> _only_
> >> >the sezpoz JAR to your update site, and see whether you encounter the
> >> same
> >> >issue.
> >>
> >> It looks like it is really a Xalan issue. Skipping the Xalan jar
> >> everything works fine. Meanwhile I also figured out that the Xalan jar
> is
> >> included in our dependencies only to due loci_tools declaring that jar
> as
> >> a
> >> dependency. As during the update procedure we were also told that
> >> loci_tools is now part of the bioformats package, I wonder if we can get
> >> rid of that dependency by switching from loci_tools to
> >> bioformats_package.
> >> Moreover, if the Xalan jar is not present, our operators and plugins
> seem
> >> to work anyway, so maybe we even do not really need any stuff contained
> >> in
> >> that jar - but we will still need to investigate that further.
> >>
> >> >[...]
> >> >
> >> >Regards,
> >> >Curtis
> >> >
> >> >[...]
> >>
> >> For now, thanks for your elaborate reply.  If we encounter additional
> >> problems, I will get back to you and the list again. But, as suggested,
> >> next time I will post questions regarding update sites on the
> >> imagej-devel
> >> list instead of this one.
> >> Thanks and kind regards,
> >>
> >>  Birgit
> >>
> >> ---
> >>
> >> On Thu, 19 Mar 2015 12:37:30 -0500, Curtis Rueden &lt;
>
> > ctrueden@
>
> > &gt;
> >> wrote:
> >>
> >> >Hi Birgit,
> >> >
> >> >> we are trying to set up an ImageJ update site for our plugin
> >> >> collection MiToBo.
> >> >
> >> >Sounds great!
> >> >
> >> >> Since we have a lot of dependencies we would like to test the setup
> >> >> first on our own local server
> >> >
> >> >Good idea.
> >> >
> >> >> but in the end we plan to provide Mitobo via an ImageJ Wiki update
> >> >> site.
> >> >
> >> >Well, if you have a dedicated server, you can just use that. There is
> no
> >> >requirement to use a personal update site. But I guess the URL "
> >> >http://sites.imagej.net/MiToBo" would be pretty friendly. :-)
> >> >
> >> >> Amongst others we depend on two jars, sezpoz.jar and xalan.jar. Both
> >> >> jars seem to have been provided by the Fiji Update Site in former
> >> >> days, but are now declared obsolete.
> >> >
> >> >Indeed.
> >> >
> >> >> Since we need both of them we tried to upload them to our own site,
> >> >> however, this fails. First Fiji claims about changed checksums for
> >> >> both jar files. After recalculating the checksums and trying to
> >> >> upload them again, the updater throws the following exception:
> >> >>
> >> >> Upload failed: java.lang.NoClassDefFoundError:
> >> >> org/apache/xml/serializer/TreeWalker
> >> >
> >> >How bizarre. I wonder if this is something xalan-specific, since xalan
> >> >ships classes that are also part of the JRE itself. As a test, you
> could
> >> >temporarily delete your xalan JAR, restart ImageJ, and try to add
> _only_
> >> >the sezpoz JAR to your update site, and see whether you encounter the
> >> same
> >> >issue.
> >> >
> >> >> What is Fiji's strategy to deal with cases where the same jar in
> >> >> different versions is provided by two update sites?
> >> >
> >> >IIRC, the ImageJ Updater (which is part of ImageJ2, and not specific to
> >> the
> >> >Fiji distribution) favors versions further down in the list of update
> >> >sites. That is: there is a linear order to the update sites, such that
> >> >files from sites further down the chain are considered to "shadow" the
> >> same
> >> >file from sites further up the chain. The reason I say "IIRC" is
> because
> >> I
> >> >am not 100% certain that chain order is only defined by the ordering
> >> listed
> >> >on the "List of update sites" wiki page. It may be that the order
> >> changes
> >> >for a local installation depending on when sites are toggled on and
> off.
> >> If
> >> >you are curious to dig in further, there is a unit test that verifies
> >> that
> >> >various multi-update-site features work properly [1], which you could
> >> play
> >> >with.
> >> >
> >> >The gist is that there is currently _no_ mechanism for defining
> >> >update-site-level dependencies, beyond just building on top of the
> >> ImageJ
> >> >and Fiji update sites. It is currently the user's responsibility to
> >> enable
> >> >update sites upon which your update site depends. Some day we may
> >> address
> >> >that issue as the number of update sites continues to grow, but it is
> >> not
> >> a
> >> >simple feature to add.
> >> >
> >> >> How does the updater try to determine depencies of plugins? In our
> >> >> case while checking our local jars it claimed to detect a cyclic
> >> >> dependency which was not there.
> >> >
> >> >It uses byte-code analysis to detect the dependencies. However, you can
> >> >tweak them before uploading by editing the list of dependencies
> directly
> >> in
> >> >the right-hand text box of the graphical updater window. This is
> >> sometimes
> >> >necessary in cases where there are undesired circular dependencies
> >> (e.g.,
> >> >slf4j-api and various slf4j bindings always detect as circular, due to
> >> the
> >> >design of SLF4J).
> >> >
> >> >Regards,
> >> >Curtis
> >> >
> >> >[1]
> >> >
> >>
> https://github.com/imagej/imagej-updater/blob/imagej-updater-0.7.1/src/test/java/net/imagej/updater/MultipleSitesTest.java
> >> >
> >> >On Sun, Mar 15, 2015 at 7:34 AM, Birgit M?ller <
> >> >
>
> > birgit.moeller at .uni-halle
>
> >> wrote:
> >> >
> >> >> Dear all,
> >> >> we are trying to set up an ImageJ update site for our plugin
> >> collection
> >> >> MiToBo. Since we have a lot of dependencies we would like to test the
> >> setup
> >> >> first on our own local server, but in the end we plan to provide
> >> Mitobo
> >> via
> >> >> an ImageJ Wiki update site. Unfortunately we encountered some
> >> problems.
> >> >> Amongst others we depend on two jars, sezpoz.jar and xalan.jar. Both
> >> jars
> >> >> seem to have been provided by the Fiji Update Site in former days,
> but
> >> are
> >> >> now declared obsolete. Since we need both of them we tried to upload
> >> them
> >> >> to our own site, however, this fails. First Fiji claims about changed
> >> >> checksums for both jar files. After recalculating the checksums and
> >> trying
> >> >> to upload them again, the updater throws the following exception:
> >> >>
> >> >> Upload failed: java.lang.NoClassDefFoundError:
> >> >> org/apache/xml/serializer/TreeWalker
> >> >>
> >> >> Then the updater can only be canceled and trying to re-run it
> requires
> >> >> recalculation of checksums again. Nevertheless the upload fails again
> >> with
> >> >> the above exception. Does anyone have an idea why it is not possible
> >> to
> >> >> upload both jars to our own site? For other jars unseen by Fiji
> before
> >> >> there were no problems.
> >> >>
> >> >> And finally two general questions:
> >> >>
> >> >> - What is Fiji's strategy to deal with cases where the same jar in
> >> >> different versions is provided by two update sites?
> >> >>
> >> >> - How does the updater try to determine depencies of plugins? In our
> >> case
> >> >> while checking our local jars it claimed to detect a cyclic
> dependency
> >> >> which was not there.
> >> >>
> >> >> Thanks and best regards,
> >> >>
> >> >>  Birgit
> >> >>
> >> >>
> >> >>
> >> ------------------------------------------------------------------------
> >> >> Dr. rer. nat. Birgit Moeller
> >> >>
> >> >> Pattern Recognition & Bioinformatics
> >> >> Institute of Computer Science / Faculty of Natural Sciences III
> >> >> Martin Luther University Halle-Wittenberg
> >> >>
> >> >> office:     Room 4.12
> >> >> phone:      +49(0)345-55-24745
> >> >> fax:        +49(0)345-55-27039
> >> >> snail mail: Von-Seckendorff-Platz 1, 06120 Halle / Saale (Germany)
> >> >> e-mail:
>
> > birgit.moeller at .uni-halle
>
> >> >> www:        http://www.informatik.uni-halle.de/moeller/
> >> >>
> >> ------------------------------------------------------------------------
> >> >>
> >> >> --
> >> >> ImageJ mailing list: http://imagej.nih.gov/ij/list.html
> >> >>
> >> >
> >> >--
> >> >ImageJ mailing list: http://imagej.nih.gov/ij/list.html
> >>
> >> --
> >> ImageJ mailing list: http://imagej.nih.gov/ij/list.html
> >>
> >
> > _______________________________________________
> > ImageJ-devel mailing list
>
> > ImageJ-devel@
>
> > http://imagej.net/mailman/listinfo/imagej-devel
>
>
>
>
>
> --
> View this message in context:
> http://imagej-devel.54429.x6.nabble.com/Re-Problems-uploading-jars-to-update-site-tp940p941.html
> Sent from the ImageJ-devel mailing list archive at Nabble.com.
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150323/273e21e3/attachment-0001.html>

From hiner at wisc.edu  Thu Mar 26 09:32:57 2015
From: hiner at wisc.edu (Mark Hiner)
Date: Thu, 26 Mar 2015 09:32:57 -0500
Subject: [ImageJ-devel] Eclipse hickup with enforcer rules of pom-fiji >
	7.2.0
In-Reply-To: <187D6BE7-0176-419E-9B66-AF748D876B12@wisc.edu>
References: <1426736009.14099.50.camel@saalfelds-ws1.janelia.priv>
	<CADN69yk+mTzxrjbB42PsfXvCRdtdGErFE-2Z8-wjiSH2AHsYnA@mail.gmail.com>
	<1426787623.14099.76.camel@saalfelds-ws1.janelia.priv>
	<CA+B=mGpLjoCtwwP7KaasMuseNEkk401vdj0+LPSgbqvMKu8m_Q@mail.gmail.com>
	<1426790214.14099.99.camel@saalfelds-ws1.janelia.priv>
	<CADN69ymYPrpu+qoB-2DJue93jZPeA2S0-MpAAVshOvyaZMJHBg@mail.gmail.com>
	<187D6BE7-0176-419E-9B66-AF748D876B12@wisc.edu>
Message-ID: <CA+B=mGpDP4FEWsHD1oY3m+uc8z5yFE4JSE=K=nS7ysvkmvsvVQ@mail.gmail.com>

Hi all,

>looks like you can check the install/version of maven that eclipse is
using by going to the menu Eclipse > Preferences > Maven > Installations

Thanks Jay. To clarify the history here:

1) We made a custom Maven enforcer rule that ensures no SNAPSHOT
dependencies/parents are used, ever.
2) We then relaxed this restriction to allow SNAPSHOT couplings between
modules in multi-module builds[1].
3) Eclipse used to simply ignore Maven enforcer rules - but Curtis made
some updates to make this possible.
4) Stephan then discovered that our enforcer rule fails in Eclipse because
each submodule is built individually, and our rule required building from
the aggregator itself.

Anyway! I pushed a tentative fix to the scijava-maven-plugin to allow
building individual submodules, and added a branch to trakEM2[2] with some
instructions on how to test this locally. Using this change I'm able to
import the trakEM2 projects into Eclipse with no enforcer failures.

This release will probably go into Fiji this week, at which point I can
delete the trakEM2 branch. Just wanted to put it out there so interested
parties could try it.

Best,
Mark

P.S. for a reminder why we're doing this, see [3]

[1] http://books.sonatype.com/mvnex-book/reference/multimodule.html
[2] https://github.com/trakem2/TrakEM2/tree/test-enforcer
[3] http://imagej.net/Reproducible_builds#Reproducible_builds

On Thu, Mar 19, 2015 at 3:51 PM, Jay Warrick <warrick at wisc.edu> wrote:

> Hard for me to follow if you guys have solved this one or now but, Re: the
> potential of a maven version discrepancy between Eclipse and the CLI, it
> looks like you can check the install/version of maven that eclipse is using
> by going to the menu Eclipse > Preferences > Maven > Installations
>
> Only now just found this now and I see it is a different install than I
> use at the command line. Looks like you can point it to a particular
> install though to make sure they are the same.
>
> Cheers,
>
> Jay
>
> On Mar 19, 2015, at 1:50 PM, Curtis Rueden <ctrueden at wisc.edu> wrote:
>
> Hi Stephan,
>
> To reword Mark's explanation:
>
> The current behavior is a bug, which happens when you try to build _only_
> the submodule, rather than building at the top level of the multi-module
> project.
>
> It is triggered in Eclipse because Eclipse's project configuration runs
> each submodule's build separately, in some sense.
>
> Mark said he would change the scijava-maven-plugin's use of the word
> "dependency" in the case of parent POM linkage, since a parent POM is not a
> "dependency" in Maven terms. (This is what he meant by "consider it
> reworded" -- like a genie saying "It's as good as done!")
>
> We will also be exploring how to solve this bug in general, such that it
> _does_ become possible to build only a submodule of a multi-module project,
> without the enforcer throwing a tantrum.
>
> Regards,
> Curtis
>
> On Thu, Mar 19, 2015 at 1:36 PM, Stephan Saalfeld <
> saalfelds at janelia.hhmi.org> wrote:
>
>> Hi Mark,
>>
>> > It is fine that mpicbg-trakem2 is a SNAPSHOT. The (P) indicates that a
>> > SNAPSHOT parent is making things unhappy. If the object was not allowed
>> to
>> > be a SNAPSHOT you would see a (V). But it is misleading to call it a
>> > dependency.. consider it reworded.
>> >
>>
>> Sorry, I didn't get this.  Could you reword please ;) (I mean,
>> seriously, I didn't get it)?  A trial:
>>
>> The complaint is that pom-trakem2, which is mpicbg-trakem2's parent is
>> at a SNAPSHOT-version?
>>
>> > For SNAPSHOT-coupled multi-module builds, the contract is that SNAPSHOTS
>> > are allowed as long as everything is built from the top-level. If you
>> built
>> > from a submodule, Maven could resolve the SNAPSHOT parent remotely,
>> which
>> > would then not be guaranteed to match the parent in your multi-module
>> > project.
>> >
>>
>> I guess I got it.
>>
>> > Eclipse is problematic because it splits each submodule out to the same
>> > level as the parent pom, and resolves each individually, thus causing
>> > RequireReproducibleBuilds to fail.
>> >
>>
>> That sounds like a perfect explanation.  But since Eclipse is the
>> primary development platform, that should definitely work.  I actually
>> think that it is more important that builds build in Eclipse without red
>> x-es than that builds are reproducible.  I am reverting to
>> pom-fiji-7.2.0 in the meantime to give myself peace of mind.
>>
>> > I will look into ways of obtaining the reactor's parent pom locally[1],
>> so
>> > that we can build submodules directly.
>> >
>>
>> Thanks a lot!
>>
>> Best,
>> Stephan
>>
>>
>> > [1] https://github.com/scijava/scijava-maven-plugin/issues/12
>> >
>> > On Thu, Mar 19, 2015 at 12:53 PM, Stephan Saalfeld <
>> > saalfelds at janelia.hhmi.org> wrote:
>> >
>> > > Hi Curtis and Jay,
>> > >
>> > > I upgraded to Luna with the same effect.  7.2.0 works, 8.0.0 triggers
>> > > the unspecific complaint as show in the OP.
>> > >
>> > > Run As > Maven build... + Debug Output
>> > >
>> > > says:
>> > >
>> > > [INFO] Property 'imagej.app.directory' unset; Skipping copy-jars
>> > > [INFO]
>> > >
>> ------------------------------------------------------------------------
>> > > [INFO] Reactor Summary:
>> > > [INFO]
>> > > [INFO] Aggregator project for Albert Cardona's TrakEM2 software suite
>> > > SUCCESS [  5.098 s]
>> > > [INFO] jars/VectorString.jar ............................. SUCCESS [
>> > > 8.813 s]
>> > > [INFO] mpicbg-trakem2 .................................... SUCCESS [
>> > > 8.074 s]
>> > > [INFO] plugins/TrakEM2_.jar .............................. SUCCESS
>> > > [ 28.727 s]
>> > > [INFO] jars/T2-NIT.jar ................................... SUCCESS
>> > > [ 14.724 s]
>> > > [INFO] jars/T2-TreelineGraph.jar ......................... SUCCESS
>> > > [ 13.202 s]
>> > > [INFO]
>> > >
>> ------------------------------------------------------------------------
>> > > [INFO] BUILD SUCCESS
>> > > [INFO]
>> > >
>> ------------------------------------------------------------------------
>> > > [INFO] Total time: 01:19 min
>> > > [INFO] Finished at: 2015-03-19T13:45:46-05:00
>> > > [INFO] Final Memory: 250M/3444M
>> > > [INFO]
>> > >
>> ------------------------------------------------------------------------
>> > >
>> > >
>> > >
>> > >
>> > >
>> > > But the error mark (red x) persists on all mudules' pom files with the
>> > > unspecific error message.
>> > >
>> > > Next test, running Maven build... in mpicbg-trakem2-1.2.3-SNAPSHOT, or
>> > > any of the other modules where the error manifests leads to more
>> > > informative output:
>> > >
>> > >
>> > > The following dependencies either are SNAPSHOT versions (V), contain
>> > > SNAPSHOT parents (P), or contain SNAPSHOT dependencies (D):
>> > >
>> > >  (P)  sc.fiji:mpicbg-trakem2:1.2.3-SNAPSHOT
>> > >
>> > > [INFO]
>> > >
>> ------------------------------------------------------------------------
>> > > [INFO] BUILD FAILURE
>> > > [INFO]
>> > >
>> ------------------------------------------------------------------------
>> > > [INFO] Total time: 3.043 s
>> > > [INFO] Finished at: 2015-03-19T13:48:20-05:00
>> > > [INFO] Final Memory: 33M/1930M
>> > > [INFO]
>> > >
>> ------------------------------------------------------------------------
>> > > [ERROR] Failed to execute goal
>> > > org.apache.maven.plugins:maven-enforcer-plugin:1.3.1:enforce
>> > > (enforce-rules) on project mpicbg-trakem2: Some Enforcer rules have
>> > > failed. Look above for specific messages explaining why the rule
>> failed.
>> > > -> [Help 1]
>> > > org.apache.maven.lifecycle.LifecycleExecutionException: Failed to
>> > > execute goal
>> > > org.apache.maven.plugins:maven-enforcer-plugin:1.3.1:enforce
>> > > (enforce-rules) on project mpicbg-trakem2: Some Enforcer rules have
>> > > failed. Look above for specific messages explaining why the rule
>> failed.
>> > >         at
>> > >
>> > >
>> org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:216)
>> > >         at
>> > >
>> > >
>> org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
>> > >         at
>> > >
>> > >
>> org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
>> > >         at
>> > >
>> > >
>> org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:108)
>> > >         at
>> > >
>> > >
>> org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:76)
>> > >         at
>> > >
>> > >
>> org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
>> > >         at
>> > >
>> > >
>> org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:116)
>> > >         at
>> org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:361)
>> > >         at
>> org.apache.maven.DefaultMaven.execute(DefaultMaven.java:155)
>> > >         at org.apache.maven.cli.MavenCli.execute(MavenCli.java:584)
>> > >         at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:213)
>> > >         at org.apache.maven.cli.MavenCli.main(MavenCli.java:157)
>> > >         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
>> > >         at
>> > >
>> > >
>> sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
>> > >         at
>> > >
>> > >
>> sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
>> > >         at java.lang.reflect.Method.invoke(Method.java:606)
>> > >         at
>> > >
>> > >
>> org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
>> > >         at
>> > >
>> org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
>> > >         at
>> > >
>> > >
>> org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
>> > >         at
>> > >
>> org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
>> > > Caused by: org.apache.maven.plugin.MojoExecutionException: Some
>> Enforcer
>> > > rules have failed. Look above for specific messages explaining why the
>> > > rule failed.
>> > >         at
>> > >
>> org.apache.maven.plugins.enforcer.EnforceMojo.execute(EnforceMojo.java:209)
>> > >         at
>> > >
>> > >
>> org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:133)
>> > >         at
>> > >
>> > >
>> org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)
>> > >         ... 19 more
>> > > [ERROR]
>> > > [ERROR]
>> > > [ERROR] For more information about the errors and possible solutions,
>> > > please read the following articles:
>> > > [ERROR] [Help 1]
>> > >
>> http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
>> > >
>> > >
>> > >
>> > > Wait, mpicbg-trakem2-1.2.3-SNAPSHOT is the project that I am building,
>> > > not a dependency thereof---and it is at a SNAPSHOT version---yes,
>> > > because I am in development cycle---that should work---no?
>> > >
>> > > Thanks for your help,
>> > > Stephan
>> > >
>> > >
>> > >
>> > > On Thu, 2015-03-19 at 12:18 -0500, Curtis Rueden wrote:
>> > > > Hi Stephan,
>> > > >
>> > > > > Do you know about this [, do you have an idea what it is[
>> > > >
>> > > > Probably, this started happening because of this change:
>> > > >
>> > > >
>> > >
>> https://github.com/scijava/pom-scijava/commit/5e6bddae9fcc965722c0fce1e2996c2e49b60411
>> > > >
>> > > > Which in general is a _good_ thing because it's better for Eclipse
>> to
>> > > tell
>> > > > you than for Jenkins to tell you later after you pushed to master.
>> > > >
>> > > > If there are enforcer issues, they should be addressed, or if
>> > > unaddressable
>> > > > the enforcer can be squelched so that CLI and Jenkins also do not
>> > > complain.
>> > > >
>> > > > The weird thing here is that your Eclipse is complaining but our
>> CLI is
>> > > > not. Jay may be on to something about a Maven version discrepancy.
>> Why
>> > > are
>> > > > you still on Kepler? You could try upgrading to Luna?I know of at
>> least
>> > > one
>> > > > annoying Maven-related bug that was fixed. You could also try using
>> the
>> > > Run
>> > > > As > Maven build... and specifying the "Debug Output" option (which
>> > > passes
>> > > > the -X flag to Maven), and see if that tells you anything
>> interesting.
>> > > >
>> > > > Regards,
>> > > > Curtis
>> > > >
>> > > > On Wed, Mar 18, 2015 at 10:33 PM, Stephan Saalfeld <
>> > > > saalfelds at janelia.hhmi.org> wrote:
>> > > >
>> > > > > Hi ImageJ developers,
>> > > > >
>> > > > > Eclipse complains
>> > > > >
>> > > > > Some Enforcer rules have failed. Look above for specific messages
>> > > > > explaining why the rule failed.
>> > > > >
>> > > > >
>> > >
>> (org.apache.maven.plugins:maven-enforcer-plugin:1.3.1:enforce:enforce-rules:validate)
>> > > > >
>> > > > > in my TrakEM2 master for each module.  No further information
>> (neither
>> > > > > above nor below) is provided.
>> > > > >
>> > > > > A terminal `mvn clean install`, however, succeeds without
>> complaints.
>> > > > > So I assume that this is an Eclipse specific quirk.  I have Kepler
>> > > > > Service Release 1 installed.
>> > > > >
>> > > > > Do you know about this [, do you have an idea what it is[, and do
>> you
>> > > > > know how to fix it]]]?
>> > > > >
>> > > > > Thanks in any case,
>> > > > > Stephan
>> > > > >
>> > > > >
>> > > > > _______________________________________________
>> > > > > ImageJ-devel mailing list
>> > > > > ImageJ-devel at imagej.net
>> > > > > http://imagej.net/mailman/listinfo/imagej-devel
>> > > > >
>> > >
>> > >
>> > > _______________________________________________
>> > > ImageJ-devel mailing list
>> > > ImageJ-devel at imagej.net
>> > > http://imagej.net/mailman/listinfo/imagej-devel
>> > >
>>
>>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150326/9fad0bd8/attachment-0001.html>

From warrick at wisc.edu  Thu Mar 26 09:50:28 2015
From: warrick at wisc.edu (Jay Warrick)
Date: Thu, 26 Mar 2015 09:50:28 -0500
Subject: [ImageJ-devel] Eclipse hickup with enforcer rules of pom-fiji >
 7.2.0
In-Reply-To: <CA+B=mGpDP4FEWsHD1oY3m+uc8z5yFE4JSE=K=nS7ysvkmvsvVQ@mail.gmail.com>
References: <1426736009.14099.50.camel@saalfelds-ws1.janelia.priv>
	<CADN69yk+mTzxrjbB42PsfXvCRdtdGErFE-2Z8-wjiSH2AHsYnA@mail.gmail.com>
	<1426787623.14099.76.camel@saalfelds-ws1.janelia.priv>
	<CA+B=mGpLjoCtwwP7KaasMuseNEkk401vdj0+LPSgbqvMKu8m_Q@mail.gmail.com>
	<1426790214.14099.99.camel@saalfelds-ws1.janelia.priv>
	<CADN69ymYPrpu+qoB-2DJue93jZPeA2S0-MpAAVshOvyaZMJHBg@mail.gmail.com>
	<187D6BE7-0176-419E-9B66-AF748D876B12@wisc.edu>
	<CA+B=mGpDP4FEWsHD1oY3m+uc8z5yFE4JSE=K=nS7ysvkmvsvVQ@mail.gmail.com>
Message-ID: <CB1C8F61-1DF4-46C1-AF01-F943C90C5070@wisc.edu>

Thanks Mark for the clarification.

Best,

Jay

> On Mar 26, 2015, at 9:32 AM, Mark Hiner <hiner at wisc.edu> wrote:
> 
> Hi all,
> 
> >looks like you can check the install/version of maven that eclipse is using by going to the menu Eclipse > Preferences > Maven > Installations
> 
> Thanks Jay. To clarify the history here:
> 
> 1) We made a custom Maven enforcer rule that ensures no SNAPSHOT dependencies/parents are used, ever.
> 2) We then relaxed this restriction to allow SNAPSHOT couplings between modules in multi-module builds[1].
> 3) Eclipse used to simply ignore Maven enforcer rules - but Curtis made some updates to make this possible.
> 4) Stephan then discovered that our enforcer rule fails in Eclipse because each submodule is built individually, and our rule required building from the aggregator itself.
> 
> Anyway! I pushed a tentative fix to the scijava-maven-plugin to allow building individual submodules, and added a branch to trakEM2[2] with some instructions on how to test this locally. Using this change I'm able to import the trakEM2 projects into Eclipse with no enforcer failures.
> 
> This release will probably go into Fiji this week, at which point I can delete the trakEM2 branch. Just wanted to put it out there so interested parties could try it.
> 
> Best,
> Mark
> 
> P.S. for a reminder why we're doing this, see [3]
> 
> [1] http://books.sonatype.com/mvnex-book/reference/multimodule.html <http://books.sonatype.com/mvnex-book/reference/multimodule.html>
> [2] https://github.com/trakem2/TrakEM2/tree/test-enforcer <https://github.com/trakem2/TrakEM2/tree/test-enforcer>
> [3] http://imagej.net/Reproducible_builds#Reproducible_builds <http://imagej.net/Reproducible_builds#Reproducible_builds>
> 
> On Thu, Mar 19, 2015 at 3:51 PM, Jay Warrick <warrick at wisc.edu <mailto:warrick at wisc.edu>> wrote:
> Hard for me to follow if you guys have solved this one or now but, Re: the potential of a maven version discrepancy between Eclipse and the CLI, it looks like you can check the install/version of maven that eclipse is using by going to the menu Eclipse > Preferences > Maven > Installations 
> 
> Only now just found this now and I see it is a different install than I use at the command line. Looks like you can point it to a particular install though to make sure they are the same.
> 
> Cheers,
> 
> Jay
> 
>> On Mar 19, 2015, at 1:50 PM, Curtis Rueden <ctrueden at wisc.edu <mailto:ctrueden at wisc.edu>> wrote:
>> 
>> Hi Stephan,
>> 
>> To reword Mark's explanation:
>> 
>> The current behavior is a bug, which happens when you try to build _only_ the submodule, rather than building at the top level of the multi-module project.
>> 
>> It is triggered in Eclipse because Eclipse's project configuration runs each submodule's build separately, in some sense.
>> 
>> Mark said he would change the scijava-maven-plugin's use of the word "dependency" in the case of parent POM linkage, since a parent POM is not a "dependency" in Maven terms. (This is what he meant by "consider it reworded" -- like a genie saying "It's as good as done!")
>> 
>> We will also be exploring how to solve this bug in general, such that it _does_ become possible to build only a submodule of a multi-module project, without the enforcer throwing a tantrum.
>> 
>> Regards,
>> Curtis
>> 
>> On Thu, Mar 19, 2015 at 1:36 PM, Stephan Saalfeld <saalfelds at janelia.hhmi.org <mailto:saalfelds at janelia.hhmi.org>> wrote:
>> Hi Mark,
>> 
>> > It is fine that mpicbg-trakem2 is a SNAPSHOT. The (P) indicates that a
>> > SNAPSHOT parent is making things unhappy. If the object was not allowed to
>> > be a SNAPSHOT you would see a (V). But it is misleading to call it a
>> > dependency.. consider it reworded.
>> >
>> 
>> Sorry, I didn't get this.  Could you reword please ;) (I mean,
>> seriously, I didn't get it)?  A trial:
>> 
>> The complaint is that pom-trakem2, which is mpicbg-trakem2's parent is
>> at a SNAPSHOT-version?
>> 
>> > For SNAPSHOT-coupled multi-module builds, the contract is that SNAPSHOTS
>> > are allowed as long as everything is built from the top-level. If you built
>> > from a submodule, Maven could resolve the SNAPSHOT parent remotely, which
>> > would then not be guaranteed to match the parent in your multi-module
>> > project.
>> >
>> 
>> I guess I got it.
>> 
>> > Eclipse is problematic because it splits each submodule out to the same
>> > level as the parent pom, and resolves each individually, thus causing
>> > RequireReproducibleBuilds to fail.
>> >
>> 
>> That sounds like a perfect explanation.  But since Eclipse is the
>> primary development platform, that should definitely work.  I actually
>> think that it is more important that builds build in Eclipse without red
>> x-es than that builds are reproducible.  I am reverting to
>> pom-fiji-7.2.0 in the meantime to give myself peace of mind.
>> 
>> > I will look into ways of obtaining the reactor's parent pom locally[1], so
>> > that we can build submodules directly.
>> >
>> 
>> Thanks a lot!
>> 
>> Best,
>> Stephan
>> 
>> 
>> > [1] https://github.com/scijava/scijava-maven-plugin/issues/12 <https://github.com/scijava/scijava-maven-plugin/issues/12>
>> >
>> > On Thu, Mar 19, 2015 at 12:53 PM, Stephan Saalfeld <
>> > saalfelds at janelia.hhmi.org <mailto:saalfelds at janelia.hhmi.org>> wrote:
>> >
>> > > Hi Curtis and Jay,
>> > >
>> > > I upgraded to Luna with the same effect.  7.2.0 works, 8.0.0 triggers
>> > > the unspecific complaint as show in the OP.
>> > >
>> > > Run As > Maven build... + Debug Output
>> > >
>> > > says:
>> > >
>> > > [INFO] Property 'imagej.app.directory' unset; Skipping copy-jars
>> > > [INFO]
>> > > ------------------------------------------------------------------------
>> > > [INFO] Reactor Summary:
>> > > [INFO]
>> > > [INFO] Aggregator project for Albert Cardona's TrakEM2 software suite
>> > > SUCCESS [  5.098 s]
>> > > [INFO] jars/VectorString.jar ............................. SUCCESS [
>> > > 8.813 s]
>> > > [INFO] mpicbg-trakem2 .................................... SUCCESS [
>> > > 8.074 s]
>> > > [INFO] plugins/TrakEM2_.jar .............................. SUCCESS
>> > > [ 28.727 s]
>> > > [INFO] jars/T2-NIT.jar ................................... SUCCESS
>> > > [ 14.724 s]
>> > > [INFO] jars/T2-TreelineGraph.jar ......................... SUCCESS
>> > > [ 13.202 s]
>> > > [INFO]
>> > > ------------------------------------------------------------------------
>> > > [INFO] BUILD SUCCESS
>> > > [INFO]
>> > > ------------------------------------------------------------------------
>> > > [INFO] Total time: 01:19 min
>> > > [INFO] Finished at: 2015-03-19T13:45:46-05:00
>> > > [INFO] Final Memory: 250M/3444M
>> > > [INFO]
>> > > ------------------------------------------------------------------------
>> > >
>> > >
>> > >
>> > >
>> > >
>> > > But the error mark (red x) persists on all mudules' pom files with the
>> > > unspecific error message.
>> > >
>> > > Next test, running Maven build... in mpicbg-trakem2-1.2.3-SNAPSHOT, or
>> > > any of the other modules where the error manifests leads to more
>> > > informative output:
>> > >
>> > >
>> > > The following dependencies either are SNAPSHOT versions (V), contain
>> > > SNAPSHOT parents (P), or contain SNAPSHOT dependencies (D):
>> > >
>> > >  (P)  sc.fiji:mpicbg-trakem2:1.2.3-SNAPSHOT
>> > >
>> > > [INFO]
>> > > ------------------------------------------------------------------------
>> > > [INFO] BUILD FAILURE
>> > > [INFO]
>> > > ------------------------------------------------------------------------
>> > > [INFO] Total time: 3.043 s
>> > > [INFO] Finished at: 2015-03-19T13:48:20-05:00
>> > > [INFO] Final Memory: 33M/1930M
>> > > [INFO]
>> > > ------------------------------------------------------------------------
>> > > [ERROR] Failed to execute goal
>> > > org.apache.maven.plugins:maven-enforcer-plugin:1.3.1:enforce
>> > > (enforce-rules) on project mpicbg-trakem2: Some Enforcer rules have
>> > > failed. Look above for specific messages explaining why the rule failed.
>> > > -> [Help 1]
>> > > org.apache.maven.lifecycle.LifecycleExecutionException: Failed to
>> > > execute goal
>> > > org.apache.maven.plugins:maven-enforcer-plugin:1.3.1:enforce
>> > > (enforce-rules) on project mpicbg-trakem2: Some Enforcer rules have
>> > > failed. Look above for specific messages explaining why the rule failed.
>> > >         at
>> > >
>> > > org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:216)
>> > >         at
>> > >
>> > > org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
>> > >         at
>> > >
>> > > org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
>> > >         at
>> > >
>> > > org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:108)
>> > >         at
>> > >
>> > > org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:76)
>> > >         at
>> > >
>> > > org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
>> > >         at
>> > >
>> > > org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:116)
>> > >         at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:361)
>> > >         at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:155)
>> > >         at org.apache.maven.cli.MavenCli.execute(MavenCli.java:584)
>> > >         at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:213)
>> > >         at org.apache.maven.cli.MavenCli.main(MavenCli.java:157)
>> > >         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
>> > >         at
>> > >
>> > > sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
>> > >         at
>> > >
>> > > sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
>> > >         at java.lang.reflect.Method.invoke(Method.java:606)
>> > >         at
>> > >
>> > > org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
>> > >         at
>> > > org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
>> > >         at
>> > >
>> > > org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
>> > >         at
>> > > org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
>> > > Caused by: org.apache.maven.plugin.MojoExecutionException: Some Enforcer
>> > > rules have failed. Look above for specific messages explaining why the
>> > > rule failed.
>> > >         at
>> > > org.apache.maven.plugins.enforcer.EnforceMojo.execute(EnforceMojo.java:209)
>> > >         at
>> > >
>> > > org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:133)
>> > >         at
>> > >
>> > > org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)
>> > >         ... 19 more
>> > > [ERROR]
>> > > [ERROR]
>> > > [ERROR] For more information about the errors and possible solutions,
>> > > please read the following articles:
>> > > [ERROR] [Help 1]
>> > > http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException <http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException>
>> > >
>> > >
>> > >
>> > > Wait, mpicbg-trakem2-1.2.3-SNAPSHOT is the project that I am building,
>> > > not a dependency thereof---and it is at a SNAPSHOT version---yes,
>> > > because I am in development cycle---that should work---no?
>> > >
>> > > Thanks for your help,
>> > > Stephan
>> > >
>> > >
>> > >
>> > > On Thu, 2015-03-19 at 12:18 -0500, Curtis Rueden wrote:
>> > > > Hi Stephan,
>> > > >
>> > > > > Do you know about this [, do you have an idea what it is[
>> > > >
>> > > > Probably, this started happening because of this change:
>> > > >
>> > > >
>> > > https://github.com/scijava/pom-scijava/commit/5e6bddae9fcc965722c0fce1e2996c2e49b60411 <https://github.com/scijava/pom-scijava/commit/5e6bddae9fcc965722c0fce1e2996c2e49b60411>
>> > > >
>> > > > Which in general is a _good_ thing because it's better for Eclipse to
>> > > tell
>> > > > you than for Jenkins to tell you later after you pushed to master.
>> > > >
>> > > > If there are enforcer issues, they should be addressed, or if
>> > > unaddressable
>> > > > the enforcer can be squelched so that CLI and Jenkins also do not
>> > > complain.
>> > > >
>> > > > The weird thing here is that your Eclipse is complaining but our CLI is
>> > > > not. Jay may be on to something about a Maven version discrepancy. Why
>> > > are
>> > > > you still on Kepler? You could try upgrading to Luna?I know of at least
>> > > one
>> > > > annoying Maven-related bug that was fixed. You could also try using the
>> > > Run
>> > > > As > Maven build... and specifying the "Debug Output" option (which
>> > > passes
>> > > > the -X flag to Maven), and see if that tells you anything interesting.
>> > > >
>> > > > Regards,
>> > > > Curtis
>> > > >
>> > > > On Wed, Mar 18, 2015 at 10:33 PM, Stephan Saalfeld <
>> > > > saalfelds at janelia.hhmi.org <mailto:saalfelds at janelia.hhmi.org>> wrote:
>> > > >
>> > > > > Hi ImageJ developers,
>> > > > >
>> > > > > Eclipse complains
>> > > > >
>> > > > > Some Enforcer rules have failed. Look above for specific messages
>> > > > > explaining why the rule failed.
>> > > > >
>> > > > >
>> > > (org.apache.maven.plugins:maven-enforcer-plugin:1.3.1:enforce:enforce-rules:validate)
>> > > > >
>> > > > > in my TrakEM2 master for each module.  No further information (neither
>> > > > > above nor below) is provided.
>> > > > >
>> > > > > A terminal `mvn clean install`, however, succeeds without complaints.
>> > > > > So I assume that this is an Eclipse specific quirk.  I have Kepler
>> > > > > Service Release 1 installed.
>> > > > >
>> > > > > Do you know about this [, do you have an idea what it is[, and do you
>> > > > > know how to fix it]]]?
>> > > > >
>> > > > > Thanks in any case,
>> > > > > Stephan
>> > > > >
>> > > > >
>> > > > > _______________________________________________
>> > > > > ImageJ-devel mailing list
>> > > > > ImageJ-devel at imagej.net <mailto:ImageJ-devel at imagej.net>
>> > > > > http://imagej.net/mailman/listinfo/imagej-devel <http://imagej.net/mailman/listinfo/imagej-devel>
>> > > > >
>> > >
>> > >
>> > > _______________________________________________
>> > > ImageJ-devel mailing list
>> > > ImageJ-devel at imagej.net <mailto:ImageJ-devel at imagej.net>
>> > > http://imagej.net/mailman/listinfo/imagej-devel <http://imagej.net/mailman/listinfo/imagej-devel>
>> > >
>> 
>> 
>> _______________________________________________
>> ImageJ-devel mailing list
>> ImageJ-devel at imagej.net <mailto:ImageJ-devel at imagej.net>
>> http://imagej.net/mailman/listinfo/imagej-devel <http://imagej.net/mailman/listinfo/imagej-devel>
> 
> 
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net <mailto:ImageJ-devel at imagej.net>
> http://imagej.net/mailman/listinfo/imagej-devel <http://imagej.net/mailman/listinfo/imagej-devel>
> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150326/52f3498f/attachment-0001.html>

From cyril.mongis at googlemail.com  Thu Mar 26 10:48:56 2015
From: cyril.mongis at googlemail.com (Mongis Cyril)
Date: Thu, 26 Mar 2015 16:48:56 +0100
Subject: [ImageJ-devel] Developping new UI for ImageJ
Message-ID: <CAJf7PRf6qnHCKKsqmad+-8yp9NfsC5xzFmwbC+rn-8ujQp2fpQ@mail.gmail.com>

Hi everyone,

I'm currently embedding ImageJ in one my application but I use JavaFX for
the user interface. I would like to channel the image windows, which are
created and handled by ImageJ, to JavaFX elements. In other words, when a
plugin wants to display an image, this image would be displayed in a JavaFX
element. While JavaFX is relatively easy to handle, it's pretty hard to
understand the structure of the ImageJ User Interface stack and the
interactions between the classes that composes it. I know that the
ImageDisplayService has a certain role but I have troubles to see when
practical decisions (like drawing the image in a canvas, or adding a slider
for the Z position, or changing the name of the window in the swing part)
are taken. I looked in the imagej-ui-swing so I have an idea about the
location of some events. But I also don't know how to signal ImageJ that
there is an other UI connected to ImageJ/

Which class should I re-implement ? I guess I should re-implement the same
classes as the ones implemented in the imagej-swing-ui module then, how to
set it in the context ?

Is there any drawing that represent the UI interaction scheme ? ( when a
image is opened for instance)

Is there any resources that would provide some base knowledge to better
understand the UI stack.

I would of course commit my work to the community.

Cheers,

Cyril MONGIS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150326/119012fa/attachment.html>

From leek at broadinstitute.org  Thu Mar 26 11:54:57 2015
From: leek at broadinstitute.org (Lee Kamentsky)
Date: Thu, 26 Mar 2015 12:54:57 -0400
Subject: [ImageJ-devel] Developping new UI for ImageJ
In-Reply-To: <CAJf7PRf6qnHCKKsqmad+-8yp9NfsC5xzFmwbC+rn-8ujQp2fpQ@mail.gmail.com>
References: <CAJf7PRf6qnHCKKsqmad+-8yp9NfsC5xzFmwbC+rn-8ujQp2fpQ@mail.gmail.com>
Message-ID: <CAHLFyjeTWw-cPWcX0VScudeE73o7qczKK09jwhj=AfkRvqahFA@mail.gmail.com>

Just a couple hints - although my name is on a lot of the files, that's
from several years ago. Others are far more expert than I.

There are two projects that control the toolkit-specific aspects of the ui:
https://github.com/imagej/imagej-ui-swing and
https://github.com/scijava/scijava-ui-swing

You might find far more of the bulk of the UI in scijava-ui-swing. Those
are the generic parts, things like frames, menus and controls. The root of
it all is org.scijava.ui.UserInterface - if you implement this interface
and annotate it, it will be the one that's used if your jar is in the
classpath instead of the Swing one:
https://github.com/scijava/scijava-ui-swing/blob/master/src/main/java/org/scijava/ui/swing/sdi/SwingSDIUI.java#L59
If you want your stuff to show up first, with the other jars being there
already, you can develop a plugin with a higher priority (see the
documentation for Plugin). For instance, if you want a new display viewer,
just implement one derived from DisplayViewer, make its plugin priority
higher than SwingSDIImageDisplayViewer and it wil be the one that's used. I
thing that might be close to what you want to do.

On Thu, Mar 26, 2015 at 11:48 AM, Mongis Cyril <cyril.mongis at googlemail.com>
wrote:

> Hi everyone,
>
> I'm currently embedding ImageJ in one my application but I use JavaFX for
> the user interface. I would like to channel the image windows, which are
> created and handled by ImageJ, to JavaFX elements. In other words, when a
> plugin wants to display an image, this image would be displayed in a JavaFX
> element. While JavaFX is relatively easy to handle, it's pretty hard to
> understand the structure of the ImageJ User Interface stack and the
> interactions between the classes that composes it. I know that the
> ImageDisplayService has a certain role but I have troubles to see when
> practical decisions (like drawing the image in a canvas, or adding a slider
> for the Z position, or changing the name of the window in the swing part)
> are taken. I looked in the imagej-ui-swing so I have an idea about the
> location of some events. But I also don't know how to signal ImageJ that
> there is an other UI connected to ImageJ/
>
> Which class should I re-implement ? I guess I should re-implement the same
> classes as the ones implemented in the imagej-swing-ui module then, how to
> set it in the context ?
>
> Is there any drawing that represent the UI interaction scheme ? ( when a
> image is opened for instance)
>
> Is there any resources that would provide some base knowledge to better
> understand the UI stack.
>
> I would of course commit my work to the community.
>
> Cheers,
>
> Cyril MONGIS
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150326/cfe70713/attachment.html>

From bschlining at gmail.com  Thu Mar 26 12:23:14 2015
From: bschlining at gmail.com (Brian Schlining)
Date: Thu, 26 Mar 2015 10:23:14 -0700
Subject: [ImageJ-devel] Developping new UI for ImageJ
In-Reply-To: <CAJf7PRf6qnHCKKsqmad+-8yp9NfsC5xzFmwbC+rn-8ujQp2fpQ@mail.gmail.com>
References: <CAJf7PRf6qnHCKKsqmad+-8yp9NfsC5xzFmwbC+rn-8ujQp2fpQ@mail.gmail.com>
Message-ID: <etPan.55144082.327b23c6.5fe8@zen>

Hi,

On March 26, 2015 at 8:49:21 AM, Mongis Cyril (cyril.mongis at googlemail.com) wrote:


I'm currently embedding ImageJ in one my application but I use JavaFX for the user interface. I would like to channel the image windows, which are created and handled by ImageJ, to JavaFX elements. In other words, when a plugin wants to display an image, this image would be displayed in a JavaFX element.?


I have some code that may help get you going. The source is under https://github.com/hohonuuli/assignments-openimaj. Specifically, you should take a look at the classes in https://github.com/hohonuuli/assignments-openimaj/tree/master/src/main/java/org/mbari/javafx/scene/image

The code there is pretty straightforward. I wrote this code for an image processing course I was taking. You can display an image in a resizable JavaFX Stage likes so:

import java.net.URL;
import org.mbari.javafx.scene.image.*;

JavaFX.namedWindow("My Window",  
  new URL("https://upload.wikimedia.org/wikipedia/en/2/24/Lenna.png"));
If you need a reference to the Stage you can do the following after you?ve created it:

Optional<ImageStage> stage = JavaFX.getNamedWindow("My Window");
Anyway, it will at least give you a starting point. There?s a method that takes a javafx.scene.image.Image instead of a URL too. You?ll still need to implement a conversion between ImageJ/imglib2 image formats and JavaFX?s Image. There?s also a Swing class the does something similar (e.g. Swing.namedWindow(...) in the project.

Good Luck

? Brian Schlining
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150326/c2f9e821/attachment.html>

From saalfelds at janelia.hhmi.org  Thu Mar 26 12:24:59 2015
From: saalfelds at janelia.hhmi.org (Stephan Saalfeld)
Date: Thu, 26 Mar 2015 13:24:59 -0400
Subject: [ImageJ-devel] legacy-imglib1
In-Reply-To: <bigdataviewer/SPIM_Registration/issues/13/86564883@github.com>
References: <bigdataviewer/SPIM_Registration/issues/13@github.com>
	<bigdataviewer/SPIM_Registration/issues/13/86564883@github.com>
Message-ID: <1427390699.2963.70.camel@saalfelds-ws1.janelia.priv>

Hi Curtis,

I falsely committed legacy-imglib1-1.1.3 instead of
legacy-imglib1-1.1.3-DEPRECATED and did not catch the second that
Jenkins took to release it.  Can you please remove 1.1.3 from the
repository to not confuse anybody?

http://maven.imagej.net/index.html#nexus-search;quick~legacy-imglib1

Thanks,
Stephan



From ctrueden at wisc.edu  Thu Mar 26 15:18:34 2015
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Thu, 26 Mar 2015 15:18:34 -0500
Subject: [ImageJ-devel] legacy-imglib1
In-Reply-To: <1427390699.2963.70.camel@saalfelds-ws1.janelia.priv>
References: <bigdataviewer/SPIM_Registration/issues/13@github.com>
	<bigdataviewer/SPIM_Registration/issues/13/86564883@github.com>
	<1427390699.2963.70.camel@saalfelds-ws1.janelia.priv>
Message-ID: <CADN69ynR60WGhAWC2vKth+uc4vvweLtAfnap8qnxFYn-YzDRuA@mail.gmail.com>

Done!

On Thu, Mar 26, 2015 at 12:24 PM, Stephan Saalfeld <
saalfelds at janelia.hhmi.org> wrote:

> Hi Curtis,
>
> I falsely committed legacy-imglib1-1.1.3 instead of
> legacy-imglib1-1.1.3-DEPRECATED and did not catch the second that
> Jenkins took to release it.  Can you please remove 1.1.3 from the
> repository to not confuse anybody?
>
> http://maven.imagej.net/index.html#nexus-search;quick~legacy-imglib1
>
> Thanks,
> Stephan
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150326/a70959ac/attachment.html>

From saalfelds at janelia.hhmi.org  Thu Mar 26 19:08:59 2015
From: saalfelds at janelia.hhmi.org (Stephan Saalfeld)
Date: Thu, 26 Mar 2015 20:08:59 -0400
Subject: [ImageJ-devel] SemVer policies for ImageJ2 and Fiji
In-Reply-To: <CA+B=mGpn+P0Aiz6kueB=_dkY_HfrNhOSV3gL1ziMQWfGdkrN8w@mail.gmail.com>
References: <1426389157.18823.111.camel@saalfeld-thinkpad>
	<1426473522.18823.132.camel@saalfeld-thinkpad>
	<CA+B=mGpn+P0Aiz6kueB=_dkY_HfrNhOSV3gL1ziMQWfGdkrN8w@mail.gmail.com>
Message-ID: <1427414939.7570.12.camel@saalfelds-ws1.janelia.priv>

Hi Mark and everybody,

I am concerned about the PATCH counter and the notion of `unintended'
behavior (what's that in the first place).  A strict definition of the
public API would classify a bug-fix that changes the output of a method
from wrong to correct as a break, i.e. MAJOR upgrade.  If we would
follow this scheme, MINOR and PATCH increments are safe to consume, i.e.
do not change behavior.  If we, however, say that patches of
`unintended' behavior (bugfixes) lead to a PATCH counter increase, MAJOR
and PATCH increases are technically equivalent, and thanks to the SemVer
policy to roll PATCH on MINOR (1.1.5 > 1.2.0), MINOR does not exclude
PATCH, i.e. MAJOR == MINOR == PATCH == unsafe.  I certainly understand
that treating bugfixes as API-breakage is even farther from `romantic
versioning' than our current understanding of SemVer, but it seems the
only way to get at least something out of those numbers.

Please let me know what you think.

Best,
Stephan



On Mon, 2015-03-16 at 13:18 -0500, Mark Hiner wrote:
> Hi Stephan,
> 
> Thanks for starting this thread!
> 
> For those interested, there was further discussion in IRC
> <http://code.imagej.net/chatlogs/imagejdev?times=prefix&start-date=2015-03-16&end-date=2015-03-16#20150316T155138>
> today, and Curtis and I chatted briefly face-to-face.
> 
> Basically, we agree that semver must be limited in scope to the public API
> of a given project. Checking for dependency convergence must be handled
> separately. Bubbling versions through dependencies is not significantly
> meaningful.
> 
> Documentation on this (and other versioning issues) is on the wiki:
> http://imagej.net/Architecture#Versioning
> 
> >Artifact Y depends on artifact X and knew about the bug and had a
> workaround in place to compensate for it
> 
> As a side note, semver does not guarantee preservation of unintentional
> behavior. As long as behavior is fixed in a way that's backwards-compatible
> with public API, only patch versions need to change.
> 
> However, the idea is that a BOM will account for such a change, to avoid
> dependency skew.
> 
> Best,
> Mark
> 
> 
> On Sun, Mar 15, 2015 at 9:38 PM, Stephan Saalfeld <
> saalfelds at janelia.hhmi.org> wrote:
> 
> > Dear ImageJ developers,
> >
> > my earlier statement about the conclusion that can be drawn from
> > bubbling versions in a deployment context are wrong.
> >
> > Counter proof: Artifact X fixes a bug in one of its public methods, and
> > accordingly increases the PATCH counter.  Artifact Y depends on artifact
> > X and knew about the bug and had a workaround in place to compensate for
> > it.  On upgrade of dependency version for X, it removes the workaround,
> > public API remains unchanged.  This is a patch and X had increased the
> > PATCH counter, so Y increases the PATCH counter.  Neither X nor Y can be
> > deployed independently.  The deployment system (or person) has to
> > inspect the entire dependency tree to calculate a correct state or a
> > conflict.  The same is true in the non-bubbling situation.  Ergo,
> > bubbling versioning has no advantage over non-bubbling versioning in a
> > deployment context.
> >
> > This leads me to the conclusion that non-bubbling versioning is better
> > because it carries local information for developers that non-bubbling
> > versioning does not, i.e. in what way the API of the versioned artifact
> > was changed.
> >
> > I expect to be wrong still and that I missed something important.
> >
> > Looking forward to your responses.
> >
> > Thanks,
> > Stephan
> >
> >
> >
> > On Sat, 2015-03-14 at 23:12 -0400, Stephan Saalfeld wrote:
> > > Dear list,
> > >
> > > a recent SPIM_Registration bug report on GitHub
> > >
> > >
> > https://github.com/bigdataviewer/SPIM_Registration/issues/10#issuecomment-79721014
> > >
> > > resulted in a discussion about the correct way of assigning version
> > > numbers to individual artifacts.
> > >
> > > We have earlier settled to follow SemVer
> > >
> > > http://semver.org/
> > >
> > > which has reasonably clear guidelines under what circumstances to
> > > increase which of three version counters.
> > >
> > > <quote src="http://semver.org/">
> > > 1. MAJOR version when you make incompatible API changes,
> > > 2. MINOR version when you add functionality in a backwards-compatible
> > > manner, and
> > > 3. PATCH version when you make backwards-compatible bug fixes.
> > > </quote>
> > >
> > > It is unspecified, however, how version changes in dependency artifacts
> > > affect the version of the consuming artifact, i.e. do they bubble or do
> > > they not?  In my current understanding, there are two competing
> > > objectives, deployment (advocated and executed by @dscho and @ctrueden),
> > > and development (advocated and executed by @axtimwalde and @ctrueden, we
> > > see that @ctrueden is ambivalent, @axtimwalde too, as always, just that
> > > you know):
> > >
> > > 1.
> > > Developer perspective: Don't bubble!  Developers that use the public API
> > > of an artifact X in their code use SemVer to reason whether on upgrade
> > > of X they will have to change their code or simply recompile with no
> > > modification.  Dependency version bubbling would break this contract,
> > > because it signalizes API incompatibility in X when a dependency Y of X
> > > introduces incompatible changes, although this incompatibility does not
> > > affect the public API of X.  Deployment of a set of artifacts following
> > > this contract requires complete inspection of the entire set of
> > > artifacts to guarantee consistency of the deployed version by other
> > > means (maven pom tracing?) because the SemVer versions of individual
> > > artifacts do not encode the necessary information.  I have the
> > > impression that the developer perspective, ignoring it not being helpful
> > > for deployment, was the driver of the SemVer specification and have a
> > > preference for it because...
> > >
> > > 2.
> > > Deployer perspective: Bubble?  Deployers could use SemVer to reason
> > > whether a new version of an artifact has ANY incompatible changes
> > > anywhere in its dependency tree.  This is useful to know when an
> > > artifact in the tree can be released *without* considering its
> > > dependents *and* dependencies (PATCH increase).  However, whenever the
> > > version number signalizes incompatibility (MAJOR) or new features
> > > (MINOR), further inspection of the entire dependency tree is required
> > > because consistency cannot be derived from SemVer versions alone.  The
> > > only definite conclusion that can be made from observing that an
> > > artifact changes its MAJOR or MINOR version, i.e. becomes incompatible,
> > > is that all dependents will need to be updated/ recompiled or that
> > > there's a problem, consistency across artifacts cannot be guaranteed.
> > > I.e. the bubbling scheme, at every individual artifact, sends a signal
> > > when further inspection is required.  This information, however is
> > > binary, and a single counter would suffice to do that.  If patch
> > > counters are desired, one would need two.  The MAJOR and MINOR counters
> > > are redundant.
> > >
> > > Short:
> > > Non-bubbling SemVer tells a developer whether her code will compile with
> > > a given dependency artifact (PATCH and MINOR).  Bubbling SemVer tells a
> > > deployer when a single artifact can be deployed without considering its
> > > environment (PATCH).  Both things exclude each other.  In this setup, I
> > > find the benefit for developers stronger and therefore prefer
> > > non-bubbling SemVer.
> > >
> > > An interesting animal are dependency management poms (BOMs) such as
> > > pom-fiji or pom-mpicbg.  Their `public API' is the composite of  managed
> > > dependencies and therefore it has to bubble the SemVer versions of the
> > > managed dependencies.  This is different from artifacts that consume a
> > > dependency, consuming and managing are different.  I may be wrong, but I
> > > have the impression that these two things often get confused.
> > >
> > > Please let me know your thoughts.
> > >
> > > Thanks,
> > > Stephan
> > >
> > >
> > >
> >
> >



From saalfelds at janelia.hhmi.org  Thu Mar 26 20:02:33 2015
From: saalfelds at janelia.hhmi.org (Stephan Saalfeld)
Date: Thu, 26 Mar 2015 21:02:33 -0400
Subject: [ImageJ-devel] legacy-imglib1
In-Reply-To: <CADN69ynR60WGhAWC2vKth+uc4vvweLtAfnap8qnxFYn-YzDRuA@mail.gmail.com>
References: <bigdataviewer/SPIM_Registration/issues/13@github.com>
	<bigdataviewer/SPIM_Registration/issues/13/86564883@github.com>
	<1427390699.2963.70.camel@saalfelds-ws1.janelia.priv>
	<CADN69ynR60WGhAWC2vKth+uc4vvweLtAfnap8qnxFYn-YzDRuA@mail.gmail.com>
Message-ID: <1427418153.7570.13.camel@saalfelds-ws1.janelia.priv>

Thanks!



On Thu, 2015-03-26 at 15:18 -0500, Curtis Rueden wrote:
> Done!
> 
> On Thu, Mar 26, 2015 at 12:24 PM, Stephan Saalfeld <
> saalfelds at janelia.hhmi.org> wrote:
> 
> > Hi Curtis,
> >
> > I falsely committed legacy-imglib1-1.1.3 instead of
> > legacy-imglib1-1.1.3-DEPRECATED and did not catch the second that
> > Jenkins took to release it.  Can you please remove 1.1.3 from the
> > repository to not confuse anybody?
> >
> > http://maven.imagej.net/index.html#nexus-search;quick~legacy-imglib1
> >
> > Thanks,
> > Stephan
> >
> >



From hiner at wisc.edu  Fri Mar 27 10:00:39 2015
From: hiner at wisc.edu (Mark Hiner)
Date: Fri, 27 Mar 2015 10:00:39 -0500
Subject: [ImageJ-devel] SemVer policies for ImageJ2 and Fiji
In-Reply-To: <1427414939.7570.12.camel@saalfelds-ws1.janelia.priv>
References: <1426389157.18823.111.camel@saalfeld-thinkpad>
	<1426473522.18823.132.camel@saalfeld-thinkpad>
	<CA+B=mGpn+P0Aiz6kueB=_dkY_HfrNhOSV3gL1ziMQWfGdkrN8w@mail.gmail.com>
	<1427414939.7570.12.camel@saalfelds-ws1.janelia.priv>
Message-ID: <CA+B=mGpd89frZoOvjHoQ98xvGU2x_3Bb_R65pnuf362oRYpNaw@mail.gmail.com>

Hi Stephan,

>`unintended' behavior (what's that in the first place)

For example, if I have class Foo with method add(int, int) that behaves as
one might expect, except for the following edge case: Foo.add(0, -1) = 256.
That is unintended behavior. If I fix my implementation so that Foo.add(0,
-1) = -1 I have changed behavior but not the traditional definition of
public API[1,2]. Thus this change is within the scope of the PATCH version
of SemVer.

>A strict definition of the public API would classify a bug-fix that
changes the output of a method
>from wrong to correct as a break, i.e. MAJOR upgrade.

> and thanks to the SemVer policy to roll PATCH on MINOR (1.1.5 > 1.2.0)

Just to make sure we're on the same page - when you say "changes the
output", I assume you mean "changes the behavior but not the API - i.e.
return type is unchanged" because SemVer already requires bug fixes that
change API to be MAJOR version bumps.

In that case, I think it would be cleaner to just eliminate the PATCH
number - because every bug fix necessarily changes behavior, right? So with
this scheme, MAJOR increases = "existing behavior has changed", and MINOR
increases = "new behavior is available".

Some problems with creating this versioning scheme:
1. MAJOR versions will increase rapidly. This is aesthetic, but one that
people can react very negatively to - and can certainly be confusing if
people don't expect MAJOR version bumps to cover bug fixes.
2. It's one more thing for external developers to learn. We can't just say
"we use SemVer".
3. Since this is an internal versioning scheme, it may not be easy to
compare our versions with external project versions that use SemVer.
4. There will be false negatives for MAJOR version compatibility
comparisons (instead of what could be considered false positives with
SemVer)

Unfortunately, #1 above alone makes it very unlikely that we would want to
adopt this use of version numbers. But what you're trying to do here -
ensure compatibility - is fantastic and something that would be great to
have.

So let's take a step back and look at what guarantees we do and do not have
right now:

+ We have reproducible builds (release couplings, which requires -some-
versioning scheme to be used)
+ We have API compatibility (SemVer)

- We do not have strict behavior compatibility
- We do not have dependency compatibility

Behavior and dependency compatibility are very closely related - if they
were covered by a versioning scheme, we could automatically answer the
question "is it safe to drop in version X to replace version Y?".

However, I do not think we should conflate these concerns with SemVer.
Instead, two potential options would be:

1) Continue to use SemVer, accept its limitations, be content with
reproducibility.
2) Create a separate versioning scheme that covers behavior and dependency
compatibility. Use it in tandem with SemVer.

If anyone can think of other examples of versioned guarantees that would be
useful to have, or counter-examples to any claims made here - please share!

Also, please let me know if any of this is confusing and/or additional
examples would be useful.

Thanks again for the continued discussion,
Mark

[1]
http://en.wikipedia.org/wiki/Application_programming_interface#API_in_object-oriented_languages
[2]
http://stackoverflow.com/questions/2954372/difference-between-spi-and-api
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150327/ce507ca1/attachment-0001.html>

From saalfelds at janelia.hhmi.org  Fri Mar 27 22:06:30 2015
From: saalfelds at janelia.hhmi.org (Stephan Saalfeld)
Date: Fri, 27 Mar 2015 23:06:30 -0400
Subject: [ImageJ-devel] SemVer policies for ImageJ2 and Fiji
In-Reply-To: <CA+B=mGpd89frZoOvjHoQ98xvGU2x_3Bb_R65pnuf362oRYpNaw@mail.gmail.com>
References: <1426389157.18823.111.camel@saalfeld-thinkpad>
	<1426473522.18823.132.camel@saalfeld-thinkpad>
	<CA+B=mGpn+P0Aiz6kueB=_dkY_HfrNhOSV3gL1ziMQWfGdkrN8w@mail.gmail.com>
	<1427414939.7570.12.camel@saalfelds-ws1.janelia.priv>
	<CA+B=mGpd89frZoOvjHoQ98xvGU2x_3Bb_R65pnuf362oRYpNaw@mail.gmail.com>
Message-ID: <1427511990.4293.131.camel@saalfelds-ws1.janelia.priv>

Hi Mark,

>[...] but not the traditional definition of public API[1,2].

This is what worries me because for most things that are less trivial
than addition, `traditional' definitions are not available, i.e.
`unintended' is not well defined.

> Just to make sure we're on the same page - when you say "changes the
> output", I assume you mean "changes the behavior but not the API - i.e.
> return type is unchanged"

In a typed language yes, what about Python?  What I mean is indeed
change in behavior---correct.  I proposed to treat change in behavior as
change of API because that would enable to reason about compatibility.
If we enable PATCH upgrades to change behavior but only require `compile
time' compatibility (which limits the scope of PATCH to statically typed
and compiled languages which, I think, was not intended), then all we
can reason from seeing a PATCH upgrade is that the stuff will compile,
and somehow run, no guarantees about behavior.  That's not very helpful
because compiling and running stuff isn't expensive to just try.
Behavior, however, is critical and complicated to test, having a
contract that makes guarantees here would indeed be useful.

> In that case, I think it would be cleaner to just eliminate the PATCH
> number - because every bug fix necessarily changes behavior, right? So with
> this scheme, MAJOR increases = "existing behavior has changed", and MINOR
> increases = "new behavior is available".
> 

Not necessarily.  Performance improvements, crash-fixes, compatibility
adjustments to upgraded dependencies (!) would fall into PATCH.  But I
see that even crashes could be used by dependents as part of the API...
we're doomed.

> Some problems with creating this versioning scheme:
> 1. MAJOR versions will increase rapidly. This is aesthetic, but one that
> people can react very negatively to - and can certainly be confusing if
> people don't expect MAJOR version bumps to cover bug fixes.

Right---but SemVer is already counterintuitive compared to romantic
versioning where a MAYOR upgrade is associated with a lot of new
features, not breakage.

> 2. It's one more thing for external developers to learn. We can't just say
> "we use SemVer".

Very true.

> 3. Since this is an internal versioning scheme, it may not be easy to
> compare our versions with external project versions that use SemVer.

Why would we want to do this?

> 4. There will be false negatives for MAJOR version compatibility
> comparisons (instead of what could be considered false positives with
> SemVer)

I wouldn't call them false but conservative or overly cautious.  It
would tell you when compatibility is not guaranteed which is useful.

> 
> Unfortunately, #1 above alone makes it very unlikely that we would want to
> adopt this use of version numbers.

I understand and fully agree.  But SemVer with PATCHES of `unintended
behavior' or other sentimental or romantic versioning schemes (I am
stealing these terms from

https://gist.github.com/jashkenas/cbd2b088e20279ae2c8e

and 

http://sentimentalversioning.org/

which are both exciting reads) aren't useful to reason about
compatibility.  We should therefore not use them to reason about
compatibility which you correctly state in the following...

> But what you're trying to do here -
> ensure compatibility - is fantastic and something that would be great to
> have.
> 
> So let's take a step back and look at what guarantees we do and do not have
> right now:
> 
> + We have reproducible builds (release couplings, which requires -some-
> versioning scheme to be used)
> + We have API compatibility (SemVer)
> 

No---there is no strict API compatibility when using PATCH to fix
`unintended behavior'.  Happened with ImageJ many times over the last
years: API compile-time compatible that would qualify as PATCH upgrade,
behavior different, plugins delivering crazy output, discovered only
much later through bug reports.

> - We do not have strict behavior compatibility
> - We do not have dependency compatibility
> 
> Behavior and dependency compatibility are very closely related - if they
> were covered by a versioning scheme, we could automatically answer the
> question "is it safe to drop in version X to replace version Y?".
> 

Yes.

> However, I do not think we should conflate these concerns with SemVer.

I could not agree more.

> Instead, two potential options would be:
> 
> 1) Continue to use SemVer, accept its limitations, be content with
> reproducibility.

Or any other versioning scheme that people like.  My current impression
is that SemVer doesn't help much.  I will keep using it, but it isn't
any better than any other scheme that assigns keys to versions and
enables to order them.

> 2) Create a separate versioning scheme that covers behavior and dependency
> compatibility. Use it in tandem with SemVer.
> 

You're absolutely right, but---phew---that's probably asking too much of
people that are already unwilling to adopt to something as simple as
SemVer.

My current thinking is that we should require contributors to use a
versioning scheme that can be sorted correctly by

sort -V

Anything else, i.e. compatibility guarantees, aren't possible to express
with a simple number and require runtime testing (e.g. unit-tests
promise this int an ideal world).  We should therefore never drop any
upgrade without significant attempt to test.  We could assume that a
maven build includes sufficient [unit-]testing to enable deployment if
it succeeds (this is not true in reality but it is a meaningful
contract).  I.e. artifacts can be deployed if they were explicitly built
against upgraded dependencies.  In our heterogeneous environment,
however, it is unrealistic to expect all contributors to adapt their
code in time.  Instead, we should try to build pom-fiji including all
downstream modules *overriding* or *upgrading* their dependency versions
to the highest possible.  Do you have something like this already or do
you have an idea how that could be done?

Thanks for all the energy that you're putting into this!

Cheers,
Stephan



> If anyone can think of other examples of versioned guarantees that would be
> useful to have, or counter-examples to any claims made here - please share!
> 
> Also, please let me know if any of this is confusing and/or additional
> examples would be useful.
> 
> Thanks again for the continued discussion,
> Mark
> 
> [1]
> http://en.wikipedia.org/wiki/Application_programming_interface#API_in_object-oriented_languages
> [2]
> http://stackoverflow.com/questions/2954372/difference-between-spi-and-api



From birgit.moeller at informatik.uni-halle.de  Sat Mar 28 13:42:06 2015
From: birgit.moeller at informatik.uni-halle.de (Birgit Moeller)
Date: Sat, 28 Mar 2015 11:42:06 -0700 (PDT)
Subject: [ImageJ-devel] Problems uploading jars to update site
In-Reply-To: <CADN69ym6hqD1JMqrM0LzpdnhaCBZBLb8UPZ-rCtLUH9RYpx9EQ@mail.gmail.com>
References: <CADN69ymr97gxzwj8yLmAi4VVe2-Csc+f23ms=Lq1pghWC7A99A@mail.gmail.com>
	<1427103940117-941.post@n6.nabble.com>
	<CADN69ym6hqD1JMqrM0LzpdnhaCBZBLb8UPZ-rCtLUH9RYpx9EQ@mail.gmail.com>
Message-ID: <1427568126400-954.post@n6.nabble.com>

Hi Curtis!


Curtis Rueden wrote
> Hi Birgit,
> 
> So your main deps are:
> 
>> loci:loci_tools:4.4.8
>> net.imglib2:imglib2:2.2.0
>> net.imglib2:imglib2-algorithms:2.0.0-beta-10
> 
> There are a couple of problems.
> 
> 1) The imglib2-algorithms artifact is obsolete. Since the 2.0.0 final
> release of imglib2, the Algorithms library was renamed to
> imglib2-algorithm
> instead, for consistency.
> 
> 2) Bio-Formats 4.4.x is no longer shipped with Fiji. It currently ships
> Bio-Formats 5.0.x, which will soon become 5.1.0 once the OME team
> finalizes
> that version. MiToBo will have compatibility problems with Fiji as long as
> it still depends on 4.4.8.
> 
> I advise extending pom-imagej (or alternately, import it in your
> dependencyManagement section [1]) to inherit its Bill of Materials [2], to
> get consistency of versioning. Otherwise, you are just taking a stab in
> the
> dark at getting all the version numbers right. The BOM exists as a promise
> to downstream projects that all the versions declared therein will work
> together. In general, if you have not already read over the ImageJ
> Architecture page [3], I would suggest doing so.
> 
> As of this writing, if you extend or import the newest pom-imagej 6.0.0,
> you can then add the following dependencies:
> 
>> ome:formats-api (for loci.formats.*)
>> ome:formats-common (for loci.common.*)
>> ome:ome-xml (for ome.xml.*)
>> ome:formats-bsd (runtime; for open file formats)
>> ome:formats-gpl (runtime; for proprietary file formats)
>> net.imglib2:imglib2
>> net.imglib2:imglib2-algorithm
> 
> I did not bother to specify the version numbers above -- the whole point
> is
> that you would leave off the "
> <version>
> ...
> </version>
> " lines in your POM,
> since they are managed by pom-imagej instead.
> 
> Happy to help if you need further information or assistance with this!

I changed our POM file as follows. In the dependency management section I
added 

  <dependencyManagement>
    <dependencies>
      <dependency>
	<groupId>net.imagej</groupId>
	<artifactId>pom-imagej</artifactId>
	<version>6.0.0</version>
	<type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

and in the dependencies themselves I added all the artifacts you suggested.
I did not add any version information and in general it seems to work. There
was only one problem. We also use functionality from the loci.formats.gui.*
package which is not covered by the dependencies you listed above. I found
the packages that we need in 

<dependency>
   <groupId>ome</groupId>
   <artifactId>bioformats_package</artifactId>
   <version>5.0.4</version>
</dependency>

however, here I had to specify an explicit version. And if I understood you
right, this is again an uber-jar probably not the best choice to depend on.
Is the package loci.formats.gui.* somewhere else available, or what is the
best strategy to resolve these dependencies?


Curtis Rueden wrote
>> We currently don't have an SCM being publically accessible
> 
> If you are willing to change that, we would be delighted to add more
> MiToBo
> links in the relevant places of our SciJava propaganda. In particular:
> 
> * http://scijava.org/
> * http://imagej.net/Philosophy
> 
> And on the Architecture page too, adding (e.g.) a MiToBo GitHub
> organization, pom-mitobo, etc., to the various tables.

Sounds great, we will discuss that option soon.


Curtis Rueden wrote
> Currently we do include the MiToBo and Alida logos in our talks when we
> mention SciJava module interoperability, but it would be nice to link to
> more of your project resources.

Great, thanks! :-)


Curtis Rueden wrote
> Regards,
> Curtis
> 
> [1]
> https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Importing_Dependencies
> [2] http://imagej.net/BOM
> [3] http://imagej.net/Architecture
> 
> [...]

Kind regards,

 Birgit




--
View this message in context: http://imagej-devel.54429.x6.nabble.com/Re-Problems-uploading-jars-to-update-site-tp940p954.html
Sent from the ImageJ-devel mailing list archive at Nabble.com.


From nico.stuurman at ucsf.edu  Sun Mar 29 14:05:27 2015
From: nico.stuurman at ucsf.edu (Nico Stuurman)
Date: Sun, 29 Mar 2015 12:05:27 -0700
Subject: [ImageJ-devel] Javadoc site requires an ending slash
Message-ID: <485EA807-21E3-4EEC-BFA1-1B45988708B0@ucsf.edu>

Hello all,

Getting started with using Maven on a Github ImageJ2 project under Netbeans (most everything works very well, thanks!), I discovered that Netbeans is unable to find the Javadoc sources.  As an example, it reports:

javadoc: warning - Error fetching URL: http://javadoc.imagej.net/ImgLib2

Indeed, pasting that address in a browser returns a 404 page.  Going to the javadoc.imagj.net site and clicking on the ImageLib2 icon resolves to the same address, but with an added slash, which indeed links to the Javadoc.  I am not sure why Netbeans does not add the slash itself, but it does seem a server misconfiguration that the address without a slash does not resolve correctly.  If there is anything that I should change on my end to make this work, happy to do so.

Best,

Nico



From hiner at wisc.edu  Mon Mar 30 09:52:38 2015
From: hiner at wisc.edu (Mark Hiner)
Date: Mon, 30 Mar 2015 09:52:38 -0500
Subject: [ImageJ-devel] Problems uploading jars to update site
In-Reply-To: <1427568126400-954.post@n6.nabble.com>
References: <CADN69ymr97gxzwj8yLmAi4VVe2-Csc+f23ms=Lq1pghWC7A99A@mail.gmail.com>
	<1427103940117-941.post@n6.nabble.com>
	<CADN69ym6hqD1JMqrM0LzpdnhaCBZBLb8UPZ-rCtLUH9RYpx9EQ@mail.gmail.com>
	<1427568126400-954.post@n6.nabble.com>
Message-ID: <CA+B=mGqsRdk5zf-2TbtpFcKMF3tAmDrER6yYGfZPPYM6T=1K3Q@mail.gmail.com>

Hi Birgit,

>however, here I had to specify an explicit version.

This is because we don't explicitly manage the version of the
bioformats_package component, since it's an uber-jar as you mentioned. In
cases that you do need to specify a manual version, it would be best to use
the ${bio-formats.version} property[1] to avoid mis-matched Bio-Formats
versions.

>Is the package loci.formats.gui.* somewhere else available, or what is the
best strategy to resolve these dependencies?

Yes, all the Bio-Formats code lives in individual components. I believe all
of loci.formats.gui is in formats-bsd. Each component has its own Maven
entry - you can see a list of them in pom-scijava[2], for example.

When I'm trying to remember which component a particular Bio-formats class
is in, I often go to the master branch on GitHub[3], press 't' to start
filtering, and type the class name. All of the Bio-Formats code is
organized in /component/[component-name] file structure.

Fiji also ships a Find Jar for Class command[4], which is much more
flexible than searching GitHub :)

Hope that helps.

Best,
Mark

[1]
https://github.com/scijava/pom-scijava/blob/pom-scijava-6.1.0/pom.xml#L207
[2]
https://github.com/scijava/pom-scijava/blob/pom-scijava-6.1.0/pom.xml#L443-503
[3] https://github.com/openmicroscopy/bioformats/tree/master
[4]
http://fiji.sc/Tips_for_developers#find_the_.jar_file_containing_a_certain_class

On Sat, Mar 28, 2015 at 1:42 PM, Birgit Moeller <
birgit.moeller at informatik.uni-halle.de> wrote:

> Hi Curtis!
>
>
> Curtis Rueden wrote
> > Hi Birgit,
> >
> > So your main deps are:
> >
> >> loci:loci_tools:4.4.8
> >> net.imglib2:imglib2:2.2.0
> >> net.imglib2:imglib2-algorithms:2.0.0-beta-10
> >
> > There are a couple of problems.
> >
> > 1) The imglib2-algorithms artifact is obsolete. Since the 2.0.0 final
> > release of imglib2, the Algorithms library was renamed to
> > imglib2-algorithm
> > instead, for consistency.
> >
> > 2) Bio-Formats 4.4.x is no longer shipped with Fiji. It currently ships
> > Bio-Formats 5.0.x, which will soon become 5.1.0 once the OME team
> > finalizes
> > that version. MiToBo will have compatibility problems with Fiji as long
> as
> > it still depends on 4.4.8.
> >
> > I advise extending pom-imagej (or alternately, import it in your
> > dependencyManagement section [1]) to inherit its Bill of Materials [2],
> to
> > get consistency of versioning. Otherwise, you are just taking a stab in
> > the
> > dark at getting all the version numbers right. The BOM exists as a
> promise
> > to downstream projects that all the versions declared therein will work
> > together. In general, if you have not already read over the ImageJ
> > Architecture page [3], I would suggest doing so.
> >
> > As of this writing, if you extend or import the newest pom-imagej 6.0.0,
> > you can then add the following dependencies:
> >
> >> ome:formats-api (for loci.formats.*)
> >> ome:formats-common (for loci.common.*)
> >> ome:ome-xml (for ome.xml.*)
> >> ome:formats-bsd (runtime; for open file formats)
> >> ome:formats-gpl (runtime; for proprietary file formats)
> >> net.imglib2:imglib2
> >> net.imglib2:imglib2-algorithm
> >
> > I did not bother to specify the version numbers above -- the whole point
> > is
> > that you would leave off the "
> > <version>
> > ...
> > </version>
> > " lines in your POM,
> > since they are managed by pom-imagej instead.
> >
> > Happy to help if you need further information or assistance with this!
>
> I changed our POM file as follows. In the dependency management section I
> added
>
>   <dependencyManagement>
>     <dependencies>
>       <dependency>
>         <groupId>net.imagej</groupId>
>         <artifactId>pom-imagej</artifactId>
>         <version>6.0.0</version>
>         <type>pom</type>
>         <scope>import</scope>
>       </dependency>
>     </dependencies>
>   </dependencyManagement>
>
> and in the dependencies themselves I added all the artifacts you suggested.
> I did not add any version information and in general it seems to work.
> There
> was only one problem. We also use functionality from the loci.formats.gui.*
> package which is not covered by the dependencies you listed above. I found
> the packages that we need in
>
> <dependency>
>    <groupId>ome</groupId>
>    <artifactId>bioformats_package</artifactId>
>    <version>5.0.4</version>
> </dependency>
>
> however, here I had to specify an explicit version. And if I understood you
> right, this is again an uber-jar probably not the best choice to depend on.
> Is the package loci.formats.gui.* somewhere else available, or what is the
> best strategy to resolve these dependencies?
>
>
> Curtis Rueden wrote
> >> We currently don't have an SCM being publically accessible
> >
> > If you are willing to change that, we would be delighted to add more
> > MiToBo
> > links in the relevant places of our SciJava propaganda. In particular:
> >
> > * http://scijava.org/
> > * http://imagej.net/Philosophy
> >
> > And on the Architecture page too, adding (e.g.) a MiToBo GitHub
> > organization, pom-mitobo, etc., to the various tables.
>
> Sounds great, we will discuss that option soon.
>
>
> Curtis Rueden wrote
> > Currently we do include the MiToBo and Alida logos in our talks when we
> > mention SciJava module interoperability, but it would be nice to link to
> > more of your project resources.
>
> Great, thanks! :-)
>
>
> Curtis Rueden wrote
> > Regards,
> > Curtis
> >
> > [1]
> >
> https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Importing_Dependencies
> > [2] http://imagej.net/BOM
> > [3] http://imagej.net/Architecture
> >
> > [...]
>
> Kind regards,
>
>  Birgit
>
>
>
>
> --
> View this message in context:
> http://imagej-devel.54429.x6.nabble.com/Re-Problems-uploading-jars-to-update-site-tp940p954.html
> Sent from the ImageJ-devel mailing list archive at Nabble.com.
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150330/81e0be14/attachment.html>

From hiner at wisc.edu  Mon Mar 30 12:05:52 2015
From: hiner at wisc.edu (Mark Hiner)
Date: Mon, 30 Mar 2015 12:05:52 -0500
Subject: [ImageJ-devel] SemVer policies for ImageJ2 and Fiji
In-Reply-To: <1427511990.4293.131.camel@saalfelds-ws1.janelia.priv>
References: <1426389157.18823.111.camel@saalfeld-thinkpad>
	<1426473522.18823.132.camel@saalfeld-thinkpad>
	<CA+B=mGpn+P0Aiz6kueB=_dkY_HfrNhOSV3gL1ziMQWfGdkrN8w@mail.gmail.com>
	<1427414939.7570.12.camel@saalfelds-ws1.janelia.priv>
	<CA+B=mGpd89frZoOvjHoQ98xvGU2x_3Bb_R65pnuf362oRYpNaw@mail.gmail.com>
	<1427511990.4293.131.camel@saalfelds-ws1.janelia.priv>
Message-ID: <CA+B=mGqKxZBnL=aD1Qy1R3xk1E5s7eEg6HhacQydfh9ufx4noA@mail.gmail.com>

Hi Stephan,

>Behavior, however, is critical and complicated to test, having a
>contract that makes guarantees here would indeed be useful

A contract that guarantees this would be amazing. I think we are on the
same page, but just wanted to illustrate how bugs make this an intractable
problem for versioning:

If bug fixes that change behavior would cause MAJOR version bumps, the
introduction of bugs that change behavior must also cause a MAJOR version
bump. Thus you need to know if you have added a bug or not before doing a
release. Failure to identify a bug means the release of versions that do
not follow the versioning scheme, which means we can not actually use the
version to reason about compatibility.

>> 3. Since this is an internal versioning scheme, it may not be easy to
>> compare our versions with external project versions that use SemVer.
>
>Why would we want to do this?

My original thought was dependency convergence - but for that the versions
comparisons are between artifacts with the same versioning system, so all
you need is internal consistency. So this may not actually be important.

>http://sentimentalversioning.org/

This page is great. I either hadn't read it or had forgotten it, so thanks
for sharing!

> https://gist.github.com/jashkenas/cbd2b088e20279ae2c8e

I think the author of this post slightly misunderstands the use of SemVer.
I completely agree with some of the content ('If you expect SemVer to solve
your problems for you, you will be disappointed'). But the author seems to
blame SemVer for failing to account for changes in behavior, when really
the failure was in their use of SemVer.

In the intro of http://semver.org/ is the phrase: "For this system to work,
you first need to declare a public API." If a developer doesn't declare API
to include behavior then they can't expect behavior to respect SemVer. If
they decide API does include behavior and then follow SemVer, then behavior
would be guaranteed between compatible versions - assuming they updated the
version appropriately when changing behavior.

>Instead, we should try to build pom-fiji including all
>downstream modules *overriding* or *upgrading* their dependency versions
>to the highest possible.  Do you have something like this already or do
>you have an idea how that could be done?

We have been throwing around the phrase "Melting Pot" for a while. This is
our dream: to have a Jenkins job that pulls the full SciJava software stack
and tests everything together based - i.e. build Fiji's pom
<https://github.com/fiji/fiji/blob/86622adda86e786dac01e8f7339cba5cb772b50b/pom.xml>
and test. This would check for dependency convergence as you outlined, and
make whatever guarantees of behavior we can automate.

There is a script started to do this
<https://github.com/scijava/scijava-scripts/blob/aab7cfe805638efc25615fdd7c78cedaae3c7197/melting-pot.sh>,
but no tests incorporating it that I know of yet. But it sounds like we're
on the same page, that this is how our software should be tested.

With this in mind, my proposal is:

* Define "API" for our software to be limited to public interfaces, classes
and methods, but not behavior. This is what will be covered by SemVer.
* Develop Melting Pot tests to validate behavior and dependency convergence

Unless there are any objections to this, I will update
http://imagej.net/Architecture#Versioning to explicitly define API as such,
and summarize the concerns that have been raised in this discussion -
including how the Melting Pot will make everything happy.

>we're doomed.

Probably!

>Thanks for all the energy that you're putting into this!

You too!

Best,
Mark

On Fri, Mar 27, 2015 at 10:06 PM, Stephan Saalfeld <
saalfelds at janelia.hhmi.org> wrote:

> Hi Mark,
>
> >[...] but not the traditional definition of public API[1,2].
>
> This is what worries me because for most things that are less trivial
> than addition, `traditional' definitions are not available, i.e.
> `unintended' is not well defined.
>
> > Just to make sure we're on the same page - when you say "changes the
> > output", I assume you mean "changes the behavior but not the API - i.e.
> > return type is unchanged"
>
> In a typed language yes, what about Python?  What I mean is indeed
> change in behavior---correct.  I proposed to treat change in behavior as
> change of API because that would enable to reason about compatibility.
> If we enable PATCH upgrades to change behavior but only require `compile
> time' compatibility (which limits the scope of PATCH to statically typed
> and compiled languages which, I think, was not intended), then all we
> can reason from seeing a PATCH upgrade is that the stuff will compile,
> and somehow run, no guarantees about behavior.  That's not very helpful
> because compiling and running stuff isn't expensive to just try.
> Behavior, however, is critical and complicated to test, having a
> contract that makes guarantees here would indeed be useful.
>
> > In that case, I think it would be cleaner to just eliminate the PATCH
> > number - because every bug fix necessarily changes behavior, right? So
> with
> > this scheme, MAJOR increases = "existing behavior has changed", and MINOR
> > increases = "new behavior is available".
> >
>
> Not necessarily.  Performance improvements, crash-fixes, compatibility
> adjustments to upgraded dependencies (!) would fall into PATCH.  But I
> see that even crashes could be used by dependents as part of the API...
> we're doomed.
>
> > Some problems with creating this versioning scheme:
> > 1. MAJOR versions will increase rapidly. This is aesthetic, but one that
> > people can react very negatively to - and can certainly be confusing if
> > people don't expect MAJOR version bumps to cover bug fixes.
>
> Right---but SemVer is already counterintuitive compared to romantic
> versioning where a MAYOR upgrade is associated with a lot of new
> features, not breakage.
>
> > 2. It's one more thing for external developers to learn. We can't just
> say
> > "we use SemVer".
>
> Very true.
>
> > 3. Since this is an internal versioning scheme, it may not be easy to
> > compare our versions with external project versions that use SemVer.
>
> Why would we want to do this?
>
> > 4. There will be false negatives for MAJOR version compatibility
> > comparisons (instead of what could be considered false positives with
> > SemVer)
>
> I wouldn't call them false but conservative or overly cautious.  It
> would tell you when compatibility is not guaranteed which is useful.
>
> >
> > Unfortunately, #1 above alone makes it very unlikely that we would want
> to
> > adopt this use of version numbers.
>
> I understand and fully agree.  But SemVer with PATCHES of `unintended
> behavior' or other sentimental or romantic versioning schemes (I am
> stealing these terms from
>
> https://gist.github.com/jashkenas/cbd2b088e20279ae2c8e
>
> and
>
> http://sentimentalversioning.org/
>
> which are both exciting reads) aren't useful to reason about
> compatibility.  We should therefore not use them to reason about
> compatibility which you correctly state in the following...
>
> > But what you're trying to do here -
> > ensure compatibility - is fantastic and something that would be great to
> > have.
> >
> > So let's take a step back and look at what guarantees we do and do not
> have
> > right now:
> >
> > + We have reproducible builds (release couplings, which requires -some-
> > versioning scheme to be used)
> > + We have API compatibility (SemVer)
> >
>
> No---there is no strict API compatibility when using PATCH to fix
> `unintended behavior'.  Happened with ImageJ many times over the last
> years: API compile-time compatible that would qualify as PATCH upgrade,
> behavior different, plugins delivering crazy output, discovered only
> much later through bug reports.
>
> > - We do not have strict behavior compatibility
> > - We do not have dependency compatibility
> >
> > Behavior and dependency compatibility are very closely related - if they
> > were covered by a versioning scheme, we could automatically answer the
> > question "is it safe to drop in version X to replace version Y?".
> >
>
> Yes.
>
> > However, I do not think we should conflate these concerns with SemVer.
>
> I could not agree more.
>
> > Instead, two potential options would be:
> >
> > 1) Continue to use SemVer, accept its limitations, be content with
> > reproducibility.
>
> Or any other versioning scheme that people like.  My current impression
> is that SemVer doesn't help much.  I will keep using it, but it isn't
> any better than any other scheme that assigns keys to versions and
> enables to order them.
>
> > 2) Create a separate versioning scheme that covers behavior and
> dependency
> > compatibility. Use it in tandem with SemVer.
> >
>
> You're absolutely right, but---phew---that's probably asking too much of
> people that are already unwilling to adopt to something as simple as
> SemVer.
>
> My current thinking is that we should require contributors to use a
> versioning scheme that can be sorted correctly by
>
> sort -V
>
> Anything else, i.e. compatibility guarantees, aren't possible to express
> with a simple number and require runtime testing (e.g. unit-tests
> promise this int an ideal world).  We should therefore never drop any
> upgrade without significant attempt to test.  We could assume that a
> maven build includes sufficient [unit-]testing to enable deployment if
> it succeeds (this is not true in reality but it is a meaningful
> contract).  I.e. artifacts can be deployed if they were explicitly built
> against upgraded dependencies.  In our heterogeneous environment,
> however, it is unrealistic to expect all contributors to adapt their
> code in time.  Instead, we should try to build pom-fiji including all
> downstream modules *overriding* or *upgrading* their dependency versions
> to the highest possible.  Do you have something like this already or do
> you have an idea how that could be done?
>
> Thanks for all the energy that you're putting into this!
>
> Cheers,
> Stephan
>
>
>
> > If anyone can think of other examples of versioned guarantees that would
> be
> > useful to have, or counter-examples to any claims made here - please
> share!
> >
> > Also, please let me know if any of this is confusing and/or additional
> > examples would be useful.
> >
> > Thanks again for the continued discussion,
> > Mark
> >
> > [1]
> >
> http://en.wikipedia.org/wiki/Application_programming_interface#API_in_object-oriented_languages
> > [2]
> >
> http://stackoverflow.com/questions/2954372/difference-between-spi-and-api
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150330/2b0b493c/attachment.html>

From birgit.moeller at informatik.uni-halle.de  Mon Mar 30 14:58:28 2015
From: birgit.moeller at informatik.uni-halle.de (Birgit Moeller)
Date: Mon, 30 Mar 2015 12:58:28 -0700 (PDT)
Subject: [ImageJ-devel] Problems uploading jars to update site
In-Reply-To: <CA+B=mGqsRdk5zf-2TbtpFcKMF3tAmDrER6yYGfZPPYM6T=1K3Q@mail.gmail.com>
References: <CADN69ymr97gxzwj8yLmAi4VVe2-Csc+f23ms=Lq1pghWC7A99A@mail.gmail.com>
	<1427103940117-941.post@n6.nabble.com>
	<CADN69ym6hqD1JMqrM0LzpdnhaCBZBLb8UPZ-rCtLUH9RYpx9EQ@mail.gmail.com>
	<1427568126400-954.post@n6.nabble.com>
	<CA+B=mGqsRdk5zf-2TbtpFcKMF3tAmDrER6yYGfZPPYM6T=1K3Q@mail.gmail.com>
Message-ID: <1427745508644-958.post@n6.nabble.com>

Hi Mark!


Mark Hiner wrote
> Hi Birgit,
> 
>>however, here I had to specify an explicit version.
> 
> This is because we don't explicitly manage the version of the
> bioformats_package component, since it's an uber-jar as you mentioned. In
> cases that you do need to specify a manual version, it would be best to
> use
> the ${bio-formats.version} property[1] to avoid mis-matched Bio-Formats
> versions.

Thanks to your hints specifying a manual version is no longer required.


Mark Hiner wrote
>>Is the package loci.formats.gui.* somewhere else available, or what is the
> best strategy to resolve these dependencies?
> 
> Yes, all the Bio-Formats code lives in individual components. I believe
> all
> of loci.formats.gui is in formats-bsd. Each component has its own Maven
> entry - you can see a list of them in pom-scijava[2], for example.
> 
> When I'm trying to remember which component a particular Bio-formats class
> is in, I often go to the master branch on GitHub[3], press 't' to start
> filtering, and type the class name. All of the Bio-Formats code is
> organized in /component/[component-name] file structure.
> 
> Fiji also ships a Find Jar for Class command[4], which is much more
> flexible than searching GitHub :)
> 
> Hope that helps.
> 
> Best,
> Mark
> 
> [1]
> https://github.com/scijava/pom-scijava/blob/pom-scijava-6.1.0/pom.xml#L207
> [2]
> https://github.com/scijava/pom-scijava/blob/pom-scijava-6.1.0/pom.xml#L443-503
> [3] https://github.com/openmicroscopy/bioformats/tree/master
> [4]
> http://fiji.sc/Tips_for_developers#find_the_.jar_file_containing_a_certain_class

You were right, I found the missing packages in the formats-bsd component.
And the key "t" on GitHub is really a great help :-)
Thanks for your advice and best regards, 

 Birgit





--
View this message in context: http://imagej-devel.54429.x6.nabble.com/Re-Problems-uploading-jars-to-update-site-tp940p958.html
Sent from the ImageJ-devel mailing list archive at Nabble.com.


From hiner at wisc.edu  Tue Mar 31 14:10:43 2015
From: hiner at wisc.edu (Mark Hiner)
Date: Tue, 31 Mar 2015 14:10:43 -0500
Subject: [ImageJ-devel] Javadoc site requires an ending slash
In-Reply-To: <485EA807-21E3-4EEC-BFA1-1B45988708B0@ucsf.edu>
References: <485EA807-21E3-4EEC-BFA1-1B45988708B0@ucsf.edu>
Message-ID: <CA+B=mGp8sGU6c=EV5hdy_yaQt7CmFR2cUmxKe9HysFGRs+nUpA@mail.gmail.com>

Hi Nico,

> but it does seem a server misconfiguration that the address without a
slash does not resolve correctly

Yes, thank you for pointing this out! URLs without a trailing slash were
not being redirected.

These redirects are now in place. I fixed a few other broken links and
redirects, and added test coverage for these cases. Please let me know if
it's still not working in Netbeans, or if you run into any other problems!

Thanks again.

Best,
Mark

On Sun, Mar 29, 2015 at 2:05 PM, Nico Stuurman <nico.stuurman at ucsf.edu>
wrote:

> Hello all,
>
> Getting started with using Maven on a Github ImageJ2 project under
> Netbeans (most everything works very well, thanks!), I discovered that
> Netbeans is unable to find the Javadoc sources.  As an example, it reports:
>
> javadoc: warning - Error fetching URL: http://javadoc.imagej.net/ImgLib2
>
> Indeed, pasting that address in a browser returns a 404 page.  Going to
> the javadoc.imagj.net site and clicking on the ImageLib2 icon resolves to
> the same address, but with an added slash, which indeed links to the
> Javadoc.  I am not sure why Netbeans does not add the slash itself, but it
> does seem a server misconfiguration that the address without a slash does
> not resolve correctly.  If there is anything that I should change on my end
> to make this work, happy to do so.
>
> Best,
>
> Nico
>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20150331/c5bf081b/attachment.html>

