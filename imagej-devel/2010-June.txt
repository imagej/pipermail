From bms0416 at yahoo.com  Tue Jun  1 15:41:59 2010
From: bms0416 at yahoo.com (Brian Selinsky)
Date: Tue, 1 Jun 2010 13:41:59 -0700 (PDT)
Subject: [ImageJ-devel] Fw: MATLAB Meetings week of 6/15
Message-ID: <244218.40375.qm@web56208.mail.re3.yahoo.com>

FYI

--- On Tue, 6/1/10, Pete Stagg <Pete.Stagg at mathworks.com> wrote:

From: Pete Stagg <Pete.Stagg at mathworks.com>
Subject: MATLAB Meetings week of 6/15
To: "bms0416 at yahoo.com" <bms0416 at yahoo.com>
Date: Tuesday, June 1, 2010, 1:14 PM




 
 






 



Hello
Brian, 

 ? 

I?ll
be in the Madison area on 6/15 ? 6/17 if you have a group that would like
to meet to learn more about MATLAB. 

 ? 

We
would be happy to hold an hour meeting to discuss your work and the following
agenda: 

 ? 

MATLAB is a high-level technical
computing environment used to analyze data for 90 different
applications.? 1 tool with Prebuilt functions for Data Analysis,
Visualization, PK/PD Modeling, Bioinformatics, Image Processing, Signal
Processing, Process Monitoring & Control, Curve fitting, Mass Spec, Machine
Learning, Database Connectivity, Biochemical/Mechanistic Modeling, Report
Generation, & Modeling/Simulation/Code generation tools for Medical
Devices.

 ? 

This demo will introduce MATLAB as an integrated
environment to perform a complete computational workflow in a manner suitable
for users with little to no programming experience.

 ? 

Some of the highlights include:

 ? 

*?????? Importing data in
different file formats and databases

*?????? Various built-in
functions for quick visualizations and analysis

*?????? Single click report
generation

*?????? Automating the
entire workflow

*?????? Building a
graphical user interface (GUI) around your workflow

*?????? 

Let me know if you are interested.

 ? 

Thanks

Pete Stagg

==========================================

Pete Stagg

The MathWorks, Inc.

3 Apple Hill Drive

Natick, MA 01760-2098

PH (508) 647-7079

FAX (508) 647-4670

email pstagg at mathworks.com

http://www.mathworks.com

 ? 

 ? 



 





      
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20100601/03c1ab02/attachment.html>

From eliceiri at facstaff.wisc.edu  Wed Jun  2 06:21:40 2010
From: eliceiri at facstaff.wisc.edu (Kevin W Eliceiri)
Date: Wed, 02 Jun 2010 06:21:40 -0500
Subject: [ImageJ-devel] Fw: MATLAB Meetings week of 6/15
In-Reply-To: <244218.40375.qm@web56208.mail.re3.yahoo.com>
References: <244218.40375.qm@web56208.mail.re3.yahoo.com>
Message-ID: <7330d06f8a17.4c05f874@wiscmail.wisc.edu>

I've attended one of these, they do cover some of the basics and are a reasonable way to get into Matlab.

best,
kevin

On 06/01/10, Brian Selinsky  <bms0416 at yahoo.com> wrote:

> FYI
> 
> --- On Tue, 6/1/10, Pete Stagg <Pete.Stagg at mathworks.com> wrote:
> 
> > 
> > From: Pete Stagg <Pete.Stagg at mathworks.com>
> > Subject: MATLAB Meetings week of 6/15
> > To: "bms0416 at yahoo.com" <bms0416 at yahoo.com>
> > Date: Tuesday, June 1, 2010, 1:14 PM
> > 
> > 
> > 
> > 
> > 
> >  
> >  
> > 
> > 
> > 
> > 
> > 
> > 
> >  
> > 
> > 
> > 
> > 
> > 
> > Hello
> > Brian,
> >  
> > 
> > 
> >  ?
> >  
> > 
> > 
> > I?ll
> > be in the Madison area on 6/15 ? 6/17 if you have a group that would like
> > to meet to learn more about MATLAB.
> >  
> > 
> > 
> >  ?
> >  
> > 
> > 
> > We
> > would be happy to hold an hour meeting to discuss your work and the following
> > agenda:
> >  
> > 
> > 
> >  ?
> >  
> > 
> > 
> > MATLAB is a high-level technical
> > computing environment used to analyze data for 90 different
> > applications.? 1 tool with Prebuilt functions for Data Analysis,
> > Visualization, PK/PD Modeling, Bioinformatics, Image Processing, Signal
> > Processing, Process Monitoring & Control, Curve fitting, Mass Spec, Machine
> > Learning, Database Connectivity, Biochemical/Mechanistic Modeling, Report
> > Generation, & Modeling/Simulation/Code generation tools for Medical
> > Devices.
> > 
> > 
> > 
> >  ?
> >  
> > 
> > 
> > This demo will introduce MATLAB as an integrated
> > environment to perform a complete computational workflow in a manner suitable
> > for users with little to no programming experience.
> > 
> > 
> > 
> >  ?
> >  
> > 
> > 
> > Some of the highlights include:
> > 
> > 
> > 
> >  ?
> >  
> > 
> > 
> > *?????? Importing data in
> > different file formats and databases
> > 
> > 
> > 
> > *?????? Various built-in
> > functions for quick visualizations and analysis
> > 
> > 
> > 
> > *?????? Single click report
> > generation
> > 
> > 
> > 
> > *?????? Automating the
> > entire workflow
> > 
> > 
> > 
> > *?????? Building a
> > graphical user interface (GUI) around your workflow
> > 
> > 
> > 
> > *?????? 
> > 
> > 
> > 
> > Let me know if you are interested.
> > 
> > 
> > 
> >  ?
> >  
> > 
> > 
> > Thanks
> > 
> > 
> > 
> > Pete Stagg
> > 
> > 
> > 
> > ==========================================
> > 
> > 
> > 
> > Pete Stagg
> > 
> > 
> > 
> > The MathWorks, Inc.
> > 
> > 
> > 
> > 3 Apple Hill Drive
> > 
> > 
> > 
> > Natick, MA 01760-2098
> > 
> > 
> > 
> > PH (508) 647-7079
> > 
> > 
> > 
> > FAX (508) 647-4670
> > 
> > 
> > 
> > email pstagg at mathworks.com(/mc/compose?to=pstagg at mathworks.com)
> > 
> > 
> > 
> > http://www.mathworks.com
> > 
> > 
> > 
> >  ?
> >  
> > 
> > 
> >  ?
> >  
> > 
> > 
> > 
> >  
> > 
> > 
> > 
> 
> 
> 
> 
>       
> 
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagejdev.org
> http://imagejdev.org/mailman/listinfo/imagej-devel
-- 
Kevin W. Eliceiri
Director
Laboratory for Optical and Computational Instrumentation
http://www.loci.wisc.edu
Room 271 Animal Sciences
1675 Observatory Drive
Madison, WI 53706
Phone: 608-263-6288
Fax: 608-262-4570



From ctrueden at wisc.edu  Thu Jun  3 21:41:57 2010
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Thu, 3 Jun 2010 21:41:57 -0500
Subject: [ImageJ-devel] Upcoming meeting schedule
Message-ID: <AANLkTim-jCS4HXWe5xiaAKFAAmgF0yJPm33kaBNnzPbM@mail.gmail.com>

Hi everyone,

For the next few weeks there will be no Tuesday topic meetings, until we are
a bit further along. If anyone has a topic they think needs discussion
before implementation and/or refactoring can begin, feel free to mention on
this list and we can schedule a topic meeting for it. Otherwise, we will
likely not resume them until later in the fall.

The next Thursday status report will be in one week, June 10 at 2:30pm CDT,
in room 274, by me. I will cover what I have been doing in recent weeks, and
discuss next steps for the ImageJ2 project overall.

-Curtis
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20100603/eccc399b/attachment.html>

From eliceiri at facstaff.wisc.edu  Thu Jun 10 07:39:42 2010
From: eliceiri at facstaff.wisc.edu (Kevin W Eliceiri)
Date: Thu, 10 Jun 2010 07:39:42 -0500
Subject: [ImageJ-devel] meeting schedules next few weeks
Message-ID: <7470a38219658.4c1096be@wiscmail.wisc.edu>

Hello All,

Today's meeting and presentation by Curtis is cancelled due to his great news, and Curtis will be out the next two weeks. I will be gone at the OME meeting next week (Monday-Thursday) so we won't have a meeting next Thursday (the 17th). Our next meeting will be Thursday June 24th. Due to a conflict with another meeting here, this one will be at 11am. Grant and Rick will be presenting a OSGI code mockup that Grant is working on with Rick's help. Curtis's presentation is rescheduled for July 1st at 2:30pm.

Today-no meeting 
June 24th-Grant and Rick 11am (room 236 Animal Sciences)
July 1st-Curtis at 2:30pm (CALS Computer lab lecture room)

I've met with many of you over the last week about your project if you want to discuss anything before I go, please let me know. 

best,
kevin


-- 
Kevin W. Eliceiri
Director
Laboratory for Optical and Computational Instrumentation
http://www.loci.wisc.edu
Room 271 Animal Sciences
1675 Observatory Drive
Madison, WI 53706
Phone: 608-263-6288
Fax: 608-262-4570



From Johannes.Schindelin at gmx.de  Mon Jun 14 11:19:46 2010
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Mon, 14 Jun 2010 18:19:46 +0200 (CEST)
Subject: [ImageJ-devel] Simplifying loops?
Message-ID: <alpine.DEB.1.00.1006141053490.2689@bonsai2>

Hi,

I wonder whether we can shorten

	while (cursor.hasNext()) {
		cursor.fwd();
		// meat of the loop
	}

to

	while (cursor.fwd()) {
		// meat of the loop
	}

?

Ciao,
Dscho




From preibisch at mpi-cbg.de  Mon Jun 14 11:34:55 2010
From: preibisch at mpi-cbg.de (Stephan Preibisch)
Date: Mon, 14 Jun 2010 18:34:55 +0200
Subject: [ImageJ-devel] Simplifying loops?
In-Reply-To: <alpine.DEB.1.00.1006141053490.2689@bonsai2>
References: <alpine.DEB.1.00.1006141053490.2689@bonsai2>
Message-ID: <004201cb0bdf$8610eda0$9232c8e0$@de>

This is definitely something we could do as far as the linked iterators
work. Right now we did not do that because it is quite often extra work,
e.g. if you copy an image you need only one check instead of two:

cursor1, cursor2;

while ( cursor1.hasNext() ) 
{
	cursor1.fwd();
	cursor2.fwd();
	// meat of the loop
}

Steffi

-----Original Message-----
From: Johannes Schindelin [mailto:Johannes.Schindelin at gmx.de] 
Sent: Monday, June 14, 2010 6:20 PM
To: preibisch at mpi-cbg.de; saalfeld at mpi-cbg.de
Cc: fiji-devel at googlegroups.com; imagej-devel at imagejdev.org
Subject: Simplifying loops?

Hi,

I wonder whether we can shorten

	while (cursor.hasNext()) {
		cursor.fwd();
		// meat of the loop
	}

to

	while (cursor.fwd()) {
		// meat of the loop
	}

?

Ciao,
Dscho





From Johannes.Schindelin at gmx.de  Mon Jun 14 11:54:22 2010
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Mon, 14 Jun 2010 18:54:22 +0200 (CEST)
Subject: [ImageJ-devel] Simplifying loops?
In-Reply-To: <004201cb0bdf$8610eda0$9232c8e0$@de>
References: <alpine.DEB.1.00.1006141053490.2689@bonsai2>
	<004201cb0bdf$8610eda0$9232c8e0$@de>
Message-ID: <alpine.DEB.1.00.1006141853370.2689@bonsai2>

Hi,

On Mon, 14 Jun 2010, Stephan Preibisch wrote:

> This is definitely something we could do as far as the linked iterators
> work. Right now we did not do that because it is quite often extra work,
> e.g. if you copy an image you need only one check instead of two:
> 
> cursor1, cursor2;
> 
> while ( cursor1.hasNext() ) 
> {
> 	cursor1.fwd();
> 	cursor2.fwd();
> 	// meat of the loop
> }

Ah, I see. Maybe just a shortcut

	public boolean next() {
		if (!hasNext())
			return false;
		fwd();
		return true;
	}

to optimize for the common case?

Ciao,
Dscho




From saalfeld at mpi-cbg.de  Mon Jun 14 13:06:57 2010
From: saalfeld at mpi-cbg.de (Stephan Saalfeld)
Date: Mon, 14 Jun 2010 20:06:57 +0200
Subject: [ImageJ-devel] Simplifying loops?
In-Reply-To: <alpine.DEB.1.00.1006141853370.2689@bonsai2>
References: <alpine.DEB.1.00.1006141053490.2689@bonsai2>
	<004201cb0bdf$8610eda0$9232c8e0$@de>
	<alpine.DEB.1.00.1006141853370.2689@bonsai2>
Message-ID: <1276538817.1991.39.camel@saalfeld-laptop>

Hi,

we implement java.lang.Iterator<T extends Type<T>> where next() returns
T, so no, next() cannot return boolean, fwd() and back() might do that.
In the coming changes, Image<T> implements java.lang.Iterable<T>, such
that the Java language shortcut works:

Image< T > image;
for ( final T : image ) {
    // meat of the loop
}

How's that?

Currently, Cursor<T> implements Iterable<T> such that you can do:

Cursor<T> cursor;
for (final T : cursor ) ...

instead,  but that's less sensible and will not stay.

Best,
Stephan




On Mon, 2010-06-14 at 18:54 +0200, Johannes Schindelin wrote: 
> Hi,
> 
> On Mon, 14 Jun 2010, Stephan Preibisch wrote:
> 
> > This is definitely something we could do as far as the linked iterators
> > work. Right now we did not do that because it is quite often extra work,
> > e.g. if you copy an image you need only one check instead of two:
> > 
> > cursor1, cursor2;
> > 
> > while ( cursor1.hasNext() ) 
> > {
> > 	cursor1.fwd();
> > 	cursor2.fwd();
> > 	// meat of the loop
> > }
> 
> Ah, I see. Maybe just a shortcut
> 
> 	public boolean next() {
> 		if (!hasNext())
> 			return false;
> 		fwd();
> 		return true;
> 	}
> 
> to optimize for the common case?
> 
> Ciao,
> Dscho
> 




From bselinsky at wisc.edu  Mon Jun 14 13:58:22 2010
From: bselinsky at wisc.edu (Brian Selinsky)
Date: Mon, 14 Jun 2010 13:58:22 -0500
Subject: [ImageJ-devel] Simplifying loops?
In-Reply-To: <1276538817.1991.39.camel@saalfeld-laptop>
References: <alpine.DEB.1.00.1006141053490.2689@bonsai2>
	<004201cb0bdf$8610eda0$9232c8e0$@de>
	<alpine.DEB.1.00.1006141853370.2689@bonsai2>
	<1276538817.1991.39.camel@saalfeld-laptop>
Message-ID: <74709cec184c6.4c16357e@wiscmail.wisc.edu>

What happens if next() is called without checking hasNest() first?

Would returning null or throwing an exception that could be caught and potentially ignored be reasonable?



On 06/14/10, Stephan Saalfeld  <saalfeld at mpi-cbg.de> wrote:

> Hi,
> 
> we implement java.lang.Iterator<T extends Type<T>> where next() returns
> T, so no, next() cannot return boolean, fwd() and back() might do that.
> In the coming changes, Image<T> implements java.lang.Iterable<T>, such
> that the Java language shortcut works:
> 
> Image< T > image;
> for ( final T : image ) {
> ??? // meat of the loop
> }
> 
> How's that?
> 
> Currently, Cursor<T> implements Iterable<T> such that you can do:
> 
> Cursor<T> cursor;
> for (final T : cursor ) ...
> 
> instead,? but that's less sensible and will not stay.
> 
> Best,
> Stephan
> 
> 
> 
> 
> On Mon, 2010-06-14 at 18:54 +0200, Johannes Schindelin wrote: 
> > Hi,
> > 
> > On Mon, 14 Jun 2010, Stephan Preibisch wrote:
> > 
> > > This is definitely something we could do as far as the linked iterators
> > > work. Right now we did not do that because it is quite often extra work,
> > > e.g. if you copy an image you need only one check instead of two:
> > > 
> > > cursor1, cursor2;
> > > 
> > > while ( cursor1.hasNext() ) 
> > > {
> > >?	cursor1.fwd();
> > >?	cursor2.fwd();
> > >?	// meat of the loop
> > > }
> > 
> > Ah, I see. Maybe just a shortcut
> > 
> >?	public boolean next() {
> >?????????	if (!hasNext())
> >?????????????????	return false;
> >?????????	fwd();
> >?????????	return true;
> >?	}
> > 
> > to optimize for the common case?
> > 
> > Ciao,
> > Dscho
> > 
> 
> 
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagejdev.org
> http://imagejdev.org/mailman/listinfo/imagej-devel



From Johannes.Schindelin at gmx.de  Mon Jun 14 14:00:28 2010
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Mon, 14 Jun 2010 21:00:28 +0200 (CEST)
Subject: [ImageJ-devel] Simplifying loops?
In-Reply-To: <1276538817.1991.39.camel@saalfeld-laptop>
References: <alpine.DEB.1.00.1006141053490.2689@bonsai2>
	<004201cb0bdf$8610eda0$9232c8e0$@de>
	<alpine.DEB.1.00.1006141853370.2689@bonsai2>
	<1276538817.1991.39.camel@saalfeld-laptop>
Message-ID: <alpine.DEB.1.00.1006142059570.2689@bonsai2>

Hi,

On Mon, 14 Jun 2010, Stephan Saalfeld wrote:

> In the coming changes, Image<T> implements java.lang.Iterable<T>, such 
> that the Java language shortcut works:
> 
> Image< T > image;
> for ( final T : image ) {
>     // meat of the loop
> }
> 
> How's that?

Perfect! Thank you!

Ciao,
Dscho




From saalfeld at mpi-cbg.de  Mon Jun 14 16:43:19 2010
From: saalfeld at mpi-cbg.de (Stephan Saalfeld)
Date: Mon, 14 Jun 2010 23:43:19 +0200
Subject: [ImageJ-devel] Simplifying loops?
In-Reply-To: <74709cec184c6.4c16357e@wiscmail.wisc.edu>
References: <alpine.DEB.1.00.1006141053490.2689@bonsai2>
	<004201cb0bdf$8610eda0$9232c8e0$@de>
	<alpine.DEB.1.00.1006141853370.2689@bonsai2>
	<1276538817.1991.39.camel@saalfeld-laptop>
	<74709cec184c6.4c16357e@wiscmail.wisc.edu>
Message-ID: <1276551799.1991.196.camel@saalfeld-laptop>

It should throw java.util.NoSuchElementException as defined by
java.util.Iterator (it's by the way java.util.Iterator and
java.lang.Iterable, lazy Eclipsers do not keep that stuff in mind ;))
Currently, it throws any kind of RuntimeException depending on what the
type() method is throwing (so usually a
java.lang.ArrayIndexOutOfBoundsException).

Best,
Stephan


On Mon, 2010-06-14 at 13:58 -0500, Brian Selinsky wrote: 
> What happens if next() is called without checking hasNest() first?
> 
> Would returning null or throwing an exception that could be caught and potentially ignored be reasonable?
> 
> 
> 
> On 06/14/10, Stephan Saalfeld  <saalfeld at mpi-cbg.de> wrote:
> 
> > Hi,
> > 
> > we implement java.lang.Iterator<T extends Type<T>> where next() returns
> > T, so no, next() cannot return boolean, fwd() and back() might do that.
> > In the coming changes, Image<T> implements java.lang.Iterable<T>, such
> > that the Java language shortcut works:
> > 
> > Image< T > image;
> > for ( final T : image ) {
> >     // meat of the loop
> > }
> > 
> > How's that?
> > 
> > Currently, Cursor<T> implements Iterable<T> such that you can do:
> > 
> > Cursor<T> cursor;
> > for (final T : cursor ) ...
> > 
> > instead,  but that's less sensible and will not stay.
> > 
> > Best,
> > Stephan
> > 
> > 
> > 
> > 
> > On Mon, 2010-06-14 at 18:54 +0200, Johannes Schindelin wrote: 
> > > Hi,
> > > 
> > > On Mon, 14 Jun 2010, Stephan Preibisch wrote:
> > > 
> > > > This is definitely something we could do as far as the linked iterators
> > > > work. Right now we did not do that because it is quite often extra work,
> > > > e.g. if you copy an image you need only one check instead of two:
> > > > 
> > > > cursor1, cursor2;
> > > > 
> > > > while ( cursor1.hasNext() ) 
> > > > {
> > > > 	cursor1.fwd();
> > > > 	cursor2.fwd();
> > > > 	// meat of the loop
> > > > }
> > > 
> > > Ah, I see. Maybe just a shortcut
> > > 
> > > 	public boolean next() {
> > >         	if (!hasNext())
> > >                 	return false;
> > >         	fwd();
> > >         	return true;
> > > 	}
> > > 
> > > to optimize for the common case?
> > > 
> > > Ciao,
> > > Dscho
> > > 
> > 
> > 
> > _______________________________________________
> > ImageJ-devel mailing list
> > ImageJ-devel at imagejdev.org
> > http://imagejdev.org/mailman/listinfo/imagej-devel




From saalfeld at mpi-cbg.de  Mon Jun 14 19:21:03 2010
From: saalfeld at mpi-cbg.de (Stephan Saalfeld)
Date: Tue, 15 Jun 2010 02:21:03 +0200
Subject: [ImageJ-devel] [fiji-devel] RE: Simplifying loops?
In-Reply-To: <1276538817.1991.39.camel@saalfeld-laptop>
References: <alpine.DEB.1.00.1006141053490.2689@bonsai2>
	<004201cb0bdf$8610eda0$9232c8e0$@de>
	<alpine.DEB.1.00.1006141853370.2689@bonsai2>
	<1276538817.1991.39.camel@saalfeld-laptop>
Message-ID: <1276561263.1991.209.camel@saalfeld-laptop>

Self-correction:
fwd() and bck() will not return boolean because I do not want them to
check anything by default.  In the following example, all pixels are
iterated until an exception (e.g. IndexOutOfBounds on type() call)
occurs:

Cursor<T> c;
try {
    for (;;c.fwd()){
        // meat of the loop
}
catch (Exception e){}

I assume that this is the fastest way to iterate over all pixels
assuming that something at the basic language level is throwing an
appropriate Exception.

Best,
Stephan



On Mon, 2010-06-14 at 20:06 +0200, Stephan Saalfeld wrote: 
> Hi,
> 
> we implement java.lang.Iterator<T extends Type<T>> where next() returns
> T, so no, next() cannot return boolean, fwd() and back() might do that.
> In the coming changes, Image<T> implements java.lang.Iterable<T>, such
> that the Java language shortcut works:
> 
> Image< T > image;
> for ( final T : image ) {
>     // meat of the loop
> }
> 
> How's that?
> 
> Currently, Cursor<T> implements Iterable<T> such that you can do:
> 
> Cursor<T> cursor;
> for (final T : cursor ) ...
> 
> instead,  but that's less sensible and will not stay.
> 
> Best,
> Stephan
> 
> 
> 
> 
> On Mon, 2010-06-14 at 18:54 +0200, Johannes Schindelin wrote: 
> > Hi,
> > 
> > On Mon, 14 Jun 2010, Stephan Preibisch wrote:
> > 
> > > This is definitely something we could do as far as the linked iterators
> > > work. Right now we did not do that because it is quite often extra work,
> > > e.g. if you copy an image you need only one check instead of two:
> > > 
> > > cursor1, cursor2;
> > > 
> > > while ( cursor1.hasNext() ) 
> > > {
> > > 	cursor1.fwd();
> > > 	cursor2.fwd();
> > > 	// meat of the loop
> > > }
> > 
> > Ah, I see. Maybe just a shortcut
> > 
> > 	public boolean next() {
> > 		if (!hasNext())
> > 			return false;
> > 		fwd();
> > 		return true;
> > 	}
> > 
> > to optimize for the common case?
> > 
> > Ciao,
> > Dscho
> > 
> 




From bselinsky at wisc.edu  Tue Jun 15 08:22:30 2010
From: bselinsky at wisc.edu (Brian Selinsky)
Date: Tue, 15 Jun 2010 08:22:30 -0500
Subject: [ImageJ-devel] [fiji-devel] RE: Simplifying loops?
In-Reply-To: <1276561263.1991.209.camel@saalfeld-laptop>
References: <alpine.DEB.1.00.1006141053490.2689@bonsai2>
	<004201cb0bdf$8610eda0$9232c8e0$@de>
	<alpine.DEB.1.00.1006141853370.2689@bonsai2>
	<1276538817.1991.39.camel@saalfeld-laptop>
	<1276561263.1991.209.camel@saalfeld-laptop>
Message-ID: <73d0f364196d4.4c173846@wiscmail.wisc.edu>

so what is the difference between fwd() and next()?

if the same I would prefer next() (for consistency) and previous()



On 06/14/10, Stephan Saalfeld  <saalfeld at mpi-cbg.de> wrote:

> Self-correction:
> fwd() and bck() will not return boolean because I do not want them to
> check anything by default.? In the following example, all pixels are
> iterated until an exception (e.g. IndexOutOfBounds on type() call)
> occurs:
> 
> Cursor<T> c;
> try {
> ??? for (;;c.fwd()){
> ??????? // meat of the loop
> }
> catch (Exception e){}
> 
> I assume that this is the fastest way to iterate over all pixels
> assuming that something at the basic language level is throwing an
> appropriate Exception.
> 
> Best,
> Stephan
> 
> 
> 
> On Mon, 2010-06-14 at 20:06 +0200, Stephan Saalfeld wrote: 
> > Hi,
> > 
> > we implement java.lang.Iterator<T extends Type<T>> where next() returns
> > T, so no, next() cannot return boolean, fwd() and back() might do that.
> > In the coming changes, Image<T> implements java.lang.Iterable<T>, such
> > that the Java language shortcut works:
> > 
> > Image< T > image;
> > for ( final T : image ) {
> >???? // meat of the loop
> > }
> > 
> > How's that?
> > 
> > Currently, Cursor<T> implements Iterable<T> such that you can do:
> > 
> > Cursor<T> cursor;
> > for (final T : cursor ) ...
> > 
> > instead,? but that's less sensible and will not stay.
> > 
> > Best,
> > Stephan
> > 
> > 
> > 
> > 
> > On Mon, 2010-06-14 at 18:54 +0200, Johannes Schindelin wrote: 
> > > Hi,
> > > 
> > > On Mon, 14 Jun 2010, Stephan Preibisch wrote:
> > > 
> > > > This is definitely something we could do as far as the linked iterators
> > > > work. Right now we did not do that because it is quite often extra work,
> > > > e.g. if you copy an image you need only one check instead of two:
> > > > 
> > > > cursor1, cursor2;
> > > > 
> > > > while ( cursor1.hasNext() ) 
> > > > {
> > > >?	cursor1.fwd();
> > > >?	cursor2.fwd();
> > > >?	// meat of the loop
> > > > }
> > > 
> > > Ah, I see. Maybe just a shortcut
> > > 
> > >?	public boolean next() {
> > >?????????	if (!hasNext())
> > >?????????????????	return false;
> > >?????????	fwd();
> > >?????????	return true;
> > >?	}
> > > 
> > > to optimize for the common case?
> > > 
> > > Ciao,
> > > Dscho
> > > 
> > 
> 
> 
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagejdev.org
> http://imagejdev.org/mailman/listinfo/imagej-devel



From saalfeld at mpi-cbg.de  Wed Jun 16 04:29:44 2010
From: saalfeld at mpi-cbg.de (Stephan Saalfeld)
Date: Wed, 16 Jun 2010 11:29:44 +0200
Subject: [ImageJ-devel] [fiji-devel] RE: Simplifying loops?
In-Reply-To: <73d0f364196d4.4c173846@wiscmail.wisc.edu>
References: <alpine.DEB.1.00.1006141053490.2689@bonsai2>
	<004201cb0bdf$8610eda0$9232c8e0$@de>
	<alpine.DEB.1.00.1006141853370.2689@bonsai2>
	<1276538817.1991.39.camel@saalfeld-laptop>
	<1276561263.1991.209.camel@saalfeld-laptop>
	<73d0f364196d4.4c173846@wiscmail.wisc.edu>
Message-ID: <1276680584.19002.23.camel@tomancak-pc-4>

http://pacific.mpi-cbg.de/cgi-bin/gitweb.cgi?p=imglib.git;a=blob;f=mpicbg/imglib/cursor/CursorImpl.java;h=6bafb73226e2b0cb90289a382d4d4769c510d62b;hb=master#l81

public T next(){ fwd(); return getType(); }

That is, next() is fwd() + getType(), whereas getType() might be
computationally expensive.  Sometimes, not for each move, you want to
get the value, then next() would slow things down.

Best,
Stephan


On Tue, 2010-06-15 at 08:22 -0500, Brian Selinsky wrote:
> so what is the difference between fwd() and next()?
> 
> if the same I would prefer next() (for consistency) and previous()
> 
> 
> 
> On 06/14/10, Stephan Saalfeld  <saalfeld at mpi-cbg.de> wrote:
> 
> > Self-correction:
> > fwd() and bck() will not return boolean because I do not want them to
> > check anything by default.  In the following example, all pixels are
> > iterated until an exception (e.g. IndexOutOfBounds on type() call)
> > occurs:
> > 
> > Cursor<T> c;
> > try {
> >     for (;;c.fwd()){
> >         // meat of the loop
> > }
> > catch (Exception e){}
> > 
> > I assume that this is the fastest way to iterate over all pixels
> > assuming that something at the basic language level is throwing an
> > appropriate Exception.
> > 
> > Best,
> > Stephan
> > 
> > 
> > 
> > On Mon, 2010-06-14 at 20:06 +0200, Stephan Saalfeld wrote: 
> > > Hi,
> > > 
> > > we implement java.lang.Iterator<T extends Type<T>> where next() returns
> > > T, so no, next() cannot return boolean, fwd() and back() might do that.
> > > In the coming changes, Image<T> implements java.lang.Iterable<T>, such
> > > that the Java language shortcut works:
> > > 
> > > Image< T > image;
> > > for ( final T : image ) {
> > >     // meat of the loop
> > > }
> > > 
> > > How's that?
> > > 
> > > Currently, Cursor<T> implements Iterable<T> such that you can do:
> > > 
> > > Cursor<T> cursor;
> > > for (final T : cursor ) ...
> > > 
> > > instead,  but that's less sensible and will not stay.
> > > 
> > > Best,
> > > Stephan
> > > 
> > > 
> > > 
> > > 
> > > On Mon, 2010-06-14 at 18:54 +0200, Johannes Schindelin wrote: 
> > > > Hi,
> > > > 
> > > > On Mon, 14 Jun 2010, Stephan Preibisch wrote:
> > > > 
> > > > > This is definitely something we could do as far as the linked iterators
> > > > > work. Right now we did not do that because it is quite often extra work,
> > > > > e.g. if you copy an image you need only one check instead of two:
> > > > > 
> > > > > cursor1, cursor2;
> > > > > 
> > > > > while ( cursor1.hasNext() ) 
> > > > > {
> > > > > 	cursor1.fwd();
> > > > > 	cursor2.fwd();
> > > > > 	// meat of the loop
> > > > > }
> > > > 
> > > > Ah, I see. Maybe just a shortcut
> > > > 
> > > > 	public boolean next() {
> > > >         	if (!hasNext())
> > > >                 	return false;
> > > >         	fwd();
> > > >         	return true;
> > > > 	}
> > > > 
> > > > to optimize for the common case?
> > > > 
> > > > Ciao,
> > > > Dscho
> > > > 
> > > 
> > 
> > 
> > _______________________________________________
> > ImageJ-devel mailing list
> > ImageJ-devel at imagejdev.org
> > http://imagejdev.org/mailman/listinfo/imagej-devel





From grislis at wisc.edu  Wed Jun 16 13:16:47 2010
From: grislis at wisc.edu (Aivar Grislis)
Date: Wed, 16 Jun 2010 13:16:47 -0500
Subject: [ImageJ-devel] [fiji-devel] RE: Simplifying loops?
In-Reply-To: <1276680584.19002.23.camel@tomancak-pc-4>
References: <alpine.DEB.1.00.1006141053490.2689@bonsai2>
	<004201cb0bdf$8610eda0$9232c8e0$@de>
	<alpine.DEB.1.00.1006141853370.2689@bonsai2>
	<1276538817.1991.39.camel@saalfeld-laptop>
	<1276561263.1991.209.camel@saalfeld-laptop>
	<73d0f364196d4.4c173846@wiscmail.wisc.edu>
	<1276680584.19002.23.camel@tomancak-pc-4>
Message-ID: <4C19150F.2060104@wisc.edu>

Cursor<T>  c;
try {
     for (;;c.fwd()){
         // meat of the loop
}
catch (Exception e){}

Using Exceptions for normal program flow might be considered bad Java form, also lumping together IndexOutOfBounds and NoSuchElementException by just catching the general Exception (because it could actually be some other kind of Exception happening).

Cursor.getType() could return null when out of bounds (a possibility Brian mentioned).  Cursor.next() would return null also, since you're deprecating the idea of Cursor being an Iterator, it doesn't have to throw that NoSuchElementException.

(You could check for the null to break out of the loop or the code above would still work, at the expense of having two exceptions: e.g. IndexOutOfBounds caught within Cursor and NullPointerException caught here).

Aivar


On 6/16/10 4:29 AM, Stephan Saalfeld wrote:
> http://pacific.mpi-cbg.de/cgi-bin/gitweb.cgi?p=imglib.git;a=blob;f=mpicbg/imglib/cursor/CursorImpl.java;h=6bafb73226e2b0cb90289a382d4d4769c510d62b;hb=master#l81
>
> public T next(){ fwd(); return getType(); }
>
> That is, next() is fwd() + getType(), whereas getType() might be
> computationally expensive.  Sometimes, not for each move, you want to
> get the value, then next() would slow things down.
>
> Best,
> Stephan
>
>
> On Tue, 2010-06-15 at 08:22 -0500, Brian Selinsky wrote:
>    
>> so what is the difference between fwd() and next()?
>>
>> if the same I would prefer next() (for consistency) and previous()
>>
>>
>>
>> On 06/14/10, Stephan Saalfeld<saalfeld at mpi-cbg.de>  wrote:
>>
>>      
>>> Self-correction:
>>> fwd() and bck() will not return boolean because I do not want them to
>>> check anything by default.  In the following example, all pixels are
>>> iterated until an exception (e.g. IndexOutOfBounds on type() call)
>>> occurs:
>>>
>>> Cursor<T>  c;
>>> try {
>>>      for (;;c.fwd()){
>>>          // meat of the loop
>>> }
>>> catch (Exception e){}
>>>
>>> I assume that this is the fastest way to iterate over all pixels
>>> assuming that something at the basic language level is throwing an
>>> appropriate Exception.
>>>
>>> Best,
>>> Stephan
>>>
>>>
>>>
>>> On Mon, 2010-06-14 at 20:06 +0200, Stephan Saalfeld wrote:
>>>        
>>>> Hi,
>>>>
>>>> we implement java.lang.Iterator<T extends Type<T>>  where next() returns
>>>> T, so no, next() cannot return boolean, fwd() and back() might do that.
>>>> In the coming changes, Image<T>  implements java.lang.Iterable<T>, such
>>>> that the Java language shortcut works:
>>>>
>>>> Image<  T>  image;
>>>> for ( final T : image ) {
>>>>      // meat of the loop
>>>> }
>>>>
>>>> How's that?
>>>>
>>>> Currently, Cursor<T>  implements Iterable<T>  such that you can do:
>>>>
>>>> Cursor<T>  cursor;
>>>> for (final T : cursor ) ...
>>>>
>>>> instead,  but that's less sensible and will not stay.
>>>>
>>>> Best,
>>>> Stephan
>>>>
>>>>
>>>>
>>>>
>>>> On Mon, 2010-06-14 at 18:54 +0200, Johannes Schindelin wrote:
>>>>          
>>>>> Hi,
>>>>>
>>>>> On Mon, 14 Jun 2010, Stephan Preibisch wrote:
>>>>>
>>>>>            
>>>>>> This is definitely something we could do as far as the linked iterators
>>>>>> work. Right now we did not do that because it is quite often extra work,
>>>>>> e.g. if you copy an image you need only one check instead of two:
>>>>>>
>>>>>> cursor1, cursor2;
>>>>>>
>>>>>> while ( cursor1.hasNext() )
>>>>>> {
>>>>>> 	cursor1.fwd();
>>>>>> 	cursor2.fwd();
>>>>>> 	// meat of the loop
>>>>>> }
>>>>>>              
>>>>> Ah, I see. Maybe just a shortcut
>>>>>
>>>>> 	public boolean next() {
>>>>>          	if (!hasNext())
>>>>>                  	return false;
>>>>>          	fwd();
>>>>>          	return true;
>>>>> 	}
>>>>>
>>>>> to optimize for the common case?
>>>>>
>>>>> Ciao,
>>>>> Dscho
>>>>>
>>>>>            
>>>>          
>>>
>>> _______________________________________________
>>> ImageJ-devel mailing list
>>> ImageJ-devel at imagejdev.org
>>> http://imagejdev.org/mailman/listinfo/imagej-devel
>>>        
>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagejdev.org
> http://imagejdev.org/mailman/listinfo/imagej-devel
>    




From saalfeld at mpi-cbg.de  Wed Jun 16 13:46:54 2010
From: saalfeld at mpi-cbg.de (Stephan Saalfeld)
Date: Wed, 16 Jun 2010 20:46:54 +0200
Subject: [ImageJ-devel] [fiji-devel] RE: Simplifying loops?
In-Reply-To: <4C19150F.2060104@wisc.edu>
References: <alpine.DEB.1.00.1006141053490.2689@bonsai2>
	<004201cb0bdf$8610eda0$9232c8e0$@de>
	<alpine.DEB.1.00.1006141853370.2689@bonsai2>
	<1276538817.1991.39.camel@saalfeld-laptop>
	<1276561263.1991.209.camel@saalfeld-laptop>
	<73d0f364196d4.4c173846@wiscmail.wisc.edu>
	<1276680584.19002.23.camel@tomancak-pc-4> <4C19150F.2060104@wisc.edu>
Message-ID: <1276714014.19002.87.camel@tomancak-pc-4>

Hi Aivar,

don't take me too literal, that code was just a crazy example :).  I
fully agree about not lumping together different kinds of exceptions.
Cursor.getType() (it will BTW be renamed to Cursor.type() because it is
not a getter) may or may not throw an Exception when out of bounds.  In
case it does, an appropriate exception is NoSuchElementException that is
thrown by Iterator.  Currently, it does not but it should.  Keep also in
mind, that this exception is by no means a sign for Cursors being out of
bounds.  Cursors with an OutOfBoundsStrategy will very well return a
Type there and not throw such Exception.

I am not deprecating the idea that Cursors are Iterators, why do you
think that?  They are Iterators for convenient loop constructs and
scripting language bindings.  In addition to Iterators, they can also
move without asking for a value which is sometimes desired.

Best,
Stephan


On Wed, 2010-06-16 at 13:16 -0500, Aivar Grislis wrote:
> Cursor<T>  c;
> try {
>      for (;;c.fwd()){
>          // meat of the loop
> }
> catch (Exception e){}
> 
> Using Exceptions for normal program flow might be considered bad Java form, also lumping together IndexOutOfBounds and NoSuchElementException by just catching the general Exception (because it could actually be some other kind of Exception happening).
> 
> Cursor.getType() could return null when out of bounds (a possibility Brian mentioned).  Cursor.next() would return null also, since you're deprecating the idea of Cursor being an Iterator, it doesn't have to throw that NoSuchElementException.
> 
> (You could check for the null to break out of the loop or the code above would still work, at the expense of having two exceptions: e.g. IndexOutOfBounds caught within Cursor and NullPointerException caught here).
> 
> Aivar
> 
> 
> On 6/16/10 4:29 AM, Stephan Saalfeld wrote:
> > http://pacific.mpi-cbg.de/cgi-bin/gitweb.cgi?p=imglib.git;a=blob;f=mpicbg/imglib/cursor/CursorImpl.java;h=6bafb73226e2b0cb90289a382d4d4769c510d62b;hb=master#l81
> >
> > public T next(){ fwd(); return getType(); }
> >
> > That is, next() is fwd() + getType(), whereas getType() might be
> > computationally expensive.  Sometimes, not for each move, you want to
> > get the value, then next() would slow things down.
> >
> > Best,
> > Stephan
> >
> >
> > On Tue, 2010-06-15 at 08:22 -0500, Brian Selinsky wrote:
> >    
> >> so what is the difference between fwd() and next()?
> >>
> >> if the same I would prefer next() (for consistency) and previous()
> >>
> >>
> >>
> >> On 06/14/10, Stephan Saalfeld<saalfeld at mpi-cbg.de>  wrote:
> >>
> >>      
> >>> Self-correction:
> >>> fwd() and bck() will not return boolean because I do not want them to
> >>> check anything by default.  In the following example, all pixels are
> >>> iterated until an exception (e.g. IndexOutOfBounds on type() call)
> >>> occurs:
> >>>
> >>> Cursor<T>  c;
> >>> try {
> >>>      for (;;c.fwd()){
> >>>          // meat of the loop
> >>> }
> >>> catch (Exception e){}
> >>>
> >>> I assume that this is the fastest way to iterate over all pixels
> >>> assuming that something at the basic language level is throwing an
> >>> appropriate Exception.
> >>>
> >>> Best,
> >>> Stephan
> >>>
> >>>
> >>>
> >>> On Mon, 2010-06-14 at 20:06 +0200, Stephan Saalfeld wrote:
> >>>        
> >>>> Hi,
> >>>>
> >>>> we implement java.lang.Iterator<T extends Type<T>>  where next() returns
> >>>> T, so no, next() cannot return boolean, fwd() and back() might do that.
> >>>> In the coming changes, Image<T>  implements java.lang.Iterable<T>, such
> >>>> that the Java language shortcut works:
> >>>>
> >>>> Image<  T>  image;
> >>>> for ( final T : image ) {
> >>>>      // meat of the loop
> >>>> }
> >>>>
> >>>> How's that?
> >>>>
> >>>> Currently, Cursor<T>  implements Iterable<T>  such that you can do:
> >>>>
> >>>> Cursor<T>  cursor;
> >>>> for (final T : cursor ) ...
> >>>>
> >>>> instead,  but that's less sensible and will not stay.
> >>>>
> >>>> Best,
> >>>> Stephan
> >>>>
> >>>>
> >>>>
> >>>>
> >>>> On Mon, 2010-06-14 at 18:54 +0200, Johannes Schindelin wrote:
> >>>>          
> >>>>> Hi,
> >>>>>
> >>>>> On Mon, 14 Jun 2010, Stephan Preibisch wrote:
> >>>>>
> >>>>>            
> >>>>>> This is definitely something we could do as far as the linked iterators
> >>>>>> work. Right now we did not do that because it is quite often extra work,
> >>>>>> e.g. if you copy an image you need only one check instead of two:
> >>>>>>
> >>>>>> cursor1, cursor2;
> >>>>>>
> >>>>>> while ( cursor1.hasNext() )
> >>>>>> {
> >>>>>> 	cursor1.fwd();
> >>>>>> 	cursor2.fwd();
> >>>>>> 	// meat of the loop
> >>>>>> }
> >>>>>>              
> >>>>> Ah, I see. Maybe just a shortcut
> >>>>>
> >>>>> 	public boolean next() {
> >>>>>          	if (!hasNext())
> >>>>>                  	return false;
> >>>>>          	fwd();
> >>>>>          	return true;
> >>>>> 	}
> >>>>>
> >>>>> to optimize for the common case?
> >>>>>
> >>>>> Ciao,
> >>>>> Dscho
> >>>>>
> >>>>>            
> >>>>          
> >>>
> >>> _______________________________________________
> >>> ImageJ-devel mailing list
> >>> ImageJ-devel at imagejdev.org
> >>> http://imagejdev.org/mailman/listinfo/imagej-devel
> >>>        
> >
> >
> > _______________________________________________
> > ImageJ-devel mailing list
> > ImageJ-devel at imagejdev.org
> > http://imagejdev.org/mailman/listinfo/imagej-devel
> >    
> 





From grislis at wisc.edu  Wed Jun 16 15:21:06 2010
From: grislis at wisc.edu (Aivar Grislis)
Date: Wed, 16 Jun 2010 15:21:06 -0500
Subject: [ImageJ-devel] [fiji-devel] RE: Simplifying loops?
In-Reply-To: <1276714014.19002.87.camel@tomancak-pc-4>
References: <alpine.DEB.1.00.1006141053490.2689@bonsai2>
	<004201cb0bdf$8610eda0$9232c8e0$@de>
	<alpine.DEB.1.00.1006141853370.2689@bonsai2>
	<1276538817.1991.39.camel@saalfeld-laptop>
	<1276561263.1991.209.camel@saalfeld-laptop>
	<73d0f364196d4.4c173846@wiscmail.wisc.edu>
	<1276680584.19002.23.camel@tomancak-pc-4> <4C19150F.2060104@wisc.edu>
	<1276714014.19002.87.camel@tomancak-pc-4>
Message-ID: <4C193232.305@wisc.edu>

Sorry I misunderstood a comment and jumped to a wrong conclusion about: "Currently, Cursor<T>   implements Iterable<T>   such that you can do...instead,  but that's less sensible_and will not stay_."

Anyway, perhaps there could be a differently-named additional version of next() that returns null (and of fwd()/back() that return booleans), if needed.

Won't "for (;;c.fwd()) {}" loop forever with a Cursor with an OutOfBoundStrategy? :)  I don't mean to keep this thread going on and on; I'm sure you'll sort it all out.

Aivar


On 6/16/10 1:46 PM, Stephan Saalfeld wrote:
> Hi Aivar,
>
> don't take me too literal, that code was just a crazy example :).  I
> fully agree about not lumping together different kinds of exceptions.
> Cursor.getType() (it will BTW be renamed to Cursor.type() because it is
> not a getter) may or may not throw an Exception when out of bounds.  In
> case it does, an appropriate exception is NoSuchElementException that is
> thrown by Iterator.  Currently, it does not but it should.  Keep also in
> mind, that this exception is by no means a sign for Cursors being out of
> bounds.  Cursors with an OutOfBoundsStrategy will very well return a
> Type there and not throw such Exception.
>
> I am not deprecating the idea that Cursors are Iterators, why do you
> think that?  They are Iterators for convenient loop constructs and
> scripting language bindings.  In addition to Iterators, they can also
> move without asking for a value which is sometimes desired.
>
> Best,
> Stephan
>
>
> On Wed, 2010-06-16 at 13:16 -0500, Aivar Grislis wrote:
>    
>> Cursor<T>   c;
>> try {
>>       for (;;c.fwd()){
>>           // meat of the loop
>> }
>> catch (Exception e){}
>>
>> Using Exceptions for normal program flow might be considered bad Java form, also lumping together IndexOutOfBounds and NoSuchElementException by just catching the general Exception (because it could actually be some other kind of Exception happening).
>>
>> Cursor.getType() could return null when out of bounds (a possibility Brian mentioned).  Cursor.next() would return null also, since you're deprecating the idea of Cursor being an Iterator, it doesn't have to throw that NoSuchElementException.
>>
>> (You could check for the null to break out of the loop or the code above would still work, at the expense of having two exceptions: e.g. IndexOutOfBounds caught within Cursor and NullPointerException caught here).
>>
>> Aivar
>>
>>
>> On 6/16/10 4:29 AM, Stephan Saalfeld wrote:
>>      
>>> http://pacific.mpi-cbg.de/cgi-bin/gitweb.cgi?p=imglib.git;a=blob;f=mpicbg/imglib/cursor/CursorImpl.java;h=6bafb73226e2b0cb90289a382d4d4769c510d62b;hb=master#l81
>>>
>>> public T next(){ fwd(); return getType(); }
>>>
>>> That is, next() is fwd() + getType(), whereas getType() might be
>>> computationally expensive.  Sometimes, not for each move, you want to
>>> get the value, then next() would slow things down.
>>>
>>> Best,
>>> Stephan
>>>
>>>
>>> On Tue, 2010-06-15 at 08:22 -0500, Brian Selinsky wrote:
>>>
>>>        
>>>> so what is the difference between fwd() and next()?
>>>>
>>>> if the same I would prefer next() (for consistency) and previous()
>>>>
>>>>
>>>>
>>>> On 06/14/10, Stephan Saalfeld<saalfeld at mpi-cbg.de>   wrote:
>>>>
>>>>
>>>>          
>>>>> Self-correction:
>>>>> fwd() and bck() will not return boolean because I do not want them to
>>>>> check anything by default.  In the following example, all pixels are
>>>>> iterated until an exception (e.g. IndexOutOfBounds on type() call)
>>>>> occurs:
>>>>>
>>>>> Cursor<T>   c;
>>>>> try {
>>>>>       for (;;c.fwd()){
>>>>>           // meat of the loop
>>>>> }
>>>>> catch (Exception e){}
>>>>>
>>>>> I assume that this is the fastest way to iterate over all pixels
>>>>> assuming that something at the basic language level is throwing an
>>>>> appropriate Exception.
>>>>>
>>>>> Best,
>>>>> Stephan
>>>>>
>>>>>
>>>>>
>>>>> On Mon, 2010-06-14 at 20:06 +0200, Stephan Saalfeld wrote:
>>>>>
>>>>>            
>>>>>> Hi,
>>>>>>
>>>>>> we implement java.lang.Iterator<T extends Type<T>>   where next() returns
>>>>>> T, so no, next() cannot return boolean, fwd() and back() might do that.
>>>>>> In the coming changes, Image<T>   implements java.lang.Iterable<T>, such
>>>>>> that the Java language shortcut works:
>>>>>>
>>>>>> Image<   T>   image;
>>>>>> for ( final T : image ) {
>>>>>>       // meat of the loop
>>>>>> }
>>>>>>
>>>>>> How's that?
>>>>>>
>>>>>> Currently, Cursor<T>   implements Iterable<T>   such that you can do:
>>>>>>
>>>>>> Cursor<T>   cursor;
>>>>>> for (final T : cursor ) ...
>>>>>>
>>>>>> instead,  but that's less sensible and will not stay.
>>>>>>
>>>>>> Best,
>>>>>> Stephan
>>>>>>
>>>>>>
>>>>>>
>>>>>>
>>>>>> On Mon, 2010-06-14 at 18:54 +0200, Johannes Schindelin wrote:
>>>>>>
>>>>>>              
>>>>>>> Hi,
>>>>>>>
>>>>>>> On Mon, 14 Jun 2010, Stephan Preibisch wrote:
>>>>>>>
>>>>>>>
>>>>>>>                
>>>>>>>> This is definitely something we could do as far as the linked iterators
>>>>>>>> work. Right now we did not do that because it is quite often extra work,
>>>>>>>> e.g. if you copy an image you need only one check instead of two:
>>>>>>>>
>>>>>>>> cursor1, cursor2;
>>>>>>>>
>>>>>>>> while ( cursor1.hasNext() )
>>>>>>>> {
>>>>>>>> 	cursor1.fwd();
>>>>>>>> 	cursor2.fwd();
>>>>>>>> 	// meat of the loop
>>>>>>>> }
>>>>>>>>
>>>>>>>>                  
>>>>>>> Ah, I see. Maybe just a shortcut
>>>>>>>
>>>>>>> 	public boolean next() {
>>>>>>>           	if (!hasNext())
>>>>>>>                   	return false;
>>>>>>>           	fwd();
>>>>>>>           	return true;
>>>>>>> 	}
>>>>>>>
>>>>>>> to optimize for the common case?
>>>>>>>
>>>>>>> Ciao,
>>>>>>> Dscho
>>>>>>>
>>>>>>>
>>>>>>>                
>>>>>>
>>>>>>              
>>>>> _______________________________________________
>>>>> ImageJ-devel mailing list
>>>>> ImageJ-devel at imagejdev.org
>>>>> http://imagejdev.org/mailman/listinfo/imagej-devel
>>>>>
>>>>>            
>>>
>>> _______________________________________________
>>> ImageJ-devel mailing list
>>> ImageJ-devel at imagejdev.org
>>> http://imagejdev.org/mailman/listinfo/imagej-devel
>>>
>>>        
>>      
>
>    

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20100616/4ec4b789/attachment.html>

From rwlentz at wisc.edu  Mon Jun 14 11:49:18 2010
From: rwlentz at wisc.edu (Rick Lentz)
Date: Mon, 14 Jun 2010 11:49:18 -0500
Subject: [ImageJ-devel] Question regarding shortcut assignment operator in
	Java...
Message-ID: <AANLkTikwa_6exsVKu_WOA8eEZiGfGpZC3X00NBX1y9Y6@mail.gmail.com>

Greetings,

  I was running up against several 'bugs' in my implementations of NIO
backed arrays for the ImageJ effort.  I have identified the source of
the bugs.  It appears that the assignment operator '*=' in Java
produces different results for some numbers in comparison to the
expanded version of the notation.  This was surprising to me since I
assumed that use of the shortcut assignment operator in Java (E.g. A
*= B ) would produce the same results as A = A * B.

  Although the initial difference is small, when carried forward for
30 steps over hundreds of iterations... the error (carried forward?)
becomes considerable.

  Here is a snippet that demos the error (all data is float):

//expanded notation
float ad = data2[k][i + w*j] * gka[k]*gja[j]*gia[i];
//existing implementation
data2[k][i + w*j] *= gka[k]*gja[j]*gia[i];
//result of shortcut notation
float ac = data2[k][i + w*j];
//direct comparison
if(ad != ac)
{
	System.out.println("Value at " + (k) + " , " + (i + w*j) + " of " +
ac + " != " + ad );
}
//input values
Value at 0 , 133 of 1.429051E-4 != 1.4290512E-4
Value at 0 , 133 of 1.429051E-4 not = value at 133 of 1.4290512E-4
Component values are 1.0 for gk
Component values are 0.99993896 for gj
Component values are 0.99847525 for gi
Component values are 1.4313207E-4 for data2

 I am leaning towards standardizing the reference implementations to
replace instances of *= with the expanded notation to obtain
consistent results between imagelib NIO types and existing code.  I am
open to feedback regarding this issue and certainly hope that I am
simply overlooking something trivial.

Sincerely,

Rick Lentz
Bascom Hall - "...ever encourage that continual and fearless sifting
and winnowing by which alone the truth can be found"



From bselinsky at wisc.edu  Tue Jun 22 10:18:24 2010
From: bselinsky at wisc.edu (Brian Selinsky)
Date: Tue, 22 Jun 2010 10:18:24 -0500
Subject: [ImageJ-devel] Question regarding shortcut assignment operator
 in Java...
Message-ID: <7330d683133e.4c208df0@wiscmail.wisc.edu>

In any language, floating point arithmetic is going to be limited in accuracy by the size of the datatype used.

As a general rule of thumb, it's ALWAYS a good idea to parenthesize any floating point math, this is because associative and commutative properties may not hold if there is rounding. i.e. a * b * c may not exactly equal c * b * a may not equal a * (b * c)

The *= operator is defined where a *= b * c is exactly equal to a = a * (b * c) which multiplies the b * c first then multiplies a whereas a * b * c multiplies a * b then c. The variance in the rounding based on the 2 different statements explains the difference in the result.

So, basically, consistency is the thing, parenthesize to enforce order and don't assume associative and commutative properties hold.

Not using the *= with floating point is likely a good idea because you are relinquishing control of the order of operations to the language definition rather than defining it yourself when order is potentially important. Never assume you know what the system is going to do.

FYI - Java operator precedence table - http://java.sun.com/docs/books/tutorial/java/nutsandbolts/operators.html



On 06/21/10, Rick Lentz  <rwlentz at wisc.edu> wrote:

> Greetings,
> 
> ? I was running up against several 'bugs' in my implementations of NIO
> backed arrays for the ImageJ effort.? I have identified the source of
> the bugs.? It appears that the assignment operator '*=' in Java
> produces different results for some numbers in comparison to the
> expanded version of the notation.? This was surprising to me since I
> assumed that use of the shortcut assignment operator in Java (E.g. A
> *= B ) would produce the same results as A = A * B.
> 
> ? Although the initial difference is small, when carried forward for
> 30 steps over hundreds of iterations... the error (carried forward?)
> becomes considerable.
> 
> ? Here is a snippet that demos the error (all data is float):
> 
> //expanded notation
> float ad = data2[k][i + w*j] * gka[k]*gja[j]*gia[i];
> //existing implementation
> data2[k][i + w*j] *= gka[k]*gja[j]*gia[i];
> //result of shortcut notation
> float ac = data2[k][i + w*j];
> //direct comparison
> if(ad != ac)
> {
> 	System.out.println("Value at " + (k) + " , " + (i + w*j) + " of " +
> ac + " != " + ad );
> }
> //input values
> Value at 0 , 133 of 1.429051E-4 != 1.4290512E-4
> Value at 0 , 133 of 1.429051E-4 not = value at 133 of 1.4290512E-4
> Component values are 1.0 for gk
> Component values are 0.99993896 for gj
> Component values are 0.99847525 for gi
> Component values are 1.4313207E-4 for data2
> 
> ?I am leaning towards standardizing the reference implementations to
> replace instances of *= with the expanded notation to obtain
> consistent results between imagelib NIO types and existing code.? I am
> open to feedback regarding this issue and certainly hope that I am
> simply overlooking something trivial.
> 
> Sincerely,
> 
> Rick Lentz
> Bascom Hall - "...ever encourage that continual and fearless sifting
> and winnowing by which alone the truth can be found"
> 
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagejdev.org
> http://imagejdev.org/mailman/listinfo/imagej-devel



From eliceiri at facstaff.wisc.edu  Wed Jun 23 07:36:59 2010
From: eliceiri at facstaff.wisc.edu (Kevin W Eliceiri)
Date: Wed, 23 Jun 2010 07:36:59 -0500
Subject: [ImageJ-devel] Imaging talk at UW-Madison today about 3D imaging
	software
Message-ID: <7370b9153164.4c21b99b@wiscmail.wisc.edu>

Hideo Otsuna (postdoc in the lab of Chi-Bin Chien) from the Neurobiology department of Utah will be giving a 11 am Seminar on his biology work in 168 Noland Hall. The title is Imaging Eye and Neuronal Development in Zebrafish. He will discuss his 3D imaging work and software work.

Then at 1:15 he will be demoing his freeware alternative to Volocity, called FluoRender. This presentation will be at LOCI in room 224 Animal Sciences (small conference room next to soda machines). The lecture will be more in depth, the demo will be informal and chance for LOCI programmers to see what he is doing, but also chance to see more closely the software for those doing 3D imaging.

More info on the software and links to movies are below. 

Software info link: http://www.sci.utah.edu/software/46-documentation/137-fluorender.html

reference link: http://www.computer.org/portal/web/csdl/doi/10.1109/TVCG.2009.118

Youtube movies made by FluoRender:

zebrafish 5dpf brain stained with
Gal4 expressed mcherry (red: enhancer trap) , anti-Tubulin (green), ToPro-3 (blue)
http://www.youtube.com/watch?v=zARdPrY8wrc&fmt=22

zebrafish trunk
anti-Tubulin (green), Gal4 expressed mcherry (purple: enhancer trap)
http://www.youtube.com/watch?v=4gj3cOg6n_A&fmt=22

inside of zebrafish trunk
anti-Tubulin(green), ToPro-3(blue)
http://www.youtube.com/watch?v=s8k5Sh3I2Sc&fmt=22

zebrafish 5dpf brain stained with
anti-alpha actin (red), isl2b:GFP (green), isl1:GFP (white), ToPro-3(blue)
http://www.youtube.com/watch?v=80SiTXXK3S0&fmt=22
-- 
Kevin W. Eliceiri
Director
Laboratory for Optical and Computational Instrumentation
http://www.loci.wisc.edu
Room 271 Animal Sciences
1675 Observatory Drive
Madison, WI 53706
Phone: 608-263-6288
Fax: 608-262-4570



From ctrueden at wisc.edu  Mon Jun 28 16:06:43 2010
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Mon, 28 Jun 2010 16:06:43 -0500
Subject: [ImageJ-devel] Biweekly milestones
In-Reply-To: <AANLkTimzOvv2FOPB23iQUV-gn8yDN39Mqj_ucM4P82tz@mail.gmail.com>
References: <AANLkTimzOvv2FOPB23iQUV-gn8yDN39Mqj_ucM4P82tz@mail.gmail.com>
Message-ID: <AANLkTilcWMEEokYTbPz2EHuYuIeqNpKH7pWLCz6ZpNWZ@mail.gmail.com>

Hi everyone,

Today marks the beginning of the next biweekly development cycle (June
28-July 9).

To kick off each cycle, we would normally have a discussion at ~10:30am CST
on the applicable Monday. However, we missed last cycle (June 14-25) since I
was out of the office. And since Aivar and Brian are away today, we will
instead meet tomorrow to discuss goals for this cycle.

If you have open tickets, please update them with your progress, closing any
tickets that have been completed, and adding comments to describe any
progress. That way, the Trac preserves an accurate historical record of the
work we completed during each development cycle. Some time tomorrow I will
close the previous milestone, which will migrate all remaining open tickets
into the next milestone.

Grant, Adam & Lee: We'll look for you guys on Skype tomorrow morning. Once
everyone involved is online, we can do a conference call to go over our
progress over the past two cycles, and goals for this next one.

-Curtis

On Thu, May 27, 2010 at 5:20 PM, Curtis Rueden <ctrueden at wisc.edu> wrote:

> Hi everyone,
>
> As discussed during today's status report, I have configured biweekly
> milestones through the end of the year on the ImageJ Trac. You can view them
> at:
>   http://imagejdev.org/trac/imagej/roadmap
>
> Please use these milestones as a todo list over the course of each two-week
> interval. These milestones will serve as an organizational tool, quick
> reference and declaration to the community of how we are directing our
> individual efforts.
>
> Associated tickets (filed by logging in and clicking the "new ticket"
> button on the top right) need not be complex?just one or two lines to remind
> yourself of the task. When you can, try to break it down to actual "next
> physical action" style tasks (see
> http://zenhabits.net/why-whats-the-next-action-is-the-most-important-question/for a nice article about this), even if you list more than one "next action"
> on the same ticket sometimes.
>
> Cycles will begin on alternating Mondays (starting this Tuesday, June 1,
> due to Memorial Day). On these Mondays, we will review our progress on the
> previous cycle, troubleshoot any roadblocks with existing tickets, push
> incomplete work into the next cycle, etc. On these Mondays, we can do this
> instead of our usual "stand-up" meeting. Grant, it would be good if you
> could join us for these biweekly reviews?we usually meet around 10:30am CST
> (11:30am CST).
>
> Please let me know if you have any questions about it!
>
> -Curtis
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20100628/f3e46119/attachment.html>

From ctrueden at wisc.edu  Wed Jun 30 12:40:22 2010
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Wed, 30 Jun 2010 12:40:22 -0500
Subject: [ImageJ-devel] Tomorrow's status report will be at 2pm
Message-ID: <AANLkTimRqt63rhKBqAzWH1HMOzERJYFGne4Tl9BSSdIG@mail.gmail.com>

Hi everyone,

Due to scheduling issues, my status report tomorrow will take place at 2pm
CDT (3pm EDT).

For those local, the room is still TBD, since all the usual conference rooms
are booked all day.

-Curtis
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20100630/29437a22/attachment.html>

