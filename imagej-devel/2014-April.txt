From jru at stowers.org  Tue Apr  1 16:59:31 2014
From: jru at stowers.org (Unruh, Jay)
Date: Tue, 1 Apr 2014 21:59:31 +0000
Subject: [ImageJ-devel] upload to server missing in new version of Fiji
Message-ID: <275DB4592472454787932C003610546603388A94@MBSRV01.sgc.loc>

Hi All,

It appears that the "Upload to Server" button is missing from the newest FIJI updater.  Anyone have any ideas on how to get it back?

Jay
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140401/7bb8835c/attachment.html>

From Johannes.Schindelin at gmx.de  Tue Apr  1 17:57:46 2014
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Wed, 2 Apr 2014 00:57:46 +0200 (CEST)
Subject: [ImageJ-devel] upload to server missing in new version of Fiji
In-Reply-To: <275DB4592472454787932C003610546603388A94@MBSRV01.sgc.loc>
References: <275DB4592472454787932C003610546603388A94@MBSRV01.sgc.loc>
Message-ID: <alpine.DEB.1.00.1404020056220.14982@s15462909.onlinehome-server.info>

Hi Jay,

On Tue, 1 Apr 2014, Unruh, Jay wrote:

> It appears that the "Upload to Server" button is missing from the newest
> FIJI updater.  Anyone have any ideas on how to get it back?

This is not really a question revolving around development of ImageJ, so a
better place to ask would be imagej at list.nih.gov, just for future
reference.

Usually the "Upload to Server" button is hidden, it is only visible when
you have specified upload information for at least one update site in the
"Manage update sites" dialog.

Ciao,
Johannes


From bnorthan at gmail.com  Wed Apr  2 07:43:35 2014
From: bnorthan at gmail.com (Brian Northan)
Date: Wed, 2 Apr 2014 08:43:35 -0400
Subject: [ImageJ-devel] SimpleITK and maven
Message-ID: <CAMWa8i3YfC=sKs+vBXLTTHzSv2b=f=5=_wvf=BqFzirG57G8CA@mail.gmail.com>

Does anybody know if there is a maven repository for SimpleITK??

I've searched around a bit and couldn't find anything.

Thanks

Brian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140402/fb0686aa/attachment.html>

From Johannes.Schindelin at gmx.de  Wed Apr  2 09:17:21 2014
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Wed, 2 Apr 2014 16:17:21 +0200 (CEST)
Subject: [ImageJ-devel] SimpleITK and maven
In-Reply-To: <CAMWa8i3YfC=sKs+vBXLTTHzSv2b=f=5=_wvf=BqFzirG57G8CA@mail.gmail.com>
References: <CAMWa8i3YfC=sKs+vBXLTTHzSv2b=f=5=_wvf=BqFzirG57G8CA@mail.gmail.com>
Message-ID: <alpine.DEB.1.00.1404021610000.14982@s15462909.onlinehome-server.info>

Hi Brian,

On Wed, 2 Apr 2014, Brian Northan wrote:

> Does anybody know if there is a maven repository for SimpleITK??
> 
> I've searched around a bit and couldn't find anything.

I am not aware of SimpleITK being available via Maven:

	http://search.maven.org/#search|ga|1|simpleitk

Please note that what you ask for is not *exactly* trivial: SimpleITK is a
Java (and Python) wrapper around a *native* library written in C++.

Therefore you get all the wonderful problems of platform-dependent
development: you need to make sure that you have the correct set of
libraries, compiled for your particular operating system and CPU, working
well with your other libraries (this is a particular problem with
libstdc++ on Linux, where you cannot simply take your ITK libraries to
another version of the same operating system, on the same CPU, and expect
things to work).

You also get the problem that depending on your platform, you need to have
the libraries in a directory that is either in the system library search
path or in a directory referenced by the PATH environment variable and/or
the java.library.path property (that must be set *before* the Java Runtime
Environment is started up, any changes after that will be ignored rather
blatantly).

These native libraries can be attached artifacts to the .jar artifacts on
the Maven repository [*1*], but you will never be truly
platform-independent anymore.

Ciao,
Johannes

Footnote *1*: For the ImageJ launcher, we use the nar-maven-plugin which
allows compiling native libraries as part of the Maven build cycle, and it
attaches those native artifacts in the way I described. It is a finicky
process, though, and you will need to know a little bit about GNU libc
internals to actually make it work (before I myself got aware of those
internals, I was baffled how our launcher would not work on an OMX system
with a particular CentOS version, like, at all).


From bnorthan at gmail.com  Wed Apr  2 09:48:09 2014
From: bnorthan at gmail.com (Brian Northan)
Date: Wed, 2 Apr 2014 10:48:09 -0400
Subject: [ImageJ-devel] SimpleITK and maven
In-Reply-To: <alpine.DEB.1.00.1404021610000.14982@s15462909.onlinehome-server.info>
References: <CAMWa8i3YfC=sKs+vBXLTTHzSv2b=f=5=_wvf=BqFzirG57G8CA@mail.gmail.com>
	<alpine.DEB.1.00.1404021610000.14982@s15462909.onlinehome-server.info>
Message-ID: <CAMWa8i3A9xTN8fqbgWTGznrOoF-ThNjNNBcxNXiV0ABrAbggfQ@mail.gmail.com>

Hi Johannes

Thanks for your detailed answer.  I suspected as much.  I will have a look
at nar-maven though.

Brian


On Wed, Apr 2, 2014 at 10:17 AM, Johannes Schindelin <
Johannes.Schindelin at gmx.de> wrote:

> Hi Brian,
>
> On Wed, 2 Apr 2014, Brian Northan wrote:
>
> > Does anybody know if there is a maven repository for SimpleITK??
> >
> > I've searched around a bit and couldn't find anything.
>
> I am not aware of SimpleITK being available via Maven:
>
>         http://search.maven.org/#search|ga|1|simpleitk
>
> Please note that what you ask for is not *exactly* trivial: SimpleITK is a
> Java (and Python) wrapper around a *native* library written in C++.
>
> Therefore you get all the wonderful problems of platform-dependent
> development: you need to make sure that you have the correct set of
> libraries, compiled for your particular operating system and CPU, working
> well with your other libraries (this is a particular problem with
> libstdc++ on Linux, where you cannot simply take your ITK libraries to
> another version of the same operating system, on the same CPU, and expect
> things to work).
>
> You also get the problem that depending on your platform, you need to have
> the libraries in a directory that is either in the system library search
> path or in a directory referenced by the PATH environment variable and/or
> the java.library.path property (that must be set *before* the Java Runtime
> Environment is started up, any changes after that will be ignored rather
> blatantly).
>
> These native libraries can be attached artifacts to the .jar artifacts on
> the Maven repository [*1*], but you will never be truly
> platform-independent anymore.
>
> Ciao,
> Johannes
>
> Footnote *1*: For the ImageJ launcher, we use the nar-maven-plugin which
> allows compiling native libraries as part of the Maven build cycle, and it
> attaches those native artifacts in the way I described. It is a finicky
> process, though, and you will need to know a little bit about GNU libc
> internals to actually make it work (before I myself got aware of those
> internals, I was baffled how our launcher would not work on an OMX system
> with a particular CentOS version, like, at all).
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140402/234829f3/attachment.html>

From Johannes.Schindelin at gmx.de  Wed Apr  2 10:40:43 2014
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Wed, 2 Apr 2014 17:40:43 +0200 (CEST)
Subject: [ImageJ-devel] SimpleITK and maven
In-Reply-To: <CAMWa8i3A9xTN8fqbgWTGznrOoF-ThNjNNBcxNXiV0ABrAbggfQ@mail.gmail.com>
References: <CAMWa8i3YfC=sKs+vBXLTTHzSv2b=f=5=_wvf=BqFzirG57G8CA@mail.gmail.com>
	<alpine.DEB.1.00.1404021610000.14982@s15462909.onlinehome-server.info>
	<CAMWa8i3A9xTN8fqbgWTGznrOoF-ThNjNNBcxNXiV0ABrAbggfQ@mail.gmail.com>
Message-ID: <alpine.DEB.1.00.1404021740030.14982@s15462909.onlinehome-server.info>

Hi Brian,

On Wed, 2 Apr 2014, Brian Northan wrote:

> Thanks for your detailed answer.  I suspected as much.  I will have a look
> at nar-maven though.

Note, however, that the nar-maven-plugin is more intended to be an
alternative to CMake (used by SimpleITK). It will be tricky.

Ciao,
Johannes


From ctrueden at wisc.edu  Thu Apr  3 15:57:50 2014
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Thu, 3 Apr 2014 15:57:50 -0500
Subject: [ImageJ-devel] (headless) command execution
In-Reply-To: <20140313093909.GC25772@informatik.uni-halle.de>
References: <20140313093909.GC25772@informatik.uni-halle.de>
Message-ID: <CADN69ymnF9NOppKn7_qjtxcxup2EM_UiCm=Dv3P6YXtq+Tg+2A@mail.gmail.com>

Hi Stefan,

Very sorry for the long delay in reply. I should be faster in subsequent
replies, if you have further questions.

> What are the precoditions assumed when running a (headless) command

What happens is highly dependent on *how* you invoke the command...

> may the command assume that its initializer, if any, has been executed
> prior to executing its run-Method?

I assume you are familiar with this tutorial:
https://github.com/imagej/imagej-tutorials/blob/master/execute-commands/src/main/java/ExecuteCommands.java

Note that when executing an ImageJ module using the ModuleService, the run
methods (for the past couple of releases) have a "boolean process" flag.
When process=true, the pre- and post-processing steps are run. This notably
includes running the module initializer preprocessing step.

> may the initializer-Method assume some of the parameter of the command
> already set (as e.g. a single ImageDisplay), and of course, which
> parameters?

The InitPreprocessor calls module#initialize(), whose behavior can be
overridden, but the default implementation of which is here:

https://github.com/imagej/imagej/blob/imagej-2.0.0-beta-7.8/core/core/src/main/java/imagej/module/AbstractModule.java#L75

In short: the module initializer is called first, followed by the
individual initializers of each parameter, if any.

As for *when* this occurs: the InitPreprocessor has "HIGH" priority:
https://github.com/imagej/imagej/blob/imagej-2.0.0-beta-7.8/core/core/src/main/java/imagej/module/process/InitPreprocessor.java#L50

So it happens before many other preprocessors:

$ grep 'priority = ' $(git ls-files | grep Preprocessor)
core/core/src/main/java/imagej/display/ActiveDisplayPreprocessor.java: priority
= Priority.VERY_HIGH_PRIORITY)
core/core/src/main/java/imagej/module/process/CheckInputsPreprocessor.java:
priority
= InputHarvester.PRIORITY - 1)
core/core/src/main/java/imagej/module/process/DebugPreprocessor.java:@Plugin(type
= PreprocessorPlugin.class, priority = Priority.FIRST_PRIORITY)
core/core/src/main/java/imagej/module/process/GatewayPreprocessor.java:
priority
= Priority.VERY_HIGH_PRIORITY)
core/core/src/main/java/imagej/module/process/InitPreprocessor.java:@Plugin(type
= PreprocessorPlugin.class, priority = Priority.HIGH_PRIORITY)
core/core/src/main/java/imagej/module/process/LoadInputsPreprocessor.java:
priority
= Priority.VERY_LOW_PRIORITY + 1)
core/core/src/main/java/imagej/module/process/SaveInputsPreprocessor.java:
priority
= Priority.VERY_LOW_PRIORITY - 1)
core/core/src/main/java/imagej/module/process/ServicePreprocessor.java:
priority
= Priority.VERY_HIGH_PRIORITY)
core/core/src/main/java/imagej/module/process/ValidityPreprocessor.java:
priority
= Priority.VERY_HIGH_PRIORITY + 1)
core/data/src/main/java/imagej/data/display/ActiveImagePreprocessor.java:
priority
= Priority.VERY_HIGH_PRIORITY)
core/ui/src/main/java/imagej/ui/FilePreprocessor.java: priority =
Priority.VERY_LOW_PRIORITY + 1)
core/ui/src/main/java/imagej/ui/UIPreprocessor.java:@Plugin(type =
PreprocessorPlugin.class, priority = Priority.VERY_HIGH_PRIORITY)


So the ones that happen before InitPreprocessor are:
1) DebugPreprocessor
2) ValidityPreprocessor
3) ActiveDisplayPreprocessor
4) ActiveImagePreprocessor
5) GatewayPreprocessor
6) ServicePreprocessor
7) UIPreprocessor

The DebugPreprocessor just logs some debugging output. The
ValidityPreprocessor makes sure that the module is fundamentally
well-formed (e.g., no "final" @Parameter variables, since those cannot be
set via reflection). The other five (2-7) all set various types of
variables based on the state of the ImageJ application context -- for
example, all Service parameters are filled in. So that's why you never see
the ImageJ UI prompt for them.

It should be case that Alida can reuse the default pre- and post-processing
plugin stack -- in other words, you should be able to pass "process=true"
to the ModuleService#run and everything will "just work". Let us know if
not, and we can troubleshoot. As long as no UI has been shown, you will be
in headless mode and no dialogs should ever be shown. (If one does pop up,
it is probably a bug.)

> as an example, the DuplicateImage command adds input parameters to
> itself in its initializer-method depending on the inputDisplay. Thus
> is seems that DuplicateImage requires, that inputDisplay is set prior
> to calling its initializer and that the user is asked for further
> parameters lateron.

Yes, it works in that case because the ActiveDisplayPreprocessor runs
before the InitPreprocessor, so inputDisplay is indeed already set.

> more generally, are there parameters of commands set by the standard
> ij2 preprocessos besides a single unresolved Dataset? And is there an
> easy way to figure out what preprocessors are run in which order in
> the standard ij2 context?

Yes, the preprocessors are (by default) those mentioned above. You can get
the list of them programmatically:

pre = pluginService.createInstancesOfType(PreprocessorPlugin.class)


This gives you one instance each of each preprocessor, in priority order.
Alternately, if you don't want to instantiate them but only inspect the
plugin metadata:

infos = pluginService.getPluginsOfType(PreprocessorPlugin.class)


> What is your concept to run a headless command from command line (or
> shell script), which adds input parameters dependent on the value of
> other input parameters?

On the CLI, we'll harvest values from the user at the same point in time
that we currently do it via the UI. So most of the other preprocessing will
be done; there will be a "CLIInputHarvesterPlugin" that prompts the user to
type in these values using System.in or similar. We have not yet created
this preprocessor plugin, but it would be very straightforward. If you need
this, let me know -- it would be a fun side project. :-)

> Do you encourcage to dynamically add input parameters to commands?

Encourage? Definitely not. Unfortunately, there are certain commands that
basically require this functionality. Use your IDE to check the subtype
hierarchy of DynamicCommand to find them. But as a rule of thumb: headless
modules should not be dynamic. Dynamic commands are *much* more challenging
to support across many different environments (CellProfiler, KNIME, OMERO,
Alida, etc.) *much* more challenging.

> Is there (still) a static method to get hold of the context, as a
> while ago was possible via ImageJ.getContext() in order not to (very)
> often create a new context (or it the context impemented as a
> singelton)? And how does this work out if running command "truely"
> headless that is from command line without ij2 GUI?

The SciJava context is definitely not a singleton. But you can use it that
way if you want: just create one a static variable in your own codebase
somewhere; e.g.:


public static final imagej.ImageJ IJ = new imagej.ImageJ();


Then you'll always have your ImageJ gateway, easily accessible from all
your code. But I would caution you that if your design relies on statics
like that, it will be fundamentally less flexible then if you always inject
a Context in places where one is needed. We have taken great pains to make
all of ImageJ2 work in that way...

> is it remnants, that some ContextCommands have services as parameters
> as they - if I understand correctly - could retrievee the services
> from their contex?

We feel that writing the services as @Parameters is cleaner, because those
services are, in some sense, "inputs" to the module's operation. There are
many ways to express a module's inputs, but our goal is for modules to
declare their inputs in the most specific way possible. (We fall short of
that goal in many places, but are very open to refactoring to improve
things on a case by case basis.)

For example, you could write:


@Parameter

private Context context;


And then call "context.service(ModuleService.class).run(...)" but that is
less specific than:

@Parameter

private ModuleService moduleService;


And then calling "moduleService.run(...)". This latter form more clearly
expresses the fact that it is actually the ModuleService, and not the
Context as a whole, that is required for operation.

As another example, you could declare an ImageDisplayService parameter and
then use it to extract the active image display, then extract the active
dataset from that, and finally process it. But it is much cleaner to
declare the parameter as a Dataset in the first place, so that the module
*could* be used with inputs besides just the active image display's active
dataset. For other environments (CellProfiler/KNIME/OMERO/Alida/etc.), the
notion of an "active image display" might not make sense, so using a
Dataset inputs is better.

> has ij2 already support to execute a headless command from the command
> line or shell script

I actually added something like that last week: a rudimentary interactive
script interpreter. It is mainly for testing the ImageJ OPS project right
now, but it supports whatever scripting language you want to use, with
whatever ImageJ code you want to throw at it.

https://github.com/imagej/imagej-scripting-cli

Example of usage:

$ git clone git://github.com/imagej/imagej-scripting-cli
... code is downloaded ...
$ cd imagej-scripting-cli
$ mvn
... code compiles ...
$ mvn exec:exec
... Maven spits out some stuff ...
ImageJ script interpreter: javascript
> dataset = ij.dataset().open("/Users/curtis/data/toucan.png");
toucan.png
> w = dataset.max(0);
160
> h = dataset.max(1);
148

> future = ij.command().run("imagej.plugins.commands.app.AboutImageJ",
true, []);
java.util.concurrent.FutureTask at 2698dd08
> module = future.get();
imagej.plugins.commands.app.AboutImageJ
> module.getOutput("display").getClass();
class imagej.data.display.DefaultImageDisplay


Once we have the CLI input harvesting plugin, this will be a little slicker
in that "ij.module().run(...)" and "ij.command().run(...)" will be usable
for modules that take "real" inputs.

Regards,
Curtis

On Thu, Mar 13, 2014 at 4:39 AM, Stefan Posch <posch at informatik.uni-halle.de
> wrote:

> Hi Curtis, hi Johannes,
>
> we have a few questions regarding commands and command execution
> to wrap them for our graphical editor and also command line execution
> of operators resp. commands.
>
> What are the precoditions assumed when running a (headless) command
>
>   o may the command assume that its initializer, if any, has been executed
> prior to executing its run-Method?
>
>   o may the initializer-Method assume some of the parameter of the command
> already set
>     (as e.g. a single ImageDisplay), and of course, which parameters?
>
>     as an example, the DuplicateImage command adds input parameters to
> itself
>     in its initializer-method depending on the inputDisplay.
>     Thus is seems that DuplicateImage requires, that inputDisplay is set
> prior to
>     calling its initializer and that the user is asked for further
> parameters lateron.
>
>   o more generally, are there parameters of commands set by the standard
> ij2 preprocessos
>     besides a single unresolved Dataset?
>     And is there an easy way to figure out
>     what preprocessors are run in which order in the standard ij2 context?
>
> - What is your concept to run a headless command from command line (or
> shell script), which
>   adds input parameters dependent on the value of other input parameters?
>
>   Do you encourcage to dynamically add input parameters to commands?
>
> - Is there (still) a static method to get hold of the context, as a while
> ago was
>   possible via ImageJ.getContext() in order not to (very) often create a
> new
>   context (or it the context impemented as a singelton)?
>   And how does this work out if running command "truely" headless that is
>   from command line without ij2 GUI?
>
> - is it remnants, that some ContextCommands have services as parameters
>   as they - if I understand correctly - could retrievee the services from
> their contex?
>
> - has ij2 already support to execute a headless command from the command
> line or shell script
>
> Thanks a lot and cheers
>
> Stefan
> --
> Prof. Dr.-Ing. Stefan Posch,
>         Institut fuer Informatik, Martin-Luther-Universitaet
> Halle-Wittenberg
>         Von-Seckendorff-Platz 1, 06099 Halle (Saale)
> phone:  ++49 345 55-24728
> fax:    ++49 345 55-27039
> e-mail: Stefan.Posch at informatik.uni-halle.de
> www:    www.informatik.uni-halle.de/~posch/
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140403/f9d00437/attachment-0001.html>

From G.Landini at bham.ac.uk  Sat Apr  5 05:00:08 2014
From: G.Landini at bham.ac.uk (Gabriel Landini)
Date: Sat, 05 Apr 2014 11:00:08 +0100
Subject: [ImageJ-devel] last release of HistThresh
In-Reply-To: <CAPOrs_0pxqYQXmrkG5-g4Q5AEm+N1AmmGpdy=7nBR0+sLWw+8g@mail.gmail.com>
References: <CAPOrs_2CNBQ2-XeTVUY==3dfk1ne0bK+RKfnoYfdAa78wck+Gg@mail.gmail.com>
	<2538155.P8zXbz1z0Z@linux-0>
	<CAPOrs_0pxqYQXmrkG5-g4Q5AEm+N1AmmGpdy=7nBR0+sLWw+8g@mail.gmail.com>
Message-ID: <2692475.ShoGJIgc9c@linux-g>

On Saturday 05 Apr 2014 03:07:44 Carn? Draug wrote:
> I have finally managed to contact the original author, Antti Niemist?,
> who sent me all the files. For future reference, I changed the
> repository mentioned before [3], using the exact files he sent me,
> including both versions. I added a note to the README file about the
> ImageJ ports.

Just to clarify the wrong attribution, in the History section.
https://github.com/carandraug/histthresh/blob/master/README.md
It was me who originally ported Antti's methods to ImageJ 1.X, ending up in 
the authothresolds plugins.

Not sure if Barry ported those from IJ1 to IJ2 or directly from Antti's code, 
better confirm with him directly.

Cheers

Gabriel



From Johannes.Schindelin at gmx.de  Sat Apr  5 09:18:42 2014
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Sat, 5 Apr 2014 16:18:42 +0200 (CEST)
Subject: [ImageJ-devel] last release of HistThresh
In-Reply-To: <2692475.ShoGJIgc9c@linux-g>
References: <CAPOrs_2CNBQ2-XeTVUY==3dfk1ne0bK+RKfnoYfdAa78wck+Gg@mail.gmail.com>
	<2538155.P8zXbz1z0Z@linux-0>
	<CAPOrs_0pxqYQXmrkG5-g4Q5AEm+N1AmmGpdy=7nBR0+sLWw+8g@mail.gmail.com>
	<2692475.ShoGJIgc9c@linux-g>
Message-ID: <alpine.DEB.1.00.1404051611310.14982@s15462909.onlinehome-server.info>

Hi,

On Sat, 5 Apr 2014, Gabriel Landini wrote:

> On Saturday 05 Apr 2014 03:07:44 Carn? Draug wrote:
> > I have finally managed to contact the original author, Antti Niemist?,
> > who sent me all the files. For future reference, I changed the
> > repository mentioned before [3], using the exact files he sent me,
> > including both versions. I added a note to the README file about the
> > ImageJ ports.
> 
> Just to clarify the wrong attribution, in the History section.
> https://github.com/carandraug/histthresh/blob/master/README.md
> It was me who originally ported Antti's methods to ImageJ 1.X, ending up in 
> the authothresolds plugins.
> 
> Not sure if Barry ported those from IJ1 to IJ2 or directly from Antti's
> code, better confirm with him directly.

Barry definitely used the Auto Threshold source code (with permission) to
base the BSD-licensed ImageJ2 version. Pull request here:

https://github.com/carandraug/histthresh/pull/1

Ciao,
Dscho


From carandraug at octave.org  Fri Apr  4 21:07:44 2014
From: carandraug at octave.org (=?ISO-8859-1?Q?Carn=EB_Draug?=)
Date: Sat, 5 Apr 2014 03:07:44 +0100
Subject: [ImageJ-devel] last release of HistThresh
In-Reply-To: <2538155.P8zXbz1z0Z@linux-0>
References: <CAPOrs_2CNBQ2-XeTVUY==3dfk1ne0bK+RKfnoYfdAa78wck+Gg@mail.gmail.com>
	<CAKcvfuRQfTHtPAZ2aycJ399hes+vGjD72H-F_4dLcp=EVKLN4w@mail.gmail.com>
	<2538155.P8zXbz1z0Z@linux-0>
Message-ID: <CAPOrs_0pxqYQXmrkG5-g4Q5AEm+N1AmmGpdy=7nBR0+sLWw+8g@mail.gmail.com>

On 19 March 2014 16:02, Gabriel Landini <G.Landini at bham.ac.uk> wrote:
> On Tuesday 18 Mar 2014 18:31:58 Barry DeZonia wrote:
>> I am no longer working with the lab that worked with Antti. I have looked
>> at the backups I made when I left and I do not have a copy of Antti's work.
>> Some people in my old lab might have it and they check this mailing list.
>> However I have also CCed Gabriel Landini (affiliated with Fiji) as he
>> worked with me on this a bit and may have made a copy of the code.
>>
>> On Tue, Mar 18, 2014 at 5:04 PM, Carn? Draug <carandraug at octave.org> wrote:
>> > Hi Barry
>> >
>> > early last year you have contacted Antti Niemist? about his HistThresh
>> > toolbox [1]. This was a Matlab toolbox for image thresholding which he
>> > released under GPLv2+. In the mailing list, he agreed to release it
>> > under BSD for ImageJ2 development.
>> >
>> > Unfortunately, it appears that he no longer works at the Tampere
>> > University of Technology and the website for the project has been
>> > taken down. His previous email address has also been cancelled and I
>> > couldn't find his new contact. I tried to use wayback machine to
>> > salvage his project, but the last backup [2] was before the last
>> > release (he made one release prompted by your email which fixed a
>> > couple of bugs in the minimum and maximum likelihood method). I have
>> > made a github repository with the version I found [3]
>> >
>> > I made an Octave port which works fine for me [4] but I know some
>> > Matlab users who would like to use it. Would you happen to have made a
>> > backup of the last release he made?
>> >
>> > Thanks in advance,
>> > Carn?
>> >
>> > [1] http://imagej.net/pipermail/imagej-devel/2013-February/001404.html
>> > [2]
>> > http://web.archive.org/web/20120628113512/http://www.cs.tut.fi/~ant/histth
>> > resh/ [3] https://github.com/carandraug/histthresh
>> > [4]
>> > https://sourceforge.net/p/octave/image/ci/default/tree/inst/graythresh.m
>
> Hi Barry, Carn?,
> This is the only version I have of the maximum likelihood estimator
> (th_maxlik.m) code from Anti's website. The date of the file in my computer is
> 2/Nov/2004.
> His method uses the th_minimum.m procedure as a first approximation, which in
> turn uses the bimodtest.m and others (also attached), but in my endeavours of
> porting the th_maxlik method in Java for IJ I failed miserably in reproducing
> the results that the code gave for matlab (shown in the pdf attached).
> I spent some time with this particular method trying to resolve what was the
> issue, but I never succeeded, so rather than having a broken method, I left it
> our from the autothreshold plugin.
>
> I hope it is useful.

Thank you all.

I have finally managed to contact the original author, Antti Niemist?,
who sent me all the files. For future reference, I changed the
repository mentioned before [3], using the exact files he sent me,
including both versions. I added a note to the README file about the
ImageJ ports.

Carn?


[3] https://github.com/carandraug/histthresh


From schindelin at wisc.edu  Mon Apr  7 16:06:07 2014
From: schindelin at wisc.edu (Johannes Schindelin)
Date: Mon, 07 Apr 2014 23:06:07 +0200 (CEST)
Subject: [ImageJ-devel] ImgLib split?
Message-ID: <alpine.DEB.1.00.1404072255470.14982@s15462909.onlinehome-server.info>

Hi Tobias, Stephan & Stephan,

certainly you saw Curtis' recent mail about our plans for ImageJ2?
Basically, we want to release a version of ImageJ whose user interface
looks like ImageJ1, but internally uses all the goodies on which we worked
so hard these past years.

That includes ImgLib2, of course, so we would need to bring parts of
ImgLib2 out of beta. In particular, we found it unwise to always version
all of ImgLib2 in unison. Rather, there should be releases of the
individual components whenever there should be new releases: bug fixes,
API enhancements, API-breaking major new developments.

As always, Curtis & I are ready to help with all of that stuff, in
particular with helpers making release engineering close to fun. Our
central goal in that respect is to make it as easy as possible to switch
between A) reproducible builds with release couplings; and B)
tightly-coupled builds with snapshot couplings for rapid development
across components.

The first step would be to break the multi-module ImgLib2 repository apart
(much in the way we split out imglib2-tests and friends, except that we
split out *all* of the individual projects). We do not see any other way
to get only that part of ImgLib2 out of beta that we really need for the
ImageJ2 release...

Are you okay with that plan?

Ciao,
Dscho

P.S. We are planning to split up imagej.git in very much the same way.



From pietzsch at mpi-cbg.de  Tue Apr  8 01:49:36 2014
From: pietzsch at mpi-cbg.de (Tobias Pietzsch)
Date: Tue, 8 Apr 2014 08:49:36 +0200
Subject: [ImageJ-devel] ImgLib split?
In-Reply-To: <alpine.DEB.1.00.1404072255470.14982@s15462909.onlinehome-server.info>
References: <alpine.DEB.1.00.1404072255470.14982@s15462909.onlinehome-server.info>
Message-ID: <6563745C-5545-4ED5-9851-B96A88214CDB@mpi-cbg.de>

Hi Johannes and Curtis,

> certainly you saw Curtis' recent mail about our plans for ImageJ2?
I must have missed that. Can you send a link?

First of all: in principle, I have no problem with that if it is necessary.
I would just ask that Curtis or you explain for a half hour or so these magic release engineering helpers over skype. (It would by the way also be nice to know how this currently works. I have no idea, how I would do a "proper beta release" if I wanted to do so? I would appreciate some pointers to documentation or scripts etc.)

That being said, here are my concerns and questions:

My fear with splitting subprojects is that this will make it harder to consistently refactor across subprojects, (or clean up behind commits that don't), see this discussion https://github.com/imglib/imglib/pull/23 (last 10 messages or so).
How can we pull this off consistently?

Also I image that we will require quite a bit more of "git logistics" with split projects. For example, assume that I want to make a new topic branch that touches more than one subproject (which easily happens when refactoring). Will I have to make topic branches in all subprojects? Is there a way to relate these other than manually by using the same branch names across projects, etc?
How will Jenkins deal with this decoupled situation: I will merge my topic branches into master in each of the subprojects sequentially. This will produce a lot of failing intermediate builds in Jenkins, right? I think this will complicate hunting down errors.
Overall, I'm a bit afraid of the additional overhead.

How about doing decoupled versions without splitting up the git repository? It seems to me that this would be an easy way to avoid the downsides mentioned before.


One more thing: If you want to bring imglib core out of beta, we should probably do a clean-up.
There are things that are in core now, I would not consider ready for release (ROIs come to mind).
So either we live with rapidly growing major version numbers due to frequent API breaks (fine with me) or split out the not-quite-ready parts into their own subprojects (also fine with me).

Stephans, what do you think?


best regards,
Tobias

On Apr 7, 2014, at 11:06 PM, Johannes Schindelin <schindelin at wisc.edu> wrote:

> Hi Tobias, Stephan & Stephan,
> 
> certainly you saw Curtis' recent mail about our plans for ImageJ2?
> Basically, we want to release a version of ImageJ whose user interface
> looks like ImageJ1, but internally uses all the goodies on which we worked
> so hard these past years.
> 
> That includes ImgLib2, of course, so we would need to bring parts of
> ImgLib2 out of beta. In particular, we found it unwise to always version
> all of ImgLib2 in unison. Rather, there should be releases of the
> individual components whenever there should be new releases: bug fixes,
> API enhancements, API-breaking major new developments.
> 
> As always, Curtis & I are ready to help with all of that stuff, in
> particular with helpers making release engineering close to fun. Our
> central goal in that respect is to make it as easy as possible to switch
> between A) reproducible builds with release couplings; and B)
> tightly-coupled builds with snapshot couplings for rapid development
> across components.
> 
> The first step would be to break the multi-module ImgLib2 repository apart
> (much in the way we split out imglib2-tests and friends, except that we
> split out *all* of the individual projects). We do not see any other way
> to get only that part of ImgLib2 out of beta that we really need for the
> ImageJ2 release...
> 
> Are you okay with that plan?
> 
> Ciao,
> Dscho
> 
> P.S. We are planning to split up imagej.git in very much the same way.
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140408/1ee1ec9b/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140408/1ee1ec9b/attachment.pgp>

From ctrueden at wisc.edu  Tue Apr  8 16:24:10 2014
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Tue, 8 Apr 2014 16:24:10 -0500
Subject: [ImageJ-devel] ImgLib split?
In-Reply-To: <6563745C-5545-4ED5-9851-B96A88214CDB@mpi-cbg.de>
References: <alpine.DEB.1.00.1404072255470.14982@s15462909.onlinehome-server.info>
	<6563745C-5545-4ED5-9851-B96A88214CDB@mpi-cbg.de>
Message-ID: <CADN69ynFcz6jqw2tnb10CB6ZfC1c60Wi3uLHudVtwc5w13j_nA@mail.gmail.com>

Hi Tobias,

> I must have missed that. Can you send a link?

https://list.nih.gov/cgi-bin/wa.exe?A2=IMAGEJ;8570535e.1404

> I would just ask that Curtis or you explain for a half hour or so
> these magic release engineering helpers over skype.

Happy to do it, once it is all in place. Early progress is here:
* https://github.com/scijava/pom-scijava/compare/developer-profiles
Though in general we are moving toward this:
* https://github.com/scijava/scijava-maven-plugin

The idea being to have a Maven plugin that eliminates tediousness in
various ways.

Unfortunately, developing this infrastructure cannot be our priority before
June 1.

> My fear with splitting subprojects is that this will make it harder to
> consistently refactor across subprojects, (or clean up behind commits
> that don't), see this discussion
> https://github.com/imglib/imglib/pull/23 (last 10 messages or so). How
> can we pull this off consistently?

That is a fair concern. However, as long as all affected projects are open
in Eclipse, and coupled with project couplings at the time, the refactoring
will cover everything. If someone does a refactoring while excluding a
downstream project, the easiest solution I know to "fix it" later is to
check out the old version of the code prior to performing the refactoring
and reperform it with the project linkage in place this time.

> Also I image that we will require quite a bit more of "git logistics"
> with split projects. For example, assume that I want to make a new
> topic branch that touches more than one subproject (which easily
> happens when refactoring).

This is actually a larger concern to me. However, it comes down to how
mature the project is. When you are in the incubation phase (pre-release),
then these refactorings are common, and SNAPSHOT couplings with a
multi-module Maven project are desirable. However, once you become released
and stable, there is an increased need to maintain backwards compatibility.
In that case, you really want to *avoid* those sorts of refactorings in the
future. I mean sure, you can do them, but you must also maintain backwards
compatibility, meaning that you leave the old API there too (often
@Deprecated). In that common scenario, you probably actually want to alter
only one project at a time, then make sure the changes in a "low-level"
project like imglib2 core do not adversely affect downstream "higher-level"
projects such as imglib2-realtransform.

> How will Jenkins deal with this decoupled situation: I will merge my
> topic branches into master in each of the subprojects sequentially.
> This will produce a lot of failing intermediate builds in Jenkins,
> right?

No, because each component is pinned to release versions of other
components. So changing master of one component will have no effect on the
Jenkins builds of other components. You would need to do a release of
component A, then update component B's dependency to the new version of A,
before the Jenkins build would be affected.

It is useful locally to pin a bunch of components together temporarily
using SNAPSHOTs. But you never want that pin to make it onto the master
branch, or else the build will be irreproducible. So one of our goals is to
make it as easy as possible to toggle your local developer configuration
between release and snapshot couplings, while simultaneously making it as
difficult as possible to accidentally commit and push code that uses or
requires the SNAPSHOT bindings to work.

> How about doing decoupled versions without splitting up the git
> repository? It seems to me that this would be an easy way to avoid the
> downsides mentioned before.

It would avoid some of them, and cause others...

> One more thing: If you want to bring imglib core out of beta, we
> should probably do a clean-up. There are things that are in core now,
> I would not consider ready for release (ROIs come to mind). So either
> we live with rapidly growing major version numbers due to frequent API
> breaks (fine with me) or split out the not-quite-ready parts into
> their own subprojects (also fine with me).

It is not a matter of "if" but "when". We simply cannot leave ImgLib2 in
beta forever. That said, ImgLib2 does not need to be released before ImageJ
2.0.0's June 1 deadline, because that deadline has very limited scope. The
new N-dimensional data model is not included with that. But we will need to
bite the bullet eventually, possibly even later this year...

> either we live with rapidly growing major version numbers due to
> frequent API breaks (fine with me)

To a limited extent I am also fine with that. But I think we should impose
a limit; e.g., "no more than one major release bump per year" or some such.
Ideally much less often, if ever. Keep in mind that in a highly extensible
framework like ImageJ, every breaking change can have enormous disruptive
consequences. The fact that ImgLib2 is not stable and released with a
guaranteed-not-to-break-later API has surely stunted its adoption. We can
discuss and refine more as the projects continue to mature.

Regards,
Curtis


On Tue, Apr 8, 2014 at 1:49 AM, Tobias Pietzsch <pietzsch at mpi-cbg.de> wrote:

> Hi Johannes and Curtis,
>
> certainly you saw Curtis' recent mail about our plans for ImageJ2?
>
> I must have missed that. Can you send a link?
>
> First of all: in principle, I have no problem with that if it is necessary.
> I would just ask that Curtis or you explain for a half hour or so these
> magic release engineering helpers over skype. (It would by the way also be
> nice to know how this currently works. I have no idea, how I would do a
> "proper beta release" if I wanted to do so... I would appreciate some
> pointers to documentation or scripts etc.)
>
> That being said, here are my concerns and questions:
>
> My fear with splitting subprojects is that this will make it harder to
> consistently refactor across subprojects, (or clean up behind commits that
> don't), see this discussion https://github.com/imglib/imglib/pull/23 (last
> 10 messages or so).
> How can we pull this off consistently?
>
> Also I image that we will require quite a bit more of "git logistics" with
> split projects. For example, assume that I want to make a new topic branch
> that touches more than one subproject (which easily happens when
> refactoring). Will I have to make topic branches in all subprojects? Is
> there a way to relate these other than manually by using the same branch
> names across projects, etc?
> How will Jenkins deal with this decoupled situation: I will merge my topic
> branches into master in each of the subprojects sequentially. This will
> produce a lot of failing intermediate builds in Jenkins, right? I think
> this will complicate hunting down errors.
> Overall, I'm a bit afraid of the additional overhead.
>
> How about doing decoupled versions without splitting up the git
> repository? It seems to me that this would be an easy way to avoid the
> downsides mentioned before.
>
>
> One more thing: If you want to bring imglib core out of beta, we should
> probably do a clean-up.
> There are things that are in core now, I would not consider ready for
> release (ROIs come to mind).
> So either we live with rapidly growing major version numbers due to
> frequent API breaks (fine with me) or split out the not-quite-ready parts
> into their own subprojects (also fine with me).
>
> Stephans, what do you think?
>
>
> best regards,
> Tobias
>
> On Apr 7, 2014, at 11:06 PM, Johannes Schindelin <schindelin at wisc.edu>
> wrote:
>
> Hi Tobias, Stephan & Stephan,
>
> certainly you saw Curtis' recent mail about our plans for ImageJ2?
> Basically, we want to release a version of ImageJ whose user interface
> looks like ImageJ1, but internally uses all the goodies on which we worked
> so hard these past years.
>
> That includes ImgLib2, of course, so we would need to bring parts of
> ImgLib2 out of beta. In particular, we found it unwise to always version
> all of ImgLib2 in unison. Rather, there should be releases of the
> individual components whenever there should be new releases: bug fixes,
> API enhancements, API-breaking major new developments.
>
> As always, Curtis & I are ready to help with all of that stuff, in
> particular with helpers making release engineering close to fun. Our
> central goal in that respect is to make it as easy as possible to switch
> between A) reproducible builds with release couplings; and B)
> tightly-coupled builds with snapshot couplings for rapid development
> across components.
>
> The first step would be to break the multi-module ImgLib2 repository apart
> (much in the way we split out imglib2-tests and friends, except that we
> split out *all* of the individual projects). We do not see any other way
> to get only that part of ImgLib2 out of beta that we really need for the
> ImageJ2 release...
>
> Are you okay with that plan?
>
> Ciao,
> Dscho
>
> P.S. We are planning to split up imagej.git in very much the same way.
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140408/a4ef165b/attachment.html>

From preibischs at janelia.hhmi.org  Tue Apr  8 22:54:14 2014
From: preibischs at janelia.hhmi.org (Stephan Preibisch)
Date: Wed, 9 Apr 2014 13:54:14 +1000
Subject: [ImageJ-devel] ImgLib split?
In-Reply-To: <CADN69ynFcz6jqw2tnb10CB6ZfC1c60Wi3uLHudVtwc5w13j_nA@mail.gmail.com>
References: <alpine.DEB.1.00.1404072255470.14982@s15462909.onlinehome-server.info>
	<6563745C-5545-4ED5-9851-B96A88214CDB@mpi-cbg.de>
	<CADN69ynFcz6jqw2tnb10CB6ZfC1c60Wi3uLHudVtwc5w13j_nA@mail.gmail.com>
Message-ID: <56563B68-7845-4165-A81E-A0779CD71BD7@janelia.hhmi.org>

Hi guys,

I definitely see the need to fix ImgLib2 core for a release, but that really did not change much recently I feel -- maybe we finally need to define what the core should actually be, we started with that on the hackathon in Madison but never really finished.

I support Tobias's position, I have only used ImgLib2 recently, not done any development on it. So he has a much better perspective on it than I have. I am happy to discuss it with Tobias in detail when I am in Dresden in two weeks. We have to do software integration anyways.

Cheers,
Steffi

On Apr 9, 2014, at 7:24 , Curtis Rueden wrote:

> Hi Tobias,
> 
> > I must have missed that. Can you send a link?
> 
> https://list.nih.gov/cgi-bin/wa.exe?A2=IMAGEJ;8570535e.1404
> 
> > I would just ask that Curtis or you explain for a half hour or so
> > these magic release engineering helpers over skype.
> 
> Happy to do it, once it is all in place. Early progress is here:
> * https://github.com/scijava/pom-scijava/compare/developer-profiles
> Though in general we are moving toward this:
> * https://github.com/scijava/scijava-maven-plugin
> 
> The idea being to have a Maven plugin that eliminates tediousness in various ways.
> 
> Unfortunately, developing this infrastructure cannot be our priority before June 1.
> 
> > My fear with splitting subprojects is that this will make it harder to
> > consistently refactor across subprojects, (or clean up behind commits
> > that don't), see this discussion
> > https://github.com/imglib/imglib/pull/23 (last 10 messages or so). How
> > can we pull this off consistently?
> 
> That is a fair concern. However, as long as all affected projects are open in Eclipse, and coupled with project couplings at the time, the refactoring will cover everything. If someone does a refactoring while excluding a downstream project, the easiest solution I know to "fix it" later is to check out the old version of the code prior to performing the refactoring and reperform it with the project linkage in place this time.
> 
> > Also I image that we will require quite a bit more of "git logistics"
> > with split projects. For example, assume that I want to make a new
> > topic branch that touches more than one subproject (which easily
> > happens when refactoring).
> 
> This is actually a larger concern to me. However, it comes down to how mature the project is. When you are in the incubation phase (pre-release), then these refactorings are common, and SNAPSHOT couplings with a multi-module Maven project are desirable. However, once you become released and stable, there is an increased need to maintain backwards compatibility. In that case, you really want to *avoid* those sorts of refactorings in the future. I mean sure, you can do them, but you must also maintain backwards compatibility, meaning that you leave the old API there too (often @Deprecated). In that common scenario, you probably actually want to alter only one project at a time, then make sure the changes in a "low-level" project like imglib2 core do not adversely affect downstream "higher-level" projects such as imglib2-realtransform.
> 
> > How will Jenkins deal with this decoupled situation: I will merge my
> > topic branches into master in each of the subprojects sequentially.
> > This will produce a lot of failing intermediate builds in Jenkins,
> > right?
> 
> No, because each component is pinned to release versions of other components. So changing master of one component will have no effect on the Jenkins builds of other components. You would need to do a release of component A, then update component B's dependency to the new version of A, before the Jenkins build would be affected.
> 
> It is useful locally to pin a bunch of components together temporarily using SNAPSHOTs. But you never want that pin to make it onto the master branch, or else the build will be irreproducible. So one of our goals is to make it as easy as possible to toggle your local developer configuration between release and snapshot couplings, while simultaneously making it as difficult as possible to accidentally commit and push code that uses or requires the SNAPSHOT bindings to work.
> 
> > How about doing decoupled versions without splitting up the git
> > repository? It seems to me that this would be an easy way to avoid the
> > downsides mentioned before.
> 
> It would avoid some of them, and cause others...
> 
> > One more thing: If you want to bring imglib core out of beta, we
> > should probably do a clean-up. There are things that are in core now,
> > I would not consider ready for release (ROIs come to mind). So either
> > we live with rapidly growing major version numbers due to frequent API
> > breaks (fine with me) or split out the not-quite-ready parts into
> > their own subprojects (also fine with me).
> 
> It is not a matter of "if" but "when". We simply cannot leave ImgLib2 in beta forever. That said, ImgLib2 does not need to be released before ImageJ 2.0.0's June 1 deadline, because that deadline has very limited scope. The new N-dimensional data model is not included with that. But we will need to bite the bullet eventually, possibly even later this year...
> 
> > either we live with rapidly growing major version numbers due to
> > frequent API breaks (fine with me)
> 
> To a limited extent I am also fine with that. But I think we should impose a limit; e.g., "no more than one major release bump per year" or some such. Ideally much less often, if ever. Keep in mind that in a highly extensible framework like ImageJ, every breaking change can have enormous disruptive consequences. The fact that ImgLib2 is not stable and released with a guaranteed-not-to-break-later API has surely stunted its adoption. We can discuss and refine more as the projects continue to mature.
> 
> Regards,
> Curtis
> 
> 
> On Tue, Apr 8, 2014 at 1:49 AM, Tobias Pietzsch <pietzsch at mpi-cbg.de> wrote:
> Hi Johannes and Curtis,
> 
>> certainly you saw Curtis' recent mail about our plans for ImageJ2?
> I must have missed that. Can you send a link?
> 
> First of all: in principle, I have no problem with that if it is necessary.
> I would just ask that Curtis or you explain for a half hour or so these magic release engineering helpers over skype. (It would by the way also be nice to know how this currently works. I have no idea, how I would do a "proper beta release" if I wanted to do so? I would appreciate some pointers to documentation or scripts etc.)
> 
> That being said, here are my concerns and questions:
> 
> My fear with splitting subprojects is that this will make it harder to consistently refactor across subprojects, (or clean up behind commits that don't), see this discussion https://github.com/imglib/imglib/pull/23 (last 10 messages or so).
> How can we pull this off consistently?
> 
> Also I image that we will require quite a bit more of "git logistics" with split projects. For example, assume that I want to make a new topic branch that touches more than one subproject (which easily happens when refactoring). Will I have to make topic branches in all subprojects? Is there a way to relate these other than manually by using the same branch names across projects, etc?
> How will Jenkins deal with this decoupled situation: I will merge my topic branches into master in each of the subprojects sequentially. This will produce a lot of failing intermediate builds in Jenkins, right? I think this will complicate hunting down errors.
> Overall, I'm a bit afraid of the additional overhead.
> 
> How about doing decoupled versions without splitting up the git repository? It seems to me that this would be an easy way to avoid the downsides mentioned before.
> 
> 
> One more thing: If you want to bring imglib core out of beta, we should probably do a clean-up.
> There are things that are in core now, I would not consider ready for release (ROIs come to mind).
> So either we live with rapidly growing major version numbers due to frequent API breaks (fine with me) or split out the not-quite-ready parts into their own subprojects (also fine with me).
> 
> Stephans, what do you think?
> 
> 
> best regards,
> Tobias
> 
> On Apr 7, 2014, at 11:06 PM, Johannes Schindelin <schindelin at wisc.edu> wrote:
> 
>> Hi Tobias, Stephan & Stephan,
>> 
>> certainly you saw Curtis' recent mail about our plans for ImageJ2?
>> Basically, we want to release a version of ImageJ whose user interface
>> looks like ImageJ1, but internally uses all the goodies on which we worked
>> so hard these past years.
>> 
>> That includes ImgLib2, of course, so we would need to bring parts of
>> ImgLib2 out of beta. In particular, we found it unwise to always version
>> all of ImgLib2 in unison. Rather, there should be releases of the
>> individual components whenever there should be new releases: bug fixes,
>> API enhancements, API-breaking major new developments.
>> 
>> As always, Curtis & I are ready to help with all of that stuff, in
>> particular with helpers making release engineering close to fun. Our
>> central goal in that respect is to make it as easy as possible to switch
>> between A) reproducible builds with release couplings; and B)
>> tightly-coupled builds with snapshot couplings for rapid development
>> across components.
>> 
>> The first step would be to break the multi-module ImgLib2 repository apart
>> (much in the way we split out imglib2-tests and friends, except that we
>> split out *all* of the individual projects). We do not see any other way
>> to get only that part of ImgLib2 out of beta that we really need for the
>> ImageJ2 release...
>> 
>> Are you okay with that plan?
>> 
>> Ciao,
>> Dscho
>> 
>> P.S. We are planning to split up imagej.git in very much the same way.
>> 
> 
> 
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140409/9eaa96d1/attachment-0001.html>

From bnorthan at gmail.com  Wed Apr  9 13:34:11 2014
From: bnorthan at gmail.com (Brian Northan)
Date: Wed, 9 Apr 2014 14:34:11 -0400
Subject: [ImageJ-devel] Jython error
Message-ID: <CAMWa8i37SdSX563rvefa=4MKkvy0uo1D5C-mbZU-MuTY5Sby4Q@mail.gmail.com>

Hi

I just updated to pom-scijava-1.55 and am having trouble running a jython
script (was working fine until I updated, I hadn't updated in a few weeks
so I don't know exactly when it broke).

when I call "os.path.exists" I get...

"java.lang.IncompatibleClassChangeError: Found class
com.kenai.jffi.InvocationBuffer, but interface was expected"

I thought maybe the imagej jython version had been updated but it looks
like it is still 2.5.2.

I did see that JRuby was updated about a month ago.  Googling the error I
actually get something that occurred in ImageJ over one year ago...

http://code.google.com/p/fiji-bi/source/detail?r=4f02393741c9bedafb32722af2ee5c3fef0b53bb

Any chance the same thing happened??

If so I thought I'd let you know.  If not the problem is probably on my end
and I will continue sleuthing.

Thanks

Brian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140409/2d053360/attachment.html>

From Johannes.Schindelin at gmx.de  Wed Apr  9 16:02:26 2014
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Wed, 9 Apr 2014 23:02:26 +0200 (CEST)
Subject: [ImageJ-devel] Jython error
In-Reply-To: <CAMWa8i37SdSX563rvefa=4MKkvy0uo1D5C-mbZU-MuTY5Sby4Q@mail.gmail.com>
References: <CAMWa8i37SdSX563rvefa=4MKkvy0uo1D5C-mbZU-MuTY5Sby4Q@mail.gmail.com>
Message-ID: <alpine.DEB.1.00.1404092259031.14982@s15462909.onlinehome-server.info>

Hi Brian,

On Wed, 9 Apr 2014, Brian Northan wrote:

> I just updated to pom-scijava-1.55

I hope you mean pom-scijava 1.155, not 1.55.

> and am having trouble running a jython script (was working fine until I
> updated, I hadn't updated in a few weeks so I don't know exactly when it
> broke).
> 
> when I call "os.path.exists" I get...
> 
> "java.lang.IncompatibleClassChangeError: Found class
> com.kenai.jffi.InvocationBuffer, but interface was expected"

It is one of those problems caused by other software maintainers being
overly happy to include soon-to-be-outdated dependencies in their .jar
files. In particular, when I run

$ ./bin/find-jar-for-class.bsh com.kenai.jffi.InvocationBuffer
Class com.kenai.jffi.InvocationBuffer is in .../jruby-complete-1.7.11.jar
Class com.kenai.jffi.InvocationBuffer is in .../jython-2.5.2.jar
Class com.kenai.jffi.InvocationBuffer is in .../jruby-1.6.7.2.jar

I see that the class/interface is in the two biggest offenders: JRuby
and Jython. Most likely, one of them has an obsolete version of jffi
bundled, and another one accesses that obsolete version by mistake.

If you have jruby 1.6.7.2, try to delete that .jar (it is a game of luck
which of your .jar files appears in the class path first, so I would
strongly suggest to delete it rather than renaming it).

Ciao,
Johannes


From bnorthan at gmail.com  Thu Apr 10 07:18:14 2014
From: bnorthan at gmail.com (Brian Northan)
Date: Thu, 10 Apr 2014 08:18:14 -0400
Subject: [ImageJ-devel] Jython error
In-Reply-To: <alpine.DEB.1.00.1404092259031.14982@s15462909.onlinehome-server.info>
References: <CAMWa8i37SdSX563rvefa=4MKkvy0uo1D5C-mbZU-MuTY5Sby4Q@mail.gmail.com>
	<alpine.DEB.1.00.1404092259031.14982@s15462909.onlinehome-server.info>
Message-ID: <CAMWa8i23tuR+ymD8R=EGYLSVc1C6ECL=tWUMJO=dSGMNUmhPgg@mail.gmail.com>

Hi Johannes

It seems the "problem" is jruby-complete-1.7.11.jar.  I think this was only
added recently.

If I delete this the jython scripts work again.  But I am guessing it is
actually jython-2.5.2.jar that has the obsolete version of jffi.

Should jython-2.5.2.jar be updated as to be compatible with
jruby-complete-1.7.11.jar??

Thanks

Brian


On Wed, Apr 9, 2014 at 5:02 PM, Johannes Schindelin <
Johannes.Schindelin at gmx.de> wrote:

> Hi Brian,
>
> On Wed, 9 Apr 2014, Brian Northan wrote:
>
> > I just updated to pom-scijava-1.55
>
> I hope you mean pom-scijava 1.155, not 1.55.
>
> > and am having trouble running a jython script (was working fine until I
> > updated, I hadn't updated in a few weeks so I don't know exactly when it
> > broke).
> >
> > when I call "os.path.exists" I get...
> >
> > "java.lang.IncompatibleClassChangeError: Found class
> > com.kenai.jffi.InvocationBuffer, but interface was expected"
>
> It is one of those problems caused by other software maintainers being
> overly happy to include soon-to-be-outdated dependencies in their .jar
> files. In particular, when I run
>
> $ ./bin/find-jar-for-class.bsh com.kenai.jffi.InvocationBuffer
> Class com.kenai.jffi.InvocationBuffer is in .../jruby-complete-1.7.11.jar
> Class com.kenai.jffi.InvocationBuffer is in .../jython-2.5.2.jar
> Class com.kenai.jffi.InvocationBuffer is in .../jruby-1.6.7.2.jar
>
> I see that the class/interface is in the two biggest offenders: JRuby
> and Jython. Most likely, one of them has an obsolete version of jffi
> bundled, and another one accesses that obsolete version by mistake.
>
> If you have jruby 1.6.7.2, try to delete that .jar (it is a game of luck
> which of your .jar files appears in the class path first, so I would
> strongly suggest to delete it rather than renaming it).
>
> Ciao,
> Johannes
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140410/8df0c0b7/attachment.html>

From posch at informatik.uni-halle.de  Thu Apr 10 09:01:27 2014
From: posch at informatik.uni-halle.de (Stefan Posch)
Date: Thu, 10 Apr 2014 16:01:27 +0200
Subject: [ImageJ-devel] (headless) command execution
In-Reply-To: <CADN69ymnF9NOppKn7_qjtxcxup2EM_UiCm=Dv3P6YXtq+Tg+2A@mail.gmail.com>
References: <20140313093909.GC25772@informatik.uni-halle.de>
	<CADN69ymnF9NOppKn7_qjtxcxup2EM_UiCm=Dv3P6YXtq+Tg+2A@mail.gmail.com>
Message-ID: <20140410140127.GR28601@informatik.uni-halle.de>

Hi Curtis,

thank you very much for the details answers (and I did not mean to press you with
regard to "delays" - this goes, of course, also for the future).

Though very helpful a few issues are still open:

>> What are the precoditions assumed when running a (headless) command
> What happens is highly dependent on *how* you invoke the command...

   Maybe I was unclear on this issue. May question is, what does a method 
   of a Command (e.g. its initializer, the run method) or rather the implementor
   may assumed to have "happend".

   Or other way round: in case the run-method of OpenFile command used in the tutorial 
   requires the initializer to have been executed:
   Is the run-method responsible to check, if it has already been executed (e.g. if called
   via the invokeWithArgs or invokeWihtMap methods of the tutorial) or not
   (if e.g. called via invokeFrmoJava).
   Or is it the callers responsibility to ensure the the initializer has been already been
   executed before actually running the OpenFile command (if it indeed requires the initializer to
   have been invoked beforehand).

   The same questions goes for the initializer method: may it assume that a single Dataset
   parameter has already been set? And if so, may it asume other prerequisites as well?
   E.g. it seems to me that the initializer of DuplicateImage would probably crash if
   the inputDisplay is null.
   Or is it the other way round: That whoever (indirectly) invokes the initializer is
   responsible for certain parameters to be set in advance.

   Besides interesting for a programmer of a Command we are interested in this issue
   to be able to wrap IJ2 commands in order to run them from our GUI (originaly design
   for alida operators), our command line runner,
   and to support them in our graphical editor for alida/mitobo operators and hopefully
   ij2 commands (at least head less and non DynamicCommands)

> It should be case that Alida can reuse the default pre- and post-processing
> plugin stack -- in other words, you should be able to pass "process=true"
> to the ModuleService#run and everything will "just work". Let us know if
> not, and we can troubleshoot. As long as no UI has been shown, you will be
> in headless mode and no dialogs should ever be shown. (If one does pop up,
> it is probably a bug.)

  I am not sure whether we can recycle all IJ2s preprocessors as there might be differences
  in the concept of parameter handling.

  But trying to reused (some of) them "by hand", not by using the Modules run method,
  I somehow got stuck, as obviously I do not understand the concepts
  properly. Maybe you are willing to help with this.

  In the attached zip of a tiny maven project using ij2 (2.0.0-beta-7.8)
  there is a command RunTestOp which tries to invoke a IJTestOp command "by hand".
  I first create a CommandInfo for IJTestOp, then a CommandModule for this info,
  collects all preprocessors and (try to) invoke them for the CommandModule created.
  I disabled invoking of the InitPreprocessor, as it crashes with a null pointer exception:
    Exception in thread "main" java.lang.NullPointerException
	at imagej.command.CommandModule.initialize(CommandModule.java:144)
	at imagej.module.process.InitPreprocessor.process(InitPreprocessor.java:61)
	at mainroutine.RunTestOp.main(RunTestOp.java:49)

  Additionally it seems to be that creating the CommandInfo already invokes preprocessors,
  however the initializer of IJTestOp is not invoked.
 
  And the ImageDisplayService is also still null.
  
  BTW: when diving a little bit into the code I realized that 
   Service and Context @Parameters of Commands are nor reflected in the CommandInfo.
   Somehow I was confused when I saw, that the ServicePreprocessor's process method
   looks for Service and Context parameters in the moduls CommandInfo.inputs().
   Could there ever by any?

> modules should not be dynamic. Dynamic commands are *much* more challenging
> to support across many different environments (CellProfiler, KNIME, OMERO,
> Alida, etc.) *much* more challenging.
 Is it easily possible to state what makes a Command a DynamicCommand,
 and what is the difference to interactive() commands?

> On the CLI, we'll harvest values from the user at the same point in time
> that we currently do it via the UI. So most of the other preprocessing will
> be done; there will be a "CLIInputHarvesterPlugin" that prompts the user to
> type in these values using System.in or similar. We have not yet created
> this preprocessor plugin, but it would be very straightforward. If you need
> this, let me know -- it would be a fun side project. :-)
   We have one "command line oprunner" for alida 
   (which does not work interactively, thus can be used also from shell-scripts,
   e.g. for parameter tuning). And as noted above would like to support also 
   ij2 commands.

> The SciJava context is definitely not a singleton. But you can use it that
> way if you want: just create one a static variable in your own codebase
> somewhere; e.g.:
> 
> 
> public static final imagej.ImageJ IJ = new imagej.ImageJ();

   I was aware of the option to create a context but was/am reluctant to use
   it (in excess) due to overhead considerations. Just looking at the logging output
   it seems pretty time consuming. Is this impression wrong?

   In addition I am able to create only on instance of imagej.ImageJ, the second
   constructor crashes. See the file createContext.log in the zip which results from
   running RunTestOp. 
   (It seems to me the creating a second instance of DefaultLegacyService fails,
   and I faintly remeber to have read somewhere that only one instance of the 
   DefaultLegacyService may exist ??)

A new (and for the moment last) question:
  The Command EquationDataValues.java ist annotated as headless and has a @Parameter
  of type Button. Is this as intended?

Again thanks a lot

Best regards    Stefan


From Johannes.Schindelin at gmx.de  Thu Apr 10 09:45:12 2014
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Thu, 10 Apr 2014 16:45:12 +0200 (CEST)
Subject: [ImageJ-devel] Jython error
In-Reply-To: <CAMWa8i23tuR+ymD8R=EGYLSVc1C6ECL=tWUMJO=dSGMNUmhPgg@mail.gmail.com>
References: <CAMWa8i37SdSX563rvefa=4MKkvy0uo1D5C-mbZU-MuTY5Sby4Q@mail.gmail.com>
	<alpine.DEB.1.00.1404092259031.14982@s15462909.onlinehome-server.info>
	<CAMWa8i23tuR+ymD8R=EGYLSVc1C6ECL=tWUMJO=dSGMNUmhPgg@mail.gmail.com>
Message-ID: <alpine.DEB.1.00.1404101641570.14982@s15462909.onlinehome-server.info>

Hi Brian,

On Thu, 10 Apr 2014, Brian Northan wrote:

> It seems the "problem" is jruby-complete-1.7.11.jar.  I think this was
> only added recently.
> 
> If I delete this the jython scripts work again.  But I am guessing it is
> actually jython-2.5.2.jar that has the obsolete version of jffi.

Ah, that's quite possible: if Jython's code path into JFFI causes mixing
between JFFI versions.

> Should jython-2.5.2.jar be updated as to be compatible with
> jruby-complete-1.7.11.jar??

Hopefully an update to a newer Jython would fix it. Niko Ehrenfeuchter
tested this and uploaded it to the unibas update site; if you activate
that update site, maybe it will work for you even in the presence of
jruby-complete?

Ideally, of course, we would have only non-fat .jar files (i.e. .jar files
that do not bundle other dependencies within). It will be a major
undertaking, I fear, so I won't be able to tackle it at least until June.

Ciao,
Johannes


From ctrueden at wisc.edu  Thu Apr 10 10:50:16 2014
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Thu, 10 Apr 2014 10:50:16 -0500
Subject: [ImageJ-devel] Jython error
In-Reply-To: <alpine.DEB.1.00.1404101641570.14982@s15462909.onlinehome-server.info>
References: <CAMWa8i37SdSX563rvefa=4MKkvy0uo1D5C-mbZU-MuTY5Sby4Q@mail.gmail.com>
	<alpine.DEB.1.00.1404092259031.14982@s15462909.onlinehome-server.info>
	<CAMWa8i23tuR+ymD8R=EGYLSVc1C6ECL=tWUMJO=dSGMNUmhPgg@mail.gmail.com>
	<alpine.DEB.1.00.1404101641570.14982@s15462909.onlinehome-server.info>
Message-ID: <CADN69ynjBCwH8UW9UwOQwph8nqBH9gHb2sE4+-Xt_mS51i8UQw@mail.gmail.com>

Hi Dscho,

> Ideally, of course, we would have only non-fat .jar files (i.e. .jar
> files that do not bundle other dependencies within). It will be a
> major undertaking, I fear, so I won't be able to tackle it at least
> until June.

I filed an issue so we will remember for later:

   https://github.com/fiji/fiji/issues/83

Regards,
Curtis


On Thu, Apr 10, 2014 at 9:45 AM, Johannes Schindelin <
Johannes.Schindelin at gmx.de> wrote:

> Hi Brian,
>
> On Thu, 10 Apr 2014, Brian Northan wrote:
>
> > It seems the "problem" is jruby-complete-1.7.11.jar.  I think this was
> > only added recently.
> >
> > If I delete this the jython scripts work again.  But I am guessing it is
> > actually jython-2.5.2.jar that has the obsolete version of jffi.
>
> Ah, that's quite possible: if Jython's code path into JFFI causes mixing
> between JFFI versions.
>
> > Should jython-2.5.2.jar be updated as to be compatible with
> > jruby-complete-1.7.11.jar??
>
> Hopefully an update to a newer Jython would fix it. Niko Ehrenfeuchter
> tested this and uploaded it to the unibas update site; if you activate
> that update site, maybe it will work for you even in the presence of
> jruby-complete?
>
> Ideally, of course, we would have only non-fat .jar files (i.e. .jar files
> that do not bundle other dependencies within). It will be a major
> undertaking, I fear, so I won't be able to tackle it at least until June.
>
> Ciao,
> Johannes
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140410/c270b8b0/attachment-0001.html>

From ctrueden at wisc.edu  Thu Apr 10 11:41:05 2014
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Thu, 10 Apr 2014 11:41:05 -0500
Subject: [ImageJ-devel] ImgLib split?
In-Reply-To: <56563B68-7845-4165-A81E-A0779CD71BD7@janelia.hhmi.org>
References: <alpine.DEB.1.00.1404072255470.14982@s15462909.onlinehome-server.info>
	<6563745C-5545-4ED5-9851-B96A88214CDB@mpi-cbg.de>
	<CADN69ynFcz6jqw2tnb10CB6ZfC1c60Wi3uLHudVtwc5w13j_nA@mail.gmail.com>
	<56563B68-7845-4165-A81E-A0779CD71BD7@janelia.hhmi.org>
Message-ID: <CADN69ynOEJ=PxyGeYmyGFdodjY4mcM9i5txkufdiS5F4Wv0SkQ@mail.gmail.com>

Hi Steffi & Tobias,

> I am happy to discuss it with Tobias in detail when I am in Dresden in
> two weeks.

Thanks! I agree that ImgLib2 core has been quite stable lately. Hopefully
there are not too many more API changes needed before a 2.0.0 release.

One thing that has been less stable (and still needs more API changes) is
the imglib2-meta package. It is becoming increasingly clear to me that the
imglib2-meta and ij-data components are redundant and should be merged. We
especially should not have both ImgPlus *and* Dataset. So I want to merge
them and call it something like "imagej-core" (since the current "ij-core"
has nothing to do with images specifically and will be migrating up to the
SciJava layer [1]). Then it would be one less component for the ImgLib2
team to worry about maintaining.

As an added benefit, the current ImgLib2 ROI class hierarchy could also be
migrated into this combined "imagej-core" component, since that one will
*not* be coming out of beta in June. That will give us freedom to improve
it dramatically over the next few months.

If bringing ImgLib2 core out of beta by June is too difficult, then we
could instead do it when we meet in October. That would be a very nice
target for a hackathon!

What do you guys think?

Regards,
Curtis

[1] http://imagej.net/pipermail/imagej-devel/2014-March/001996.html


On Tue, Apr 8, 2014 at 10:54 PM, Stephan Preibisch <
preibischs at janelia.hhmi.org> wrote:

> Hi guys,
>
> I definitely see the need to fix ImgLib2 core for a release, but that
> really did not change much recently I feel -- maybe we finally need to
> define what the core should actually be, we started with that on the
> hackathon in Madison but never really finished.
>
> I support Tobias's position, I have only used ImgLib2 recently, not done
> any development on it. So he has a much better perspective on it than I
> have. I am happy to discuss it with Tobias in detail when I am in Dresden
> in two weeks. We have to do software integration anyways.
>
> Cheers,
> Steffi
>
> On Apr 9, 2014, at 7:24 , Curtis Rueden wrote:
>
> Hi Tobias,
>
> > I must have missed that. Can you send a link?
>
> https://list.nih.gov/cgi-bin/wa.exe?A2=IMAGEJ;8570535e.1404
>
> > I would just ask that Curtis or you explain for a half hour or so
> > these magic release engineering helpers over skype.
>
> Happy to do it, once it is all in place. Early progress is here:
> * https://github.com/scijava/pom-scijava/compare/developer-profiles
> Though in general we are moving toward this:
> * https://github.com/scijava/scijava-maven-plugin
>
> The idea being to have a Maven plugin that eliminates tediousness in
> various ways.
>
> Unfortunately, developing this infrastructure cannot be our priority
> before June 1.
>
> > My fear with splitting subprojects is that this will make it harder to
> > consistently refactor across subprojects, (or clean up behind commits
> > that don't), see this discussion
> > https://github.com/imglib/imglib/pull/23 (last 10 messages or so). How
> > can we pull this off consistently?
>
> That is a fair concern. However, as long as all affected projects are open
> in Eclipse, and coupled with project couplings at the time, the refactoring
> will cover everything. If someone does a refactoring while excluding a
> downstream project, the easiest solution I know to "fix it" later is to
> check out the old version of the code prior to performing the refactoring
> and reperform it with the project linkage in place this time.
>
> > Also I image that we will require quite a bit more of "git logistics"
> > with split projects. For example, assume that I want to make a new
> > topic branch that touches more than one subproject (which easily
> > happens when refactoring).
>
> This is actually a larger concern to me. However, it comes down to how
> mature the project is. When you are in the incubation phase (pre-release),
> then these refactorings are common, and SNAPSHOT couplings with a
> multi-module Maven project are desirable. However, once you become released
> and stable, there is an increased need to maintain backwards compatibility.
> In that case, you really want to *avoid* those sorts of refactorings in the
> future. I mean sure, you can do them, but you must also maintain backwards
> compatibility, meaning that you leave the old API there too (often
> @Deprecated). In that common scenario, you probably actually want to alter
> only one project at a time, then make sure the changes in a "low-level"
> project like imglib2 core do not adversely affect downstream "higher-level"
> projects such as imglib2-realtransform.
>
> > How will Jenkins deal with this decoupled situation: I will merge my
> > topic branches into master in each of the subprojects sequentially.
> > This will produce a lot of failing intermediate builds in Jenkins,
> > right?
>
> No, because each component is pinned to release versions of other
> components. So changing master of one component will have no effect on the
> Jenkins builds of other components. You would need to do a release of
> component A, then update component B's dependency to the new version of A,
> before the Jenkins build would be affected.
>
> It is useful locally to pin a bunch of components together temporarily
> using SNAPSHOTs. But you never want that pin to make it onto the master
> branch, or else the build will be irreproducible. So one of our goals is to
> make it as easy as possible to toggle your local developer configuration
> between release and snapshot couplings, while simultaneously making it as
> difficult as possible to accidentally commit and push code that uses or
> requires the SNAPSHOT bindings to work.
>
> > How about doing decoupled versions without splitting up the git
> > repository? It seems to me that this would be an easy way to avoid the
> > downsides mentioned before.
>
> It would avoid some of them, and cause others...
>
> > One more thing: If you want to bring imglib core out of beta, we
> > should probably do a clean-up. There are things that are in core now,
> > I would not consider ready for release (ROIs come to mind). So either
> > we live with rapidly growing major version numbers due to frequent API
> > breaks (fine with me) or split out the not-quite-ready parts into
> > their own subprojects (also fine with me).
>
> It is not a matter of "if" but "when". We simply cannot leave ImgLib2 in
> beta forever. That said, ImgLib2 does not need to be released before ImageJ
> 2.0.0's June 1 deadline, because that deadline has very limited scope. The
> new N-dimensional data model is not included with that. But we will need to
> bite the bullet eventually, possibly even later this year...
>
> > either we live with rapidly growing major version numbers due to
> > frequent API breaks (fine with me)
>
> To a limited extent I am also fine with that. But I think we should impose
> a limit; e.g., "no more than one major release bump per year" or some such.
> Ideally much less often, if ever. Keep in mind that in a highly extensible
> framework like ImageJ, every breaking change can have enormous disruptive
> consequences. The fact that ImgLib2 is not stable and released with a
> guaranteed-not-to-break-later API has surely stunted its adoption. We can
> discuss and refine more as the projects continue to mature.
>
> Regards,
> Curtis
>
>
> On Tue, Apr 8, 2014 at 1:49 AM, Tobias Pietzsch <pietzsch at mpi-cbg.de>wrote:
>
>> Hi Johannes and Curtis,
>>
>> certainly you saw Curtis' recent mail about our plans for ImageJ2?
>>
>> I must have missed that. Can you send a link?
>>
>> First of all: in principle, I have no problem with that if it is
>> necessary.
>> I would just ask that Curtis or you explain for a half hour or so these
>> magic release engineering helpers over skype. (It would by the way also be
>> nice to know how this currently works. I have no idea, how I would do a
>> "proper beta release" if I wanted to do so... I would appreciate some
>> pointers to documentation or scripts etc.)
>>
>> That being said, here are my concerns and questions:
>>
>> My fear with splitting subprojects is that this will make it harder to
>> consistently refactor across subprojects, (or clean up behind commits that
>> don't), see this discussion https://github.com/imglib/imglib/pull/23 (last
>> 10 messages or so).
>> How can we pull this off consistently?
>>
>> Also I image that we will require quite a bit more of "git logistics"
>> with split projects. For example, assume that I want to make a new topic
>> branch that touches more than one subproject (which easily happens when
>> refactoring). Will I have to make topic branches in all subprojects? Is
>> there a way to relate these other than manually by using the same branch
>> names across projects, etc?
>> How will Jenkins deal with this decoupled situation: I will merge my
>> topic branches into master in each of the subprojects sequentially. This
>> will produce a lot of failing intermediate builds in Jenkins, right? I
>> think this will complicate hunting down errors.
>> Overall, I'm a bit afraid of the additional overhead.
>>
>> How about doing decoupled versions without splitting up the git
>> repository? It seems to me that this would be an easy way to avoid the
>> downsides mentioned before.
>>
>>
>> One more thing: If you want to bring imglib core out of beta, we should
>> probably do a clean-up.
>> There are things that are in core now, I would not consider ready for
>> release (ROIs come to mind).
>> So either we live with rapidly growing major version numbers due to
>> frequent API breaks (fine with me) or split out the not-quite-ready parts
>> into their own subprojects (also fine with me).
>>
>> Stephans, what do you think?
>>
>>
>> best regards,
>> Tobias
>>
>> On Apr 7, 2014, at 11:06 PM, Johannes Schindelin <schindelin at wisc.edu>
>> wrote:
>>
>> Hi Tobias, Stephan & Stephan,
>>
>> certainly you saw Curtis' recent mail about our plans for ImageJ2?
>> Basically, we want to release a version of ImageJ whose user interface
>> looks like ImageJ1, but internally uses all the goodies on which we worked
>> so hard these past years.
>>
>> That includes ImgLib2, of course, so we would need to bring parts of
>> ImgLib2 out of beta. In particular, we found it unwise to always version
>> all of ImgLib2 in unison. Rather, there should be releases of the
>> individual components whenever there should be new releases: bug fixes,
>> API enhancements, API-breaking major new developments.
>>
>> As always, Curtis & I are ready to help with all of that stuff, in
>> particular with helpers making release engineering close to fun. Our
>> central goal in that respect is to make it as easy as possible to switch
>> between A) reproducible builds with release couplings; and B)
>> tightly-coupled builds with snapshot couplings for rapid development
>> across components.
>>
>> The first step would be to break the multi-module ImgLib2 repository apart
>> (much in the way we split out imglib2-tests and friends, except that we
>> split out *all* of the individual projects). We do not see any other way
>> to get only that part of ImgLib2 out of beta that we really need for the
>> ImageJ2 release...
>>
>> Are you okay with that plan?
>>
>> Ciao,
>> Dscho
>>
>> P.S. We are planning to split up imagej.git in very much the same way.
>>
>>
>>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140410/28b945d4/attachment.html>

From posch at informatik.uni-halle.de  Thu Apr 10 15:13:13 2014
From: posch at informatik.uni-halle.de (Stefan Posch)
Date: Thu, 10 Apr 2014 22:13:13 +0200
Subject: [ImageJ-devel] (headless) command execution - missing project
	files
In-Reply-To: <20140410140127.GR28601@informatik.uni-halle.de>
References: <20140313093909.GC25772@informatik.uni-halle.de>
	<CADN69ymnF9NOppKn7_qjtxcxup2EM_UiCm=Dv3P6YXtq+Tg+2A@mail.gmail.com>
	<20140410140127.GR28601@informatik.uni-halle.de>
Message-ID: <20140410201313.GA17926@informatik.uni-halle.de>

sorry. I forgot to attach the project ... here it comes.

Stefan
-------------- next part --------------
A non-text attachment was scrubbed...
Name: ij2-test.zip
Type: application/zip
Size: 6355 bytes
Desc: not available
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140410/fdab75b8/attachment.zip>

From ctrueden at wisc.edu  Thu Apr 10 15:21:46 2014
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Thu, 10 Apr 2014 15:21:46 -0500
Subject: [ImageJ-devel] (headless) command execution
In-Reply-To: <20140410140127.GR28601@informatik.uni-halle.de>
References: <20140313093909.GC25772@informatik.uni-halle.de>
	<CADN69ymnF9NOppKn7_qjtxcxup2EM_UiCm=Dv3P6YXtq+Tg+2A@mail.gmail.com>
	<20140410140127.GR28601@informatik.uni-halle.de>
Message-ID: <CADN69yk49kSFV7+4da+gvL=C=KQQzGRuo8DU+uONMp3_PCqMnA@mail.gmail.com>

Hi Stefan,

> Maybe I was unclear on this issue. May question is, what does a method
> of a Command (e.g. its initializer, the run method) or rather the
> implementor may assumed to have "happend".

No worries, you were clear. The term "preconditions" is a technical
software engineering term, so I know what you meant. I just dodged the
question a bit there, figuring my detailed answers later would clarify
everything. But I guess it still was not clear, sorry...

* The run() method of a module can assume that all required input
parameters have been filled (i.e., are non-null). And the corresponding
post-condition of run() is that all required output parameters are now
filled.

* The initialize() method of a module cannot necessarily assume anything
about the state of its parameters. As you pointed out, ImageJ2 has various
commands right now that *do* assume certain parameters have been filled via
preprocessing. This works in practice (at least from the ImageJ
application), but is not particularly rigorous.

* Similarly, ImageJ2 has several commands which assume their initializer
has been called, but it is not stated as a formal precondition. Most
probably it makes sense to state that in the javadoc, would you agree? In
other words: if you aren't going to include the InitPreprocessor in the
preprocessing chain, you are still somehow responsible for calling
module.initialize() before calling module.run(). Is that fair?

So the main sticky point is what to do about initialize() requiring certain
parameters to be already filled. This is useful for dynamic modules, but
also just for computing defaults -- e.g., setting default
brightness/contrast min & max values to the current display min max of the
input image. So it seems there are two "layers" of input parameters: those
needed before initialize() and those not needed for it.

Maybe we need a way to formally flag these "required before initialize"
parameters in the annotation? What do you think? Would that help you?

In any case, now is the perfect time to get the module framework fully
solidified, since we are on the cusp of migrating it into the
(non-image-specific) SciJava layer. After the June 1 release, we will not
be able to introduce any more breaking changes.

> Besides interesting for a programmer of a Command we are interested in
> this issue to be able to wrap IJ2 commands in order to run them from
> our GUI (originaly design for alida operators), our command line
> runner, and to support them in our graphical editor for alida/mitobo
> operators and hopefully ij2 commands (at least head less and non
> DynamicCommands)

One thing that may interest you is the recent ImageJ OPS announcement:
   http://developer.imagej.net/2014/04/04/announcing-imagej-ops

An Op is just an ImageJ command intended to be fully functional -- i.e.,
all inputs and outputs declared explicitly as parameters, with no side
effects. They are essentially "lower level" commands intended for image
processing, and they might be another good integration point for Alida.
Really, your current implementation should gain access to them "for free"
since they are just a subtype of Commands, but perhaps it makes sense to
special case them somehow since they are in many ways friendlier for
headless & non-dynamic situations?

> I am not sure whether we can recycle all IJ2s preprocessors as there
> might be differences in the concept of parameter handling.

Actually, there is a fair chance you could. It's just that the
ActiveFooPreprocessor style things may either: A) always return null for
you; or B) be populated via some alternate means that you can specify by
extending the DefaultDisplayService, DefaultImageDisplayService, etc., with
overridden method implementations that draw the "active" objects from
somewhere else.

Alternately, it is just fine if they are always null, as long as you pass
them in via the moduleService#run method "Object..." or "Map<String,
Object>" arguments.

> In the attached zip of a tiny maven project using ij2 (2.0.0-beta-7.8)
> there is a command RunTestOp which tries to invoke a IJTestOp command
> "by hand".

It seems the mailing list stripped your attachment. Can you please post on
GitHub?

> I first create a CommandInfo for IJTestOp, then a CommandModule for this
info,
> collects all preprocessors and (try to) invoke them for the CommandModule
created.
> I disabled invoking of the InitPreprocessor, as it crashes with a null
> pointer exception:
>   Exception in thread "main" java.lang.NullPointerException at
>     imagej.command.CommandModule.initialize(CommandModule.java:144)

That error indicates that the CommandModule did not have a context injected
properly. From your description, it sounds like your code is more low-level
than it needs to be. But I'd have to see the code to be certain.

For customizing which pre- and post-processors get run, it is enough to do:

pre = pluginService.createInstancesOfType(PreprocessorPlugin.class);
post = pluginService.createInstancesOfType(PostprocessorPlugin.class);
// then loop over pre and post, removing blacklisted entries
// alternately, loop over pre and post, populating whitelists with desired
entries
moduleService.run(moduleInfo, pre, post, inputName1, inputValue1,
inputName2, inputValue2, ...etc...)

Is that how you were doing it?

// or if you really want to avoid creating instances which you then throw
away...
// you can write:
//   infos = pluginService.getPluginsOfType(PreprocessorPlugin.class)
// and/or:
//   info = pluginService.getPlugin(InitPreprocessor.class)
// get the infos you want onto a list and then call:
//   pre = pluginService.createInstances(info);
// or even this way:
//   pre.add(pluginService.createInstance(InitPreprocessor.class);
// the advantage being that all context is injected automatically for you.

> And the ImageDisplayService is also still null.

Regardless of which preprocessors you use, such service parameters should
not be null, as long as the context has that service associated with it;
see below. Again, I'm guessing you didn't inject the context...

> BTW: when diving a little bit into the code I realized that Service
> and Context @Parameters of Commands are nor reflected in the
> CommandInfo. Somehow I was confused when I saw, that the
> ServicePreprocessor's process method looks for Service and Context
> parameters in the moduls CommandInfo.inputs(). Could there ever by
> any?

Yes. :-) You have found a wrinkle that I didn't expect anyone to notice yet.

In the case of Modules generally (not just Commands), there can certainly
be Service and Context parameters. The prime example there is scripts: we
want to annotate scripts written various languages such as Jython with a
header comment that declares all the typed input and output parameters,
including services. The ServicePreprocessor will take care of filling them,
and the ModuleInfo API will include them when iterating the inputs.

However, in the case of Commands specifically, the Service and Context
fields annotated with @Parameter will actually *not* be reported as
parameters by the ModuleInfo API. It was changed 8 months ago:


https://github.com/imagej/imagej/commit/5a86785506f94dc0e58d5860559903b23fb64187

Unfortunately, I did not bother to elaborate in my commit message on *why*
"we do then need to have a special exclusion for such parameters in the
CommandInfo wrapper" and I've forgotten what problems it caused not to have
that special exclusion.

So this is certainly inconsistent and confusing. Do you think that Commands
should also include service and context inputs when iterating them? If so,
we can try removing that exclusion and see what explodes... ;-)

> I was aware of the option to create a context but was/am reluctant to
> use it (in excess) due to overhead considerations. Just looking at the
> logging output it seems pretty time consuming. Is this impression
> wrong?

Regardless of how you do things, you should be able to keep reusing the
same context. You can either create one static one as I described, or you
can create one non-static one and then pass it around everywhere to things
that need it (either via constructors, setters, or by injecting it as a
@Parameter -- whatever pattern suits your fancy).

That said, we have put a fair amount of effort into optimizing context
creation. What it comes down to is which services are part of the context.
Creating a full-blown ImageJ context (all available services, huge
classpath) on my system takes about 2000ms right now; creating one with
only core SciJava services takes 450ms. This is actually much slower than
last I checked, probably due to the Eclipse Helper making absolutely sure
the annotation metadata is up to date. We will certainly be optimizing this
more in the future -- e.g., if you run outside of the Eclipse development
environment, the Eclipse Helper should not bog things down.

Also, as of
https://github.com/scijava/scijava-common/commit/0fd0e2916d39505e792f1bbd8e56e3de0f1f8904,
the log spam when creating a context has been eliminated by default. (It
got to the point where those log messages were really annoying me. ;-) The
next release will of course include this change.

> In addition I am able to create only on instance of imagej.ImageJ, the
> second constructor crashes. See the file createContext.log in the zip
> which results from running RunTestOp. (It seems to me the creating a
> second instance of DefaultLegacyService fails, and I faintly remeber
> to have read somewhere that only one instance of the
> DefaultLegacyService may exist ??)

Indeed, trying to create two contexts each with a DefaultLegacyService
fails right now. The reasons are complex, but in short, it is a bug. And
unfortunately one we will not be able to address before the June release.
The problem can be avoided by either: A) calling context.dispose() on the
first context before creating the second one; or B) creating additional
contexts beyond the first without a LegacyService (admittedly awkward to
code since you can no longer use the default Context() constructor).

If you urgently need support for multiple simultaneous ImageJ contexts
created with the default constructor while ij-legacy is on the classpath,
and you want to try fixing the bug yourself, we would be happy to elaborate
further so that you can give it a shot.

> The Command EquationDataValues.java ist annotated as headless and has
> a @Parameter of type Button. Is this as intended?

Yes, the "Button" is just a marker interface indicating that the input
harvester UI should render a button with that label which when pressed
calls that callback method. In the case of no input harvester UI, there
will be no button, and the callback will hence never occur. But that should
not interfere with headless operation. Such Button parameters can be safely
ignored on your end.

Note that we recently made the Button interface extend the Optional
interface to clarify the fact that Button "values" are always allowed to be
null, even if the @Parameter of the Button does not declare "required =
false". See:
https://github.com/imagej/imagej/commit/09ed9f9b6178312d86083094732b2a1201f82e16

Let's hope our next exchange does not need to be quite so long winded...

Regards,
Curtis


On Thu, Apr 10, 2014 at 9:01 AM, Stefan Posch <posch at informatik.uni-halle.de
> wrote:

> Hi Curtis,
>
> thank you very much for the details answers (and I did not mean to press
> you with
> regard to "delays" - this goes, of course, also for the future).
>
> Though very helpful a few issues are still open:
>
> >> What are the precoditions assumed when running a (headless) command
> > What happens is highly dependent on *how* you invoke the command...
>
>    Maybe I was unclear on this issue. May question is, what does a method
>    of a Command (e.g. its initializer, the run method) or rather the
> implementor
>    may assumed to have "happend".
>
>    Or other way round: in case the run-method of OpenFile command used in
> the tutorial
>    requires the initializer to have been executed:
>    Is the run-method responsible to check, if it has already been executed
> (e.g. if called
>    via the invokeWithArgs or invokeWihtMap methods of the tutorial) or not
>    (if e.g. called via invokeFrmoJava).
>    Or is it the callers responsibility to ensure the the initializer has
> been already been
>    executed before actually running the OpenFile command (if it indeed
> requires the initializer to
>    have been invoked beforehand).
>
>    The same questions goes for the initializer method: may it assume that
> a single Dataset
>    parameter has already been set? And if so, may it asume other
> prerequisites as well?
>    E.g. it seems to me that the initializer of DuplicateImage would
> probably crash if
>    the inputDisplay is null.
>    Or is it the other way round: That whoever (indirectly) invokes the
> initializer is
>    responsible for certain parameters to be set in advance.
>
>    Besides interesting for a programmer of a Command we are interested in
> this issue
>    to be able to wrap IJ2 commands in order to run them from our GUI
> (originaly design
>    for alida operators), our command line runner,
>    and to support them in our graphical editor for alida/mitobo operators
> and hopefully
>    ij2 commands (at least head less and non DynamicCommands)
>
> > It should be case that Alida can reuse the default pre- and
> post-processing
> > plugin stack -- in other words, you should be able to pass "process=true"
> > to the ModuleService#run and everything will "just work". Let us know if
> > not, and we can troubleshoot. As long as no UI has been shown, you will
> be
> > in headless mode and no dialogs should ever be shown. (If one does pop
> up,
> > it is probably a bug.)
>
>   I am not sure whether we can recycle all IJ2s preprocessors as there
> might be differences
>   in the concept of parameter handling.
>
>   But trying to reused (some of) them "by hand", not by using the Modules
> run method,
>   I somehow got stuck, as obviously I do not understand the concepts
>   properly. Maybe you are willing to help with this.
>
>   In the attached zip of a tiny maven project using ij2 (2.0.0-beta-7.8)
>   there is a command RunTestOp which tries to invoke a IJTestOp command
> "by hand".
>   I first create a CommandInfo for IJTestOp, then a CommandModule for this
> info,
>   collects all preprocessors and (try to) invoke them for the
> CommandModule created.
>   I disabled invoking of the InitPreprocessor, as it crashes with a null
> pointer exception:
>     Exception in thread "main" java.lang.NullPointerException
>         at imagej.command.CommandModule.initialize(CommandModule.java:144)
>         at
> imagej.module.process.InitPreprocessor.process(InitPreprocessor.java:61)
>         at mainroutine.RunTestOp.main(RunTestOp.java:49)
>
>   Additionally it seems to be that creating the CommandInfo already
> invokes preprocessors,
>   however the initializer of IJTestOp is not invoked.
>
>   And the ImageDisplayService is also still null.
>
>   BTW: when diving a little bit into the code I realized that
>    Service and Context @Parameters of Commands are nor reflected in the
> CommandInfo.
>    Somehow I was confused when I saw, that the ServicePreprocessor's
> process method
>    looks for Service and Context parameters in the moduls
> CommandInfo.inputs().
>    Could there ever by any?
>
> > modules should not be dynamic. Dynamic commands are *much* more
> challenging
> > to support across many different environments (CellProfiler, KNIME,
> OMERO,
> > Alida, etc.) *much* more challenging.
>  Is it easily possible to state what makes a Command a DynamicCommand,
>  and what is the difference to interactive() commands?
>
> > On the CLI, we'll harvest values from the user at the same point in time
> > that we currently do it via the UI. So most of the other preprocessing
> will
> > be done; there will be a "CLIInputHarvesterPlugin" that prompts the user
> to
> > type in these values using System.in or similar. We have not yet created
> > this preprocessor plugin, but it would be very straightforward. If you
> need
> > this, let me know -- it would be a fun side project. :-)
>    We have one "command line oprunner" for alida
>    (which does not work interactively, thus can be used also from
> shell-scripts,
>    e.g. for parameter tuning). And as noted above would like to support
> also
>    ij2 commands.
>
> > The SciJava context is definitely not a singleton. But you can use it
> that
> > way if you want: just create one a static variable in your own codebase
> > somewhere; e.g.:
> >
> >
> > public static final imagej.ImageJ IJ = new imagej.ImageJ();
>
>    I was aware of the option to create a context but was/am reluctant to
> use
>    it (in excess) due to overhead considerations. Just looking at the
> logging output
>    it seems pretty time consuming. Is this impression wrong?
>
>    In addition I am able to create only on instance of imagej.ImageJ, the
> second
>    constructor crashes. See the file createContext.log in the zip which
> results from
>    running RunTestOp.
>    (It seems to me the creating a second instance of DefaultLegacyService
> fails,
>    and I faintly remeber to have read somewhere that only one instance of
> the
>    DefaultLegacyService may exist ??)
>
> A new (and for the moment last) question:
>   The Command EquationDataValues.java ist annotated as headless and has a
> @Parameter
>   of type Button. Is this as intended?
>
> Again thanks a lot
>
> Best regards    Stefan
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140410/1869bd7e/attachment-0001.html>

From ctrueden at wisc.edu  Thu Apr 10 15:32:11 2014
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Thu, 10 Apr 2014 15:32:11 -0500
Subject: [ImageJ-devel] (headless) command execution - missing project
	files
In-Reply-To: <20140410201313.GA17926@informatik.uni-halle.de>
References: <20140313093909.GC25772@informatik.uni-halle.de>
	<CADN69ymnF9NOppKn7_qjtxcxup2EM_UiCm=Dv3P6YXtq+Tg+2A@mail.gmail.com>
	<20140410140127.GR28601@informatik.uni-halle.de>
	<20140410201313.GA17926@informatik.uni-halle.de>
Message-ID: <CADN69ym4MQbA8o4LWQ62wqJ4reHfNsB+HkC5eZgzWZTfZqsSYA@mail.gmail.com>

Hi Stefan,

Thanks. Rather than doing this:

  CommandInfo testopInfo = new CommandInfo(IJTestOp.class.getName());
  testopModule = (CommandModule) testopInfo.createModule();

I suggest instead:

  CommandInfo testopInfo = commandService.getCommand(IJTestOp.class);
  testopModule = (CommandModule) moduleService.createModule(testopInfo);

Otherwise, you will have lots of problems because the created module will
not know its context. If you use the service methods, all the injections
are taken care of for you; see:


https://github.com/imagej/imagej/blob/imagej-2.0.0-beta-7.9/core/core/src/main/java/imagej/module/DefaultModuleService.java#L150

Also, rather than:

  testopModule.setInput("ivalIn", 321);
  testopModule.getCommand().run();

I would use the service method:

  moduleService.run(testopModule, false, "ivalIn", 321);

Regards,
Curtis


On Thu, Apr 10, 2014 at 3:13 PM, Stefan Posch <posch at informatik.uni-halle.de
> wrote:

> sorry. I forgot to attach the project ... here it comes.
>
> Stefan
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140410/365b4e77/attachment.html>

From preibischs at janelia.hhmi.org  Fri Apr 11 02:53:57 2014
From: preibischs at janelia.hhmi.org (Stephan Preibisch)
Date: Fri, 11 Apr 2014 17:53:57 +1000
Subject: [ImageJ-devel] Maven problem
Message-ID: <C793319F-EE6A-4541-BB26-7C5044BDDD54@janelia.hhmi.org>

Hi guys,

I am almost there with the new spimreconstruction branch (https://github.com/fiji/spimreconstruction/tree/newspimreconstruction), and I re-implemented the first fusion in ImgLib2. Now I run into the problem that a simple

ImageJFunctions.show( ArrayImgs.floats( new long[]{ 300, 100, 200} ) );

fails with:

Exception in thread "main" java.lang.NoClassDefFoundError: net/imglib2/display/projector/Projector2D
	at net.imglib2.img.display.imagej.ImageJVirtualStack.<init>(ImageJVirtualStack.java:93)
	at net.imglib2.img.display.imagej.ImageJVirtualStackFloat.<init>(ImageJVirtualStackFloat.java:51)
	at net.imglib2.img.display.imagej.ImageJFunctions.wrapFloat(ImageJFunctions.java:238)
	at net.imglib2.img.display.imagej.ImageJFunctions.wrap(ImageJFunctions.java:170)
	at net.imglib2.img.display.imagej.ImageJFunctions.show(ImageJFunctions.java:219)
	at net.imglib2.img.display.imagej.ImageJFunctions.show(ImageJFunctions.java:123)
	at spim.fiji.plugin.Image_Fusion.run(Image_Fusion.java:40)
	at spim.fiji.plugin.Image_Fusion.main(Image_Fusion.java:104)
Caused by: java.lang.ClassNotFoundException: net.imglib2.display.projector.Projector2D
	at java.net.URLClassLoader$1.run(URLClassLoader.java:202)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:190)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:306)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
	... 8 more


I have all imglib projects checked out, up-to-date and maven depencies updated.

If anyone has any idea where this comes from would be great!

Thanks so much,
Steffi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140411/5353898f/attachment.html>

From preibischs at janelia.hhmi.org  Fri Apr 11 03:16:15 2014
From: preibischs at janelia.hhmi.org (Stephan Preibisch)
Date: Fri, 11 Apr 2014 18:16:15 +1000
Subject: [ImageJ-devel] Maven problem
In-Reply-To: <C793319F-EE6A-4541-BB26-7C5044BDDD54@janelia.hhmi.org>
References: <C793319F-EE6A-4541-BB26-7C5044BDDD54@janelia.hhmi.org>
Message-ID: <7E08CF02-31AD-4F2B-995A-95C1EAC44B99@janelia.hhmi.org>

Hi,

Christian helped me, I changed the version of ImgLib2 to ${imglib2.version}, now it works. 

But Eclipse doesn't recognize the opened project anymore (see screenshot). It also complains that "Overriding managed version 2.0.0-beta-25 for imglib2", no idea what that means.

Again, any help would be great.

Thanks a lot,
Steffi


On Apr 11, 2014, at 17:53 , Stephan Preibisch wrote:

> Hi guys,
> 
> I am almost there with the new spimreconstruction branch (https://github.com/fiji/spimreconstruction/tree/newspimreconstruction), and I re-implemented the first fusion in ImgLib2. Now I run into the problem that a simple
> 
> ImageJFunctions.show( ArrayImgs.floats( new long[]{ 300, 100, 200} ) );
> 
> fails with:
> 
> Exception in thread "main" java.lang.NoClassDefFoundError: net/imglib2/display/projector/Projector2D
> 	at net.imglib2.img.display.imagej.ImageJVirtualStack.<init>(ImageJVirtualStack.java:93)
> 	at net.imglib2.img.display.imagej.ImageJVirtualStackFloat.<init>(ImageJVirtualStackFloat.java:51)
> 	at net.imglib2.img.display.imagej.ImageJFunctions.wrapFloat(ImageJFunctions.java:238)
> 	at net.imglib2.img.display.imagej.ImageJFunctions.wrap(ImageJFunctions.java:170)
> 	at net.imglib2.img.display.imagej.ImageJFunctions.show(ImageJFunctions.java:219)
> 	at net.imglib2.img.display.imagej.ImageJFunctions.show(ImageJFunctions.java:123)
> 	at spim.fiji.plugin.Image_Fusion.run(Image_Fusion.java:40)
> 	at spim.fiji.plugin.Image_Fusion.main(Image_Fusion.java:104)
> Caused by: java.lang.ClassNotFoundException: net.imglib2.display.projector.Projector2D
> 	at java.net.URLClassLoader$1.run(URLClassLoader.java:202)
> 	at java.security.AccessController.doPrivileged(Native Method)
> 	at java.net.URLClassLoader.findClass(URLClassLoader.java:190)
> 	at java.lang.ClassLoader.loadClass(ClassLoader.java:306)
> 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
> 	at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
> 	... 8 more
> 
> 
> I have all imglib projects checked out, up-to-date and maven depencies updated.
> 
> If anyone has any idea where this comes from would be great!
> 
> Thanks so much,
> Steffi
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140411/0f988b8c/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: Screen.jpeg
Type: image/jpg
Size: 69246 bytes
Desc: not available
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140411/0f988b8c/attachment-0001.jpg>

From pietzsch at mpi-cbg.de  Fri Apr 11 07:27:05 2014
From: pietzsch at mpi-cbg.de (Tobias Pietzsch)
Date: Fri, 11 Apr 2014 14:27:05 +0200
Subject: [ImageJ-devel] Maven problem
In-Reply-To: <7E08CF02-31AD-4F2B-995A-95C1EAC44B99@janelia.hhmi.org>
References: <C793319F-EE6A-4541-BB26-7C5044BDDD54@janelia.hhmi.org>
	<7E08CF02-31AD-4F2B-995A-95C1EAC44B99@janelia.hhmi.org>
Message-ID: <D2FE2CC5-6211-4A60-BDB0-6930E73435FA@mpi-cbg.de>

Hi Steffi,

Projector2D has been replaced by IterableIntervalProjector2D recently in imglib2 core.
Apparently the version of imglib2 core you have is more recent than 2.0.0-beta-25, because that one doesn't have this change yet.
However, your imglib-ij project probably is build against the beta-25 and thinks Projector2D is still there.
(I'm really not looking forward to the world of split imglib repositories, I fear we'll see a lot of problems like this?)


Instead of overriding individually the version of imglib2, I would recommend just setting the version property in your pom to

	<properties>
		<imglib2.version>2.0.0-SNAPSHOT</imglib2.version>
	</properties>

Then in the actual dependencies don't give any version:

		<dependency>
			<groupId>net.imglib2</groupId>
			<artifactId>imglib2</artifactId>
		</dependency>
		<dependency>
			<groupId>net.imglib2</groupId>
			<artifactId>imglib2-realtransform</artifactId>
		</dependency>

and it should pick the managed one which is now 2.0.0-SNAPSHOT.

Could you try this?

best regards,
Tobias


On Apr 11, 2014, at 10:16 AM, Stephan Preibisch <preibischs at janelia.hhmi.org> wrote:

> Hi,
> 
> Christian helped me, I changed the version of ImgLib2 to ${imglib2.version}, now it works. 
> 
> But Eclipse doesn't recognize the opened project anymore (see screenshot). It also complains that "Overriding managed version 2.0.0-beta-25 for imglib2", no idea what that means.
> 
> Again, any help would be great.
> 
> Thanks a lot,
> Steffi
> 
> <Screen.jpeg>
> On Apr 11, 2014, at 17:53 , Stephan Preibisch wrote:
> 
>> Hi guys,
>> 
>> I am almost there with the new spimreconstruction branch (https://github.com/fiji/spimreconstruction/tree/newspimreconstruction), and I re-implemented the first fusion in ImgLib2. Now I run into the problem that a simple
>> 
>> ImageJFunctions.show( ArrayImgs.floats( new long[]{ 300, 100, 200} ) );
>> 
>> fails with:
>> 
>> Exception in thread "main" java.lang.NoClassDefFoundError: net/imglib2/display/projector/Projector2D
>> 	at net.imglib2.img.display.imagej.ImageJVirtualStack.<init>(ImageJVirtualStack.java:93)
>> 	at net.imglib2.img.display.imagej.ImageJVirtualStackFloat.<init>(ImageJVirtualStackFloat.java:51)
>> 	at net.imglib2.img.display.imagej.ImageJFunctions.wrapFloat(ImageJFunctions.java:238)
>> 	at net.imglib2.img.display.imagej.ImageJFunctions.wrap(ImageJFunctions.java:170)
>> 	at net.imglib2.img.display.imagej.ImageJFunctions.show(ImageJFunctions.java:219)
>> 	at net.imglib2.img.display.imagej.ImageJFunctions.show(ImageJFunctions.java:123)
>> 	at spim.fiji.plugin.Image_Fusion.run(Image_Fusion.java:40)
>> 	at spim.fiji.plugin.Image_Fusion.main(Image_Fusion.java:104)
>> Caused by: java.lang.ClassNotFoundException: net.imglib2.display.projector.Projector2D
>> 	at java.net.URLClassLoader$1.run(URLClassLoader.java:202)
>> 	at java.security.AccessController.doPrivileged(Native Method)
>> 	at java.net.URLClassLoader.findClass(URLClassLoader.java:190)
>> 	at java.lang.ClassLoader.loadClass(ClassLoader.java:306)
>> 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
>> 	at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
>> 	... 8 more
>> 
>> 
>> I have all imglib projects checked out, up-to-date and maven depencies updated.
>> 
>> If anyone has any idea where this comes from would be great!
>> 
>> Thanks so much,
>> Steffi
>> _______________________________________________
>> ImageJ-devel mailing list
>> ImageJ-devel at imagej.net
>> http://imagej.net/mailman/listinfo/imagej-devel
> 
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140411/1df8f6bb/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140411/1df8f6bb/attachment.pgp>

From Johannes.Schindelin at gmx.de  Fri Apr 11 09:26:19 2014
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Fri, 11 Apr 2014 16:26:19 +0200 (CEST)
Subject: [ImageJ-devel] Maven problem
In-Reply-To: <D2FE2CC5-6211-4A60-BDB0-6930E73435FA@mpi-cbg.de>
References: <C793319F-EE6A-4541-BB26-7C5044BDDD54@janelia.hhmi.org>
	<7E08CF02-31AD-4F2B-995A-95C1EAC44B99@janelia.hhmi.org>
	<D2FE2CC5-6211-4A60-BDB0-6930E73435FA@mpi-cbg.de>
Message-ID: <alpine.DEB.1.00.1404111619110.14982@s15462909.onlinehome-server.info>

Hi Tobias,

On Fri, 11 Apr 2014, Tobias Pietzsch wrote:

> Projector2D has been replaced by IterableIntervalProjector2D recently in
> imglib2 core.

Please keep in mind that such problems are easily avoided by leaving
@Deprecated placeholders in place.

These deprecated classes/methods need to removed eventually, and keeping
with SemVer implies that the major version number needs to be increased in
that case.

In the ImageJ project we did not do that so far, because we exempt all the
software which is still in beta phase from being versioned in SemVer,
explaining that all the APIs are still in flux during the beta period.

However, to provide a dependable software project that is useful for other
developers than only the core developers of said project, once we are out
of beta, we cannot simply rename classes or methods or move them between
packages anymore, not without leaving deprecated placeholders in place
(and eventually biting the bullet and bumping the major version when we
remove the deprecated APIs).

Ciao,
Johannes


From posch at informatik.uni-halle.de  Mon Apr 14 10:16:48 2014
From: posch at informatik.uni-halle.de (Stefan Posch)
Date: Mon, 14 Apr 2014 17:16:48 +0200
Subject: [ImageJ-devel] (headless) command execution
In-Reply-To: <CADN69yk49kSFV7+4da+gvL=C=KQQzGRuo8DU+uONMp3_PCqMnA@mail.gmail.com>
References: <20140313093909.GC25772@informatik.uni-halle.de>
	<CADN69ymnF9NOppKn7_qjtxcxup2EM_UiCm=Dv3P6YXtq+Tg+2A@mail.gmail.com>
	<20140410140127.GR28601@informatik.uni-halle.de>
	<CADN69yk49kSFV7+4da+gvL=C=KQQzGRuo8DU+uONMp3_PCqMnA@mail.gmail.com>
Message-ID: <20140414151648.GA17729@informatik.uni-halle.de>

Hi Curtis,

thanks for your reply, we are getting ahead, but still questions for running commands

>    * The run() method of a module can assume that all required input
>    parameters have been filled (i.e., are non-null). And the corresponding
>    post-condition of run() is that all required output parameters are now
>    filled.
perfect, the same with us

>    * The initialize() method of a module cannot necessarily assume
>    anything about the state of its parameters. As you pointed out, ImageJ2
>    has various commands right now that *do* assume certain parameters have
>    been filled via preprocessing. This works in practice (at least from
>    the ImageJ application), but is not particularly rigorous.
>    * Similarly, ImageJ2 has several commands which assume their
>    initializer has been called, but it is not stated as a formal
>    precondition. Most probably it makes sense to state that in the
>    javadoc, would you agree? In other words: if you aren't going to
>    include the InitPreprocessor in the preprocessing chain, you are still
>    somehow responsible for calling module.initialize() before calling
>    module.run(). Is that fair?
again: perfect

>    So the main sticky point is what to do about initialize() requiring
>    certain parameters to be already filled. This is useful for dynamic
>    modules, but also just for computing defaults -- e.g., setting default
>    brightness/contrast min & max values to the current display min max of
>    the input image. So it seems there are two "layers" of input
>    parameters: those needed before initialize() and those not needed for
>    it.
>    Maybe we need a way to formally flag these "required before initialize"
>    parameters in the annotation? What do you think? Would that help you?
This would be different from autoFill() ?

Yes and no. 

In a way it makes responsibilities clear, in so far I feel comfortable with it.

However, it seems to me that there are (potentially very heavy) restrictions
on the parameters which may be filled in advance (automaticcal and not by the user)
in a sensible way. As far as I understand ij2 fills in parameters with what I think
you called AutoFooPreprocessors, so active image and active display?
I cannot come up with further ones. How would we fill in an int parameter
without knowledge of its meaning/sematics?
And even for images is only possible for commands with exactly one image or display.
Obviously we could introduce a further flag for an image parameter to notify,
that I what to be assigned the active image with. But this seems pretty specific.
And probably not generic to be introduce to scijava but rather deferred to the
"application", e.g. imagej.
And there might be aplications which call for more the two layers?

Summing up, I am afraid that I do not have a cute idea.
Of course I appreciate the functionality the set initial values or make the type
of parameters depending on image features (like dimensionality, range of values).
Still adding parameters seems awkward to be. Could we come by with "only" changing
types of parameters. E.g. for DuplicateImage not add one parameter for each axes rather
have one array parameter with its length determined by the dimensionality?
And may be indicate via annotations, depending on which other parameter(s) the
type of this parameter will change?

Rather more question:
Thinking of module and parameter intitalizers it seems to be that I get more unsure.
Is it exactly to do processing between the two layers of parameters.
And it is to add further parameters and set initial values to parameters?
Are initial parameter values execulsively meant to serve as defaults for the
user or is it required that some initial values are set (in order to properly
run the command)?

If so: would this mean that for running a command head less in a non interactive way
makes the distiction of two layers is obsolete?

>    One thing that may interest you is the recent ImageJ OPS announcement:
>       [1]http://developer.imagej.net/2014/04/04/announcing-imagej-ops
>    An Op is just an ImageJ command intended to be fully functional --
That sounds great ... 

>   Hi Stefan,
>   Thanks. Rather than doing this:
>     CommandInfo testopInfo = new CommandInfo(IJTestOp.class.getName());
>     testopModule = (CommandModule) testopInfo.createModule();
>   I suggest instead:
>     CommandInfo testopInfo = commandService.getCommand(IJTestOp.class);
>     testopModule = (CommandModule)
>   moduleService.createModule(testopInfo);

the advise you gave works fine, however only for running a module for a given Command once.
  (see attached source of RunTestOp.java, the zip is a tiny maven project ready to import to eclipse.
   hopefully I do not forget the attachment again :-)

  in short we have
	CommandInfo testopInfo = commandService.getCommand(IJTestOp.class.getName());
	CommandModule testopModule =  (CommandModule)moduleService.createModule( testopInfo);

   set some parameters

   run the service and init preprocessor on the module, then

	testopModule.run(); 
    or as an alternative
	moduleService.run(testopModule, false);

   running the init preprocessor gives
-----
Exception in thread "main" java.lang.IllegalStateException: Context already injected: org.scijava.AbstractContextual#context
	at org.scijava.Context.inject(Context.java:293)
	at imagej.command.CommandModule.initialize(CommandModule.java:144)
	at imagej.module.process.InitPreprocessor.process(InitPreprocessor.java:61)
	at mainroutine.RunTestOp.main(RunTestOp.java:62)
------

  Creating a new module for the same CommandInfo fixes the problem (line 60)

  Is this intended, i.e. that the init preprocessor for a module may be run only once?
  This would pose a serious problem to us:

  What we want to do is essentially the following: 
  The user selects a Command via the GUI and we create a Window displaying the input parameters. 
  The user may change/supply these parameters and run the Command. 
  Upon return a window displaying the results pops up.
  However, the first window displaying the input parameters is still available, the user may
  change one/some parameters an rerun the command.
  This eases testing various parameter values or the same set of parameters on different
  images without the need to repeatatly select an operator/command.

  Have you further advise how we can accomplish this, i.e. reusing a command module?

  BTW: I prefer to not set the parameters via the moduleService.run method, as the parameters
       are set elsewhere (either by the user via a GUI configuring the operator/command e.g. from grappa,
       or by parsing command line argument in case of the command line oprunner.
       Additionaly I rather invoke the moduls run-method directly, as it seems to me that
       via moduleservie a new thread is started, and at this point we like to have this under control.

  it seems, that the init preprocessor assigns the service parameters of a Command,
  not the Service preprocessor as I expected. Is the correct?
  (Probably related to "shadowing" the Service and Context parameters of a Command)

  BTW: what is the sematics of injecting a context (into a module?)

>    So this is certainly inconsistent and confusing. Do you think that
>    Commands should also include service and context inputs when iterating
>    them? If so, we can try removing that exclusion and see what
>    explodes... ;-)
We would not need them rather hide the from the user.

>    If you urgently need support for multiple simultaneous ImageJ contexts
>    created with the default constructor while ij-legacy is on the
>    classpath, and you want to try fixing the bug yourself, we would be
>    happy to elaborate further so that you can give it a shot.
no, we are hapy with one, just have to get hold of it (and use it in a static way)

Again, thanks again

best regards   Stefan
-------------- next part --------------
A non-text attachment was scrubbed...
Name: ij2-test.zip
Type: application/zip
Size: 6707 bytes
Desc: not available
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140414/404854fe/attachment.zip>

From ctrueden at wisc.edu  Mon Apr 14 10:42:08 2014
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Mon, 14 Apr 2014 10:42:08 -0500
Subject: [ImageJ-devel] [LOCI ImageJ] Fwd: ImageJ GitHub Repository
	Errors?
In-Reply-To: <21CA17A7-F255-4DF4-96C3-027B4708BC97@wisc.edu>
References: <66EC3B04-6EB8-4D0F-A4AB-846E4CADB12C@wisc.edu>
	<21CA17A7-F255-4DF4-96C3-027B4708BC97@wisc.edu>
Message-ID: <CADN69ykmaxOpe_0CH_eu-sK_CKeyujCm+T+2dBoTmPomyVLgfQ@mail.gmail.com>

Hi Jay,

[CCing imagej-devel, as this sort of question is better discussed in public]

> I reformed the ImageJ2 repository from Github today and cloned it to
> my desktop. Eclipse is telling me there are compile errors in
> imagej.command, imagej.module, and imagej.script. Is this right? I've
> cleaned, recompiled, and refreshed every way I could think.

Try selecting all the ImageJ projects (easy if you have them in their own
working set), right-click, Maven > Update Project. Check the "Force Update
of Snapshot/Releases" option as well as "Update proejct configuration from
pom.xml" and "Refresh workspace resources from local filesystem" and "Clean
projects". Click OK and wait a bit.

If you still see errors, try importing into a fresh Eclipse workspace.

Regards,
Curtis


On Mon, Apr 14, 2014 at 6:55 AM, Jay Warrick <warrick at wisc.edu> wrote:

> Sorry, to be more specific, that is in the in-core project.
>
> Begin forwarded message:
>
> *From: *Jay Warrick <warrick at wisc.edu>
> *Subject: **ImageJ GitHub Repository Errors?*
> *Date: *April 14, 2014 at 6:50:32 AM CDT
> *To: *LOCI ImageJ Developers <imagej at loci.wisc.edu>
>
> Hi All,
>
> I reformed the ImageJ2 repository from Github today and cloned it to my
> desktop. Eclipse is telling me there are compile errors in imagej.command,
> imagej.module, and imagej.script. Is this right? I've cleaned, recompiled,
> and refreshed every way I could think. Any other reason you can think that
> there would be errors other than actual non-compiling code merged to master
> for the moment? I realize this is a development thing but wasn't sure if
> this should ever be something I would ever see from the master branch.
>
> Cheers,
>
> Jay
>
>
>
> _______________________________________________
> ImageJ mailing list
> ImageJ at loci.wisc.edu
> http://loci.wisc.edu/mailman/listinfo/imagej
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140414/355ab41b/attachment.html>

From warrick at wisc.edu  Mon Apr 14 10:50:54 2014
From: warrick at wisc.edu (Jay Warrick)
Date: Mon, 14 Apr 2014 10:50:54 -0500
Subject: [ImageJ-devel] [LOCI ImageJ] Fwd: ImageJ GitHub Repository
	Errors?
In-Reply-To: <CADN69ykmaxOpe_0CH_eu-sK_CKeyujCm+T+2dBoTmPomyVLgfQ@mail.gmail.com>
References: <66EC3B04-6EB8-4D0F-A4AB-846E4CADB12C@wisc.edu>
	<21CA17A7-F255-4DF4-96C3-027B4708BC97@wisc.edu>
	<CADN69ykmaxOpe_0CH_eu-sK_CKeyujCm+T+2dBoTmPomyVLgfQ@mail.gmail.com>
Message-ID: <6C68F407-C65C-4B9F-9827-60EDE650DE9B@wisc.edu>

Things cleared up even just after choosing Maven > Update. Thanks!

On Apr 14, 2014, at 10:42 AM, Curtis Rueden <ctrueden at wisc.edu> wrote:

> Hi Jay,
> 
> [CCing imagej-devel, as this sort of question is better discussed in public]
> 
> > I reformed the ImageJ2 repository from Github today and cloned it to
> > my desktop. Eclipse is telling me there are compile errors in
> > imagej.command, imagej.module, and imagej.script. Is this right? I've
> > cleaned, recompiled, and refreshed every way I could think.
> 
> Try selecting all the ImageJ projects (easy if you have them in their own working set), right-click, Maven > Update Project. Check the "Force Update of Snapshot/Releases" option as well as "Update proejct configuration from pom.xml" and "Refresh workspace resources from local filesystem" and "Clean projects". Click OK and wait a bit.
> 
> If you still see errors, try importing into a fresh Eclipse workspace.
> 
> Regards,
> Curtis
> 
> 
> On Mon, Apr 14, 2014 at 6:55 AM, Jay Warrick <warrick at wisc.edu> wrote:
> Sorry, to be more specific, that is in the in-core project.
> 
> Begin forwarded message:
> 
>> From: Jay Warrick <warrick at wisc.edu>
>> Subject: ImageJ GitHub Repository Errors?
>> Date: April 14, 2014 at 6:50:32 AM CDT
>> To: LOCI ImageJ Developers <imagej at loci.wisc.edu>
>> 
>> Hi All,
>> 
>> I reformed the ImageJ2 repository from Github today and cloned it to my desktop. Eclipse is telling me there are compile errors in imagej.command, imagej.module, and imagej.script. Is this right? I've cleaned, recompiled, and refreshed every way I could think. Any other reason you can think that there would be errors other than actual non-compiling code merged to master for the moment? I realize this is a development thing but wasn't sure if this should ever be something I would ever see from the master branch.
>> 
>> Cheers,
>> 
>> Jay
>> 
> 
> 
> _______________________________________________
> ImageJ mailing list
> ImageJ at loci.wisc.edu
> http://loci.wisc.edu/mailman/listinfo/imagej
> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140414/0f6fe577/attachment-0001.html>

From alhaj.safa at yahoo.com  Mon Apr 14 15:12:43 2014
From: alhaj.safa at yahoo.com (Safaa Al-Haj Saleh)
Date: Mon, 14 Apr 2014 13:12:43 -0700 (PDT)
Subject: [ImageJ-devel] checking background color
In-Reply-To: <1397505938.43027.YahooMailNeo@web140802.mail.bf1.yahoo.com>
References: <1397505938.43027.YahooMailNeo@web140802.mail.bf1.yahoo.com>
Message-ID: <1397506363.98998.YahooMailNeo@web140803.mail.bf1.yahoo.com>



Hi all,

I am writing a code to check whether the background of a binary image is black or not. If the background is white, colors of the binary image are inverted (i.e. the color of the background should be always black)

I have done this so far:

ImageProcessor imp = clustering_result.getProcessor();
? ? ? ? ? ? ? ? ??
? ? ? ? ? ? ? ? ? if(Prefs.blackBackground==false){
? ? ? ? ? ? ? ? ? imp.invert();
? ? ? ? ? ? ? ? ??
? ? ? ? ? ? ? ? ? clusteredImage=imp.getBufferedImage();
? ? ? ? ? ? ? ? ? }
? ? ? ? ? ? ? ? ??
? ? ? ? ? ? ? ? ? else {
? ? ? ? ? ? ? ? ? clusteredImage=imp.getBufferedImage();

? ? ? ? ? ? ? ? ? }
? ? ? ? ? ? ? ? ?

But it does not work! Any help please?

Regards,
Safaa
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140414/1525aa89/attachment.html>

From Johannes.Schindelin at gmx.de  Tue Apr 15 10:15:56 2014
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Tue, 15 Apr 2014 17:15:56 +0200 (CEST)
Subject: [ImageJ-devel] please release imglib2-2.0.0-beta-26 and
 imglib-ij-2.0.0-beta-26
In-Reply-To: <3390148D-6297-49FD-8E45-B187FF113A60@gmail.com>
References: <3390148D-6297-49FD-8E45-B187FF113A60@gmail.com>
Message-ID: <alpine.DEB.1.00.1404151713560.14982@s15462909.onlinehome-server.info>

Hi Tobias,

On Tue, 15 Apr 2014, Tobias Pietzsch wrote:

> could you please release a new version of both imglib2 core and
> imglib-ij (depending on the new core version beta-26)?

I just released it and also committed a corresponding fix to imglib-ij.
Now I am going to see whether ImageJ or Fiji has a problem (i.e. whether it is
safe to bump pom-scijava) with the breaking API change introduced in
beta-26. Your commit to imglib-ij gives me all the information to fix
problems, if any arise in my tests.

Ciao,
Johannes


From tobias.pietzsch at gmail.com  Tue Apr 15 10:26:31 2014
From: tobias.pietzsch at gmail.com (Tobias Pietzsch)
Date: Tue, 15 Apr 2014 17:26:31 +0200
Subject: [ImageJ-devel] please release imglib2-2.0.0-beta-26 and
	imglib-ij-2.0.0-beta-26
In-Reply-To: <alpine.DEB.1.00.1404151713560.14982@s15462909.onlinehome-server.info>
References: <3390148D-6297-49FD-8E45-B187FF113A60@gmail.com>
	<alpine.DEB.1.00.1404151713560.14982@s15462909.onlinehome-server.info>
Message-ID: <8B9292B9-E928-4D32-983F-EC523CE2CFD2@gmail.com>


On Apr 15, 2014, at 5:15 PM, Johannes Schindelin <Johannes.Schindelin at gmx.de> wrote:

> Hi Tobias,
> 
> On Tue, 15 Apr 2014, Tobias Pietzsch wrote:
> 
>> could you please release a new version of both imglib2 core and
>> imglib-ij (depending on the new core version beta-26)?
> 
> I just released it and also committed a corresponding fix to imglib-ij.
> Now I am going to see whether ImageJ or Fiji has a problem (i.e. whether it is
> safe to bump pom-scijava) with the breaking API change introduced in
> beta-26. Your commit to imglib-ij gives me all the information to fix
> problems, if any arise in my tests.

Thanks a lot!
JY and me fiddle with MaMuT / TrackMate related issues. We'll see to that these compile with beta-26.
best regards,
Tobias

> 
> Ciao,
> Johannes

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140415/26aaf76d/attachment.pgp>

From tobias.pietzsch at gmail.com  Tue Apr 15 11:05:21 2014
From: tobias.pietzsch at gmail.com (Tobias Pietzsch)
Date: Tue, 15 Apr 2014 18:05:21 +0200
Subject: [ImageJ-devel] please release imglib2-2.0.0-beta-26 and
	imglib-ij-2.0.0-beta-26
In-Reply-To: <8B9292B9-E928-4D32-983F-EC523CE2CFD2@gmail.com>
References: <3390148D-6297-49FD-8E45-B187FF113A60@gmail.com>
	<alpine.DEB.1.00.1404151713560.14982@s15462909.onlinehome-server.info>
	<8B9292B9-E928-4D32-983F-EC523CE2CFD2@gmail.com>
Message-ID: <DD741573-4135-4813-B26F-0B2F317F5EF0@gmail.com>


On Apr 15, 2014, at 5:26 PM, Tobias Pietzsch <tobias.pietzsch at gmail.com> wrote:

> 
> On Apr 15, 2014, at 5:15 PM, Johannes Schindelin <Johannes.Schindelin at gmx.de> wrote:
> 
>> Hi Tobias,
>> 
>> On Tue, 15 Apr 2014, Tobias Pietzsch wrote:
>> 
>>> could you please release a new version of both imglib2 core and
>>> imglib-ij (depending on the new core version beta-26)?

Could you please release beta-26 of imglib-ij as well?

>> 
>> I just released it and also committed a corresponding fix to imglib-ij.
>> Now I am going to see whether ImageJ or Fiji has a problem (i.e. whether it is
>> safe to bump pom-scijava) with the breaking API change introduced in
>> beta-26. Your commit to imglib-ij gives me all the information to fix
>> problems, if any arise in my tests.
> 
> Thanks a lot!
> JY and me fiddle with MaMuT / TrackMate related issues. We'll see to that these compile with beta-26.
> best regards,
> Tobias
> 
>> 
>> Ciao,
>> Johannes
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140415/209132a0/attachment.pgp>

From Johannes.Schindelin at gmx.de  Tue Apr 15 13:40:28 2014
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Tue, 15 Apr 2014 20:40:28 +0200 (CEST)
Subject: [ImageJ-devel] please release imglib2-2.0.0-beta-26 and
 imglib-ij-2.0.0-beta-26
In-Reply-To: <DD741573-4135-4813-B26F-0B2F317F5EF0@gmail.com>
References: <3390148D-6297-49FD-8E45-B187FF113A60@gmail.com>
	<alpine.DEB.1.00.1404151713560.14982@s15462909.onlinehome-server.info>
	<8B9292B9-E928-4D32-983F-EC523CE2CFD2@gmail.com>
	<DD741573-4135-4813-B26F-0B2F317F5EF0@gmail.com>
Message-ID: <alpine.DEB.1.00.1404152040031.14982@s15462909.onlinehome-server.info>

Hi Tobias,

On Tue, 15 Apr 2014, Tobias Pietzsch wrote:

> Could you please release beta-26 of imglib-ij as well?

Done!

Ciao,
Johannes


From tobias.pietzsch at gmail.com  Wed Apr 16 05:12:40 2014
From: tobias.pietzsch at gmail.com (Tobias Pietzsch)
Date: Wed, 16 Apr 2014 12:12:40 +0200
Subject: [ImageJ-devel] please release imglib2-2.0.0-beta-26 and
	imglib-ij-2.0.0-beta-26
In-Reply-To: <alpine.DEB.1.00.1404152040031.14982@s15462909.onlinehome-server.info>
References: <3390148D-6297-49FD-8E45-B187FF113A60@gmail.com>
	<alpine.DEB.1.00.1404151713560.14982@s15462909.onlinehome-server.info>
	<8B9292B9-E928-4D32-983F-EC523CE2CFD2@gmail.com>
	<DD741573-4135-4813-B26F-0B2F317F5EF0@gmail.com>
	<alpine.DEB.1.00.1404152040031.14982@s15462909.onlinehome-server.info>
Message-ID: <C32BDB26-2F80-4E82-A91E-54DAE3935597@gmail.com>

Hi Johannes and JY,
thanks a lot for making the beta releases Johannes!
The BigDataViewer, TrackMate, and MaMuT projects all build with these imglib2 and imglib-ij 2.0.0-beta-26 versions now.
best regards,
Tobias

On Apr 15, 2014, at 8:40 PM, Johannes Schindelin <Johannes.Schindelin at gmx.de> wrote:

> Hi Tobias,
> 
> On Tue, 15 Apr 2014, Tobias Pietzsch wrote:
> 
>> Could you please release beta-26 of imglib-ij as well?
> 
> Done!
> 
> Ciao,
> Johannes

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140416/efbe2b7c/attachment.pgp>

From pietzsch at mpi-cbg.de  Wed Apr 16 08:14:29 2014
From: pietzsch at mpi-cbg.de (Tobias Pietzsch)
Date: Wed, 16 Apr 2014 15:14:29 +0200
Subject: [ImageJ-devel] Jenkins server configured to talk spanish?
Message-ID: <AB48EFA2-4B06-4CC7-BA52-0024E6CE18FF@mpi-cbg.de>

Hi,
something must be wrong with the jenkins configuration. Recently the [ImageJ-builds] mails and also parts of the web interface are spanish.
best regards,
Tobias

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140416/74e14abf/attachment.pgp>

From leek at broadinstitute.org  Wed Apr 16 08:21:30 2014
From: leek at broadinstitute.org (Lee Kamentsky)
Date: Wed, 16 Apr 2014 09:21:30 -0400
Subject: [ImageJ-devel] Jenkins server configured to talk spanish?
In-Reply-To: <AB48EFA2-4B06-4CC7-BA52-0024E6CE18FF@mpi-cbg.de>
References: <AB48EFA2-4B06-4CC7-BA52-0024E6CE18FF@mpi-cbg.de>
Message-ID: <CAHLFyjf+9s=P5eU+V71hrTRFt_CgUZo4AJnXxX7B0sHeo-cKTQ@mail.gmail.com>

On Wed, Apr 16, 2014 at 9:14 AM, Tobias Pietzsch <pietzsch at mpi-cbg.de>wrote:

> Hi,
> something must be wrong with the jenkins configuration. Recently the
> [ImageJ-builds] mails and also parts of the web interface are spanish.
>
No hay problema para mi, puedo entender.



> best regards,
> Tobias
>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140416/5ca4b373/attachment.html>

From tinevez at pasteur.fr  Wed Apr 16 08:27:47 2014
From: tinevez at pasteur.fr (Jean-Yves Tinevez)
Date: Wed, 16 Apr 2014 15:27:47 +0200
Subject: [ImageJ-devel] Jenkins server configured to talk spanish?
In-Reply-To: <CAHLFyjf+9s=P5eU+V71hrTRFt_CgUZo4AJnXxX7B0sHeo-cKTQ@mail.gmail.com>
References: <AB48EFA2-4B06-4CC7-BA52-0024E6CE18FF@mpi-cbg.de>
	<CAHLFyjf+9s=P5eU+V71hrTRFt_CgUZo4AJnXxX7B0sHeo-cKTQ@mail.gmail.com>
Message-ID: <478E4CBA-015D-4C96-9274-B0994D7B4C99@pasteur.fr>


On 16 avr. 2014, at 15:21, Lee Kamentsky wrote:

> 
> On Wed, Apr 16, 2014 at 9:14 AM, Tobias Pietzsch <pietzsch at mpi-cbg.de> wrote:
> Hi,
> something must be wrong with the jenkins configuration. Recently the [ImageJ-builds] mails and also parts of the web interface are spanish.
> No hay problema para mi, puedo entender.
> 
>  

?s realment divertit i hem d'aprendre alguna cosa.
Ad?u.
jy

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140416/687043a7/attachment.html>

From posch at informatik.uni-halle.de  Wed Apr 16 09:47:52 2014
From: posch at informatik.uni-halle.de (Stefan Posch)
Date: Wed, 16 Apr 2014 16:47:52 +0200
Subject: [ImageJ-devel] (headless) command execution
In-Reply-To: <20140414151648.GA17729@informatik.uni-halle.de>
References: <20140313093909.GC25772@informatik.uni-halle.de>
	<CADN69ymnF9NOppKn7_qjtxcxup2EM_UiCm=Dv3P6YXtq+Tg+2A@mail.gmail.com>
	<20140410140127.GR28601@informatik.uni-halle.de>
	<CADN69yk49kSFV7+4da+gvL=C=KQQzGRuo8DU+uONMp3_PCqMnA@mail.gmail.com>
	<20140414151648.GA17729@informatik.uni-halle.de>
Message-ID: <20140416144752.GC28601@informatik.uni-halle.de>

Hi Curtis,

regarding the concept of initializers I had a discussion with Birgit yesterday
and we came up with the following ideas.

We think we could do without command and parameter initializers but work only with
the parameter's callback function which - as currently - are to be invoked 
upon setting/changing the corresponding parameters value.

As currently, depending on parameter values, e.g. the image assigned to a Dataset,
the command may add (or remove) parameters. This would be accomplished
by the callback functions of the parameter whose value is the cause for these new parameters.
E.g. the callback function of the inputDisplay of DuplicateImage would add the parameters
(which is currently done by the command initializer).
If some parameters should get (initial) values depending on the value of other
parameters (e.g. your example of setting default brightness/contrast min,max values
to current min,max of the input image) would we again the responsibility of 
the callback function of the cause, i.e. the input image.

This would eleviate us of the need to fill in parameters required for the command initializer.
If a parameter's value is set (either by a pre processor or programmatically)
its callback function takes care of taking the apropriate actions.

If the pre processor is run, it just needs to set the parameter values it decides to,
and the callback functions would be could automatically.

What remains is of course: 
(i) assume a parameter's value is changed, and its callback method
  called accordingly. What if this callback reqires/assumes one or several other parameters
  to aready have be set? It seems to be, that this necessarily is the responsibility
  of the callback function (resp. its programmer) to handle this. I.e. to check
  the validity of other parameters it requires. Otherwise the Command or its Parameters
  have to declare a predefine order in which parameters have to be set.
  (Which we have considered to introduce to alida/mitobo few years ago but abandoned this
  idea as it seems to messy/error prone.)
(ii) in case of command execution via GUI (in contrast to programmatically):
    what if not all parameters which add further parameters are
    filled before the GUI is created and presented to the user and are set by the user?
    What we are considering is that the GUI to figure out such events have happened
    and then to adapt the GUI accordingly.

    How to figure out that set set of parameter (or the type of an already existing parameter)
    was change by a callback function?
    We see two possibilities: 
    (a) a parameter may announce via its annotation that it (occasionally)
        _may_ change paramter definitions and the GUI always assumes that this had happend,
        is such a parameter's value has changed (which the GUI knows at it controls this processes).
    (b) the callback function is to fire events in case it changes parameter definitions.

    (a) might be similar or be used in analogy to your idea of a parameter to announce "required before initialize",
       as the pre processor framework would know that setting of such a parameter probably/potentially
       may add parameters and should better be set before creating the GUI to ask the user for
       further parameters (and if it accomplishes to set all of those parameters and either excludes them from
       the GUI - as currently done by IJ2 for input images - or prohibits changing these parameters,
       we get rid of problem (i) stated above).


To make things conceptionally easier (for me) I favour the following guideline:
A parameter, e.g. inputDisplay, may add (or remove) parameters to the command
exclusively depending of its own value. Furthermore the parameter (names) potentially
added by this parameter are disjoint from those parameters added by other parameters of
the command. However, it is probably not possible to check or enforce this restriction.
As stated above in (ii) in my view it would be the task of the programmer of the Comand anyway
to cope with more complicated situations and does not affect to supporting "runtime system",
e.g. the functionality to run pre processors and creating GUIs to harvest input vlaues from the user.


Best regards

Stefan

PS.:
A different issue I came across have a second look at the Parameter annotation, sepcifically
its choices: The few examples of usage I had a look at are parameters of type String which
announce valid values. It might me worth considering to drop this feature and use Enums instead
of Strings which easily allows to generate an approprate selection by the GUI.
-- 
Prof. Dr.-Ing. Stefan Posch,
        Institut fuer Informatik, Martin-Luther-Universitaet Halle-Wittenberg
        Von-Seckendorff-Platz 1, 06099 Halle (Saale)
phone:  ++49 345 55-24728
fax:	++49 345 55-27039
e-mail: Stefan.Posch at informatik.uni-halle.de
www:    www.informatik.uni-halle.de/~posch/


From sapristi at gmail.com  Wed Apr 16 10:24:38 2014
From: sapristi at gmail.com (Albert Cardona)
Date: Wed, 16 Apr 2014 11:24:38 -0400
Subject: [ImageJ-devel] Jenkins server configured to talk spanish?
In-Reply-To: <478E4CBA-015D-4C96-9274-B0994D7B4C99@pasteur.fr>
References: <AB48EFA2-4B06-4CC7-BA52-0024E6CE18FF@mpi-cbg.de>
	<CAHLFyjf+9s=P5eU+V71hrTRFt_CgUZo4AJnXxX7B0sHeo-cKTQ@mail.gmail.com>
	<478E4CBA-015D-4C96-9274-B0994D7B4C99@pasteur.fr>
Message-ID: <CAJj13_84Oq9qivN_R15BBAhCeZiP4303QkedDKq0tVc3-DFoew@mail.gmail.com>

2014-04-16 9:27 GMT-04:00 Jean-Yves Tinevez <tinevez at pasteur.fr>:

>
> On 16 avr. 2014, at 15:21, Lee Kamentsky wrote:
>
>
> On Wed, Apr 16, 2014 at 9:14 AM, Tobias Pietzsch <pietzsch at mpi-cbg.de>wrote:
>
>> Hi,
>> something must be wrong with the jenkins configuration. Recently the
>> [ImageJ-builds] mails and also parts of the web interface are spanish.
>>
> No hay problema para mi, puedo entender.
>
>
>
>
> ?s realment divertit i hem d'aprendre alguna cosa.
> Ad?u.
>



Aix? ?s catal?, J-Y! (This is Catalan, J-Y!)

Albert



-- 
http://albert.rierol.net
http://www.ini.uzh.ch/~acardona/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140416/4172f7d1/attachment.html>

From leek at broadinstitute.org  Wed Apr 16 10:49:39 2014
From: leek at broadinstitute.org (Lee Kamentsky)
Date: Wed, 16 Apr 2014 11:49:39 -0400
Subject: [ImageJ-devel] Jenkins server configured to talk spanish?
In-Reply-To: <CAJj13_84Oq9qivN_R15BBAhCeZiP4303QkedDKq0tVc3-DFoew@mail.gmail.com>
References: <AB48EFA2-4B06-4CC7-BA52-0024E6CE18FF@mpi-cbg.de>
	<CAHLFyjf+9s=P5eU+V71hrTRFt_CgUZo4AJnXxX7B0sHeo-cKTQ@mail.gmail.com>
	<478E4CBA-015D-4C96-9274-B0994D7B4C99@pasteur.fr>
	<CAJj13_84Oq9qivN_R15BBAhCeZiP4303QkedDKq0tVc3-DFoew@mail.gmail.com>
Message-ID: <CAHLFyjfR49BjiTpBOHMeFJqih18HV3Z57wfi1TZV6M7cYEeobQ@mail.gmail.com>

On Wed, Apr 16, 2014 at 11:24 AM, Albert Cardona <sapristi at gmail.com> wrote:

>
>
>
> 2014-04-16 9:27 GMT-04:00 Jean-Yves Tinevez <tinevez at pasteur.fr>:
>
>>
>> On 16 avr. 2014, at 15:21, Lee Kamentsky wrote:
>>
>>
>> On Wed, Apr 16, 2014 at 9:14 AM, Tobias Pietzsch <pietzsch at mpi-cbg.de>wrote:
>>
>>> Hi,
>>> something must be wrong with the jenkins configuration. Recently the
>>> [ImageJ-builds] mails and also parts of the web interface are spanish.
>>>
>> No hay problema para mi, puedo entender.
>>
>>
>>
>>
>> ?s realment divertit i hem d'aprendre alguna cosa.
>> Ad?u.
>>
>
>
>
> Aix? ?s catal?, J-Y! (This is Catalan, J-Y!)
>
>  Estaba rascando mi cabeza porque pensaba que estabas hablando italiano.
Muestra lo que se.

> Albert
>
>
>
> --
> http://albert.rierol.net
> http://www.ini.uzh.ch/~acardona/
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140416/221da0a5/attachment-0001.html>

From ctrueden at wisc.edu  Wed Apr 16 12:22:19 2014
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Wed, 16 Apr 2014 12:22:19 -0500
Subject: [ImageJ-devel] Jenkins server configured to talk spanish?
In-Reply-To: <AB48EFA2-4B06-4CC7-BA52-0024E6CE18FF@mpi-cbg.de>
References: <AB48EFA2-4B06-4CC7-BA52-0024E6CE18FF@mpi-cbg.de>
Message-ID: <CADN69y=tJ2q_NG=4hiDJF6uTE3fvDoBOJcJi61ywGZw8KWkwhg@mail.gmail.com>

Hi Tobias,

> something must be wrong with the jenkins configuration.

Yep. Unfortunately, we have no idea how to fix it. It did this before in
German, then in French for a while too. Now after Monday's reboot: Spanish.

If it seriously impedes your work let me know and I'll throw a few more
hours at fixing it.

Regards,
Curtis


On Wed, Apr 16, 2014 at 8:14 AM, Tobias Pietzsch <pietzsch at mpi-cbg.de>wrote:

> Hi,
> something must be wrong with the jenkins configuration. Recently the
> [ImageJ-builds] mails and also parts of the web interface are spanish.
> best regards,
> Tobias
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140416/ee3ca8f8/attachment.html>

From tinevez at pasteur.fr  Wed Apr 16 12:40:27 2014
From: tinevez at pasteur.fr (Jean-Yves Tinevez)
Date: Wed, 16 Apr 2014 19:40:27 +0200
Subject: [ImageJ-devel] Jenkins server configured to talk spanish?
In-Reply-To: <CAJj13_84Oq9qivN_R15BBAhCeZiP4303QkedDKq0tVc3-DFoew@mail.gmail.com>
References: <AB48EFA2-4B06-4CC7-BA52-0024E6CE18FF@mpi-cbg.de>
	<CAHLFyjf+9s=P5eU+V71hrTRFt_CgUZo4AJnXxX7B0sHeo-cKTQ@mail.gmail.com>
	<478E4CBA-015D-4C96-9274-B0994D7B4C99@pasteur.fr>
	<CAJj13_84Oq9qivN_R15BBAhCeZiP4303QkedDKq0tVc3-DFoew@mail.gmail.com>
Message-ID: <534EC08B.6000006@pasteur.fr>

On 16-Apr-14 17:24, Albert Cardona wrote:
>
>
>
> 2014-04-16 9:27 GMT-04:00 Jean-Yves Tinevez <tinevez at pasteur.fr 
> <mailto:tinevez at pasteur.fr>>:
>
>
>     On 16 avr. 2014, at 15:21, Lee Kamentsky wrote:
>
>>
>>     On Wed, Apr 16, 2014 at 9:14 AM, Tobias Pietzsch
>>     <pietzsch at mpi-cbg.de <mailto:pietzsch at mpi-cbg.de>> wrote:
>>
>>         Hi,
>>         something must be wrong with the jenkins configuration.
>>         Recently the [ImageJ-builds] mails and also parts of the web
>>         interface are spanish.
>>
>>     No hay problema para mi, puedo entender.
>>
>
>     ?s realment divertit i hem d'aprendre alguna cosa.
>     Ad?u.
>
>
>
>
> Aix? ?s catal?, J-Y! (This is Catalan, J-Y!)

I shall NOT apologize for speaking Catalan
;)
cheers
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140416/8bcf77d2/attachment.html>

From Johannes.Schindelin at gmx.de  Wed Apr 16 13:33:55 2014
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Wed, 16 Apr 2014 20:33:55 +0200 (CEST)
Subject: [ImageJ-devel] Jenkins server configured to talk spanish?
In-Reply-To: <CADN69y=tJ2q_NG=4hiDJF6uTE3fvDoBOJcJi61ywGZw8KWkwhg@mail.gmail.com>
References: <AB48EFA2-4B06-4CC7-BA52-0024E6CE18FF@mpi-cbg.de>
	<CADN69y=tJ2q_NG=4hiDJF6uTE3fvDoBOJcJi61ywGZw8KWkwhg@mail.gmail.com>
Message-ID: <alpine.DEB.1.00.1404162033020.14982@s15462909.onlinehome-server.info>

Hi Curtis,

On Wed, 16 Apr 2014, Curtis Rueden wrote:

> > something must be wrong with the jenkins configuration.
> 
> Yep. Unfortunately, we have no idea how to fix it. It did this before in
> German, then in French for a while too. Now after Monday's reboot:
> Spanish.
> 
> If it seriously impedes your work let me know and I'll throw a few more
> hours at fixing it.

Since it seems to be so bothersome, I spent all morning looking for it and
keep investigating (not working on Fiji or ImageJ2 or answering user
questions in the time I am addressing this problem, of course).

Ciao,
Johannes


From ctrueden at wisc.edu  Wed Apr 16 13:38:59 2014
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Wed, 16 Apr 2014 13:38:59 -0500
Subject: [ImageJ-devel] Jenkins server configured to talk spanish?
In-Reply-To: <alpine.DEB.1.00.1404162033020.14982@s15462909.onlinehome-server.info>
References: <AB48EFA2-4B06-4CC7-BA52-0024E6CE18FF@mpi-cbg.de>
	<CADN69y=tJ2q_NG=4hiDJF6uTE3fvDoBOJcJi61ywGZw8KWkwhg@mail.gmail.com>
	<alpine.DEB.1.00.1404162033020.14982@s15462909.onlinehome-server.info>
Message-ID: <CADN69ym3ijYvwDjSQoXhdoTXpmZgh2m8C3S_dYPBFrb8Vb1Ezg@mail.gmail.com>

Hi Dscho,

> Since it seems to be so bothersome, I spent all morning looking for it
> and keep investigating (not working on Fiji or ImageJ2 or answering
> user questions in the time I am addressing this problem, of course).

I think everyone is more amused than bothered. So please don't worry about
it further right now, unless you have a solid lead on fixing it.

Regards,
Curtis


On Wed, Apr 16, 2014 at 1:33 PM, Johannes Schindelin <
Johannes.Schindelin at gmx.de> wrote:

> Hi Curtis,
>
> On Wed, 16 Apr 2014, Curtis Rueden wrote:
>
> > > something must be wrong with the jenkins configuration.
> >
> > Yep. Unfortunately, we have no idea how to fix it. It did this before in
> > German, then in French for a while too. Now after Monday's reboot:
> > Spanish.
> >
> > If it seriously impedes your work let me know and I'll throw a few more
> > hours at fixing it.
>
> Since it seems to be so bothersome, I spent all morning looking for it and
> keep investigating (not working on Fiji or ImageJ2 or answering user
> questions in the time I am addressing this problem, of course).
>
> Ciao,
> Johannes
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140416/f50e5a97/attachment.html>

From eliceiri at wisc.edu  Wed Apr 16 13:43:03 2014
From: eliceiri at wisc.edu (Kevin W Eliceiri)
Date: Wed, 16 Apr 2014 13:43:03 -0500
Subject: [ImageJ-devel] Jenkins server configured to talk spanish?
In-Reply-To: <7360c47d186f03.534ecf2b@wiscmail.wisc.edu>
References: <AB48EFA2-4B06-4CC7-BA52-0024E6CE18FF@mpi-cbg.de>
	<CADN69y=tJ2q_NG=4hiDJF6uTE3fvDoBOJcJi61ywGZw8KWkwhg@mail.gmail.com>
	<alpine.DEB.1.00.1404162033020.14982@s15462909.onlinehome-server.info>
	<CADN69ym3ijYvwDjSQoXhdoTXpmZgh2m8C3S_dYPBFrb8Vb1Ezg@mail.gmail.com>
	<7360c47d186f03.534ecf2b@wiscmail.wisc.edu>
Message-ID: <76f08deb1843a0.534e88e7@wiscmail.wisc.edu>

yes, wouldn't much time on this. Is there a list serve you can ask on??I would just ask there. For example
http://jenkins-ci.org/content/mailing-lists


best
kevin

On 04/16/14, Curtis Rueden  wrote:
> Hi Dscho,
> 
> > Since it seems to be so bothersome, I spent all morning looking for it
> > and keep investigating (not working on Fiji or ImageJ2 or answering
> > user questions in the time I am addressing this problem, of course).
> 
> 
> 
> I think everyone is more amused than bothered. So please don&#39;t worry about it further right now, unless you have a solid lead on fixing it.
> 
> 
> Regards,
> Curtis
> 
> 
> 
> On Wed, Apr 16, 2014 at 1:33 PM, Johannes Schindelin <Johannes.Schindelin at gmx.de(javascript:main.compose()> wrote:
> 
> > Hi Curtis,
> > 
> > On Wed, 16 Apr 2014, Curtis Rueden wrote:
> > 
> > > > something must be wrong with the jenkins configuration.
> > >
> > > Yep. Unfortunately, we have no idea how to fix it. It did this before in
> > > German, then in French for a while too. Now after Monday&#39;s reboot:
> > > Spanish.
> > >
> > > If it seriously impedes your work let me know and I&#39;ll throw a few more
> > > hours at fixing it.
> > 
> > 
> > Since it seems to be so bothersome, I spent all morning looking for it and
> > keep investigating (not working on Fiji or ImageJ2 or answering user
> > questions in the time I am addressing this problem, of course).
> > 
> > Ciao,
> > Johannes
> > 

--
Kevin W. Eliceiri
Director,?Laboratory for Optical and Computational Instrumentation (LOCI)
Departments Cell and Molecular Biology and Biomedical Engineering
Affiliate Principal Investigator, Morgridge Institute for Research (MIR)
Room 271 Animal Sciences,?1675 Observatory Drive,?Madison, WI 53706
Phone: 608-263-6288


From ctrueden at wisc.edu  Wed Apr 16 13:59:58 2014
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Wed, 16 Apr 2014 13:59:58 -0500
Subject: [ImageJ-devel] Jenkins server configured to talk spanish?
In-Reply-To: <76f08deb1843a0.534e88e7@wiscmail.wisc.edu>
References: <AB48EFA2-4B06-4CC7-BA52-0024E6CE18FF@mpi-cbg.de>
	<CADN69y=tJ2q_NG=4hiDJF6uTE3fvDoBOJcJi61ywGZw8KWkwhg@mail.gmail.com>
	<alpine.DEB.1.00.1404162033020.14982@s15462909.onlinehome-server.info>
	<CADN69ym3ijYvwDjSQoXhdoTXpmZgh2m8C3S_dYPBFrb8Vb1Ezg@mail.gmail.com>
	<7360c47d186f03.534ecf2b@wiscmail.wisc.edu>
	<76f08deb1843a0.534e88e7@wiscmail.wisc.edu>
Message-ID: <CADN69y=9dg-WKcGL3wuF901T_p5fr-7+ftDw690ghUWmE9fbSg@mail.gmail.com>

After Johannes poked around, it is back in English again! Agreed that we
can ask on the Jenkins list if the problem recurs.


On Wed, Apr 16, 2014 at 1:43 PM, Kevin W Eliceiri <eliceiri at wisc.edu> wrote:

> yes, wouldn't much time on this. Is there a list serve you can ask on? I
> would just ask there. For example
> http://jenkins-ci.org/content/mailing-lists
>
>
> best
> kevin
>
> On 04/16/14, Curtis Rueden  wrote:
> > Hi Dscho,
> >
> > > Since it seems to be so bothersome, I spent all morning looking for it
> > > and keep investigating (not working on Fiji or ImageJ2 or answering
> > > user questions in the time I am addressing this problem, of course).
> >
> >
> >
> > I think everyone is more amused than bothered. So please don&#39;t worry
> about it further right now, unless you have a solid lead on fixing it.
> >
> >
> > Regards,
> > Curtis
> >
> >
> >
> > On Wed, Apr 16, 2014 at 1:33 PM, Johannes Schindelin <
> Johannes.Schindelin at gmx.de(javascript:main.compose()> wrote:
> >
> > > Hi Curtis,
> > >
> > > On Wed, 16 Apr 2014, Curtis Rueden wrote:
> > >
> > > > > something must be wrong with the jenkins configuration.
> > > >
> > > > Yep. Unfortunately, we have no idea how to fix it. It did this
> before in
> > > > German, then in French for a while too. Now after Monday&#39;s
> reboot:
> > > > Spanish.
> > > >
> > > > If it seriously impedes your work let me know and I&#39;ll throw a
> few more
> > > > hours at fixing it.
> > >
> > >
> > > Since it seems to be so bothersome, I spent all morning looking for it
> and
> > > keep investigating (not working on Fiji or ImageJ2 or answering user
> > > questions in the time I am addressing this problem, of course).
> > >
> > > Ciao,
> > > Johannes
> > >
>
> --
> Kevin W. Eliceiri
> Director, Laboratory for Optical and Computational Instrumentation (LOCI)
> Departments Cell and Molecular Biology and Biomedical Engineering
> Affiliate Principal Investigator, Morgridge Institute for Research (MIR)
> Room 271 Animal Sciences, 1675 Observatory Drive, Madison, WI 53706
> Phone: 608-263-6288
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140416/0db1b917/attachment-0001.html>

From eliceiri at wisc.edu  Wed Apr 16 21:14:18 2014
From: eliceiri at wisc.edu (Kevin W Eliceiri)
Date: Wed, 16 Apr 2014 21:14:18 -0500
Subject: [ImageJ-devel] Jenkins server configured to talk spanish?
In-Reply-To: <CADN69y=9dg-WKcGL3wuF901T_p5fr-7+ftDw690ghUWmE9fbSg@mail.gmail.com>
References: <AB48EFA2-4B06-4CC7-BA52-0024E6CE18FF@mpi-cbg.de>
	<CADN69y=tJ2q_NG=4hiDJF6uTE3fvDoBOJcJi61ywGZw8KWkwhg@mail.gmail.com>
	<alpine.DEB.1.00.1404162033020.14982@s15462909.onlinehome-server.info>
	<CADN69ym3ijYvwDjSQoXhdoTXpmZgh2m8C3S_dYPBFrb8Vb1Ezg@mail.gmail.com>
	<7360c47d186f03.534ecf2b@wiscmail.wisc.edu>
	<76f08deb1843a0.534e88e7@wiscmail.wisc.edu>
	<CADN69y=9dg-WKcGL3wuF901T_p5fr-7+ftDw690ghUWmE9fbSg@mail.gmail.com>
Message-ID: <7610a71f17ed6e.534ef2aa@wiscmail.wisc.edu>

great thanks, and thanks Johannes for fixing.

k

On 04/16/14, Curtis Rueden  wrote:
> After Johannes poked around, it is back in English again! Agreed that we can ask on the Jenkins list if the problem recurs.
> 
> On Wed, Apr 16, 2014 at 1:43 PM, Kevin W Eliceiri <eliceiri at wisc.edu(javascript:main.compose()> wrote:
> 
> > yes, wouldn&#39;t much time on this. Is there a list serve you can ask on??I would just ask there. For example
> > http://jenkins-ci.org/content/mailing-lists
> > 
> > 
> > best
> > kevin
> > 
> > On 04/16/14, Curtis Rueden wrote:
> > > Hi Dscho,
> > >
> > > > Since it seems to be so bothersome, I spent all morning looking for it
> > > > and keep investigating (not working on Fiji or ImageJ2 or answering
> > > > user questions in the time I am addressing this problem, of course).
> > >
> > >
> > >
> > 
> > > I think everyone is more amused than bothered. So please don&#39;t worry about it further right now, unless you have a solid lead on fixing it.
> > >
> > >
> > > Regards,
> > > Curtis
> > >
> > >
> > >
> > > On Wed, Apr 16, 2014 at 1:33 PM, Johannes Schindelin <Johannes.Schindelin at gmx.de(javascript:main.compose()(java_script:main.compose()> wrote:
> > >
> > > > Hi Curtis,
> > > >
> > > > On Wed, 16 Apr 2014, Curtis Rueden wrote:
> > > >
> > > > > > something must be wrong with the jenkins configuration.
> > > > >
> > > > > Yep. Unfortunately, we have no idea how to fix it. It did this before in
> > 
> > > > > German, then in French for a while too. Now after Monday&#39;s reboot:
> > > > > Spanish.
> > > > >
> > > > > If it seriously impedes your work let me know and I&#39;ll throw a few more
> > > > > hours at fixing it.
> > > >
> > > >
> > > > Since it seems to be so bothersome, I spent all morning looking for it and
> > > > keep investigating (not working on Fiji or ImageJ2 or answering user
> > > > questions in the time I am addressing this problem, of course).
> > > >
> > > > Ciao,
> > > > Johannes
> > > >
> > 
> > 
> > --
> > Kevin W. Eliceiri
> > Director,?Laboratory for Optical and Computational Instrumentation (LOCI)
> > Departments Cell and Molecular Biology and Biomedical Engineering
> > Affiliate Principal Investigator, Morgridge Institute for Research (MIR)
> > Room 271 Animal Sciences,?1675 Observatory Drive,?Madison, WI 53706
> > Phone: 608-263-6288(tel:608-263-6288)
> > 

--
Kevin W. Eliceiri
Director,?Laboratory for Optical and Computational Instrumentation (LOCI)
Departments Cell and Molecular Biology and Biomedical Engineering
Affiliate Principal Investigator, Morgridge Institute for Research (MIR)
Room 271 Animal Sciences,?1675 Observatory Drive,?Madison, WI 53706
Phone: 608-263-6288


From ctrueden at wisc.edu  Thu Apr 17 10:32:26 2014
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Thu, 17 Apr 2014 10:32:26 -0500
Subject: [ImageJ-devel] JEX
In-Reply-To: <8DCE1A3A-F03D-4129-8ACB-716491ECC054@wisc.edu>
References: <F3963F7B-B5D8-4549-A26A-B774571A7DEA@wisc.edu>
	<8DCE1A3A-F03D-4129-8ACB-716491ECC054@wisc.edu>
Message-ID: <CADN69y=kkztqdEXWPyAmf-nEOgS5wipmUr-FGqXceYxtOwJ1Ow@mail.gmail.com>

Hi Jay & Erwin,

> Erwin and I are exploring the idea of a new version of JEX that would
> itself be a plugin of ImageJ.

That would be fantastic.

> There are a few different ways this could be developed... Either as
> part of the imagej managed code base (i.e. a package within a current
> ImageJ2 project or as its own maven project that is updated and
> managed like the rest of the ImageJ2 suite of projects like ij-app,
> ij-core, etc.) or as a completely separate project that we jarify and
> allow users to put into the plugin folder of ImageJ afterward.

The model we are targeting is "one Git repository per JAR file" with each
being a Maven module with its own version. We have already completed this
transition with the Fiji project [1], and ImageJ2 will be completely
structured that way soon as well. This approach has many advantages:

1) Stable release version couplings between components, so that if an
upstream component changes, downstream components are not affected/broken
until they intentionally upgrade to the newer version.

2) Independent versioning of each component. When a bug is fixed in a
particular component, we just release a new version of that component. No
need to cut vacuous releases of the entire collection of ImageJ2 JARs.

3) Easier and less intimidating to contribute to an individual plugin: just
fork that one repo, push your changes and file a PR. No need to clone an
all-encompassing fiji.git or imagej.git repository.

Further, in the Fiji project, each module is now what we call an "external
plugin" that lives in its own repository, either in the
github.com/fijinamespace, or in some cases [2, 3] in the plugin
developer's personal space
(doesn't matter that much).

ImageJ2 and Fiji support multiple update sites [4]. There is a core ImageJ2
update site [5], a core Fiji update site [6], and many others as well [7].
JEX would be a perfect fit for its own update site, giving you full control
over every aspect of your releases while leveraging the power of ImageJ2
for deployment to your users.

In short: I would suggest creating a personal update site for JEX and
serving your releases from there. That way, anyone using ImageJ2 or Fiji
can install JEX simply by checking a box. For details, see:

    http://fiji.sc/How_to_set_up_and_populate_an_update_site

And as you know I would certainly advise structuring JEX as a Maven
project, though it is not required. Here is a template you can use as a
starting point:

    https://github.com/imagej/minimal-ij1-plugin

Very happy to answer any questions our issues you have on your journey. :-)

Regards,
Curtis

[1] https://github.com/fiji
[2] https://github.com/tferr/ASA
[3] git://repo.or.cz/trakem2.git
[4] http://fiji.sc/Update_Sites
[5] http://update.imagej.net/
[6] http://fiji.sc/update/
[7] http://fiji.sc/List_of_update_sites


On Thu, Apr 17, 2014 at 9:41 AM, Jay Warrick <warrick at wisc.edu> wrote:

> Sorry to clog your inbox. Evidently this didn't send last night and it got
> sent without closing the email...
>
> Any ideas or suggestions on a development approach would be welcome. You
> have sold me/us on your approach to application development. We want to
> integrate ourselves the best way possible but don't want to bring the
> project down by being less professional in our coding abilities and
> practices. We'll do our best but I'm not sure we'll ever be able to be on
> par with the rest of you guys :-)
>
> I look forward to hearing from you. Thanks,
>
> Jay (and Erwin)
>
>
> Begin forwarded message:
>
> *From: *Jay Warrick <warrick at wisc.edu>
> *Subject: **JEX*
> *Date: *April 17, 2014 at 9:35:04 AM CDT
> *To: *Curtis Rueden <ctrueden at wisc.edu>
>
> Hi Curtis,
>
> Erwin and I are exploring the idea of a new version of JEX that would
> itself be a plugin of ImageJ.
>
> There are a few different ways this could be developed... Either as part
> of the imagej managed code base (i.e. a package within a current ImageJ2
> project or as its own maven project that is updated and managed like the
> rest of the ImageJ2 suite of projects like ij-app, ij-core, etc.) or as a
> completely separate project that we jarify and allow users to put into the
> plugin folder of ImageJ afterward. What might you recommend? We don't want
> to impose or muddy up your architecture but also really like the idea of
> being well-integrated with your current lifecycle management schemes (i.e.
> maven dependancies, compiling, versioning, and updating of jars (Jenkins
> etc).
>
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140417/3ceb35b1/attachment.html>

From schindelin at wisc.edu  Thu Apr 17 12:46:34 2014
From: schindelin at wisc.edu (Johannes Schindelin)
Date: Thu, 17 Apr 2014 19:46:34 +0200 (CEST)
Subject: [ImageJ-devel] Jenkins server configured to talk spanish?
In-Reply-To: <7610a71f17ed6e.534ef2aa@wiscmail.wisc.edu>
References: <AB48EFA2-4B06-4CC7-BA52-0024E6CE18FF@mpi-cbg.de>
	<CADN69y=tJ2q_NG=4hiDJF6uTE3fvDoBOJcJi61ywGZw8KWkwhg@mail.gmail.com>
	<alpine.DEB.1.00.1404162033020.14982@s15462909.onlinehome-server.info>
	<CADN69ym3ijYvwDjSQoXhdoTXpmZgh2m8C3S_dYPBFrb8Vb1Ezg@mail.gmail.com>
	<7360c47d186f03.534ecf2b@wiscmail.wisc.edu>
	<76f08deb1843a0.534e88e7@wiscmail.wisc.edu>
	<CADN69y=9dg-WKcGL3wuF901T_p5fr-7+ftDw690ghUWmE9fbSg@mail.gmail.com>
	<7610a71f17ed6e.534ef2aa@wiscmail.wisc.edu>
Message-ID: <alpine.DEB.1.00.1404171945570.14982@s15462909.onlinehome-server.info>

Hi Kevin,

On Wed, 16 Apr 2014, Kevin W Eliceiri wrote:

> great thanks, and thanks Johannes for fixing.

Unfortunately, it is back. But due to popular demand, I will not fix any
Fiji bugs today and take care of the language in Jenkins' mails today.

Ciao,
Dscho


From hinerm at gmail.com  Thu Apr 17 13:00:16 2014
From: hinerm at gmail.com (Mark Hiner)
Date: Thu, 17 Apr 2014 13:00:16 -0500
Subject: [ImageJ-devel] Jenkins server configured to talk spanish?
In-Reply-To: <alpine.DEB.1.00.1404171945570.14982@s15462909.onlinehome-server.info>
References: <AB48EFA2-4B06-4CC7-BA52-0024E6CE18FF@mpi-cbg.de>
	<CADN69y=tJ2q_NG=4hiDJF6uTE3fvDoBOJcJi61ywGZw8KWkwhg@mail.gmail.com>
	<alpine.DEB.1.00.1404162033020.14982@s15462909.onlinehome-server.info>
	<CADN69ym3ijYvwDjSQoXhdoTXpmZgh2m8C3S_dYPBFrb8Vb1Ezg@mail.gmail.com>
	<7360c47d186f03.534ecf2b@wiscmail.wisc.edu>
	<76f08deb1843a0.534e88e7@wiscmail.wisc.edu>
	<CADN69y=9dg-WKcGL3wuF901T_p5fr-7+ftDw690ghUWmE9fbSg@mail.gmail.com>
	<7610a71f17ed6e.534ef2aa@wiscmail.wisc.edu>
	<alpine.DEB.1.00.1404171945570.14982@s15462909.onlinehome-server.info>
Message-ID: <CA+B=mGpHe87auV+p3xTepXDUTec0qnEA=DBzqjmiKs3unvnQSA@mail.gmail.com>

Hey Johannes,

Unfortunately, it is back
>

 Did you actually get a build failure in Spanish in the past 2 hours? This
morning the entire site went to Spanish. I debated leaving it as is, in
preparation for my Ecuador trip, but instead Curtis and I uninstalled the
Localize plugin and restarted Jenkins. We haven't noticed any
Spanish/German/etc... since.

- Mark


On Thu, Apr 17, 2014 at 12:46 PM, Johannes Schindelin
<schindelin at wisc.edu>wrote:

> Hi Kevin,
>
> On Wed, 16 Apr 2014, Kevin W Eliceiri wrote:
>
> > great thanks, and thanks Johannes for fixing.
>
> Unfortunately, it is back. But due to popular demand, I will not fix any
> Fiji bugs today and take care of the language in Jenkins' mails today.
>
> Ciao,
> Dscho
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140417/d9073e8e/attachment.html>

From warrick at wisc.edu  Sun Apr 20 01:28:42 2014
From: warrick at wisc.edu (Jay Warrick)
Date: Sun, 20 Apr 2014 01:28:42 -0500
Subject: [ImageJ-devel] JEX
In-Reply-To: <CADN69y=kkztqdEXWPyAmf-nEOgS5wipmUr-FGqXceYxtOwJ1Ow@mail.gmail.com>
References: <F3963F7B-B5D8-4549-A26A-B774571A7DEA@wisc.edu>
	<8DCE1A3A-F03D-4129-8ACB-716491ECC054@wisc.edu>
	<CADN69y=kkztqdEXWPyAmf-nEOgS5wipmUr-FGqXceYxtOwJ1Ow@mail.gmail.com>
Message-ID: <7148A1D3-35E0-4F39-BD71-F3EFBF99A2B5@wisc.edu>

Hi Curtis,

So, I took a crack at getting a Maven project setup for the "JEX plugin" with a "hello world" run method. I think it is working so far (mostly). I think I likely need to add more dependancies because when I run and show ImageJ so that I may select JEX from the menu, I find that some of the other menu commands work and others give an error message (I think I at least need to add the ij-options project). However, I figure this is a point to get feedback on what I've done to set it up so far...

1) The maven project template was very helpful. Thanks. Although I really don't have much of an idea of what I should tweak from here. I figure mainly the name of the project and dependancies. Also, the template is based on ImageJ 1.x but I'm doing ImageJ2... I will be showing all the Command.class plugins within the JEX plugin as batchable commands within JEX and I don't know what all of those may depend on. So probably I should add all the ij projects as dependancies, right? If you have any other key words to search regarding maven project properties to search the web for to learn more about... I'm willing.

2) I tried to set up dependancies with my forked ImageJ2 maven projects in my eclipse workspace. Not sure how this will affect things downstream or if the magic of Maven will find jars if there are no projects when others clone this new project's repository to contribute. Advice?

3) Right now, the versions of the dependencies are fixed instead of flexible (e.g., using ${project.version} parameters) I have no idea what I'm doing :-) but when I changed the dependancy version to ${project.version} as done in the poms of the other ij projects, it gave an error. Mainly I just wanted this to point to the newest versions. Maybe fixed version is better / less prone to random new bugs as other things get updated so I should leave it as is for now and update version numbers manually moving forward?

4) If I make JEX a Command.class plugin, will the JEX plugin act like a modal window, blocking interaction with the main IJ2 UI while "running". If so, is there an alternative that won't block? I was hoping they could be open, operating, and interacting at the same time. Is there a more appropriate plugin class to do this?

5) Can you pass the singular ImageJ context/gateway as a parameter to the plugin or only services and whatnot? i.e., can I do the following?

	@Parameter
	private ImageJ ij;

6) I figure once things look a bit more reasonable as far as project readiness, I'll do the update site thing :-) Thanks for the tips and website. The instructions seem fairly straight forward.

Thanks in advance, for any help you can provide. The github repo for what I've done is here... (https://github.com/jaywarrick/JEX_IJ2) I've added you as a collaborator. I imagine this repo is what Erwin and I will build up, pulling JEX code in and cleaning/converting things as we do so.

Cheers,

Jay

On Apr 17, 2014, at 10:32 AM, Curtis Rueden <ctrueden at wisc.edu> wrote:

> Hi Jay & Erwin,
> 
> > Erwin and I are exploring the idea of a new version of JEX that would
> > itself be a plugin of ImageJ.
> 
> That would be fantastic.
>  
> > There are a few different ways this could be developed... Either as
> > part of the imagej managed code base (i.e. a package within a current
> > ImageJ2 project or as its own maven project that is updated and
> > managed like the rest of the ImageJ2 suite of projects like ij-app,
> > ij-core, etc.) or as a completely separate project that we jarify and
> > allow users to put into the plugin folder of ImageJ afterward.
> 
> The model we are targeting is "one Git repository per JAR file" with each being a Maven module with its own version. We have already completed this transition with the Fiji project [1], and ImageJ2 will be completely structured that way soon as well. This approach has many advantages:
> 
> 1) Stable release version couplings between components, so that if an upstream component changes, downstream components are not affected/broken until they intentionally upgrade to the newer version.
> 
> 2) Independent versioning of each component. When a bug is fixed in a particular component, we just release a new version of that component. No need to cut vacuous releases of the entire collection of ImageJ2 JARs.
> 
> 3) Easier and less intimidating to contribute to an individual plugin: just fork that one repo, push your changes and file a PR. No need to clone an all-encompassing fiji.git or imagej.git repository.
> 
> Further, in the Fiji project, each module is now what we call an "external plugin" that lives in its own repository, either in the github.com/fiji namespace, or in some cases [2, 3] in the plugin developer's personal space (doesn't matter that much).
> 
> ImageJ2 and Fiji support multiple update sites [4]. There is a core ImageJ2 update site [5], a core Fiji update site [6], and many others as well [7]. JEX would be a perfect fit for its own update site, giving you full control over every aspect of your releases while leveraging the power of ImageJ2 for deployment to your users.
> 
> In short: I would suggest creating a personal update site for JEX and serving your releases from there. That way, anyone using ImageJ2 or Fiji can install JEX simply by checking a box. For details, see:
> 
>     http://fiji.sc/How_to_set_up_and_populate_an_update_site
> 
> And as you know I would certainly advise structuring JEX as a Maven project, though it is not required. Here is a template you can use as a starting point:
> 
>     https://github.com/imagej/minimal-ij1-plugin
> 
> Very happy to answer any questions our issues you have on your journey. :-)
> 
> Regards,
> Curtis
> 
> [1] https://github.com/fiji
> [2] https://github.com/tferr/ASA
> [3] git://repo.or.cz/trakem2.git
> [4] http://fiji.sc/Update_Sites
> [5] http://update.imagej.net/
> [6] http://fiji.sc/update/
> [7] http://fiji.sc/List_of_update_sites
> 
> 
> On Thu, Apr 17, 2014 at 9:41 AM, Jay Warrick <warrick at wisc.edu> wrote:
> Sorry to clog your inbox. Evidently this didn't send last night and it got sent without closing the email... 
> 
> Any ideas or suggestions on a development approach would be welcome. You have sold me/us on your approach to application development. We want to integrate ourselves the best way possible but don't want to bring the project down by being less professional in our coding abilities and practices. We'll do our best but I'm not sure we'll ever be able to be on par with the rest of you guys :-)
> 
> I look forward to hearing from you. Thanks,
> 
> Jay (and Erwin)
> 
> 
> Begin forwarded message:
> 
>> From: Jay Warrick <warrick at wisc.edu>
>> Subject: JEX
>> Date: April 17, 2014 at 9:35:04 AM CDT
>> To: Curtis Rueden <ctrueden at wisc.edu>
>> 
>> Hi Curtis,
>> 
>> Erwin and I are exploring the idea of a new version of JEX that would itself be a plugin of ImageJ.
>> 
>> There are a few different ways this could be developed... Either as part of the imagej managed code base (i.e. a package within a current ImageJ2 project or as its own maven project that is updated and managed like the rest of the ImageJ2 suite of projects like ij-app, ij-core, etc.) or as a completely separate project that we jarify and allow users to put into the plugin folder of ImageJ afterward. What might you recommend? We don't want to impose or muddy up your architecture but also really like the idea of being well-integrated with your current lifecycle management schemes (i.e. maven dependancies, compiling, versioning, and updating of jars (Jenkins etc).
>> 
>> 
> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140420/cbb9c134/attachment.html>

From eliceiri at wisc.edu  Tue Apr 22 07:41:49 2014
From: eliceiri at wisc.edu (Kevin W Eliceiri)
Date: Tue, 22 Apr 2014 07:41:49 -0500
Subject: [ImageJ-devel] JEX
In-Reply-To: <CADN69y=kkztqdEXWPyAmf-nEOgS5wipmUr-FGqXceYxtOwJ1Ow@mail.gmail.com>
References: <F3963F7B-B5D8-4549-A26A-B774571A7DEA@wisc.edu>
	<8DCE1A3A-F03D-4129-8ACB-716491ECC054@wisc.edu>
	<CADN69y=kkztqdEXWPyAmf-nEOgS5wipmUr-FGqXceYxtOwJ1Ow@mail.gmail.com>
Message-ID: <76f09031111e9.53561d3d@wiscmail.wisc.edu>

this is great guys, glad to seek

On 04/17/14, Curtis Rueden  wrote:
> Hi Jay & Erwin,
> 
> > Erwin and I are exploring the idea of a new version of JEX that would
> > itself be a plugin of ImageJ.
> 
> 
> That would be fantastic.
> 
> > There are a few different ways this could be developed... Either as
> > part of the imagej managed code base (i.e. a package within a current
> > ImageJ2 project or as its own maven project that is updated and
> > managed like the rest of the ImageJ2 suite of projects like ij-app,
> > ij-core, etc.) or as a completely separate project that we jarify and
> > allow users to put into the plugin folder of ImageJ afterward.
> 
> 
> 
> The model we are targeting is "one Git repository per JAR file" with each being a Maven module with its own version. We have already completed this transition with the Fiji project [1], and ImageJ2 will be completely structured that way soon as well. This approach has many advantages:
> 
> 
> 1) Stable release version couplings between components, so that if an upstream component changes, downstream components are not affected/broken until they intentionally upgrade to the newer version.
> 
> 
> 2) Independent versioning of each component. When a bug is fixed in a particular component, we just release a new version of that component. No need to cut vacuous releases of the entire collection of ImageJ2 JARs.
> 
> 
> 3) Easier and less intimidating to contribute to an individual plugin: just fork that one repo, push your changes and file a PR. No need to clone an all-encompassing fiji.git or imagej.git repository.
> 
> 
> Further, in the Fiji project, each module is now what we call an "external plugin" that lives in its own repository, either in the github.com/fiji(http://github.com/fiji) namespace, or in some cases [2, 3] in the plugin developer&#39;s personal space (doesn&#39;t matter that much).
> 
> 
> ImageJ2 and Fiji support multiple update sites [4]. There is a core ImageJ2 update site [5], a core Fiji update site [6], and many others as well [7]. JEX would be a perfect fit for its own update site, giving you full control over every aspect of your releases while leveraging the power of ImageJ2 for deployment to your users.
> 
> 
> In short: I would suggest creating a personal update site for JEX and serving your releases from there. That way, anyone using ImageJ2 or Fiji can install JEX simply by checking a box. For details, see:
> 
> 
> http://fiji.sc/How_to_set_up_and_populate_an_update_site
> 
> 
> 
> And as you know I would certainly advise structuring JEX as a Maven project, though it is not required. Here is a template you can use as a starting point:
> 
> 
> https://github.com/imagej/minimal-ij1-plugin
> 
> 
> Very happy to answer any questions our issues you have on your journey. :-)
> 
> 
> Regards,
> Curtis
> 
> 
> [1]?https://github.com/fiji
> [2]?https://github.com/tferr/ASA
> 
> [3]?git://repo.or.cz/trakem2.git(http://repo.or.cz/trakem2.git)
> [4]?http://fiji.sc/Update_Sites
> [5]?http://update.imagej.net/
> [6] http://fiji.sc/update/
> [7]?http://fiji.sc/List_of_update_sites
> 
> 
> 
> On Thu, Apr 17, 2014 at 9:41 AM, Jay Warrick <warrick at wisc.edu(javascript:main.compose()> wrote:
> 
> > Sorry to clog your inbox. Evidently this didn&#39;t send last night and it got sent without closing the email...?
> > 
> > Any ideas or suggestions on a development approach would be welcome. You have sold me/us on your approach to application development. We want to integrate ourselves the best way possible but don&#39;t want to bring the project down by being less professional in our coding abilities and practices. We&#39;ll do our best but I&#39;m not sure we&#39;ll ever be able to be on par with the rest of you guys :-)
> > 
> > 
> > I look forward to hearing from you. Thanks,
> > 
> > 
> > Jay (and Erwin)
> > 
> > 
> > Begin forwarded message:
> > 
> > 
> > > From: Jay Warrick <warrick at wisc.edu(javascript:main.compose()>
> > > 
> > > Subject: JEX
> > > 
> > > Date: April 17, 2014 at 9:35:04 AM CDT
> > > 
> > > To: Curtis Rueden <ctrueden at wisc.edu(javascript:main.compose()>
> > > 
> > > 
> > > Hi Curtis,
> > > 
> > > Erwin and I are exploring the idea of a new version of JEX that would itself be a plugin of ImageJ.
> > > 
> > > 
> > > There are a few different ways this could be developed... Either as part of the imagej managed code base (i.e. a package within a current ImageJ2 project or as its own maven project that is updated and managed like the rest of the ImageJ2 suite of projects like ij-app, ij-core, etc.) or as a completely separate project that we jarify and allow users to put into the plugin folder of ImageJ afterward. What might you recommend? We don&#39;t want to impose or muddy up your architecture but also really like the idea of being well-integrated with your current lifecycle management schemes (i.e. maven dependancies, compiling, versioning, and updating of jars (Jenkins etc).
> > > 
> > > 
> > > 
> > > 
> > > 
> > > 
> > > 
> > 
> > 
> > 
> > 
> > 

--
Kevin W. Eliceiri
Director,?Laboratory for Optical and Computational Instrumentation (LOCI)
Departments Cell and Molecular Biology and Biomedical Engineering
Affiliate Principal Investigator, Morgridge Institute for Research (MIR)
Room 271 Animal Sciences,?1675 Observatory Drive,?Madison, WI 53706
Phone: 608-263-6288


From ctrueden at wisc.edu  Wed Apr 23 10:42:53 2014
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Wed, 23 Apr 2014 10:42:53 -0500
Subject: [ImageJ-devel] ImageJ logo contest
Message-ID: <CADN69y=Xg+aCrDDmkk06nV+zX6uUEsS17T8_LByaQJ7Pwi9y+A@mail.gmail.com>

Hi everyone,

It would be great to finalize the logo for ImageJ2 in time for its initial
June 1 release. I would like to send an announcement to the main ImageJ
list announcing the contest and inviting logo submissions through Friday,
May 9. We'll create a page on the ImageJ wiki to house all the potential
logos.

Then voting can take place over the next two weeks until end of day on
Friday, May 23. That will give us enough time to update the ImageJ2
graphical resources to match the chosen logo.

How does that plan sound?

Regards,
Curtis
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140423/12e8e492/attachment.html>

From warrick at wisc.edu  Fri Apr 25 14:23:45 2014
From: warrick at wisc.edu (Jay Warrick)
Date: Fri, 25 Apr 2014 14:23:45 -0500
Subject: [ImageJ-devel] DefaultLegacyService.preinit Error
Message-ID: <EFB0D2F5-7218-49A9-B6E6-5BD63CEC546A@wisc.edu>

Hi All,

I'm creating a single instance of ImageJ (ImageJ2) in my program and using this instance to access the various services of ImageJ2. However, in previous work with Curtis Rueden, we found we had to add the following static code to the class which I use to access this single ImageJ instance so that the services load (I believe because of the presence of the ImageJ1 jar included along with the ImageJ2 group of jars). 

static
{
	DefaultLegacyService.preinit();
}

However I ran into the following issue. 

With Java 1.6 and 1.7 installed on my system everything worked great. No issues. I downloaded and installed Java 1.8 and then I received the following error upon reaching this preinitialization code.

java.lang.IllegalArgumentException: Cannot handle app name in
ij.ImageJ's public <init>(java.applet.Applet applet, int mode)

at imagej.legacy.CodeHacker.replaceAppNameInCall(CodeHacker.java:498)

at imagej.legacy.LegacyExtensions.insertAppNameHooks(LegacyExtensions.java:591)

at imagej.legacy.LegacyExtensions.injectHooks(LegacyExtensions.java:516)

at imagej.legacy.LegacyInjector.injectHooks(LegacyInjector.java:154)

at imagej.legacy.LegacyInjector.injectHooks(LegacyInjector.java:57)

at imagej.legacy.DefaultLegacyService.<clinit>(DefaultLegacyService.java:109)

I then used the old but useful "Java Preferences.app" to change the default order of preferred jres. I moved 1.7 ahead of 1.8 and the application worked again. Then I put 1.8 above 1.8 again and the problem no longer occurred. I can't repeat the problem on my computer but another person is having the same issue. I'll likely have him do what I did but this seems like a silly work around. Do you know what might be the root cause? Am I just using the ImageJ2 project with inappropriate/unsupported jre's even though it eventually works under 1.8.

Thanks,

Jay



From warrick at wisc.edu  Sat Apr 26 03:14:44 2014
From: warrick at wisc.edu (Jay Warrick)
Date: Sat, 26 Apr 2014 03:14:44 -0500
Subject: [ImageJ-devel] IJ2 Plugin Service
Message-ID: <13D7A230-4A2E-4E2D-BBC0-414FCCB41106@wisc.edu>

Sorry resending this from a registered email.

Hi All,

I use Eclipse and use the eclipse function to export my program as a runnable jar with referenced jars packaged in the application jar. I use the IJ plugin service to discover both IJ plugins of type Command.class as well as my own type called JEXPlugin.class. When I run the application from eclipse, the JEXPlugins are discovered by the ij.plugin() service. However, when I export the application as a runnable jar, ij.plugin()service returns all the Command.class plugins but 0 plugins of type JEXPlugin.class using the call "ij.plugin().getPluginsOfType(JEXPlugin.class);"

Any idea why or how to fix it?

Thanks,

Jay


From hinerm at gmail.com  Sat Apr 26 11:25:06 2014
From: hinerm at gmail.com (Mark Hiner)
Date: Sat, 26 Apr 2014 11:25:06 -0500
Subject: [ImageJ-devel] Converting ImgPlus to ImagePlus
Message-ID: <CA+B=mGruRUbpP=3jrc9LYMo7Z4b4Jv_mhUyKGn2_M3F71CtF6w@mail.gmail.com>

Hi all (especially ImgLib developers)

 I was just wondering - what is the correct way to convert a list of ImgPluses
<https://github.com/imglib/imglib/blob/master/meta/src/main/java/net/imglib2/meta/ImgPlus.java>to
an ij.ImagePlus?

 I thought imglib-ij <https://github.com/imglib/imglib-ij> provided this
functionality, but it seems like it's only in the IJ->ImgLib2 direction.

Thanks for the help,
Mark
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140426/b2d15460/attachment.html>

From bugzilla at fiji.sc  Sun Apr 27 21:20:15 2014
From: bugzilla at fiji.sc (bugzilla at fiji.sc)
Date: Mon, 28 Apr 2014 02:20:15 +0000
Subject: [ImageJ-devel] [Bug 732] New: "Subtract Background" exception via
	macro/batch mode
Message-ID: <bug-732-194@http.fiji.sc/bugzilla/>

http://fiji.sc/bugzilla/show_bug.cgi?id=732

            Bug ID: 732
           Summary: "Subtract Background" exception via macro/batch mode
           Product: Fiji
           Version: unspecified
          Hardware: PC
                OS: All
            Status: NEW
          Severity: enhancement
          Priority: P3
         Component: ImageJ2
          Assignee: imagej-devel at imagej.net
          Reporter: bryancallahan at gmail.com

Created attachment 144
  --> http://fiji.sc/bugzilla/attachment.cgi?id=144&action=edit
Macro Log

When running subtract background via macro...

run("Subtract Background...", "rolling=50 light separate");

...the follow exception appears consistently across all platforms/builds. I
wanted to start trying to fix this exception on my end but I can't seem to find
the source for BackgroundSubtracter.java in any of the repos. I would
appreciate help in this area (url to source) or if this defect can be expedited
that would also be great. I'm a resource to you so please let me know how I can
be a part of this solution. It's really important for me as it's currently a
blocking defect and has been for the past two weeks. Any input would be
/greatly/ appreciated.

java.lang.VerifyError: (class: ij/gui/GenericDialog, method: setLocation
signature: (II)V) Illegal use of nonvirtual function call
    at
ij.plugin.filter.BackgroundSubtracter.showDialog(BackgroundSubtracter.java:82)
    at ij.plugin.filter.PlugInFilterRunner.<init>(PlugInFilterRunner.java:61)
    at ij.IJ.runPlugIn(IJ.java:171)
    at ij.Executer.runCommand(Executer.java:131)
    at ij.Executer.run(Executer.java:64)
    at ij.IJ.run(IJ.java:269)
    at ij.macro.Functions.doRun(Functions.java:590)
    at ij.macro.Functions.doFunction(Functions.java:89)
    at ij.macro.Interpreter.doStatement(Interpreter.java:226)
    at ij.macro.Interpreter.doStatements(Interpreter.java:214)
    at ij.macro.Interpreter.run(Interpreter.java:111)
    at ij.macro.Interpreter.run(Interpreter.java:81)
    at ij.macro.Interpreter.run(Interpreter.java:92)
    at ij.plugin.Macro_Runner.runMacro(Macro_Runner.java:153)
    at ij.plugin.Macro_Runner.runMacroFile(Macro_Runner.java:137)
    at ij.IJ.runMacroFile(IJ.java:130)
    at ij.ImageJ.main(ImageJ.java:678)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
    at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
    at java.lang.reflect.Method.invoke(Method.java:597)
    at imagej.patcher.LegacyEnvironment.main(LegacyEnvironment.java:190)
    at fiji.Main.main(Main.java:155)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
    at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
    at java.lang.reflect.Method.invoke(Method.java:597)
    at imagej.ClassLauncher.launch(ClassLauncher.java:222)
    at imagej.ClassLauncher.run(ClassLauncher.java:159)
    at imagej.ClassLauncher.main(ClassLauncher.java:72)

-- 
You are receiving this mail because:
You are the assignee for the bug.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140428/aace1c53/attachment.html>

From bugzilla at fiji.sc  Sun Apr 27 21:21:01 2014
From: bugzilla at fiji.sc (bugzilla at fiji.sc)
Date: Mon, 28 Apr 2014 02:21:01 +0000
Subject: [ImageJ-devel] [Bug 732] "Subtract Background" exception via
	macro/batch mode
In-Reply-To: <bug-732-194@http.fiji.sc/bugzilla/>
References: <bug-732-194@http.fiji.sc/bugzilla/>
Message-ID: <bug-732-194-wsOoZjcFw2@http.fiji.sc/bugzilla/>

http://fiji.sc/bugzilla/show_bug.cgi?id=732

bryancallahan at gmail.com changed:

           What    |Removed                     |Added
----------------------------------------------------------------------------
           Severity|enhancement                 |major

-- 
You are receiving this mail because:
You are the assignee for the bug.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140428/f8a825d2/attachment.html>

From ctrueden at wisc.edu  Mon Apr 28 13:28:19 2014
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Mon, 28 Apr 2014 13:28:19 -0500
Subject: [ImageJ-devel] Converting ImgPlus to ImagePlus
In-Reply-To: <CA+B=mGruRUbpP=3jrc9LYMo7Z4b4Jv_mhUyKGn2_M3F71CtF6w@mail.gmail.com>
References: <CA+B=mGruRUbpP=3jrc9LYMo7Z4b4Jv_mhUyKGn2_M3F71CtF6w@mail.gmail.com>
Message-ID: <CADN69ykDiOprZFoHRAtT-9E6jqUn0zvosyfvtLf9NXzt+OcNEw@mail.gmail.com>

Hi all,

> what is the correct way to convert a list of ImgPluses to an
> ij.ImagePlus?

Mark & I discussed offline, but for lurkers, the answer is:

net.imglib2.img.display.imagej.ImageJFunctions.wrap(RandomAccessibleInterval,
String)

Regards,
Curtis


On Sat, Apr 26, 2014 at 11:25 AM, Mark Hiner <hinerm at gmail.com> wrote:

> Hi all (especially ImgLib developers)
>
>  I was just wondering - what is the correct way to convert a list of ImgPluses
>
> <https://github.com/imglib/imglib/blob/master/meta/src/main/java/net/imglib2/meta/ImgPlus.java>to
> an ij.ImagePlus?
>
>  I thought imglib-ij <https://github.com/imglib/imglib-ij> provided this
> functionality, but it seems like it's only in the IJ->ImgLib2 direction.
>
> Thanks for the help,
> Mark
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140428/40edd24d/attachment.html>

From bnorthan at gmail.com  Mon Apr 28 17:50:56 2014
From: bnorthan at gmail.com (Brian Northan)
Date: Tue, 29 Apr 2014 06:50:56 +0800
Subject: [ImageJ-devel] IJ2 Plugin Service
In-Reply-To: <13D7A230-4A2E-4E2D-BBC0-414FCCB41106@wisc.edu>
References: <13D7A230-4A2E-4E2D-BBC0-414FCCB41106@wisc.edu>
Message-ID: <D1154287-0198-4666-B234-F64369127CB3@gmail.com>

Hi Jay

I am somewhat new to the ImageJ2 ecosystem.  So somebody more experienced then I am will probably be able to give you a better answer.

That being said here are a couple of things that might help. 

 I've found to get the pluginservice to recognize changes to plugins in a jar (name changes, new plugins, etc.) I have to do a complete clean of the project. 

If I need to run outside eclipse I use maven plugins from the command line to build things.  I use the dependency plugin to compile all my dependencies in the same directory, then add that directory (target/dependency) to the class path.

I end up doing something like this.

mvn clean
mvn
mvn dependency:copy-dependencies.

To create an executable jar you might want to look at the maven assembly plugin.

Brian


On Sat, Apr 26, 2014 at 4:14 AM, Jay Warrick <warrick at wisc.edu> wrote:
> Sorry resending this from a registered email.
> 
> Hi All,
> 
> I use Eclipse and use the eclipse function to export my program as a runnable jar with referenced jars packaged in the application jar. I use the IJ plugin service to discover both IJ plugins of type Command.class as well as my own type called JEXPlugin.class. When I run the application from eclipse, the JEXPlugins are discovered by the ij.plugin() service. However, when I export the application as a runnable jar, ij.plugin()service returns all the Command.class plugins but 0 plugins of type JEXPlugin.class using the call "ij.plugin().getPluginsOfType(JEXPlugin.class);"
> 
> Any idea why or how to fix it?
> 
> Thanks,
> 
> Jay
> 
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140429/69c1692b/attachment.html>

From bugzilla at fiji.sc  Tue Apr 29 10:37:08 2014
From: bugzilla at fiji.sc (bugzilla at fiji.sc)
Date: Tue, 29 Apr 2014 15:37:08 +0000
Subject: [ImageJ-devel] [Bug 732] "Subtract Background" exception via
	macro/batch mode
In-Reply-To: <bug-732-194@http.fiji.sc/bugzilla/>
References: <bug-732-194@http.fiji.sc/bugzilla/>
Message-ID: <bug-732-194-yoRJ4Bc4oV@http.fiji.sc/bugzilla/>

http://fiji.sc/bugzilla/show_bug.cgi?id=732

Johannes Schindelin <johannes.schindelin at gmx.de> changed:

           What    |Removed                     |Added
----------------------------------------------------------------------------
                 CC|                            |johannes.schindelin at gmx.de

--- Comment #1 from Johannes Schindelin <johannes.schindelin at gmx.de> ---
To clarify: this happens *only* in headless mode, and *only* if ImageJ 1.48t or
newer is used.

As a work-around, you can download
http://jenkins.imagej.net/job/ImageJ-1.x-patcher/lastSuccessfulBuild/artifact/target/ij1-patcher-0.3.3-SNAPSHOT.jar
and replace your local Fiji.app/jars/ij1-patcher-0.1.1.jar with it.

-- 
You are receiving this mail because:
You are the assignee for the bug.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140429/632c6569/attachment.html>

From bugzilla at fiji.sc  Tue Apr 29 10:53:41 2014
From: bugzilla at fiji.sc (bugzilla at fiji.sc)
Date: Tue, 29 Apr 2014 15:53:41 +0000
Subject: [ImageJ-devel] [Bug 732] "Subtract Background" exception via
	macro/batch mode
In-Reply-To: <bug-732-194@http.fiji.sc/bugzilla/>
References: <bug-732-194@http.fiji.sc/bugzilla/>
Message-ID: <bug-732-194-cWJdm5NC2I@http.fiji.sc/bugzilla/>

http://fiji.sc/bugzilla/show_bug.cgi?id=732

--- Comment #2 from bryancallahan at gmail.com ---
Thank you so much for your quick help Johannes! I can verify that this is now
working as expected on my end via the provided patch solution. Thanks again!
Please let me know if I can ever be of any help.

All the best,

Bryan

-- 
You are receiving this mail because:
You are the assignee for the bug.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140429/aab35995/attachment.html>

From ctrueden at wisc.edu  Wed Apr 30 09:55:33 2014
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Wed, 30 Apr 2014 09:55:33 -0500
Subject: [ImageJ-devel] [LOCI ImageJ] IJ2 Plugin Service
In-Reply-To: <13D7A230-4A2E-4E2D-BBC0-414FCCB41106@wisc.edu>
References: <13D7A230-4A2E-4E2D-BBC0-414FCCB41106@wisc.edu>
Message-ID: <CADN69y=bPp78mp7QFCsB+jOzGKkb0n-2y40xH6dfgeNPNX3WCA@mail.gmail.com>

Hi Jay,

> when I export the application as a runnable jar, ij.plugin()service
> returns all the Command.class plugins but 0 plugins of type
> JEXPlugin.class

This is an issue we have discussed before: Eclipse creates uberjars using a
"jar-in-jar" approach, and SciJava Common's plugin mechanism does not read
the metadata out of a jar-in-jar. Almost certainly this is because the
classloader being used to discover the SciJava plugins is not the one
embedded in the uberjar to enable loading of classes from inside nested
JARs. The question is: why not?

I filed an issue:
https://github.com/scijava/scijava-common/issues/40

Brian Northan wrote:

> To create an executable jar you might want to look at the maven
> assembly plugin.

That is indeed how we create the current ImageJ uberjar at:
http://developer.imagej.net/how-can-i-call-imagej-my-software

However, that uberjar does not shade (i.e., rename) its dependencies, and
is hence broken when attempting to combine it with other versions of those
same dependencies. So we discourage its use. To create an uberjar with
properly shaded dependencies, the maven-shade-plugin can be used. We
haven't had time to experiment with this approach yet.

The Eclipse "jar-in-jar" approach seems potentially useful, except for the
annoying classloader issues that go along with it, because it avoids
multiple JARs with the same contents overwriting on one another's resources.

Regards,
Curtis


On Sat, Apr 26, 2014 at 3:14 AM, Jay Warrick <warrick at wisc.edu> wrote:

> Sorry resending this from a registered email.
>
> Hi All,
>
> I use Eclipse and use the eclipse function to export my program as a
> runnable jar with referenced jars packaged in the application jar. I use
> the IJ plugin service to discover both IJ plugins of type Command.class as
> well as my own type called JEXPlugin.class. When I run the application from
> eclipse, the JEXPlugins are discovered by the ij.plugin() service. However,
> when I export the application as a runnable jar, ij.plugin()service returns
> all the Command.class plugins but 0 plugins of type JEXPlugin.class using
> the call "ij.plugin().getPluginsOfType(JEXPlugin.class);"
>
> Any idea why or how to fix it?
>
> Thanks,
>
> Jay
>
> _______________________________________________
> ImageJ mailing list
> ImageJ at loci.wisc.edu
> http://loci.wisc.edu/mailman/listinfo/imagej
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140430/603c1a1e/attachment.html>

From ctrueden at wisc.edu  Wed Apr 30 11:43:51 2014
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Wed, 30 Apr 2014 11:43:51 -0500
Subject: [ImageJ-devel] DefaultLegacyService.preinit Error
In-Reply-To: <EFB0D2F5-7218-49A9-B6E6-5BD63CEC546A@wisc.edu>
References: <EFB0D2F5-7218-49A9-B6E6-5BD63CEC546A@wisc.edu>
Message-ID: <CADN69y=M-noO8Rn=XH9eZa1jR3ujFOhOQqLpAkh0_qLDcqautQ@mail.gmail.com>

Hi Jay,

> I downloaded and installed Java 1.8 and then I received the following
error
> upon reaching this preinitialization code.
>
> java.lang.IllegalArgumentException: Cannot handle app name in ij.ImageJ's
> public <init>(java.applet.Applet applet, int mode)

Just from your description, I have no idea what could cause such behavior.
If you are able to reproduce reliably on multiple machines, please feel
free to open an issue at
https://github.com/imagej/imagej-legacy/issues/newand we will
investigate. It will be later some time this summer though,
after the June 1 release; for now, we definitely recommend sticking to Java
6 or Java 7.

Regards,
Curtis


On Fri, Apr 25, 2014 at 2:23 PM, Jay Warrick <warrick at wisc.edu> wrote:

> Hi All,
>
> I'm creating a single instance of ImageJ (ImageJ2) in my program and using
> this instance to access the various services of ImageJ2. However, in
> previous work with Curtis Rueden, we found we had to add the following
> static code to the class which I use to access this single ImageJ instance
> so that the services load (I believe because of the presence of the ImageJ1
> jar included along with the ImageJ2 group of jars).
>
> static
> {
>         DefaultLegacyService.preinit();
> }
>
> However I ran into the following issue.
>
> With Java 1.6 and 1.7 installed on my system everything worked great. No
> issues. I downloaded and installed Java 1.8 and then I received the
> following error upon reaching this preinitialization code.
>
> java.lang.IllegalArgumentException: Cannot handle app name in
> ij.ImageJ's public <init>(java.applet.Applet applet, int mode)
>
> at imagej.legacy.CodeHacker.replaceAppNameInCall(CodeHacker.java:498)
>
> at
> imagej.legacy.LegacyExtensions.insertAppNameHooks(LegacyExtensions.java:591)
>
> at imagej.legacy.LegacyExtensions.injectHooks(LegacyExtensions.java:516)
>
> at imagej.legacy.LegacyInjector.injectHooks(LegacyInjector.java:154)
>
> at imagej.legacy.LegacyInjector.injectHooks(LegacyInjector.java:57)
>
> at
> imagej.legacy.DefaultLegacyService.<clinit>(DefaultLegacyService.java:109)
>
> I then used the old but useful "Java Preferences.app" to change the
> default order of preferred jres. I moved 1.7 ahead of 1.8 and the
> application worked again. Then I put 1.8 above 1.8 again and the problem no
> longer occurred. I can't repeat the problem on my computer but another
> person is having the same issue. I'll likely have him do what I did but
> this seems like a silly work around. Do you know what might be the root
> cause? Am I just using the ImageJ2 project with inappropriate/unsupported
> jre's even though it eventually works under 1.8.
>
> Thanks,
>
> Jay
>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140430/0b851968/attachment.html>

From ctrueden at wisc.edu  Wed Apr 30 12:03:48 2014
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Wed, 30 Apr 2014 12:03:48 -0500
Subject: [ImageJ-devel] Module structure for OPS,
	and support for scripting
In-Reply-To: <alpine.DEB.1.00.1403291819001.14982@s15462909.onlinehome-server.info>
References: <CADN69y=82bwg2hAFufmR4amJ2fn6jXbaibrZ9stp===qFXaq5g@mail.gmail.com>
	<alpine.DEB.1.00.1403291819001.14982@s15462909.onlinehome-server.info>
Message-ID: <CADN69ymNuHc4__kuk5wNbBxe+BkZokm_=U5-+8LqQNko7jhDTw@mail.gmail.com>

Hi all,

To follow up on this old thread:

> "What is SciJava, and what is ImageJ?"
>
> The intuition that appeals to me is: if it is image-specific, it is
> part of ImageJ. And if it is more general, it lives in SciJava.

Earlier this week, we completed a refactoring of the ImageJ2 component
structure in line with this intuition:

* https://github.com/imagej -- contains components specific to image
processing.
* https://github.com/scijava -- contains foundation components which are
*not* specific to images.

Each component lives in its own Git repository as a single-module Maven
project, with release version couplings to other components.

The ImageJ2 application is now made up of the following core components:

* imagej-common -- the core ImageJ library and data model built on ImgLib2
* imagej-ops -- the framework for extensible image processing algorithms
announced earlier this month
* imagej-updater -- the famous ImageJ Updater which keeps people up-to-date
* imagej-launcher -- the command line executable for launching ImageJ
* imagej-legacy -- the glue component providing backwards compatibility
with ImageJ 1.x
* scijava-common -- the core library for non-image-processing-specific
logic, including the plugin mechanism, application container, and module
framework

ImageJ2 also includes the following optional plugin components:

* imagej-plugins-commands -- built-in commands (i.e., most of the ImageJ
menu structure)
* imagej-plugins-tools -- built-in tools (i.e., the toolbar buttons)
* imagej-plugins-uploader-* -- plugins for the ImageJ Updater which make it
possible to upload to ImageJ update sites
* imagej-ui-swing -- the "modern" ImageJ2 user interface
* scijava-plugins-platforms -- platform-specific logic (stuff like "how do
I open a web browser on OS X?")
* scijava-plugins-text-* -- plugins for rendering text formats like Markdown
* scripting-* -- plugins for the various scripting languages: Beanshell,
Clojure, etc.

More details at:
http://jenkins.imagej.net/job/ImageJ-daily/lastSuccessfulBuild/artifact/target/site/dependencies.html

Lastly, a couple of comments relating to earlier messages in this thread:

* We decided not to split imagej-ops in half.
* The ij-core module and scripting code was thus migrated to scijava-common.

We aim to release a new ImageJ2 beta by the end of this week.

Regards,
Curtis


On Sat, Mar 29, 2014 at 12:24 PM, Johannes Schindelin
<schindelin at wisc.edu>wrote:

> Hi Curtis,
>
> On Sat, 29 Mar 2014, Curtis Rueden wrote:
>
> > * scijava-ops -> scijava-ops-OLD (or moved to "old-master" topic branch)
> >   -- preserve previous effort until all code has been successfully
> >   migrated out
>
> I would like to do that anyway.
>
> > * imagej-ops core framework -> scijava-ops
> >   -- the core framework is not image specific
>
> How about doing that later? There is no need to stress ourselves out about
> it; we can easily do that anytime.
>
> > * ij-core module framework -> migrate into scijava-ops
> >   -- that framework includes modules, commands, displays and widgets
> >   -- Christian asked me: why not move ij-core's module framework into
> > scijava-common?
> >   -- I strongly considered that, but instead I think it fits perfectly
> into
> > the OPS framework
>
> I agree, but I would suggest doing that later, too.
>
> > * imagej-ops image processing ops -> stay in imagej-ops
> >   -- these ops are image-specific, and depend on ImgLib2
>
> That makes absolute sense (as the above), but I would like to focus on
> using ij-ops first. Traditionally, it has been much easier to develop a
> fast-moving project when it is maintained in a single repository.
>
> > * imagej-ops widgets -> stay in imagej-ops
> >   -- and move Swing-specific code into ij-ui-swing
>
> I guess that probably needs to happen sooner rather than later because the
> technical debt incurred by mixing UI with processing can be a huge pain in
> the back side.
>
> > * ij-core scripting framework -> scijava-scripting
> >   -- scripting support is not image-specific
> >
> > * ij-scripting-* -> scijava-scripting-*
> >   -- each of these has different, often very large, dependencies
>
> I agree that this is a good plan, but again, I would love to see this
> happening later. Preferably after switching Fiji to the ImageJ2 script
> editor because I see a couple of architectural questions looming for us;
> These architectural issues are much easier solved when all involved code
> lives in the same repository.
>
> > * other ij-core unrelated stuff -> think more; consider case-by-case
> >   -- maybe some goes to scijava-common...
> >   -- would be nice if the "ij-core" module could completely go away
>
> Whoa. Radical food for thought. But I begin to see your reasoning and to
> agree.
>
> > I know that such changes would rock the boat... again. But before we get
> > too much farther along I would like to have a very clear, sensible policy
> > which answers the question: "What is SciJava, and what is ImageJ?" And I
> > think the structure above would do that, and be a really strong
> foundation
> > for the next decade at least.
>
> Makes sense. How about revisiting the split in two weeks? We could even
> call it milestone 0.2.0.
>
> Ciao,
> Dscho
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140430/ffebf1d7/attachment.html>

From Johannes.Schindelin at gmx.de  Wed Apr 30 12:51:31 2014
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Wed, 30 Apr 2014 19:51:31 +0200 (CEST)
Subject: [ImageJ-devel] [LOCI ImageJ] IJ2 Plugin Service
In-Reply-To: <CADN69y=bPp78mp7QFCsB+jOzGKkb0n-2y40xH6dfgeNPNX3WCA@mail.gmail.com>
References: <13D7A230-4A2E-4E2D-BBC0-414FCCB41106@wisc.edu>
	<CADN69y=bPp78mp7QFCsB+jOzGKkb0n-2y40xH6dfgeNPNX3WCA@mail.gmail.com>
Message-ID: <alpine.DEB.1.00.1404301923500.14982@s15462909.onlinehome-server.info>

Hi,

On Wed, 30 Apr 2014, Curtis Rueden wrote:

> > when I export the application as a runnable jar, ij.plugin()service
> > returns all the Command.class plugins but 0 plugins of type
> > JEXPlugin.class
> 
> This is an issue we have discussed before: Eclipse creates uberjars using a
> "jar-in-jar" approach, and SciJava Common's plugin mechanism does not read
> the metadata out of a jar-in-jar.

Please note that the jar-in-jar poses no problem, unless the ClassLoader
used to access them is broken: it needs to support the getResources() call
properly and find the resource files contained in the nested .jar files.

However, in the reported case I believe it is not triggered by the uber
jar or jar-in-jar scenario.

Background: The internal technique behind the plugins uses annotation
processors run at compile time. They basically look at each file that has
a @Plugin annotation and write out index files that get included into the
.jar files.

Except that Eclipse -- violating the Java specification -- does not run
annotation processors. At least not by default, and even if you switch it
on (manually, for each and every project you maintain, one by one), it
*still* only runs them on full builds (i.e. after Project>Clean).

So it looks to me that in the reported case, the annotation processor is
never run, and as a consequence, the index file is never written, and
therefore it cannot be found at runtime.

Of course, Eclipse being such a prevalent platform to develop in, we tried
to come up with a workaround: whenever the annotation indexes are read, a
class called "EclipseHelper" tries to detect whether it needs to create
the index files because Eclipse failed to run the annotation processors.

This works amazingly well because many developers have written unit tests
and run them before bundling .jar files manually. These unit tests verify
that plugins work, of course, which is why the EclipseHelper works around
the problem successfully in most cases.

Also, here is a lesson for everybody choosing to learn from our past
mistakes and experiences: any possible convenience of uber jars is
outweighed multiple times over by the disadvantages it incurs to users: it
makes updating really costly (every time it's time to update, a new
monster .jar needs to be downloaded), it makes collaboration between
projects difficult at best, and it certainly asks for version skew.

Ciao,
Johannes


From warrick at wisc.edu  Wed Apr 30 19:49:27 2014
From: warrick at wisc.edu (Jay Warrick)
Date: Wed, 30 Apr 2014 19:49:27 -0500
Subject: [ImageJ-devel] [LOCI ImageJ] IJ2 Plugin Service
In-Reply-To: <alpine.DEB.1.00.1404301923500.14982@s15462909.onlinehome-server.info>
References: <13D7A230-4A2E-4E2D-BBC0-414FCCB41106@wisc.edu>
	<CADN69y=bPp78mp7QFCsB+jOzGKkb0n-2y40xH6dfgeNPNX3WCA@mail.gmail.com>
	<alpine.DEB.1.00.1404301923500.14982@s15462909.onlinehome-server.info>
Message-ID: <853DAAEA-E381-4A8A-8ACB-F2608E63BB7F@wisc.edu>

Hi All,

Thanks for all these replies folks. Digging around yesterday afternoon and evening essentially painted a picture much like what Johannes indicated in his email. The getResource() method works just fine and works roughly the same whether you do A) jars-in-a-jar or B) jars (reference libraries) in a folder next to a jar (my program), which are two of the 3 possible modes of exporting runnable jars. The third option, C), actually extracts all the class files and reorganizes them into a single flat jar (i.e., not jar-in-jar but just a single uber-jar of classes in folders), which I haven't used in the past for other reasons as well. 

Instead, it seems (I say seems because I only dabble in ClassLoaders) their is no way to compile a list of my program's class files for indexing annotation using just the method getResource() or getResources() without knowing the name of at least a single resource in my program's jar. The getResources() method just gives a list of the referenced jars and not the main program's jar itself.  However, if I want sci-java to work agnostic of who's using it, I can't assume within the sci-java code that I ever know of a specific resource to look for. Even if getResource() does give a path to my program's jar, the jar does not have the META-INF/json/<package>.Plugin file that contains the results of indexing. The key to the EclipseHelper is that it actually uses the getURLs() method of the URLClassLoader instead of the getResources(). When running from eclipse, this method gives the path to my referenced jars and the programs bin folder. When running from jar, the getURLs() method returns both the referenced libraries and my programs jar file (yay). However, since the jar file is not a directory, the EclipseHelper method does not index it and write the META-INF/json/<package>.Plugin file. The iteration method it uses requires directories, which is fine and dandy when running from within Eclipse but my program's JarFile doesn't look like a directory so the exact same mechanism doesn't work. However, it looks like a method analogous to this approach but for JarFiles might work., right? I think, to work, it would have to iteratively index the contents of the JarFile and add a META-INF/json/<package>.Plugin file as a new Jar entry (as far as I can see anyway, I could definitely be wrong). I am trying to hack something together to show whether this would work at all but if any of you think this approach would benefit others, I'd welcome suggestions and would try to clean it up as much as I can for a pull request. It seems like the EclipseHelper is used when the class loader is an instance of URLClassLoader (plus some other tests...) which happens to occur both when running from eclipse and when exported as a runnable jar. So, on the surface at least, it looks like the EclipseHelper class could be used for both scenarios but am happy to change tacks if you think otherwise.

However, I have a couple specific questions, that if answered would help me to know if this might work at all and move forward.

0) Does my take on the situation seem right?

1) If I edit the programs jar file during run time by adding the META-INF/json/<package>.Plugin jar entry, will that majorly hose things?

2) The Index class still uses the getResources() method to find things and it will still only link to the referenced jar files. In this case we can't assume that the ClassLoader is a URLClassLoader to be able to use the getURLs method. I don't recall noticing when or how the indexing mechanism looks for these META-INF/json/<package>.Plugin files to compile all the annotation information. I assume it is via the getResource() method because I believe by knowing what to look for (i.e., a META-INF/json/<package>.Plugin file), we can just ask for the resource directly? In other words, if I can get the META-INF/json/<package>.Plugin written to my program's jar analogous to the other referenced jars, then everything will be OK?

Thanks thanks thanks,

Jay

On Apr 30, 2014, at 12:51 PM, Johannes Schindelin <Johannes.Schindelin at gmx.de> wrote:

> Hi,
> 
> On Wed, 30 Apr 2014, Curtis Rueden wrote:
> 
>>> when I export the application as a runnable jar, ij.plugin()service
>>> returns all the Command.class plugins but 0 plugins of type
>>> JEXPlugin.class
>> 
>> This is an issue we have discussed before: Eclipse creates uberjars using a
>> "jar-in-jar" approach, and SciJava Common's plugin mechanism does not read
>> the metadata out of a jar-in-jar.
> 
> Please note that the jar-in-jar poses no problem, unless the ClassLoader
> used to access them is broken: it needs to support the getResources() call
> properly and find the resource files contained in the nested .jar files.
> 
> However, in the reported case I believe it is not triggered by the uber
> jar or jar-in-jar scenario.
> 
> Background: The internal technique behind the plugins uses annotation
> processors run at compile time. They basically look at each file that has
> a @Plugin annotation and write out index files that get included into the
> .jar files.
> 
> Except that Eclipse -- violating the Java specification -- does not run
> annotation processors. At least not by default, and even if you switch it
> on (manually, for each and every project you maintain, one by one), it
> *still* only runs them on full builds (i.e. after Project>Clean).
> 
> So it looks to me that in the reported case, the annotation processor is
> never run, and as a consequence, the index file is never written, and
> therefore it cannot be found at runtime.
> 
> Of course, Eclipse being such a prevalent platform to develop in, we tried
> to come up with a workaround: whenever the annotation indexes are read, a
> class called "EclipseHelper" tries to detect whether it needs to create
> the index files because Eclipse failed to run the annotation processors.
> 
> This works amazingly well because many developers have written unit tests
> and run them before bundling .jar files manually. These unit tests verify
> that plugins work, of course, which is why the EclipseHelper works around
> the problem successfully in most cases.
> 
> Also, here is a lesson for everybody choosing to learn from our past
> mistakes and experiences: any possible convenience of uber jars is
> outweighed multiple times over by the disadvantages it incurs to users: it
> makes updating really costly (every time it's time to update, a new
> monster .jar needs to be downloaded), it makes collaboration between
> projects difficult at best, and it certainly asks for version skew.
> 
> Ciao,
> Johannes

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140430/8155fa73/attachment-0001.html>

From jay.w.warrick at gmail.com  Sat Apr 26 03:13:09 2014
From: jay.w.warrick at gmail.com (Jay Warrick)
Date: Sat, 26 Apr 2014 08:13:09 -0000
Subject: [ImageJ-devel] IJ2 Plugin Service
Message-ID: <1666B842-8E03-4B30-86F3-ED68490FDE12@gmail.com>

Hi All,

I use Eclipse and use the eclipse function to export my program as a runnable jar with referenced jars packaged in the application jar. I use the IJ plugin service to discover both IJ plugins of type Command.class as well as my own type called JEXPlugin.class. When I run the application from eclipse, the JEXPlugins are discovered by the ij.plugin() service. However, when I export the application as a runnable jar, ij.plugin()service returns all the Command.class plugins but 0 plugins of type JEXPlugin.class using the call "ij.plugin().getPluginsOfType(JEXPlugin.class);"

Any idea why or how to fix it?

Thanks,

Jay



