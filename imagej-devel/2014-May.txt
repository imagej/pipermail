From trac at imagej.net  Thu May  1 13:01:34 2014
From: trac at imagej.net (ImageJ)
Date: Thu, 01 May 2014 18:01:34 +0000
Subject: [ImageJ-devel] [ImageJ] #1553: Make it easier for non-core-IJ2
 developers to respond to tickets
In-Reply-To: <017.2879b6b5a3c5468e1ab729fe3fc3863b@imagej.net>
References: <017.2879b6b5a3c5468e1ab729fe3fc3863b@imagej.net>
Message-ID: <032.7cce4b6f4b0b84188160e2a033e5a32e@imagej.net>

#1553: Make it easier for non-core-IJ2 developers to respond to tickets
--------------------------+----------------------------------
 Reporter:  dscho         |       Owner:  dscho
     Type:  defect        |      Status:  closed
 Priority:  major         |   Milestone:  imagej2-b8-analysis
Component:  Server Admin  |     Version:
 Severity:  serious       |  Resolution:  fixed
 Keywords:                |  Blocked By:
 Blocking:  1915          |
--------------------------+----------------------------------
Changes (by curtis):

 * status:  reviewing => closed
 * resolution:   => fixed


Comment:

 New ImageJ issues have been being filed on GitHub Issues for a while now.
 And now that the final ImageJ component structure is in place, which
 repository houses each sort of issue is quite clear.

 So we will keep using GitHub Issues for all core SciJava software issue
 tracking. This makes it very simple for developers worldwide to respond to
 issues, either on the website or via email. GitHub takes care of all that
 for us.

 I am in the process of migrating all existing ImageJ Trac tickets to
 GitHub Issues in the appropriate repositories.

 > just decide that Fiji's BugZilla is supposed to serve the user-visible
 side of ImageJ2, too.

 Indeed, we could still generalize the Fiji BugZilla as a user-facing
 destination for all ImageJ bugs filed using the "Report a Bug" mechanism.
 Then from there we could link to relevant GitHub Issue(s). It's basically
 the difference between "user stories" and "developer tasks" which Agile
 methodologies emphasize.

-- 
Ticket URL: <http://trac.imagej.net/ticket/1553#comment:19>
ImageJ <http://trac.imagej.net>
ImageJ core development


From schindelin at wisc.edu  Fri May  2 14:28:55 2014
From: schindelin at wisc.edu (Johannes Schindelin)
Date: Fri, 02 May 2014 21:28:55 +0200 (CEST)
Subject: [ImageJ-devel] Solution to: "Why was
	Color_Inspector_3D-2.3-SNAPSHOT deleted?"
Message-ID: <alpine.DEB.1.00.1405022125220.14982@s15462909.onlinehome-server.info>

Hi Curtis,

the problem occurred again, and I went on to investigate. The solution is
really easy: I made a serious mistake when bumping Color Inspector 3D to
the next release cycle over a year ago: 2.3 was released, but I switched
to 2.3-SNAPSHOT instead of 2.4-SNAPSHOT.

The "SD20: Remove Snapshots From Repository" job on our Maven server has
the checkbox "Remove if released" checked. Which makes sense, except when
you make a stupid mistake as I did.

Since I also released fiji-lib 2.0.0 yesterday, the same problem was
happening with fiji-lib, whose SNAPSHOT versions were deleted despite
pom-fiji still referencing them.

To remedy the problems, I updated pom-fiji, and I also told the "Remove
Snapshots" job to have a "grace period after release" of 31 days.

Ciao,
Dscho


From bugzilla at fiji.sc  Sat May  3 05:41:34 2014
From: bugzilla at fiji.sc (bugzilla at fiji.sc)
Date: Sat, 03 May 2014 10:41:34 +0000
Subject: [ImageJ-devel] [Bug 739] New: Bug in the Threshold / Color Threshold
Message-ID: <bug-739-194@http.fiji.sc/bugzilla/>

http://fiji.sc/bugzilla/show_bug.cgi?id=739

            Bug ID: 739
           Summary: Bug in the Threshold / Color Threshold
           Product: Fiji
           Version: unspecified
          Hardware: Macintosh
                OS: Mac OS
            Status: NEW
          Severity: critical
          Priority: P5
         Component: ImageJ2
          Assignee: imagej-devel at imagej.net
          Reporter: Fijinoreplay at outlook.fr

Created attachment 147
  --> http://fiji.sc/bugzilla/attachment.cgi?id=147&action=edit
Bug in Threshold / Color Threshold

Dear Sir,

After the update for the version ImageJ 1.45v I can't anymore do my work in the
Fiji, because the Threshold is totally different. 

I have a Macro, for my work, and after the update I can't anymore use it
because the level of threshold is totally different. I try my work in another
PC ( ImageJ2) without         the actual updates and the threshold work as I
expected.

I'm using the Macro for remove the black areas (like the image in attach) and I
use the macro (in attach) and don't work anymore like as I expected.

-- 
You are receiving this mail because:
You are the assignee for the bug.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140503/d22f2bc7/attachment.html>

From schier at utia.cas.cz  Sat May  3 07:36:52 2014
From: schier at utia.cas.cz (Jan Schier)
Date: Sat, 03 May 2014 14:36:52 +0200
Subject: [ImageJ-devel] Javadoc for imagej-common etc.?
Message-ID: <5364E2E4.70401@utia.cas.cz>

Hi,

please, excuse me if this should rather go to the imagej user list..

I am trying to develop a plugin with ImageJ2. I was using the Javadocs 
at http://jenkins.imagej.net/job/ImageJ-daily/javadoc, but this page now 
covers only 3 packages with 6 classes.

Excuse me, if I overlook something very obvious, but where can I find 
documentation e.g. for imagej-common?

Many thanks,

Jan


From bugzilla at fiji.sc  Sat May  3 08:24:25 2014
From: bugzilla at fiji.sc (bugzilla at fiji.sc)
Date: Sat, 03 May 2014 13:24:25 +0000
Subject: [ImageJ-devel] [Bug 739] Bug in the Threshold / Color Threshold
In-Reply-To: <bug-739-194@http.fiji.sc/bugzilla/>
References: <bug-739-194@http.fiji.sc/bugzilla/>
Message-ID: <bug-739-194-oE1TKXsIBR@http.fiji.sc/bugzilla/>

http://fiji.sc/bugzilla/show_bug.cgi?id=739

G. Landini <g.landini at bham.ac.uk> changed:

           What    |Removed                     |Added
----------------------------------------------------------------------------
                 CC|                            |g.landini at bham.ac.uk

--- Comment #1 from G. Landini <g.landini at bham.ac.uk> ---
I do not think this has to do with Threshold Color because the macro does not
use the Threshold Color plugin at all, but only the macro the plugin generated.

I run the submitted attachment in Fiji jar version 1.48v and IJ1 1.49a9 and the
result is exactly the same using the Clown image.

To be able to see what is the problem, please provide an example of what you
get and what you should get.

-- 
You are receiving this mail because:
You are the assignee for the bug.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140503/f6da561d/attachment.html>

From bugzilla at fiji.sc  Sat May  3 10:39:09 2014
From: bugzilla at fiji.sc (bugzilla at fiji.sc)
Date: Sat, 03 May 2014 15:39:09 +0000
Subject: [ImageJ-devel] [Bug 739] Bug in the Threshold / Color Threshold
In-Reply-To: <bug-739-194@http.fiji.sc/bugzilla/>
References: <bug-739-194@http.fiji.sc/bugzilla/>
Message-ID: <bug-739-194-W4ZOb5AmHC@http.fiji.sc/bugzilla/>

http://fiji.sc/bugzilla/show_bug.cgi?id=739

--- Comment #2 from FP <Fijinoreplay at outlook.fr> ---
Created attachment 148
  --> http://fiji.sc/bugzilla/attachment.cgi?id=148&action=edit
Result Expected

-- 
You are receiving this mail because:
You are the assignee for the bug.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140503/293b666f/attachment.html>

From bugzilla at fiji.sc  Sat May  3 10:39:54 2014
From: bugzilla at fiji.sc (bugzilla at fiji.sc)
Date: Sat, 03 May 2014 15:39:54 +0000
Subject: [ImageJ-devel] [Bug 739] Bug in the Threshold / Color Threshold
In-Reply-To: <bug-739-194@http.fiji.sc/bugzilla/>
References: <bug-739-194@http.fiji.sc/bugzilla/>
Message-ID: <bug-739-194-2gd1fDbUtn@http.fiji.sc/bugzilla/>

http://fiji.sc/bugzilla/show_bug.cgi?id=739

--- Comment #3 from FP <Fijinoreplay at outlook.fr> ---
Comment on attachment 148
  --> http://fiji.sc/bugzilla/attachment.cgi?id=148
Result Expected

Dear Sir,

The Macro was developed by the Sir. Daniel Sage at EPFL (Switzerland) and it
worked very well before the update. The Macro, removed the black areas from the
image and done me a new image without the black areas.


I don't know, but doesn't work anymore.

I send you the image without the black areas, like I expected.

-- 
You are receiving this mail because:
You are the assignee for the bug.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140503/c3247d5e/attachment.html>

From ctrueden at wisc.edu  Sat May  3 11:01:31 2014
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Sat, 3 May 2014 11:01:31 -0500
Subject: [ImageJ-devel] Javadoc for imagej-common etc.?
In-Reply-To: <5364E2E4.70401@utia.cas.cz>
References: <5364E2E4.70401@utia.cas.cz>
Message-ID: <CADN69y=k9FKQ7=J_xD4Vwvy+NvXXMQzs4s3oCQiAC0vq_ZEAEw@mail.gmail.com>

Hi Jan,

> where can I find documentation e.g. for imagej-common?

We recently restructured the ImageJ2 project in preparation for the initial
2.0.0 release this June, and the automatic Javadoc generation was not
updated to match.

I have now taken some steps to update it, so the ImageJ2 javadocs are now
available at:
    http://jenkins.imagej.net/job/ImageJ-javadoc/javadoc/

That still does not include every single class, but does include all of the
core ImageJ2 and SciJava Common API.

When I have some time later, I'll update that link to aggregate even more
projects into a single unified Javadoc [1].

Regards,
Curtis

[1] https://github.com/imagej/imagej/issues/74


On Sat, May 3, 2014 at 7:36 AM, Jan Schier <schier at utia.cas.cz> wrote:

> Hi,
>
> please, excuse me if this should rather go to the imagej user list..
>
> I am trying to develop a plugin with ImageJ2. I was using the Javadocs at
> http://jenkins.imagej.net/job/ImageJ-daily/javadoc, but this page now
> covers only 3 packages with 6 classes.
>
> Excuse me, if I overlook something very obvious, but where can I find
> documentation e.g. for imagej-common?
>
> Many thanks,
>
> Jan
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140503/98a83ce7/attachment.html>

From bugzilla at fiji.sc  Sat May  3 11:18:58 2014
From: bugzilla at fiji.sc (bugzilla at fiji.sc)
Date: Sat, 03 May 2014 16:18:58 +0000
Subject: [ImageJ-devel] [Bug 739] Bug in the Threshold / Color Threshold
In-Reply-To: <bug-739-194@http.fiji.sc/bugzilla/>
References: <bug-739-194@http.fiji.sc/bugzilla/>
Message-ID: <bug-739-194-dsZmlLcRwh@http.fiji.sc/bugzilla/>

http://fiji.sc/bugzilla/show_bug.cgi?id=739

G. Landini <g.landini at bham.ac.uk> changed:

           What    |Removed                     |Added
----------------------------------------------------------------------------
             Status|NEW                         |RESOLVED
         Resolution|---                         |INVALID

--- Comment #4 from G. Landini <g.landini at bham.ac.uk> ---
I think that there are 2 issues here.

1) The macro you uploaded produces a binary image. I am almost sure that is the
automatically generated macro by the Colour Threshold plugin except the first
line and the last line.

You uploaded a very faint RGB image as the "expected result".
If I run the macro, I get a whole black image and the result is, I believe,
what is expected as it stops the Brightness values between 87 and 255. Since
the image you provided has no "black" (i.e. Brightness <87), the thresholding
will find no pixels and the result is all black (as expected, i.e. no black
regions that should appear white).


2) If the macro were to "delete" black areas, the code should do something more
with the regions found to be black (i.e. "white" after running the macro).
Are you sure that you have not deleted part of it?

I think that to delete black regions perhaps the result of the thresholding
should be added to the original image, but this is me just guessing.

I do not see any bug in the code in ImageJ1 and the macro as is produces the
same result in IJ1 and Fiji.

I will resolve this as "invalid" bug. Please reopen this bug if you can provide
the examples suggested above where the same image produces different results in
different platforms.

-- 
You are receiving this mail because:
You are the assignee for the bug.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140503/05cebe45/attachment-0001.html>

From Johannes.Schindelin at gmx.de  Sun May  4 18:08:18 2014
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Mon, 5 May 2014 01:08:18 +0200 (CEST)
Subject: [ImageJ-devel] Preparing Fiji for the upcoming changes in ImageJ2's
	components
Message-ID: <alpine.DEB.1.00.1405050052090.14982@s15462909.onlinehome-server.info>

Hi all,

I just uploaded a new Fiji Updater and fiji-compat version. The reason is
solely to prepare better for recent changes in the development version of
ImageJ2: it was split into more modularized components, each living in its
own source code repository and versioned in a meaningful manner (i.e. it
will no longer be necessary to make full-blown release of all components
just because of a critical bug fix in, say, the updater core).

There was also another huge change: all the packages were switched from
imagej.* to net.imagej.*. This is what the new versions guard for: they
handle both the new and the old package names, therefore it works with
both the ImageJ2 components currently available from the ImageJ update
site, as well as with the components that will be uploaded there soon.

I tried really, really hard to retain backwards-compatibility, even to the
point where some of the old code has been put back with @Deprecated
annotations (which some developers might object to, considering it
inelegant, when the alternative would be to have user-visible breakages).
To state the obvious, I tested in multiple ways, with multiple update
sites enabled, and with multiple computers using all of the supported
Operating Systems.

However, things can always go less smoothly than intended, even after
spending a full week intended to prevent desasters.

So, as always, please ignore the Fiji Updater's nudging when you are
finishing up critical work for a publication or require Fiji to work
precisely as this past week for other reasons. And also as always, please
let us know if you encounter any problems.

Ciao,
Johannes


From ctrueden at wisc.edu  Tue May  6 11:17:26 2014
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Tue, 6 May 2014 11:17:26 -0500
Subject: [ImageJ-devel] [LOCI ImageJ] IJ2 Plugin Service
In-Reply-To: <853DAAEA-E381-4A8A-8ACB-F2608E63BB7F@wisc.edu>
References: <13D7A230-4A2E-4E2D-BBC0-414FCCB41106@wisc.edu>
	<CADN69y=bPp78mp7QFCsB+jOzGKkb0n-2y40xH6dfgeNPNX3WCA@mail.gmail.com>
	<alpine.DEB.1.00.1404301923500.14982@s15462909.onlinehome-server.info>
	<853DAAEA-E381-4A8A-8ACB-F2608E63BB7F@wisc.edu>
Message-ID: <CADN69ymF2fFo3g7zpkHz2i4xC0E7kt7FBBdUs+T_ssNuvBns+w@mail.gmail.com>

Hi Jay,

> The iteration method it uses requires directories, which is fine and
> dandy when running from within Eclipse but my program's JarFile
> doesn't look like a directory so the exact same mechanism doesn't
> work.

EclipseHelper is intended to work when running from Eclipse, and never
otherwise. That is why it does not support generating annotations from
classes within JAR files.

> However, it looks like a method analogous to this approach but for
> JarFiles might work., right?

I don't understand why you would ever need to do that... the point of
EclipseHelper is to generate the annotations (META-INF/json/*) as close to
compile time as possible -- not later at runtime, which would be the only
time your code would be stored within a JAR file.

> 0) Does my take on the situation seem right?

While the technical aspects of what you are saying are correct to my
knowledge (NB: I did not investigate the usage of getURLs()), I do not
think it makes sense to invoke an EclipseHelper-like program during the
actual execution of your program. By doing that, you would lose all the
performance advantages of generating the annotations in advance.

For ImageJ2 we use Maven from the command line to bundle our JARs and that
generates the annotations as expected. An alternate approach, if you really
really want Eclipse to do it for you instead, you might be to do it as part
of Maven's generate-sources step; see the ImageJ OPS project for an example
of that [1]. You'd just have to change the groovy script to invoke the
annotation processor manually. But I haven't seriously explored doing
things that way. And JEX would need to be structured as a Maven project for
that...

> 1) If I edit the programs jar file during run time by adding the
> META-INF/json/<package>.Plugin jar entry, will that majorly hose
> things?

Yep, I would be surprised if that did not cause problems. I strongly advise
not doing that.

> In other words, if I can get the META-INF/json/<package>.Plugin
> written to my program's jar analogous to the other referenced jars,
> then everything will be OK?

Yes, the goal is definitely to somehow generate your JAR file such that it
contains the META-INF/json/* metadata from the get-go, without needing to
pull any tricks the first time JEX is launched.

Another possibility is to add a .factorypath and
.settings/org.eclipse.jdt.apt.core.prefs file, similar to:

.settings/org.eclipse.jdt.apt.core.prefs:
eclipse.preferences.version=1
org.eclipse.jdt.apt.aptEnabled=true
org.eclipse.jdt.apt.genSrcDir=target/classes
org.eclipse.jdt.apt.reconcileEnabled=false

.factorypath:
<factorypath>
  <factorypathentry kind="VARJAR"
id="M2_REPO/org/scijava/scijava-common/2.18.1/scijava-common-2.18.1.jar"
enabled="true" runInBatchMode="true"/>
</factorypath>

But you'd want to ensure it matches your version of scijava-common, and
also point it at wherever you have that JAR stored rather than into the
Maven repository (which you presumably don't have since you aren't using
Maven).

Eclipse unfortunately makes invoking annotation processors quite
complicated... [2]

Regards,
Curtis

[1] https://github.com/imagej/imagej-ops/blob/imagej-ops-0.3.0/pom.xml#L169
[2] https://bugs.eclipse.org/bugs/show_bug.cgi?id=280542


On Wed, Apr 30, 2014 at 7:49 PM, Jay Warrick <warrick at wisc.edu> wrote:

> Hi All,
>
> Thanks for all these replies folks. Digging around yesterday afternoon and
> evening essentially painted a picture much like what Johannes indicated in
> his email. The getResource() method works just fine and works roughly the
> same whether you do A) jars-in-a-jar or B) jars (reference libraries) in a
> folder next to a jar (my program), which are two of the 3 possible modes of
> exporting runnable jars. The third option, C), actually extracts all the
> class files and reorganizes them into a single flat jar (i.e., not
> jar-in-jar but just a single uber-jar of classes in folders), which I
> haven't used in the past for other reasons as well.
>
> Instead, it seems (I say seems because I only dabble in ClassLoaders)
> their is no way to compile a list of my program's class files for indexing
> annotation using just the method getResource() or getResources() without
> knowing the name of at least a single resource in my program's jar. The
> getResources() method just gives a list of the referenced jars and not the
> main program's jar itself.  However, if I want sci-java to work agnostic of
> who's using it, I can't assume within the sci-java code that I ever know of
> a specific resource to look for. Even if getResource() does give a path to
> my program's jar, the jar does not have the META-INF/json/<package>.Plugin
> file that contains the results of indexing. The key to the EclipseHelper is
> that it actually uses the getURLs() method of the URLClassLoader instead of
> the getResources(). When running from eclipse, this method gives the path
> to my referenced jars and the programs bin folder. When running from jar,
> the getURLs() method returns both the referenced libraries and my programs
> jar file (yay). However, since the jar file is not a directory, the
> EclipseHelper method does not index it and write the
> META-INF/json/<package>.Plugin file. The iteration method it uses requires
> directories, which is fine and dandy when running from within Eclipse but
> my program's JarFile doesn't look like a directory so the exact same
> mechanism doesn't work. However, it looks like a method analogous to this
> approach but for JarFiles might work., right? I think, to work, it would
> have to iteratively index the contents of the JarFile and add a
> META-INF/json/<package>.Plugin file as a new Jar entry (as far as I can see
> anyway, I could definitely be wrong). I am trying to hack something
> together to show whether this would work at all but if any of you think
> this approach would benefit others, I'd welcome suggestions and would try
> to clean it up as much as I can for a pull request. It seems like the
> EclipseHelper is used when the class loader is an instance of
> URLClassLoader (plus some other tests...) which happens to occur both when
> running from eclipse and when exported as a runnable jar. So, on the
> surface at least, it looks like the EclipseHelper class could be used for
> both scenarios but am happy to change tacks if you think otherwise.
>
> However, I have a couple specific questions, that if answered would help
> me to know if this might work at all and move forward.
>
> *0) Does my take on the situation seem right?*
>
> *1) If I edit the programs jar file during run time by adding the
> META-INF/json/<package>.Plugin jar entry, will that majorly hose things?*
>
> *2) The Index class still uses the getResources() method to find things
> and it will still only link to the referenced jar files. In this case we
> can't assume that the ClassLoader is a URLClassLoader to be able to use the
> getURLs method. I don't recall noticing when or how the indexing mechanism
> looks for these META-INF/json/<package>.Plugin files to compile all the
> annotation information. I assume it is via the getResource() method because
> I believe by knowing what to look for (i.e., a
> META-INF/json/<package>.Plugin file), we can just ask for the resource
> directly? In other words, if I can get the META-INF/json/<package>.Plugin
> written to my program's jar analogous to the other referenced jars, then
> everything will be OK?*
>
> Thanks thanks thanks,
>
> Jay
>
> On Apr 30, 2014, at 12:51 PM, Johannes Schindelin <
> Johannes.Schindelin at gmx.de> wrote:
>
> Hi,
>
> On Wed, 30 Apr 2014, Curtis Rueden wrote:
>
> when I export the application as a runnable jar, ij.plugin()service
> returns all the Command.class plugins but 0 plugins of type
> JEXPlugin.class
>
>
> This is an issue we have discussed before: Eclipse creates uberjars using a
> "jar-in-jar" approach, and SciJava Common's plugin mechanism does not read
> the metadata out of a jar-in-jar.
>
>
> Please note that the jar-in-jar poses no problem, unless the ClassLoader
> used to access them is broken: it needs to support the getResources() call
> properly and find the resource files contained in the nested .jar files.
>
> However, in the reported case I believe it is not triggered by the uber
> jar or jar-in-jar scenario.
>
> Background: The internal technique behind the plugins uses annotation
> processors run at compile time. They basically look at each file that has
> a @Plugin annotation and write out index files that get included into the
> .jar files.
>
> Except that Eclipse -- violating the Java specification -- does not run
> annotation processors. At least not by default, and even if you switch it
> on (manually, for each and every project you maintain, one by one), it
> *still* only runs them on full builds (i.e. after Project>Clean).
>
> So it looks to me that in the reported case, the annotation processor is
> never run, and as a consequence, the index file is never written, and
> therefore it cannot be found at runtime.
>
> Of course, Eclipse being such a prevalent platform to develop in, we tried
> to come up with a workaround: whenever the annotation indexes are read, a
> class called "EclipseHelper" tries to detect whether it needs to create
> the index files because Eclipse failed to run the annotation processors.
>
> This works amazingly well because many developers have written unit tests
> and run them before bundling .jar files manually. These unit tests verify
> that plugins work, of course, which is why the EclipseHelper works around
> the problem successfully in most cases.
>
> Also, here is a lesson for everybody choosing to learn from our past
> mistakes and experiences: any possible convenience of uber jars is
> outweighed multiple times over by the disadvantages it incurs to users: it
> makes updating really costly (every time it's time to update, a new
> monster .jar needs to be downloaded), it makes collaboration between
> projects difficult at best, and it certainly asks for version skew.
>
> Ciao,
> Johannes
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140506/2992a494/attachment.html>

From ctrueden at wisc.edu  Tue May  6 11:29:52 2014
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Tue, 6 May 2014 11:29:52 -0500
Subject: [ImageJ-devel] ImageJ2 development
In-Reply-To: <536134A3.2010605@gmail.com>
References: <536134A3.2010605@gmail.com>
Message-ID: <CADN69yn1L2QQtFB=v8jdQQ6AG3nWapec3HCrpAJJxxwmBL9CrQ@mail.gmail.com>

Hi Pawel,

Thanks very much for your interest in the ImageJ project! I'm CCing the
imagej-devel mailing list, since that is the best place to discuss ImageJ2
core development.

> ImageJ is one of my all-time favorite pieces of software and I would
> like to contribute to its development. I have a decent knowledge of
> Java, but I haven't really worked on an open source project before. I
> saw that the list of contributors on the ImageJ github page is pretty
> limited and so I am wondering if you generally like outside people
> contributing to the codebase or whether you prefer to keep it within
> the core development team.

One of the major goals of ImageJ2 is to support a more community-oriented
group of developers. Requests like yours are surprisingly rare because most
people do not have a lot of free time to contribute to projects like
ImageJ. But your help would definitely be most welcome.

> If you welcome new devs, what features/bugfixes do you think are most
> critical at the moment?

I would encourage you to first "scratch your own itches" [1]. You can get
started right away: fork the relevant project(s) from
https://github.com/imagej and https://github.com/scijava, push changes to
topic branches, and file pull requests [2]. (And if you need an
introduction to Git: https://try.github.io/).

If you really don't have any itches and just want to fix bugs, that's a bit
trickier at the moment, since you would need to become more acquainted with
the ImageJ2 project structure -- and it is still in beta and documentation
is scarce in many places.

It might make the most sense for you to jump into the ImageJ chat room
(#imagejdev) on IRC freenode during U.S. business hours and chat with us at
more length. One way you could start helping the project right away would
be transform any information you learn there into wiki pages on the ImageJ
wiki (http://wiki.imagej.net/).

We are gearing up for an initial release of ImageJ 2.0.0 (finally leaving
beta!) on June 1, so your timing is hectic, but also really fantastic to
help improve the project documentation and learn the system, so that you
can embark on more involved coding endeavors.

Regards,
Curtis

[1] https://gettingreal.37signals.com/ch02_Whats_Your_Problem.php
[2] https://help.github.com/articles/using-pull-requests



On Wed, Apr 30, 2014 at 12:36 PM, Pawel Niewiadomski <
pawelthebiologist at gmail.com> wrote:

> Hi Curtis,
>
> I am a postdoc in molecular biology, who has recently started to seriously
> work on improving my coding skills. ImageJ is one of my all-time favorite
> pieces of software and I would like to contribute to its development. I
> have a decent knowledge of Java, but I haven't really worked on an open
> source project before. I saw that the list of contributors on the ImageJ
> github page is pretty limited and so I am wondering if you generally like
> outside people contributing to the codebase or whether you prefer to keep
> it within the core development team. If you welcome new devs, what
> features/bugfixes do you think are most critical at the moment?
>
> Thanks,
> Pawel
>
> --
> Pawe? Niewiadomski
> e-mail: pawelthebiologist at gmail.com
> website: www.pawelthebiologist.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140506/5a3a84fe/attachment-0001.html>

From warrick at wisc.edu  Tue May  6 12:18:14 2014
From: warrick at wisc.edu (Jay Warrick)
Date: Tue, 06 May 2014 12:18:14 -0500
Subject: [ImageJ-devel] [LOCI ImageJ] IJ2 Plugin Service
In-Reply-To: <CADN69ymF2fFo3g7zpkHz2i4xC0E7kt7FBBdUs+T_ssNuvBns+w@mail.gmail.com>
References: <13D7A230-4A2E-4E2D-BBC0-414FCCB41106@wisc.edu>
	<CADN69y=bPp78mp7QFCsB+jOzGKkb0n-2y40xH6dfgeNPNX3WCA@mail.gmail.com>
	<alpine.DEB.1.00.1404301923500.14982@s15462909.onlinehome-server.info>
	<853DAAEA-E381-4A8A-8ACB-F2608E63BB7F@wisc.edu>
	<CADN69ymF2fFo3g7zpkHz2i4xC0E7kt7FBBdUs+T_ssNuvBns+w@mail.gmail.com>
Message-ID: <0DFC3403-6432-4AA9-8DC5-36F66E1ED456@wisc.edu>

Thanks for the reply Curtis.

I got it to work but not completely pleased for the reasons you cite. You run the application once, it fixes the jar file but the changes to the jar file on disk are not reflected in the jar file that is loaded already in memory for running the application (at least as indicated by the getResources() method). So, you close, and the second time you run, the getResources() function now sees the index and everything works. This jar is now "fixed" and can then be deployed so others don't have to open once and restart. I didn't get a reply on whether this was even a reasonable approach before I put a lot of work into trying this. I tried it because I really wanted to roll out a few functions to collaborators and I thought there was a chance that changes would be reflected during run time because the same approach was successful when running from Eclipse. It appears that knowledge of jar resources is established more wholesale at initial loading of any classes compared to loading resources from folders as occurs when Eclipse runs. Nothing crashes or anything but the additions to the jar aren't reflected by the getResources() method (which makes sense in hindsight :-).

However, it seems like the current situation generally forces others to use Maven or some other mechanism of generating the annotation indexes and packaging them into the jar if anyone wants to implement their own sci-java plugins. Do you index the "plugins folder" full of user defined .java, .class, and .jar files separately somewhere in the code that I didn't see? If that is handled, this whole issue is probably moot for ImageJ2 stuff and really relates more to the ease-of-use/flexibility of sci-java common/SciJavaPlugin/PluginService mechanism for other applications. The requirement to generate such and index was not clear to me from previous conversations and the high-level documentation on the plugin mechanism of ImageJ2... maybe I missed something? It was clear how you had to annotate the classes but not the requirement of generating an index or the best way how. Further, I just imagine other users getting things to work great from Eclipse, then when they export, it all breaks. It doesn't appear there is a mechanism provided in the sci-java common library to streamline index generation for more general jar application development. Potentially at least a "semi-manual" java static function to "fix" a jar that doesn't require setting up a Maven build script (or similar) would be useful for those out there that aren't Maven literate yet. I now have the basis for this code if you think it useful. It works after packaging the jar so it doesn't have to be implemented within a build script (i.e., you don't absolutely have to know how to add custom operations to build instructions to Eclipse or Maven). It piggybacks on the EcipseHelper and seems to reproduce the indices produced by the EclipseHelper when running from Eclipse in this instance but I'm not absolutely sure it fits all use cases. You guys would likely be better judges of that. Let me know if you are interested but it's what I'll use for now while I get up to speed on Maven stuff.

Cheers,

Jay


On May 6, 2014, at 11:17 AM, Curtis Rueden <ctrueden at wisc.edu> wrote:

> Hi Jay,
> 
> > The iteration method it uses requires directories, which is fine and
> > dandy when running from within Eclipse but my program's JarFile
> > doesn't look like a directory so the exact same mechanism doesn't
> > work.
> 
> EclipseHelper is intended to work when running from Eclipse, and never otherwise. That is why it does not support generating annotations from classes within JAR files.
> 
> > However, it looks like a method analogous to this approach but for
> > JarFiles might work., right?
> 
> I don't understand why you would ever need to do that... the point of EclipseHelper is to generate the annotations (META-INF/json/*) as close to compile time as possible -- not later at runtime, which would be the only time your code would be stored within a JAR file.
> 
> > 0) Does my take on the situation seem right?
> 
> While the technical aspects of what you are saying are correct to my knowledge (NB: I did not investigate the usage of getURLs()), I do not think it makes sense to invoke an EclipseHelper-like program during the actual execution of your program. By doing that, you would lose all the performance advantages of generating the annotations in advance.
> 
> For ImageJ2 we use Maven from the command line to bundle our JARs and that generates the annotations as expected. An alternate approach, if you really really want Eclipse to do it for you instead, you might be to do it as part of Maven's generate-sources step; see the ImageJ OPS project for an example of that [1]. You'd just have to change the groovy script to invoke the annotation processor manually. But I haven't seriously explored doing things that way. And JEX would need to be structured as a Maven project for that...
> 
> > 1) If I edit the programs jar file during run time by adding the
> > META-INF/json/<package>.Plugin jar entry, will that majorly hose
> > things?
> 
> Yep, I would be surprised if that did not cause problems. I strongly advise not doing that.
> 
> > In other words, if I can get the META-INF/json/<package>.Plugin
> > written to my program's jar analogous to the other referenced jars,
> > then everything will be OK?
> 
> Yes, the goal is definitely to somehow generate your JAR file such that it contains the META-INF/json/* metadata from the get-go, without needing to pull any tricks the first time JEX is launched.
> 
> Another possibility is to add a .factorypath and .settings/org.eclipse.jdt.apt.core.prefs file, similar to:
> 
> .settings/org.eclipse.jdt.apt.core.prefs:
> eclipse.preferences.version=1
> org.eclipse.jdt.apt.aptEnabled=true
> org.eclipse.jdt.apt.genSrcDir=target/classes
> org.eclipse.jdt.apt.reconcileEnabled=false
> 
> .factorypath:
> <factorypath>
>   <factorypathentry kind="VARJAR" id="M2_REPO/org/scijava/scijava-common/2.18.1/scijava-common-2.18.1.jar" enabled="true" runInBatchMode="true"/>
> </factorypath>
> 
> But you'd want to ensure it matches your version of scijava-common, and also point it at wherever you have that JAR stored rather than into the Maven repository (which you presumably don't have since you aren't using Maven).
> 
> Eclipse unfortunately makes invoking annotation processors quite complicated... [2]
> 
> Regards,
> Curtis
> 
> [1] https://github.com/imagej/imagej-ops/blob/imagej-ops-0.3.0/pom.xml#L169
> [2] https://bugs.eclipse.org/bugs/show_bug.cgi?id=280542
> 
> 
> On Wed, Apr 30, 2014 at 7:49 PM, Jay Warrick <warrick at wisc.edu> wrote:
> Hi All,
> 
> Thanks for all these replies folks. Digging around yesterday afternoon and evening essentially painted a picture much like what Johannes indicated in his email. The getResource() method works just fine and works roughly the same whether you do A) jars-in-a-jar or B) jars (reference libraries) in a folder next to a jar (my program), which are two of the 3 possible modes of exporting runnable jars. The third option, C), actually extracts all the class files and reorganizes them into a single flat jar (i.e., not jar-in-jar but just a single uber-jar of classes in folders), which I haven't used in the past for other reasons as well. 
> 
> Instead, it seems (I say seems because I only dabble in ClassLoaders) their is no way to compile a list of my program's class files for indexing annotation using just the method getResource() or getResources() without knowing the name of at least a single resource in my program's jar. The getResources() method just gives a list of the referenced jars and not the main program's jar itself.  However, if I want sci-java to work agnostic of who's using it, I can't assume within the sci-java code that I ever know of a specific resource to look for. Even if getResource() does give a path to my program's jar, the jar does not have the META-INF/json/<package>.Plugin file that contains the results of indexing. The key to the EclipseHelper is that it actually uses the getURLs() method of the URLClassLoader instead of the getResources(). When running from eclipse, this method gives the path to my referenced jars and the programs bin folder. When running from jar, the getURLs() method returns both the referenced libraries and my programs jar file (yay). However, since the jar file is not a directory, the EclipseHelper method does not index it and write the META-INF/json/<package>.Plugin file. The iteration method it uses requires directories, which is fine and dandy when running from within Eclipse but my program's JarFile doesn't look like a directory so the exact same mechanism doesn't work. However, it looks like a method analogous to this approach but for JarFiles might work., right? I think, to work, it would have to iteratively index the contents of the JarFile and add a META-INF/json/<package>.Plugin file as a new Jar entry (as far as I can see anyway, I could definitely be wrong). I am trying to hack something together to show whether this would work at all but if any of you think this approach would benefit others, I'd welcome suggestions and would try to clean it up as much as I can for a pull request. It seems like the EclipseHelper is used when the class loader is an instance of URLClassLoader (plus some other tests...) which happens to occur both when running from eclipse and when exported as a runnable jar. So, on the surface at least, it looks like the EclipseHelper class could be used for both scenarios but am happy to change tacks if you think otherwise.
> 
> However, I have a couple specific questions, that if answered would help me to know if this might work at all and move forward.
> 
> 0) Does my take on the situation seem right?
> 
> 1) If I edit the programs jar file during run time by adding the META-INF/json/<package>.Plugin jar entry, will that majorly hose things?
> 
> 2) The Index class still uses the getResources() method to find things and it will still only link to the referenced jar files. In this case we can't assume that the ClassLoader is a URLClassLoader to be able to use the getURLs method. I don't recall noticing when or how the indexing mechanism looks for these META-INF/json/<package>.Plugin files to compile all the annotation information. I assume it is via the getResource() method because I believe by knowing what to look for (i.e., a META-INF/json/<package>.Plugin file), we can just ask for the resource directly? In other words, if I can get the META-INF/json/<package>.Plugin written to my program's jar analogous to the other referenced jars, then everything will be OK?
> 
> Thanks thanks thanks,
> 
> Jay
> 
> On Apr 30, 2014, at 12:51 PM, Johannes Schindelin <Johannes.Schindelin at gmx.de> wrote:
> 
>> Hi,
>> 
>> On Wed, 30 Apr 2014, Curtis Rueden wrote:
>> 
>>>> when I export the application as a runnable jar, ij.plugin()service
>>>> returns all the Command.class plugins but 0 plugins of type
>>>> JEXPlugin.class
>>> 
>>> This is an issue we have discussed before: Eclipse creates uberjars using a
>>> "jar-in-jar" approach, and SciJava Common's plugin mechanism does not read
>>> the metadata out of a jar-in-jar.
>> 
>> Please note that the jar-in-jar poses no problem, unless the ClassLoader
>> used to access them is broken: it needs to support the getResources() call
>> properly and find the resource files contained in the nested .jar files.
>> 
>> However, in the reported case I believe it is not triggered by the uber
>> jar or jar-in-jar scenario.
>> 
>> Background: The internal technique behind the plugins uses annotation
>> processors run at compile time. They basically look at each file that has
>> a @Plugin annotation and write out index files that get included into the
>> .jar files.
>> 
>> Except that Eclipse -- violating the Java specification -- does not run
>> annotation processors. At least not by default, and even if you switch it
>> on (manually, for each and every project you maintain, one by one), it
>> *still* only runs them on full builds (i.e. after Project>Clean).
>> 
>> So it looks to me that in the reported case, the annotation processor is
>> never run, and as a consequence, the index file is never written, and
>> therefore it cannot be found at runtime.
>> 
>> Of course, Eclipse being such a prevalent platform to develop in, we tried
>> to come up with a workaround: whenever the annotation indexes are read, a
>> class called "EclipseHelper" tries to detect whether it needs to create
>> the index files because Eclipse failed to run the annotation processors.
>> 
>> This works amazingly well because many developers have written unit tests
>> and run them before bundling .jar files manually. These unit tests verify
>> that plugins work, of course, which is why the EclipseHelper works around
>> the problem successfully in most cases.
>> 
>> Also, here is a lesson for everybody choosing to learn from our past
>> mistakes and experiences: any possible convenience of uber jars is
>> outweighed multiple times over by the disadvantages it incurs to users: it
>> makes updating really costly (every time it's time to update, a new
>> monster .jar needs to be downloaded), it makes collaboration between
>> projects difficult at best, and it certainly asks for version skew.
>> 
>> Ciao,
>> Johannes
> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140506/3c1cbc6b/attachment-0001.html>

From Johannes.Schindelin at gmx.de  Tue May  6 12:43:56 2014
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Tue, 6 May 2014 19:43:56 +0200 (CEST)
Subject: [ImageJ-devel] [LOCI ImageJ] IJ2 Plugin Service
In-Reply-To: <0DFC3403-6432-4AA9-8DC5-36F66E1ED456@wisc.edu>
References: <13D7A230-4A2E-4E2D-BBC0-414FCCB41106@wisc.edu>
	<CADN69y=bPp78mp7QFCsB+jOzGKkb0n-2y40xH6dfgeNPNX3WCA@mail.gmail.com>
	<alpine.DEB.1.00.1404301923500.14982@s15462909.onlinehome-server.info>
	<853DAAEA-E381-4A8A-8ACB-F2608E63BB7F@wisc.edu>
	<CADN69ymF2fFo3g7zpkHz2i4xC0E7kt7FBBdUs+T_ssNuvBns+w@mail.gmail.com>
	<0DFC3403-6432-4AA9-8DC5-36F66E1ED456@wisc.edu>
Message-ID: <alpine.DEB.1.00.1405061938410.14982@s15462909.onlinehome-server.info>

Hi Jay,

On Tue, 6 May 2014, Jay Warrick wrote:

> You run the application once, it fixes the jar file but the changes to
> the jar file on disk are not reflected in the jar file that is loaded
> already in memory for running the application (at least as indicated by
> the getResources() method).

That is not the intended workflow -- as both Curtis & I pointed out.

The annotation indexes are supposed to be generated at compile time. The
way we do that is fully compliant with the Java standard.

By using an environment that does not abide by that standard -- Eclipse --
you make it your responsibility to ensure that the annotation indexes are
generated correctly.

You could do that by making unit tests an integral part of your build
process *before* bundling into a .jar (which you should do anyway, if you
want to follow best Java practices), or by running the EclipseHelper in
another manner.

You could do that by making it a Maven project and importing it into
Eclipse.

You could do that by forcing Eclipse into running the annotation
processors (as mandated by the Java standard).

You could figure out another way to make the annotation indexing run
before packaging the sources into .jar files.

What will not work is to continue to try to generate the annotation
indexes at a stage that is way later than compile time.

Ciao,
Johannes


From ctrueden at wisc.edu  Tue May  6 13:58:38 2014
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Tue, 6 May 2014 13:58:38 -0500
Subject: [ImageJ-devel] [LOCI ImageJ] IJ2 Plugin Service
In-Reply-To: <0DFC3403-6432-4AA9-8DC5-36F66E1ED456@wisc.edu>
References: <13D7A230-4A2E-4E2D-BBC0-414FCCB41106@wisc.edu>
	<CADN69y=bPp78mp7QFCsB+jOzGKkb0n-2y40xH6dfgeNPNX3WCA@mail.gmail.com>
	<alpine.DEB.1.00.1404301923500.14982@s15462909.onlinehome-server.info>
	<853DAAEA-E381-4A8A-8ACB-F2608E63BB7F@wisc.edu>
	<CADN69ymF2fFo3g7zpkHz2i4xC0E7kt7FBBdUs+T_ssNuvBns+w@mail.gmail.com>
	<0DFC3403-6432-4AA9-8DC5-36F66E1ED456@wisc.edu>
Message-ID: <CADN69yn65uev2n29qNJxtT3hMvOqbGAJbWGq7JWjYXf4h1moAg@mail.gmail.com>

Hi Jay,

> The requirement to generate such and index was not clear to me from
previous
> conversations and the high-level documentation on the plugin mechanism of
> ImageJ2... maybe I missed something? It was clear how you had to annotate
the
> classes but not the requirement of generating an index or the best way
how.

I want to clarify: Anyone using a javac-based build system has all the
annotations generated for them with no effort on their part. That is what a
compile-time annotation processor does. This includes:

* Ant builds on the command line
* Maven builds on the command line
* classic Makefiles
* Gradle builds
* NetBeans builds
* IntelliJ IDEA builds
* Manually invoking javac
* Any Maven-based project in Eclipse (thanks to Dscho's EclipseHelper)

The _only_ known use case that has this problem is an Eclipse-only
development style which does not use Maven _and_ has no unit tests _and_
does not configure a .factorypath _and_ uses Eclipse's "Export JAR" feature
to deploy its JARs.

If you want to help improve the situation with this use case, it would be
awesome if you could write up this requirement as a page on the ImageJ wiki
(http://wiki.imagej.net/) together with instructions on ways to configure
the project in Eclipse to solve the issue.

> Further, I just imagine other users getting things to work great from
> Eclipse, then when they export, it all breaks. It doesn't appear there is
a
> mechanism provided in the sci-java common library to streamline index
> generation for more general jar application development.

Anyone following the Maven-based "minimal IJ1 plugin" example [1] will not
have the problem, even from Eclipse, thanks to the EclipseHelper -- as well
as the fact that they will not need to use Eclipse's "Export JAR" feature
but can instead simply run Maven's "package" goal to generate the JAR with
annotations (this can be done using "Run As > Maven install" in the Eclipse
context menu).

If you have ideas on how to streamline the process further to make things
more easy and transparent for Eclipse users not using Maven, then pull
requests are very welcome.

Regards,
Curtis


On Tue, May 6, 2014 at 12:18 PM, Jay Warrick <warrick at wisc.edu> wrote:

> Thanks for the reply Curtis.
>
> I got it to work but not completely pleased for the reasons you cite. You
> run the application once, it fixes the jar file but the changes to the jar
> file on disk are not reflected in the jar file that is loaded already in
> memory for running the application (at least as indicated by the
> getResources() method). So, you close, and the second time you run, the
> getResources() function now sees the index and everything works. This jar
> is now "fixed" and can then be deployed so others don't have to open once
> and restart. I didn't get a reply on whether this was even a reasonable
> approach before I put a lot of work into trying this. I tried it because I
> really wanted to roll out a few functions to collaborators and I thought
> there was a chance that changes would be reflected during run time because
> the same approach was successful when running from Eclipse. It appears that
> knowledge of jar resources is established more wholesale at initial loading
> of any classes compared to loading resources from folders as occurs when
> Eclipse runs. Nothing crashes or anything but the additions to the jar
> aren't reflected by the getResources() method (which makes sense in
> hindsight :-).
>
> However, it seems like the current situation generally forces others to
> use Maven or some other mechanism of generating the annotation indexes and
> packaging them into the jar if anyone wants to implement their own sci-java
> plugins. Do you index the "plugins folder" full of user defined .java,
> .class, and .jar files separately somewhere in the code that I didn't see?
> If that is handled, this whole issue is probably moot for ImageJ2 stuff and
> really relates more to the ease-of-use/flexibility of sci-java
> common/SciJavaPlugin/PluginService mechanism for other applications. The
> requirement to generate such and index was not clear to me from previous
> conversations and the high-level documentation on the plugin mechanism of
> ImageJ2... maybe I missed something? It was clear how you had to annotate
> the classes but not the requirement of generating an index or the best way
> how. Further, I just imagine other users getting things to work great from
> Eclipse, then when they export, it all breaks. It doesn't appear there is a
> mechanism provided in the sci-java common library to streamline index
> generation for more general jar application development. Potentially at
> least a "semi-manual" java static function to "fix" a jar that doesn't
> require setting up a Maven build script (or similar) would be useful for
> those out there that aren't Maven literate yet. I now have the basis for
> this code if you think it useful. It works after packaging the jar so it
> doesn't have to be implemented within a build script (i.e., you don't
> absolutely have to know how to add custom operations to build instructions
> to Eclipse or Maven). It piggybacks on the EcipseHelper and seems to
> reproduce the indices produced by the EclipseHelper when running from
> Eclipse in this instance but I'm not absolutely sure it fits all use cases.
> You guys would likely be better judges of that. Let me know if you are
> interested but it's what I'll use for now while I get up to speed on Maven
> stuff.
>
> Cheers,
>
> Jay
>
>
> On May 6, 2014, at 11:17 AM, Curtis Rueden <ctrueden at wisc.edu> wrote:
>
> Hi Jay,
>
> > The iteration method it uses requires directories, which is fine and
> > dandy when running from within Eclipse but my program's JarFile
> > doesn't look like a directory so the exact same mechanism doesn't
> > work.
>
> EclipseHelper is intended to work when running from Eclipse, and never
> otherwise. That is why it does not support generating annotations from
> classes within JAR files.
>
>
> > However, it looks like a method analogous to this approach but for
> > JarFiles might work., right?
>
> I don't understand why you would ever need to do that... the point of
> EclipseHelper is to generate the annotations (META-INF/json/*) as close to
> compile time as possible -- not later at runtime, which would be the only
> time your code would be stored within a JAR file.
>
> > 0) Does my take on the situation seem right?
>
> While the technical aspects of what you are saying are correct to my
> knowledge (NB: I did not investigate the usage of getURLs()), I do not
> think it makes sense to invoke an EclipseHelper-like program during the
> actual execution of your program. By doing that, you would lose all the
> performance advantages of generating the annotations in advance.
>
> For ImageJ2 we use Maven from the command line to bundle our JARs and that
> generates the annotations as expected. An alternate approach, if you really
> really want Eclipse to do it for you instead, you might be to do it as part
> of Maven's generate-sources step; see the ImageJ OPS project for an example
> of that [1]. You'd just have to change the groovy script to invoke the
> annotation processor manually. But I haven't seriously explored doing
> things that way. And JEX would need to be structured as a Maven project for
> that...
>
> > 1) If I edit the programs jar file during run time by adding the
> > META-INF/json/<package>.Plugin jar entry, will that majorly hose
> > things?
>
> Yep, I would be surprised if that did not cause problems. I strongly
> advise not doing that.
>
> > In other words, if I can get the META-INF/json/<package>.Plugin
> > written to my program's jar analogous to the other referenced jars,
> > then everything will be OK?
>
> Yes, the goal is definitely to somehow generate your JAR file such that it
> contains the META-INF/json/* metadata from the get-go, without needing to
> pull any tricks the first time JEX is launched.
>
> Another possibility is to add a .factorypath and
> .settings/org.eclipse.jdt.apt.core.prefs file, similar to:
>
> .settings/org.eclipse.jdt.apt.core.prefs:
> eclipse.preferences.version=1
> org.eclipse.jdt.apt.aptEnabled=true
> org.eclipse.jdt.apt.genSrcDir=target/classes
> org.eclipse.jdt.apt.reconcileEnabled=false
>
> .factorypath:
> <factorypath>
>   <factorypathentry kind="VARJAR"
> id="M2_REPO/org/scijava/scijava-common/2.18.1/scijava-common-2.18.1.jar"
> enabled="true" runInBatchMode="true"/>
> </factorypath>
>
> But you'd want to ensure it matches your version of scijava-common, and
> also point it at wherever you have that JAR stored rather than into the
> Maven repository (which you presumably don't have since you aren't using
> Maven).
>
> Eclipse unfortunately makes invoking annotation processors quite
> complicated... [2]
>
> Regards,
> Curtis
>
> [1]
> https://github.com/imagej/imagej-ops/blob/imagej-ops-0.3.0/pom.xml#L169
> [2] https://bugs.eclipse.org/bugs/show_bug.cgi?id=280542
>
>
> On Wed, Apr 30, 2014 at 7:49 PM, Jay Warrick <warrick at wisc.edu> wrote:
>
>> Hi All,
>>
>> Thanks for all these replies folks. Digging around yesterday afternoon
>> and evening essentially painted a picture much like what Johannes indicated
>> in his email. The getResource() method works just fine and works roughly
>> the same whether you do A) jars-in-a-jar or B) jars (reference libraries)
>> in a folder next to a jar (my program), which are two of the 3 possible
>> modes of exporting runnable jars. The third option, C), actually extracts
>> all the class files and reorganizes them into a single flat jar (i.e., not
>> jar-in-jar but just a single uber-jar of classes in folders), which I
>> haven't used in the past for other reasons as well.
>>
>> Instead, it seems (I say seems because I only dabble in ClassLoaders)
>> their is no way to compile a list of my program's class files for indexing
>> annotation using just the method getResource() or getResources() without
>> knowing the name of at least a single resource in my program's jar. The
>> getResources() method just gives a list of the referenced jars and not the
>> main program's jar itself.  However, if I want sci-java to work agnostic of
>> who's using it, I can't assume within the sci-java code that I ever know of
>> a specific resource to look for. Even if getResource() does give a path to
>> my program's jar, the jar does not have the META-INF/json/<package>.Plugin
>> file that contains the results of indexing. The key to the EclipseHelper is
>> that it actually uses the getURLs() method of the URLClassLoader instead of
>> the getResources(). When running from eclipse, this method gives the path
>> to my referenced jars and the programs bin folder. When running from jar,
>> the getURLs() method returns both the referenced libraries and my programs
>> jar file (yay). However, since the jar file is not a directory, the
>> EclipseHelper method does not index it and write the
>> META-INF/json/<package>.Plugin file. The iteration method it uses requires
>> directories, which is fine and dandy when running from within Eclipse but
>> my program's JarFile doesn't look like a directory so the exact same
>> mechanism doesn't work. However, it looks like a method analogous to this
>> approach but for JarFiles might work., right? I think, to work, it would
>> have to iteratively index the contents of the JarFile and add a
>> META-INF/json/<package>.Plugin file as a new Jar entry (as far as I can see
>> anyway, I could definitely be wrong). I am trying to hack something
>> together to show whether this would work at all but if any of you think
>> this approach would benefit others, I'd welcome suggestions and would try
>> to clean it up as much as I can for a pull request. It seems like the
>> EclipseHelper is used when the class loader is an instance of
>> URLClassLoader (plus some other tests...) which happens to occur both when
>> running from eclipse and when exported as a runnable jar. So, on the
>> surface at least, it looks like the EclipseHelper class could be used for
>> both scenarios but am happy to change tacks if you think otherwise.
>>
>> However, I have a couple specific questions, that if answered would help
>> me to know if this might work at all and move forward.
>>
>> *0) Does my take on the situation seem right?*
>>
>> *1) If I edit the programs jar file during run time by adding the
>> META-INF/json/<package>.Plugin jar entry, will that majorly hose things?*
>>
>> *2) The Index class still uses the getResources() method to find things
>> and it will still only link to the referenced jar files. In this case we
>> can't assume that the ClassLoader is a URLClassLoader to be able to use the
>> getURLs method. I don't recall noticing when or how the indexing mechanism
>> looks for these META-INF/json/<package>.Plugin files to compile all the
>> annotation information. I assume it is via the getResource() method because
>> I believe by knowing what to look for (i.e., a
>> META-INF/json/<package>.Plugin file), we can just ask for the resource
>> directly? In other words, if I can get the META-INF/json/<package>.Plugin
>> written to my program's jar analogous to the other referenced jars, then
>> everything will be OK?*
>>
>> Thanks thanks thanks,
>>
>> Jay
>>
>> On Apr 30, 2014, at 12:51 PM, Johannes Schindelin <
>> Johannes.Schindelin at gmx.de> wrote:
>>
>> Hi,
>>
>> On Wed, 30 Apr 2014, Curtis Rueden wrote:
>>
>> when I export the application as a runnable jar, ij.plugin()service
>> returns all the Command.class plugins but 0 plugins of type
>> JEXPlugin.class
>>
>>
>> This is an issue we have discussed before: Eclipse creates uberjars using
>> a
>> "jar-in-jar" approach, and SciJava Common's plugin mechanism does not read
>> the metadata out of a jar-in-jar.
>>
>>
>> Please note that the jar-in-jar poses no problem, unless the ClassLoader
>> used to access them is broken: it needs to support the getResources() call
>> properly and find the resource files contained in the nested .jar files.
>>
>> However, in the reported case I believe it is not triggered by the uber
>> jar or jar-in-jar scenario.
>>
>> Background: The internal technique behind the plugins uses annotation
>> processors run at compile time. They basically look at each file that has
>> a @Plugin annotation and write out index files that get included into the
>> .jar files.
>>
>> Except that Eclipse -- violating the Java specification -- does not run
>> annotation processors. At least not by default, and even if you switch it
>> on (manually, for each and every project you maintain, one by one), it
>> *still* only runs them on full builds (i.e. after Project>Clean).
>>
>> So it looks to me that in the reported case, the annotation processor is
>> never run, and as a consequence, the index file is never written, and
>> therefore it cannot be found at runtime.
>>
>> Of course, Eclipse being such a prevalent platform to develop in, we tried
>> to come up with a workaround: whenever the annotation indexes are read, a
>> class called "EclipseHelper" tries to detect whether it needs to create
>> the index files because Eclipse failed to run the annotation processors.
>>
>> This works amazingly well because many developers have written unit tests
>> and run them before bundling .jar files manually. These unit tests verify
>> that plugins work, of course, which is why the EclipseHelper works around
>> the problem successfully in most cases.
>>
>> Also, here is a lesson for everybody choosing to learn from our past
>> mistakes and experiences: any possible convenience of uber jars is
>> outweighed multiple times over by the disadvantages it incurs to users: it
>> makes updating really costly (every time it's time to update, a new
>> monster .jar needs to be downloaded), it makes collaboration between
>> projects difficult at best, and it certainly asks for version skew.
>>
>> Ciao,
>> Johannes
>>
>>
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140506/30b0a4ea/attachment-0001.html>

From ctrueden at wisc.edu  Tue May  6 16:17:10 2014
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Tue, 6 May 2014 16:17:10 -0500
Subject: [ImageJ-devel] ImageJ2 development
In-Reply-To: <536947A2.7090808@gmail.com>
References: <536134A3.2010605@gmail.com>
	<CADN69yn1L2QQtFB=v8jdQQ6AG3nWapec3HCrpAJJxxwmBL9CrQ@mail.gmail.com>
	<536947A2.7090808@gmail.com>
Message-ID: <CADN69y=omDP3Ay=HWU6RW7sDYiMdrr=stgsOAFMBV2gjC=jTyw@mail.gmail.com>

Hi Pawel,

> I am really glad you are open to collaboration. Like you said, there
> is definitely a learning curve, so I will try to get acquainted with
> the current codebase and drop in on #imagejdev for questions.

Sounds good.

> I am happy to work on documentation while I am getting up to speed
> with the code.

Great, that would be really helpful.

> Most of my itches are actually GUI-related, but from what I've
> gathered you are not planning to initially change the GUI much from
> what it was in 1.x for compatibility reasons. Maybe once I understand
> the code structure a little better, I can help with work on the Swing,
> AWT, or RCP GUIs for the later releases. I'll be keeping in touch.

Right, there are two very different modes: the ImageJ 1.x user interface,
and the ImageJ 2.x Swing UI. The latter is (at the moment) designed to
function much like the former, although we will probably diverge more from
ImageJ 1.x's design in the future.

To facilitate total backwards compatibility, as well as to accommodate
Wayne Rasband's continued development of ImageJ 1.x, we are now opting to
release ImageJ 2.0.0 running with the 1.x UI by default. You can still
switch to the ImageJ2 UI using Help > Switch to Modern Mode, but it has
more limitations compatibility-wise.

I would encourage you to discuss your UI ideas and requirements on
imagej-devel or in the #imagejdev IRC channel (i.e., somewhere public).
That way we can stay on the same page about what things are possible and
warranted within each user interface.

I look forward to hearing more from you!

Regards,
Curtis


On Tue, May 6, 2014 at 3:35 PM, Pawel Niewiadomski <
pawelthebiologist at gmail.com> wrote:

> Hi Curtis,
>
> I am really glad you are open to collaboration. Like you said, there is
> definitely a learning curve, so I will try to get acquainted with the
> current codebase and drop in on #imagejdev for questions. I am happy to
> work on documentation while I am getting up to speed with the code. Most of
> my itches are actually GUI-related, but from what I've gathered you are not
> planning to initially change the GUI much from what it was in 1.x for
> compatibility reasons. Maybe once I understand the code structure a little
> better, I can help with work on the Swing, AWT, or RCP GUIs for the later
> releases. I'll be keeping in touch.
>
> Regards,
> Pawel
>
>
> On 2014-05-06 6:29 PM, Curtis Rueden wrote:
>
>> Hi Pawel,
>>
>> Thanks very much for your interest in the ImageJ project! I'm CCing the
>> imagej-devel mailing list, since that is the best place to discuss
>> ImageJ2 core development.
>>
>>  > ImageJ is one of my all-time favorite pieces of software and I would
>>  > like to contribute to its development. I have a decent knowledge of
>>  > Java, but I haven't really worked on an open source project before. I
>>  > saw that the list of contributors on the ImageJ github page is pretty
>>  > limited and so I am wondering if you generally like outside people
>>  > contributing to the codebase or whether you prefer to keep it within
>>  > the core development team.
>>
>> One of the major goals of ImageJ2 is to support a more
>> community-oriented group of developers. Requests like yours are
>> surprisingly rare because most people do not have a lot of free time to
>> contribute to projects like ImageJ. But your help would definitely be
>> most welcome.
>>
>>  > If you welcome new devs, what features/bugfixes do you think are most
>>  > critical at the moment?
>>
>> I would encourage you to first "scratch your own itches" [1]. You can
>> get started right away: fork the relevant project(s) from
>> https://github.com/imagej and https://github.com/scijava, push changes
>> to topic branches, and file pull requests [2]. (And if you need an
>> introduction to Git: https://try.github.io/).
>>
>> If you really don't have any itches and just want to fix bugs, that's a
>> bit trickier at the moment, since you would need to become more
>> acquainted with the ImageJ2 project structure -- and it is still in beta
>> and documentation is scarce in many places.
>>
>> It might make the most sense for you to jump into the ImageJ chat room
>> (#imagejdev) on IRC freenode during U.S. business hours and chat with us
>> at more length. One way you could start helping the project right away
>> would be transform any information you learn there into wiki pages on
>> the ImageJ wiki (http://wiki.imagej.net/).
>>
>> We are gearing up for an initial release of ImageJ 2.0.0 (finally
>> leaving beta!) on June 1, so your timing is hectic, but also really
>> fantastic to help improve the project documentation and learn the
>> system, so that you can embark on more involved coding endeavors.
>>
>> Regards,
>> Curtis
>>
>> [1] https://gettingreal.37signals.com/ch02_Whats_Your_Problem.php
>> [2] https://help.github.com/articles/using-pull-requests
>>
>>
>>
>> On Wed, Apr 30, 2014 at 12:36 PM, Pawel Niewiadomski
>> <pawelthebiologist at gmail.com <mailto:pawelthebiologist at gmail.com>> wrote:
>>
>>     Hi Curtis,
>>
>>     I am a postdoc in molecular biology, who has recently started to
>>     seriously work on improving my coding skills. ImageJ is one of my
>>     all-time favorite pieces of software and I would like to contribute
>>     to its development. I have a decent knowledge of Java, but I haven't
>>     really worked on an open source project before. I saw that the list
>>     of contributors on the ImageJ github page is pretty limited and so I
>>     am wondering if you generally like outside people contributing to
>>     the codebase or whether you prefer to keep it within the core
>>     development team. If you welcome new devs, what features/bugfixes do
>>     you think are most critical at the moment?
>>
>>     Thanks,
>>     Pawel
>>
>>     --
>>     Pawe? Niewiadomski
>>     e-mail: pawelthebiologist at gmail.com <mailto:pawelthebiologist@
>> gmail.com>
>>     website: www.pawelthebiologist.com <http://www.pawelthebiologist.com>
>>
>>
>>
> --
> Pawe? Niewiadomski
> e-mail: pawelthebiologist at gmail.com
> website: www.pawelthebiologist.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140506/7f0d889d/attachment.html>

From warrick at wisc.edu  Tue May  6 17:13:18 2014
From: warrick at wisc.edu (Jay Warrick)
Date: Tue, 06 May 2014 17:13:18 -0500
Subject: [ImageJ-devel] [LOCI ImageJ] IJ2 Plugin Service
In-Reply-To: <alpine.DEB.1.00.1405061938410.14982@s15462909.onlinehome-server.info>
References: <13D7A230-4A2E-4E2D-BBC0-414FCCB41106@wisc.edu>
	<CADN69y=bPp78mp7QFCsB+jOzGKkb0n-2y40xH6dfgeNPNX3WCA@mail.gmail.com>
	<alpine.DEB.1.00.1404301923500.14982@s15462909.onlinehome-server.info>
	<853DAAEA-E381-4A8A-8ACB-F2608E63BB7F@wisc.edu>
	<CADN69ymF2fFo3g7zpkHz2i4xC0E7kt7FBBdUs+T_ssNuvBns+w@mail.gmail.com>
	<0DFC3403-6432-4AA9-8DC5-36F66E1ED456@wisc.edu>
	<alpine.DEB.1.00.1405061938410.14982@s15462909.onlinehome-server.info>
Message-ID: <EEADA400-1ACF-4E15-9C65-BC64F3534478@wisc.edu>

Hi Johannes,

Thanks for the reply. 

If I try to force Eclipse to process annotations. I get this error...

java.io.IOException: org.eclipse.core.internal.resources.ResourceException: Resource '/JEX/bin/META-INF/json/org.scijava.plugin.Plugin' does not exist.
	at org.eclipse.jdt.internal.apt.pluggable.core.filer.IdeInputFileObject.openInputStream(IdeInputFileObject.java:88)
	at org.scijava.annotations.AnnotationProcessor$Writer.openInput(AnnotationProcessor.java:224)
	at org.scijava.annotations.AbstractIndexWriter.merge(AbstractIndexWriter.java:118)
	at org.scijava.annotations.AbstractIndexWriter.write(AbstractIndexWriter.java:91)
	at org.scijava.annotations.AnnotationProcessor.process(AnnotationProcessor.java:91)
	at org.eclipse.jdt.internal.compiler.apt.dispatch.RoundDispatcher.handleProcessor(RoundDispatcher.java:139)
	at org.eclipse.jdt.internal.compiler.apt.dispatch.RoundDispatcher.round(RoundDispatcher.java:121)
	at org.eclipse.jdt.internal.compiler.apt.dispatch.BaseAnnotationProcessorManager.processAnnotations(BaseAnnotationProcessorManager.java:159)
	at org.eclipse.jdt.internal.apt.pluggable.core.dispatch.IdeAnnotationProcessorManager.processAnnotations(IdeAnnotationProcessorManager.java:134)
	at org.eclipse.jdt.internal.compiler.Compiler.processAnnotations(Compiler.java:820)
	at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:434)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:366)
	at org.eclipse.jdt.internal.core.builder.BatchImageBuilder.compile(BatchImageBuilder.java:178)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:303)
	at org.eclipse.jdt.internal.core.builder.BatchImageBuilder.build(BatchImageBuilder.java:60)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.buildAll(JavaBuilder.java:254)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:173)
	at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:733)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:206)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:246)
	at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:299)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:302)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:263)
	at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:401)
	at org.eclipse.core.internal.resources.Project$1.run(Project.java:618)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2345)
	at org.eclipse.core.internal.resources.Project.internalBuild(Project.java:597)
	at org.eclipse.core.internal.resources.Project.build(Project.java:114)
	at org.eclipse.jdt.internal.ui.util.CoreUtility$BuildJob.run(CoreUtility.java:161)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)
Caused by: org.eclipse.core.internal.resources.ResourceException: Resource '/JEX/bin/META-INF/json/org.scijava.plugin.Plugin' does not exist.
	at org.eclipse.core.internal.resources.Resource.checkExists(Resource.java:341)
	at org.eclipse.core.internal.resources.Resource.checkAccessible(Resource.java:215)
	at org.eclipse.core.internal.resources.File.getContents(File.java:287)
	at org.eclipse.core.internal.resources.File.getContents(File.java:278)
	at org.eclipse.jdt.internal.apt.pluggable.core.filer.IdeInputFileObject.openInputStream(IdeInputFileObject.java:86)
	... 31 more

Any idea why the file is not created on processing?

Thanks,

Jay



On May 6, 2014, at 12:43 PM, Johannes Schindelin <Johannes.Schindelin at gmx.de> wrote:

> Hi Jay,
> 
> On Tue, 6 May 2014, Jay Warrick wrote:
> 
>> You run the application once, it fixes the jar file but the changes to
>> the jar file on disk are not reflected in the jar file that is loaded
>> already in memory for running the application (at least as indicated by
>> the getResources() method).
> 
> That is not the intended workflow -- as both Curtis & I pointed out.
> 
> The annotation indexes are supposed to be generated at compile time. The
> way we do that is fully compliant with the Java standard.
> 
> By using an environment that does not abide by that standard -- Eclipse --
> you make it your responsibility to ensure that the annotation indexes are
> generated correctly.
> 
> You could do that by making unit tests an integral part of your build
> process *before* bundling into a .jar (which you should do anyway, if you
> want to follow best Java practices), or by running the EclipseHelper in
> another manner.
> 
> You could do that by making it a Maven project and importing it into
> Eclipse.
> 
> You could do that by forcing Eclipse into running the annotation
> processors (as mandated by the Java standard).
> 
> You could figure out another way to make the annotation indexing run
> before packaging the sources into .jar files.
> 
> What will not work is to continue to try to generate the annotation
> indexes at a stage that is way later than compile time.
> 
> Ciao,
> Johannes



From ctrueden at wisc.edu  Wed May  7 03:28:15 2014
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Wed, 7 May 2014 03:28:15 -0500
Subject: [ImageJ-devel] [LOCI ImageJ] IJ2 Plugin Service
In-Reply-To: <EEADA400-1ACF-4E15-9C65-BC64F3534478@wisc.edu>
References: <13D7A230-4A2E-4E2D-BBC0-414FCCB41106@wisc.edu>
	<CADN69y=bPp78mp7QFCsB+jOzGKkb0n-2y40xH6dfgeNPNX3WCA@mail.gmail.com>
	<alpine.DEB.1.00.1404301923500.14982@s15462909.onlinehome-server.info>
	<853DAAEA-E381-4A8A-8ACB-F2608E63BB7F@wisc.edu>
	<CADN69ymF2fFo3g7zpkHz2i4xC0E7kt7FBBdUs+T_ssNuvBns+w@mail.gmail.com>
	<0DFC3403-6432-4AA9-8DC5-36F66E1ED456@wisc.edu>
	<alpine.DEB.1.00.1405061938410.14982@s15462909.onlinehome-server.info>
	<EEADA400-1ACF-4E15-9C65-BC64F3534478@wisc.edu>
Message-ID: <CADN69y=xL8BTk-QJMfz9E9-1iqTT4ptH7uMyKz4eJyBWAOTHvw@mail.gmail.com>

Hi Jay,

> Any idea why the file is not created on processing?

Can you please push your changes to a branch of JEX? Otherwise there is not
enough information to understand what you tried to do.

Thanks,
Curtis


On Tue, May 6, 2014 at 5:13 PM, Jay Warrick <warrick at wisc.edu> wrote:

> Hi Johannes,
>
> Thanks for the reply.
>
> If I try to force Eclipse to process annotations. I get this error...
>
> java.io.IOException:
> org.eclipse.core.internal.resources.ResourceException: Resource
> '/JEX/bin/META-INF/json/org.scijava.plugin.Plugin' does not exist.
>         at
> org.eclipse.jdt.internal.apt.pluggable.core.filer.IdeInputFileObject.openInputStream(IdeInputFileObject.java:88)
>         at
> org.scijava.annotations.AnnotationProcessor$Writer.openInput(AnnotationProcessor.java:224)
>         at
> org.scijava.annotations.AbstractIndexWriter.merge(AbstractIndexWriter.java:118)
>         at
> org.scijava.annotations.AbstractIndexWriter.write(AbstractIndexWriter.java:91)
>         at
> org.scijava.annotations.AnnotationProcessor.process(AnnotationProcessor.java:91)
>         at
> org.eclipse.jdt.internal.compiler.apt.dispatch.RoundDispatcher.handleProcessor(RoundDispatcher.java:139)
>         at
> org.eclipse.jdt.internal.compiler.apt.dispatch.RoundDispatcher.round(RoundDispatcher.java:121)
>         at
> org.eclipse.jdt.internal.compiler.apt.dispatch.BaseAnnotationProcessorManager.processAnnotations(BaseAnnotationProcessorManager.java:159)
>         at
> org.eclipse.jdt.internal.apt.pluggable.core.dispatch.IdeAnnotationProcessorManager.processAnnotations(IdeAnnotationProcessorManager.java:134)
>         at
> org.eclipse.jdt.internal.compiler.Compiler.processAnnotations(Compiler.java:820)
>         at
> org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:434)
>         at
> org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:366)
>         at
> org.eclipse.jdt.internal.core.builder.BatchImageBuilder.compile(BatchImageBuilder.java:178)
>         at
> org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:303)
>         at
> org.eclipse.jdt.internal.core.builder.BatchImageBuilder.build(BatchImageBuilder.java:60)
>         at
> org.eclipse.jdt.internal.core.builder.JavaBuilder.buildAll(JavaBuilder.java:254)
>         at
> org.eclipse.jdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:173)
>         at
> org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:733)
>         at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
>         at
> org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:206)
>         at
> org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:246)
>         at
> org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:299)
>         at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
>         at
> org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:302)
>         at
> org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:263)
>         at
> org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:401)
>         at
> org.eclipse.core.internal.resources.Project$1.run(Project.java:618)
>         at
> org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2345)
>         at
> org.eclipse.core.internal.resources.Project.internalBuild(Project.java:597)
>         at
> org.eclipse.core.internal.resources.Project.build(Project.java:114)
>         at
> org.eclipse.jdt.internal.ui.util.CoreUtility$BuildJob.run(CoreUtility.java:161)
>         at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)
> Caused by: org.eclipse.core.internal.resources.ResourceException: Resource
> '/JEX/bin/META-INF/json/org.scijava.plugin.Plugin' does not exist.
>         at
> org.eclipse.core.internal.resources.Resource.checkExists(Resource.java:341)
>         at
> org.eclipse.core.internal.resources.Resource.checkAccessible(Resource.java:215)
>         at
> org.eclipse.core.internal.resources.File.getContents(File.java:287)
>         at
> org.eclipse.core.internal.resources.File.getContents(File.java:278)
>         at
> org.eclipse.jdt.internal.apt.pluggable.core.filer.IdeInputFileObject.openInputStream(IdeInputFileObject.java:86)
>         ... 31 more
>
> Any idea why the file is not created on processing?
>
> Thanks,
>
> Jay
>
>
>
> On May 6, 2014, at 12:43 PM, Johannes Schindelin <
> Johannes.Schindelin at gmx.de> wrote:
>
> > Hi Jay,
> >
> > On Tue, 6 May 2014, Jay Warrick wrote:
> >
> >> You run the application once, it fixes the jar file but the changes to
> >> the jar file on disk are not reflected in the jar file that is loaded
> >> already in memory for running the application (at least as indicated by
> >> the getResources() method).
> >
> > That is not the intended workflow -- as both Curtis & I pointed out.
> >
> > The annotation indexes are supposed to be generated at compile time. The
> > way we do that is fully compliant with the Java standard.
> >
> > By using an environment that does not abide by that standard -- Eclipse
> --
> > you make it your responsibility to ensure that the annotation indexes are
> > generated correctly.
> >
> > You could do that by making unit tests an integral part of your build
> > process *before* bundling into a .jar (which you should do anyway, if you
> > want to follow best Java practices), or by running the EclipseHelper in
> > another manner.
> >
> > You could do that by making it a Maven project and importing it into
> > Eclipse.
> >
> > You could do that by forcing Eclipse into running the annotation
> > processors (as mandated by the Java standard).
> >
> > You could figure out another way to make the annotation indexing run
> > before packaging the sources into .jar files.
> >
> > What will not work is to continue to try to generate the annotation
> > indexes at a stage that is way later than compile time.
> >
> > Ciao,
> > Johannes
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140507/49a0a36f/attachment-0001.html>

From schindelin at wisc.edu  Thu May  8 18:08:58 2014
From: schindelin at wisc.edu (Johannes Schindelin)
Date: Fri, 09 May 2014 01:08:58 +0200 (CEST)
Subject: [ImageJ-devel] EclipseHelper problems on Windows
In-Reply-To: <536BADBC.7040005@uni-konstanz.de>
References: <536BADBC.7040005@uni-konstanz.de>
Message-ID: <alpine.DEB.1.00.1405090105140.14982@s15462909.onlinehome-server.info>

Hi Christian,

I dug a little deeper into the problem you described and I think I fixed
it: https://github.com/scijava/scijava-common/commit/bf22d6aa

Since it is on 'master', Jenkins built a version that you can use:
http://jenkins.imagej.net/view/SciJava/job/SciJava-common/lastSuccessfulBuild/artifact/target/scijava-common-2.18.2-SNAPSHOT.jar

I also adjusted the example: to make use of the fix, you want to use the
'scijava-common-snapshot' branch of
https://github.com/dscho/eclipse-scijava-project

I sincerely hope this helps!
Dscho


From ctrueden at wisc.edu  Mon May 12 21:20:22 2014
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Mon, 12 May 2014 21:20:22 -0500
Subject: [ImageJ-devel] ImageJ2 development
In-Reply-To: <537135BF.90509@gmail.com>
References: <536134A3.2010605@gmail.com>
	<CADN69yn1L2QQtFB=v8jdQQ6AG3nWapec3HCrpAJJxxwmBL9CrQ@mail.gmail.com>
	<536947A2.7090808@gmail.com>
	<CADN69y=omDP3Ay=HWU6RW7sDYiMdrr=stgsOAFMBV2gjC=jTyw@mail.gmail.com>
	<537135BF.90509@gmail.com>
Message-ID: <CADN69y=PZaCmj6siFrd1JOFC=nooqA5iK00Kj6qaujcnNE0FHQ@mail.gmail.com>

Hi Pawel,

> I decided to start work on the project by playing around with the
> ImageJ2 interface in some routine tasks I usually do in ImageJ. After
> having done some extensive testing, I just wanted to give you some,
> hopefully constructive, input. I don't want to sound too negative, but
> I really think that June 1st is a bit early to be releasing a
> production version of ImageJ2.

With respect to the ImageJ2 Swing user interface and commands, you are
absolutely right. However, the initial 2.0.0 release of ImageJ2 is going to
continue using the classic ImageJ 1.x user interface by default. The new UI
will still be included (Help > Switch to Modern Mode) but will still be
very much in beta.

See this blog post for details:
http://developer.imagej.net/2014/04/01/imagej-200-stable-release-coming-spring

ImageJ 2.0.0 will be fundamentally the same as ImageJ1, but:

* Will be bundled with the Updater component which supports ImageJ update
sites and automatic update checking.

* Will be bundled with the native ImageJ Launcher with quite a few nice
command line features.

* Will be bundled with the ImageJ Script Editor including support for
several scripting languages.

* Will support parameterized ImageJ modules, including commands and
scripts, so that existing plugins can begin incremental migration toward
this new approach, which is more headless friendly and more interoperable
with tools such as CellProfiler, KNIME and OMERO.

* Will come with an option to use the SCIFIO library when opening image
files (e.g., using File > Open). This will fix ImageJ's TIFF support to be
more robust, and add extensible support for additional file formats without
needing to hack the HandleExtraFileTypes source.

* Will ship with all the new ImageJ2 APIs, but all these components will
still be in beta. We will bring each component out of beta after it has
been thoroughly vetted over time. These components include:
  - imagej-common: The ImgLib2-based image data model and core
  - imagej-ops: A framework for reusable algorithms; see
http://developer.imagej.net/2014/04/04/announcing-imagej-ops
  - imagej-ui-swing: The "pure ImageJ2" Swing user interface
  - imagej-plugins-*, scijava-plugins-*: Core plugins for ImageJ2 including
many commands

Note that the Fiji distribution of ImageJ has been shipping of all of these
components, and operating in this way, for years now, and is a well vetted
system. But it is time for these components to be officially available as
part of ImageJ's core, rather than only from a specific
life-sciences-focused ImageJ distribution.

> Please don't take it the wrong way - I am in the process of analysing
> the codebase and I think it is a real software engineering feat.

No offense taken at all; again, it is absolutely true that the ImageJ2 UI
needs more time in the oven. But meanwhile, it has already been over four
years since we launched the ImageJ2 project, and there are several very
mature components that need to get into the hands of users: the Updater,
the Launcher, the Script Editor, parameterized modules, and everything else
that is now part of the "SciJava Common" component (
https://github.com/scijava/scijava-common).

Because ImageJ2 consists of several pieces at various stages of
development, it needs to migrate out of beta piece by piece.

> It shows that there has been really serious thought put into
> architerctural design. However, at this point, and I am saying that as
> a daily ImageJ user, the architectural brilliance is not showing on
> the surface.

I am glad you like the design. And I agree that much more needs to be done
in terms of leveraging that design for the benefit of end users. This is an
area where your contributions could be really beneficial.

> I am going to submit some bug reports in a few days, but basically the
> interface is highly unpredictable and in many ways incompatible with
> ImageJ1.

Indeed. Please note that there are many bugs about such problems already
logged in the ImageJ Trac: http://trac.imagej.net/. We are actively in the
process of migrating away from the Trac system though, with individual
tickets being moved to GitHub Issues of the most relevant repository.
Unfortunately, since we are in the middle of that migration, it may be
difficult to verify whether an issue has already been filed for any
particular concern. When in doubt, file away and we can close any duplicate
issues accordingly.

> Let me just point to a few basic things before I submit detailed bug
> reports:
>
> 1. The brightness/contrast dialog sometimes sticks around when you
> open a new image and close the old one - you end up with multiple
> brightness/contrast dialogs and a single image. Moreover, I've had the
> dialog stay open even after I closed the application.

The IJ2 version of B&C has been the subject of frequent debate. In short,
it needs a lot more work. See http://trac.imagej.net/ticket/1100 and all
its blocking tickets (those listed in "Blocked by").

> 2. The color picker behavior is hectic and I couldn't figure out how
> and why it randomly changes color. Especially in 16-bit per channel
> images it is totally unpredictable.
>
> 3. With 48-bit 16-bit per channel composite images the drawing command
> with the white color selected basically draws random grey colors.

IJ2's current approach to foreground and background "colors" differs from
IJ1. And there are likely bugs, too.
* http://trac.imagej.net/ticket/965
* http://trac.imagej.net/ticket/1292

> 4. The interface is extremely slow to the point of being unusable for
> things like looking through time-course stacks or stacks of
> medium-sized multicolor images.

That is not a problem we have noticed, unless image planes become very
large. How large are your image planes? >2Kx2K?

> 5. Shape selection keeps old selections after you make a new one,
> which is inconsistent with ImageJ1 behavior and quite maddening for
> someone who is used to it.

Yes. We will probably need an option for it, because for many new users, it
is maddening to have one ROI disappear when creating another. But the main
reason IJ2's UI works that way right now is technical: it currently uses
the JHotDraw library which works that way by default.

> 6. Missing magic wand and text tool functionality.

https://github.com/imagej/imagej-plugins-tools/issues/8
https://github.com/imagej/imagej-plugins-tools/issues/9

> 7. Missing custom toolbars.

Known, but no explicit issue for it yet. Low priority, given all the other
things the Swing UI needs first. Note that IJ2 is not intrinsically limited
to 8 tools like ImageJ1 is, so it is less urgent to support customization.
All available tools will be present in the bar by default.

> 8. In multicolor images there seems to be no way of adjusting
> brightness/contrast of each channel individually.

Hmm, you're right. This might be a relatively new bug.

> 9. LIF format import doesn't work - it doesn't present the usual
> BioFormats dialog and instead just imports the first image in the
> series with some random channel separation.

LIF format does not work with vanilla ImageJ1 either. It is handled by the
Bio-Formats plugin. We do not ship Bio-Formats with ImageJ2 because: A)
ImageJ2 is BSD-2 licensed, and the Bio-Formats proprietary file format
readers have an incompatible GPL license; and B) ImageJ2 is supposed to be
a "discipline-agnostic" piece of software, while Bio-Formats is focused on
life sciences file formats.

However, LIF should work if you download Fiji, choose Help > Switch to
Modern Mode, and then File > Open your LIF file. This is thanks to the
SCIFIO Bio-Formats compatibility component (
https://github.com/scifio/scifio-bf-compat) which is bundled with Fiji.

Alternately, you can install Bio-Formats by turning on the Fiji and/or
Bio-Formats update sites shown in ImageJ2's Help > Update "Manage Update
Sites" dialog.

> This is just a sample, but there is a bunch more. My prediction is
> that the users will not migrate to the new version if you ship it as
> is. They frankly need a reason to migrate and ImageJ2 is not offering
> them any.

Agreed; "regular users" should not be switching to the new interface yet.
There are too many bugs and not enough advantages.

That is why decided to keep the ImageJ2 releases using the 1.x interface,
for the time being. This keeps 100% backwards compatibility while also
providing many advantages:
  * the ImageJ Updater
  * the Script Editor
  * user-facing improvements made possible by our ImageJ 1.x patching
mechanism, such as File > Open using the SCIFIO library to read TIFFs and
other formats more robustly
  * new developer-facing APIs (esp.,parameterized modules)

There are downsides though:
  * IJ1 UI is limited to XYZCT (though we may later patch in support for
additional dimensions)
  * IJ1 UI cannot handle tiled huge image planes (a feature planned for the
IJ2 UI)
  * Lack of separation of concerns; IJ1 UI is fundamentally tied to the IJ1
data model
  * Further reading: http://dev.imagej.net/rationale,
http://dev.imagej.net/proposal

> Right now ImageJ1 is a mature platform with few bugs and a plethora of
> mostly seamlessly working plugins.

In many ways. But due to ImageJ1's protracted incremental development, its
API how grown organically far beyond its original design goals, so it now
contains a plethora of limitations and edge cases.

> The biggest gripe most users have with ImageJ1 is its antiquated UI

With that insight in mind, we recently decided to allow the ImageJ2 Swing
UI to begin diverging much more from the ImageJ 1.x design. It will be nice
to take more liberties and create something that behaves in way more
standardized with other modern applications. See Icy for inspiration (
http://icy.bioimageanalysis.org/).

> and I would wait with the release of the final version until you (we?)
> (1) have ironed out all the bugs and inconsistencies,

>From experience, that goal will never occur. The ImageJ2 design
fundamentally cannot be 100% consistent with ImageJ 1.x. Not even ImageJ
1.x is 100% consistent with previous versions of ImageJ 1.x. And no
software of this magnitude is bug-free, either.

> (2) have good end-user documentation so they know how to do things the
> new way,

Indeed, we had a whole milestone dedicated to documentation in our original
release plan:
http://trac.imagej.net/milestone/imagej2-b11-docs

> and (3) have provided users with at least one "killer" feature that
> they have longed for.

Many such "killer" feature ideas were discussed on the ImageJX list when
ImageJ2 was first launched:
* https://groups.google.com/d/msg/imagejx/gz7cgytSRuA/emlJLp8o7XYJ
* https://groups.google.com/d/msg/imagejx/_yaczl4UWK4/_w6dCnGcJ1QJ
* https://groups.google.com/d/msg/imagejx/lD4s32M5als/HZiEA02LhXsJ
* https://groups.google.com/d/msg/imagejx/ox2ooizORA4/scMd4P0cRZAJ
* https://groups.google.com/d/msg/imagejx/F3gWc_Ndz_U/UTKiut-HuQMJ
* https://groups.google.com/d/msg/imagejx/79rryiWqFno/Ne--gMjkSX8J
* https://groups.google.com/d/msg/imagejx/pL6ipxHkAk8/26u5MF41YGsJ

There are many others in the issue tracker:
* Coherent I/O (complete): http://trac.imagej.net/ticket/9
* Separation of concerns (complete): http://trac.imagej.net/ticket/10
* Better plugin framework (complete): http://trac.imagej.net/ticket/11
* Better scripting (complete): http://trac.imagej.net/ticket/12
* Better event handling (complete): http://trac.imagej.net/ticket/14
* N-dimensional images (complete): http://trac.imagej.net/ticket/17
* Very large image data (complete): http://trac.imagej.net/ticket/20
* CellProfiler interoperability (complete):
http://trac.imagej.net/ticket/1002
* KNIME interoperability (complete): http://trac.imagej.net/ticket/1004
* OMERO interoperability: http://trac.imagej.net/ticket/1003
* Very large image planes: http://trac.imagej.net/ticket/19
* Better undo/redo: http://trac.imagej.net/ticket/13
* Coordinate systems: http://trac.imagej.net/ticket/40
* Metadata: http://trac.imagej.net/ticket/8

I know a lot of those are in some sense architectural, but many of them
have huge impact for users, too. Happy to elaborate on any specific aspects
of these.

> I think there is one thing that can be done in terms of point (3) that
> will make many users happy is a "pin" button in each image
> window/dialog. If the "pin" is activated then the window/dialog will
> be brought to the foreground every time the user brings any other
> "pinned" window or the main imagej bar to the foreground. This solves
> the perrenial usability problem of ImageJ1 where if you have multiple
> images open, you have to hunt for the right image, then hunt for the
> brightness/contrast dialog, then hunt for the channels dialog in the
> taskbar/dock.

Note that there are shortcuts for many of ImageJ's windows, which reduce
the need to hunt through the taskbar. E.g.: Shift+C for the B&C window,
Shift+Z for channels, Enter for the main ImageJ window.

> I don't think this should be a difficult feature to implement and I
> can try to do that, but I will need time to plow through the codebase
> and take it all in.

This feature could also be implemented for the ImageJ 1.x UI, which would
get it into the hands of users more immediately. And you could easily
distribute it via an ImageJ update site; see
http://wiki.imagej.net/Update_Sites.

> I hope that my comments will help with the development. I am hoping to
> contribute to the actual work soon.

Development of the core ImageJ system is a substantially different endeavor
from feature ideas like better window management, analysis plugins, etc.
The question is: which sort of project are you more interested in working
on?

> Please let me know your thoughts. Also, I thought that I might want to
> send these comments to you personally rather than to the ImageJ-devel
> list, since I don't want to step on anyones toes. I imagine there is
> more to your decision to ship on June 1st than just software
> excellence - things like funding, publications, etc. Please feel free
> to forward my letter to the imagej-devel list if you think this will
> be constructive.

Thanks. As I said before, the imagej-devel list is the best place to
discuss these matters. ImageJ is an open source project, and as such is
best discussed in public to keep the community informed of the current
development directions, invite feedback and constructive criticism from
interested parties, etc.

Regards,
Curtis


On Mon, May 12, 2014 at 3:57 PM, Pawel Niewiadomski <
pawelthebiologist at gmail.com> wrote:

> Hi Curtis,
>
> I decided to start work on the project by playing around with the ImageJ2
> interface in some routine tasks I usually do in ImageJ. After having done
> some extensive testing, I just wanted to give you some, hopefully
> constructive, input. I don't want to sound too negative, but I really think
> that June 1st is a bit early to be releasing a production version of
> ImageJ2. Please don't take it the wrong way - I am in the process of
> analysing the codebase and I think it is a real software engineering feat.
> It shows that there has been really serious thought put into architerctural
> design. However, at this point, and I am saying that as a daily ImageJ
> user, the architectural brilliance is not showing on the surface. I am
> going to submit some bug reports in a few days, but basically the interface
> is highly unpredictable and in many ways incompatible with ImageJ1. Let me
> just point to a few basic things before I submit detailed bug reports:
> 1. The brightness/contrast dialog sometimes sticks around when you open a
> new image and close the old one - you end up with multiple
> brightness/contrast dialogs and a single image. Moreover, I've had the
> dialog stay open even after I closed the application.
> 2. The color picker behavior is hectic and I couldn't figure out how and
> why it randomly changes color. Especially in 16-bit per channel images it
> is totally unpredictable.
> 3. With 48-bit 16-bit per channel composite images the drawing command
> with the white color selected basically draws random grey colors.
> 4. The interface is extremely slow to the point of being unusable for
> things like looking through time-course stacks or stacks of medium-sized
> multicolor images.
> 5. Shape selection keeps old selections after you make a new one, which is
> inconsistent with ImageJ1 behavior and quite maddening for someone who is
> used to it.
> 6. Missing magic wand and text tool functionality.
> 7. Missing custom toolbars.
> 8. In multicolor images there seems to be no way of adjusting
> brightness/contrast of each channel individually.
> 9. LIF format import doesn't work - it doesn't present the usual
> BioFormats dialog and instead just imports the first image in the series
> with some random channel separation.
> This is just a sample, but there is a bunch more. My prediction is that
> the users will not migrate to the new version if you ship it as is. They
> frankly need a reason to migrate and ImageJ2 is not offering them any.
> Right now ImageJ1 is a mature platform with few bugs and a plethora of
> mostly seamlessly working plugins. The biggest gripe most users have with
> ImageJ1 is its antiquated UI and I would wait with the release of the final
> version until you (we?) (1) have ironed out all the bugs and
> inconsistencies, (2) have good end-user documentation so they know how to
> do things the new way, and (3) have provided users with at least one
> "killer" feature that they have longed for. I think there is one thing that
> can be done in terms of point (3) that will make many users happy is a
> "pin" button in each image window/dialog. If the "pin" is activated then
> the window/dialog will be brought to the foreground every time the user
> brings any other "pinned" window or the main imagej bar to the foreground.
> This solves the perrenial usability problem of ImageJ1 where if you have
> multiple images open, you have to hunt for the right image, then hunt for
> the brightness/contrast dialog, then hunt for the channels dialog in the
> taskbar/dock. I don't think this should be a difficult feature to implement
> and I can try to do that, but I will need time to plow through the codebase
> and take it all in. I hope that my comments will help with the development.
> I am hoping to contribute to the actual work soon. Please let me know your
> thoughts. Also, I thought that I might want to send these comments to you
> personally rather than to the ImageJ-devel list, since I don't want to step
> on anyones toes. I imagine there is more to your decision to ship on June
> 1st than just software excellence - things like funding, publications, etc.
> Please feel free to forward my letter to the imagej-devel list if you think
> this will be constructive.
>
> Best regards,
> Pawel
>
>
> On 2014-05-06 11:17 PM, Curtis Rueden wrote:
>
>> Hi Pawel,
>>
>>  > I am really glad you are open to collaboration. Like you said, there
>>  > is definitely a learning curve, so I will try to get acquainted with
>>  > the current codebase and drop in on #imagejdev for questions.
>>
>> Sounds good.
>>
>>  > I am happy to work on documentation while I am getting up to speed
>>  > with the code.
>>
>> Great, that would be really helpful.
>>
>>  > Most of my itches are actually GUI-related, but from what I've
>>  > gathered you are not planning to initially change the GUI much from
>>  > what it was in 1.x for compatibility reasons. Maybe once I understand
>>  > the code structure a little better, I can help with work on the Swing,
>>  > AWT, or RCP GUIs for the later releases. I'll be keeping in touch.
>>
>> Right, there are two very different modes: the ImageJ 1.x user
>> interface, and the ImageJ 2.x Swing UI. The latter is (at the moment)
>> designed to function much like the former, although we will probably
>> diverge more from ImageJ 1.x's design in the future.
>>
>> To facilitate total backwards compatibility, as well as to accommodate
>> Wayne Rasband's continued development of ImageJ 1.x, we are now opting
>> to release ImageJ 2.0.0 running with the 1.x UI by default. You can
>> still switch to the ImageJ2 UI using Help > Switch to Modern Mode, but
>> it has more limitations compatibility-wise.
>>
>> I would encourage you to discuss your UI ideas and requirements on
>> imagej-devel or in the #imagejdev IRC channel (i.e., somewhere public).
>> That way we can stay on the same page about what things are possible and
>> warranted within each user interface.
>>
>> I look forward to hearing more from you!
>>
>> Regards,
>> Curtis
>>
>>
>> On Tue, May 6, 2014 at 3:35 PM, Pawel Niewiadomski
>> <pawelthebiologist at gmail.com <mailto:pawelthebiologist at gmail.com>> wrote:
>>
>>     Hi Curtis,
>>
>>     I am really glad you are open to collaboration. Like you said, there
>>     is definitely a learning curve, so I will try to get acquainted with
>>     the current codebase and drop in on #imagejdev for questions. I am
>>     happy to work on documentation while I am getting up to speed with
>>     the code. Most of my itches are actually GUI-related, but from what
>>     I've gathered you are not planning to initially change the GUI much
>>     from what it was in 1.x for compatibility reasons. Maybe once I
>>     understand the code structure a little better, I can help with work
>>     on the Swing, AWT, or RCP GUIs for the later releases. I'll be
>>     keeping in touch.
>>
>>     Regards,
>>     Pawel
>>
>>
>>     On 2014-05-06 6:29 PM, Curtis Rueden wrote:
>>
>>         Hi Pawel,
>>
>>         Thanks very much for your interest in the ImageJ project! I'm
>>         CCing the
>>         imagej-devel mailing list, since that is the best place to discuss
>>         ImageJ2 core development.
>>
>>           > ImageJ is one of my all-time favorite pieces of software and
>>         I would
>>           > like to contribute to its development. I have a decent
>>         knowledge of
>>           > Java, but I haven't really worked on an open source project
>>         before. I
>>           > saw that the list of contributors on the ImageJ github page
>>         is pretty
>>           > limited and so I am wondering if you generally like outside
>>         people
>>           > contributing to the codebase or whether you prefer to keep
>>         it within
>>           > the core development team.
>>
>>         One of the major goals of ImageJ2 is to support a more
>>         community-oriented group of developers. Requests like yours are
>>         surprisingly rare because most people do not have a lot of free
>>         time to
>>         contribute to projects like ImageJ. But your help would
>>         definitely be
>>         most welcome.
>>
>>           > If you welcome new devs, what features/bugfixes do you think
>>         are most
>>           > critical at the moment?
>>
>>         I would encourage you to first "scratch your own itches" [1].
>>         You can
>>         get started right away: fork the relevant project(s) from
>>         https://github.com/imagej and https://github.com/scijava, push
>>         changes
>>         to topic branches, and file pull requests [2]. (And if you need an
>>         introduction to Git: https://try.github.io/).
>>
>>         If you really don't have any itches and just want to fix bugs,
>>         that's a
>>         bit trickier at the moment, since you would need to become more
>>         acquainted with the ImageJ2 project structure -- and it is still
>>         in beta
>>         and documentation is scarce in many places.
>>
>>         It might make the most sense for you to jump into the ImageJ
>>         chat room
>>         (#imagejdev) on IRC freenode during U.S. business hours and chat
>>         with us
>>         at more length. One way you could start helping the project
>>         right away
>>         would be transform any information you learn there into wiki
>>         pages on
>>         the ImageJ wiki (http://wiki.imagej.net/).
>>
>>         We are gearing up for an initial release of ImageJ 2.0.0 (finally
>>         leaving beta!) on June 1, so your timing is hectic, but also
>> really
>>         fantastic to help improve the project documentation and learn the
>>         system, so that you can embark on more involved coding endeavors.
>>
>>         Regards,
>>         Curtis
>>
>>         [1]
>>         https://gettingreal.37signals.__com/ch02_Whats_Your_Problem.__php
>> <https://gettingreal.37signals.com/ch02_Whats_Your_Problem.php>
>>         [2] https://help.github.com/__articles/using-pull-requests
>>
>>         <https://help.github.com/articles/using-pull-requests>
>>
>>
>>
>>         On Wed, Apr 30, 2014 at 12:36 PM, Pawel Niewiadomski
>>         <pawelthebiologist at gmail.com
>>         <mailto:pawelthebiologist at gmail.com>
>>         <mailto:pawelthebiologist at __gmail.com
>>
>>         <mailto:pawelthebiologist at gmail.com>>> wrote:
>>
>>              Hi Curtis,
>>
>>              I am a postdoc in molecular biology, who has recently
>>         started to
>>              seriously work on improving my coding skills. ImageJ is one
>>         of my
>>              all-time favorite pieces of software and I would like to
>>         contribute
>>              to its development. I have a decent knowledge of Java, but
>>         I haven't
>>              really worked on an open source project before. I saw that
>>         the list
>>              of contributors on the ImageJ github page is pretty limited
>>         and so I
>>              am wondering if you generally like outside people
>>         contributing to
>>              the codebase or whether you prefer to keep it within the core
>>              development team. If you welcome new devs, what
>>         features/bugfixes do
>>              you think are most critical at the moment?
>>
>>              Thanks,
>>              Pawel
>>
>>              --
>>              Pawe? Niewiadomski
>>              e-mail: pawelthebiologist at gmail.com
>>         <mailto:pawelthebiologist at gmail.com>
>>         <mailto:pawelthebiologist at __gmail.com
>>
>>         <mailto:pawelthebiologist at gmail.com>>
>>              website: www.pawelthebiologist.com
>>         <http://www.pawelthebiologist.com>
>>         <http://www.pawelthebiologist.__com
>>
>>         <http://www.pawelthebiologist.com>>
>>
>>
>>
>>     --
>>     Pawe? Niewiadomski
>>     e-mail: pawelthebiologist at gmail.com <mailto:pawelthebiologist@
>> gmail.com>
>>     website: www.pawelthebiologist.com <http://www.pawelthebiologist.com>
>>
>>
>>
> --
> Pawe? Niewiadomski
> e-mail: pawelthebiologist at gmail.com
> website: www.pawelthebiologist.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140512/4cbe1d7c/attachment-0001.html>

From pawelthebiologist at gmail.com  Tue May 13 02:41:39 2014
From: pawelthebiologist at gmail.com (Pawel Niewiadomski)
Date: Tue, 13 May 2014 09:41:39 +0200
Subject: [ImageJ-devel] ImageJ2 development
In-Reply-To: <CADN69y=PZaCmj6siFrd1JOFC=nooqA5iK00Kj6qaujcnNE0FHQ@mail.gmail.com>
References: <536134A3.2010605@gmail.com>
	<CADN69yn1L2QQtFB=v8jdQQ6AG3nWapec3HCrpAJJxxwmBL9CrQ@mail.gmail.com>
	<536947A2.7090808@gmail.com>
	<CADN69y=omDP3Ay=HWU6RW7sDYiMdrr=stgsOAFMBV2gjC=jTyw@mail.gmail.com>
	<537135BF.90509@gmail.com>
	<CADN69y=PZaCmj6siFrd1JOFC=nooqA5iK00Kj6qaujcnNE0FHQ@mail.gmail.com>
Message-ID: <5371CCB3.1050301@gmail.com>

Hi Curtis,

Thanks for your comprehensive reply.

> Hi Pawel,
>
>  > I decided to start work on the project by playing around with the
>  > ImageJ2 interface in some routine tasks I usually do in ImageJ. After
>  > having done some extensive testing, I just wanted to give you some,
>  > hopefully constructive, input. I don't want to sound too negative, but
>  > I really think that June 1st is a bit early to be releasing a
>  > production version of ImageJ2.
>
> With respect to the ImageJ2 Swing user interface and commands, you are
> absolutely right. However, the initial 2.0.0 release of ImageJ2 is going
> to continue using the classic ImageJ 1.x user interface by default. The
> new UI will still be included (Help > Switch to Modern Mode) but will
> still be very much in beta.
>

I was actually under the impression that ImageJ2 IS the modern interface 
and that it would be the default for the 2.0.0 release. I must have not 
found the relevant blog/discussion posts. My bad.

> See this blog post for details:
> http://developer.imagej.net/2014/04/01/imagej-200-stable-release-coming-spring
>
> ImageJ 2.0.0 will be fundamentally the same as ImageJ1, but:
>
> * Will be bundled with the Updater component which supports ImageJ
> update sites and automatic update checking.
>

OK

> * Will be bundled with the native ImageJ Launcher with quite a few nice
> command line features.

The imagej-win32.exe doesn't work in the build from about a week ago on 
my machine (Just the basic command that launches the GUI). I'll submit a 
bug report.

>
> * Will be bundled with the ImageJ Script Editor including support for
> several scripting languages.
>

I am guessing it's the same as the FiJi script editor? In that case the 
legacy UI should have a menu option File->New->Script, like FiJi does. 
In addition, the plugins->new->plugin throws some sort of exception on 
first use, again I'll submit a bug report.

> * Will support parameterized ImageJ modules, including commands and
> scripts, so that existing plugins can begin incremental migration toward
> this new approach, which is more headless friendly and more
> interoperable with tools such as CellProfiler, KNIME and OMERO.
>

Sounds good - I need to look into it more closely.

> * Will come with an option to use the SCIFIO library when opening image
> files (e.g., using File > Open). This will fix ImageJ's TIFF support to
> be more robust, and add extensible support for additional file formats
> without needing to hack the HandleExtraFileTypes source.
>

OK.

> * Will ship with all the new ImageJ2 APIs, but all these components will
> still be in beta. We will bring each component out of beta after it has
> been thoroughly vetted over time. These components include:
>    - imagej-common: The ImgLib2-based image data model and core
>    - imagej-ops: A framework for reusable algorithms; see
> http://developer.imagej.net/2014/04/04/announcing-imagej-ops
>    - imagej-ui-swing: The "pure ImageJ2" Swing user interface
>    - imagej-plugins-*, scijava-plugins-*: Core plugins for ImageJ2
> including many commands
>

OK

> Note that the Fiji distribution of ImageJ has been shipping of all of
> these components, and operating in this way, for years now, and is a
> well vetted system. But it is time for these components to be officially
> available as part of ImageJ's core, rather than only from a specific
> life-sciences-focused ImageJ distribution.

Sounds good. I've been using FiJi for quite some time now, so I didn't 
see the "newness" of the features.

>
>  > Please don't take it the wrong way - I am in the process of analysing
>  > the codebase and I think it is a real software engineering feat.
>
> No offense taken at all; again, it is absolutely true that the ImageJ2
> UI needs more time in the oven. But meanwhile, it has already been over
> four years since we launched the ImageJ2 project, and there are several
> very mature components that need to get into the hands of users: the
> Updater, the Launcher, the Script Editor, parameterized modules, and
> everything else that is now part of the "SciJava Common" component
> (https://github.com/scijava/scijava-common).
>
> Because ImageJ2 consists of several pieces at various stages of
> development, it needs to migrate out of beta piece by piece.
>
>  > It shows that there has been really serious thought put into
>  > architerctural design. However, at this point, and I am saying that as
>  > a daily ImageJ user, the architectural brilliance is not showing on
>  > the surface.
>
> I am glad you like the design. And I agree that much more needs to be
> done in terms of leveraging that design for the benefit of end users.
> This is an area where your contributions could be really beneficial.
>
>  > I am going to submit some bug reports in a few days, but basically the
>  > interface is highly unpredictable and in many ways incompatible with
>  > ImageJ1.
>
> Indeed. Please note that there are many bugs about such problems already
> logged in the ImageJ Trac: http://trac.imagej.net/. We are actively in
> the process of migrating away from the Trac system though, with
> individual tickets being moved to GitHub Issues of the most relevant
> repository. Unfortunately, since we are in the middle of that migration,
> it may be difficult to verify whether an issue has already been filed
> for any particular concern. When in doubt, file away and we can close
> any duplicate issues accordingly.
>
>  > Let me just point to a few basic things before I submit detailed bug
>  > reports:
>  >
>  > 1. The brightness/contrast dialog sometimes sticks around when you
>  > open a new image and close the old one - you end up with multiple
>  > brightness/contrast dialogs and a single image. Moreover, I've had the
>  > dialog stay open even after I closed the application.
>
> The IJ2 version of B&C has been the subject of frequent debate. In
> short, it needs a lot more work. See http://trac.imagej.net/ticket/1100
> and all its blocking tickets (those listed in "Blocked by").
>

OK

>  > 2. The color picker behavior is hectic and I couldn't figure out how
>  > and why it randomly changes color. Especially in 16-bit per channel
>  > images it is totally unpredictable.
>  >
>  > 3. With 48-bit 16-bit per channel composite images the drawing command
>  > with the white color selected basically draws random grey colors.
>
> IJ2's current approach to foreground and background "colors" differs
> from IJ1. And there are likely bugs, too.
> * http://trac.imagej.net/ticket/965
> * http://trac.imagej.net/ticket/1292
>

OK

>  > 4. The interface is extremely slow to the point of being unusable for
>  > things like looking through time-course stacks or stacks of
>  > medium-sized multicolor images.
>
> That is not a problem we have noticed, unless image planes become very
> large. How large are your image planes? >2Kx2K?
>

These are not large images (1kx1k/48-bit/10 z-planes), but mind you, I 
am not using the latest hardware. However, I think many of ImageJ users 
will not be on modern hardware, and my computer can run Photoshop CS4 
with ease, which is an indication that it is not a piece of junk, either.

>  > 5. Shape selection keeps old selections after you make a new one,
>  > which is inconsistent with ImageJ1 behavior and quite maddening for
>  > someone who is used to it.
>
> Yes. We will probably need an option for it, because for many new users,
> it is maddening to have one ROI disappear when creating another. But the
> main reason IJ2's UI works that way right now is technical: it currently
> uses the JHotDraw library which works that way by default.
>

OK

>  > 6. Missing magic wand and text tool functionality.
>
> https://github.com/imagej/imagej-plugins-tools/issues/8
> https://github.com/imagej/imagej-plugins-tools/issues/9
>

OK

>  > 7. Missing custom toolbars.
>
> Known, but no explicit issue for it yet. Low priority, given all the
> other things the Swing UI needs first. Note that IJ2 is not
> intrinsically limited to 8 tools like ImageJ1 is, so it is less urgent
> to support customization. All available tools will be present in the bar
> by default.
>

OK. It would be nice if the toolbar were easily customizable by the user
the way the old style custom toolbars were. Also, having custom 
floating/docking toolbars would be nice. I am thinking 
photoshop/illustrator here, or at least Office <2003. I don't think you 
necessarily need to implement an RCP-style interface to have those.

>  > 8. In multicolor images there seems to be no way of adjusting
>  > brightness/contrast of each channel individually.
>
> Hmm, you're right. This might be a relatively new bug.
>

That's an absolutely essential feature for any microscopy work. I'll 
submit the bug report.

>  > 9. LIF format import doesn't work - it doesn't present the usual
>  > BioFormats dialog and instead just imports the first image in the
>  > series with some random channel separation.
>
> LIF format does not work with vanilla ImageJ1 either. It is handled by
> the Bio-Formats plugin. We do not ship Bio-Formats with ImageJ2 because:
> A) ImageJ2 is BSD-2 licensed, and the Bio-Formats proprietary file
> format readers have an incompatible GPL license; and B) ImageJ2 is
> supposed to be a "discipline-agnostic" piece of software, while
> Bio-Formats is focused on life sciences file formats.
>

OK. Understood.

> However, LIF should work if you download Fiji, choose Help > Switch to
> Modern Mode, and then File > Open your LIF file. This is thanks to the
> SCIFIO Bio-Formats compatibility component
> (https://github.com/scifio/scifio-bf-compat) which is bundled with Fiji.
>

It does work, but not with File->Open. It doesn't present the right 
dialog for file import. You can go to File->Import->Bio-Formats. When 
you go to file-open (even in modern mode in FiJi), it just imports the 
first image of the bundle with each channel on a separate plane instead 
of creating a composite. It doesn't offer you the choices the way 
Bio-Formats does.

> Alternately, you can install Bio-Formats by turning on the Fiji and/or
> Bio-Formats update sites shown in ImageJ2's Help > Update "Manage Update
> Sites" dialog.
>
>  > This is just a sample, but there is a bunch more. My prediction is
>  > that the users will not migrate to the new version if you ship it as
>  > is. They frankly need a reason to migrate and ImageJ2 is not offering
>  > them any.
>
> Agreed; "regular users" should not be switching to the new interface
> yet. There are too many bugs and not enough advantages.
>
> That is why decided to keep the ImageJ2 releases using the 1.x
> interface, for the time being. This keeps 100% backwards compatibility
> while also providing many advantages:
>    * the ImageJ Updater
>    * the Script Editor
>    * user-facing improvements made possible by our ImageJ 1.x patching
> mechanism, such as File > Open using the SCIFIO library to read TIFFs
> and other formats more robustly
>    * new developer-facing APIs (esp.,parameterized modules)

Sounds good.

>
> There are downsides though:
>    * IJ1 UI is limited to XYZCT (though we may later patch in support
> for additional dimensions)
>    * IJ1 UI cannot handle tiled huge image planes (a feature planned for
> the IJ2 UI)
>    * Lack of separation of concerns; IJ1 UI is fundamentally tied to the
> IJ1 data model

I think that and the fact that FiJi already has many of these features 
is why I was convinced that ImageJ2 is the modern interface. The data 
model limitation is a serious one, because people cannot just migrate 
their plugins in one fell swoop. Rather, they have to first play with 
the new APIs, then start working on the data model conversion, etc.

>    * Further reading: http://dev.imagej.net/rationale,
> http://dev.imagej.net/proposal
>
>  > Right now ImageJ1 is a mature platform with few bugs and a plethora of
>  > mostly seamlessly working plugins.
>
> In many ways. But due to ImageJ1's protracted incremental development,
> its API how grown organically far beyond its original design goals, so
> it now contains a plethora of limitations and edge cases.
>
>  > The biggest gripe most users have with ImageJ1 is its antiquated UI
>
> With that insight in mind, we recently decided to allow the ImageJ2
> Swing UI to begin diverging much more from the ImageJ 1.x design. It
> will be nice to take more liberties and create something that behaves in
> way more standardized with other modern applications. See Icy for
> inspiration (http://icy.bioimageanalysis.org/).

I agree

>
>  > and I would wait with the release of the final version until you (we?)
>  > (1) have ironed out all the bugs and inconsistencies,
>
>  From experience, that goal will never occur. The ImageJ2 design
> fundamentally cannot be 100% consistent with ImageJ 1.x. Not even ImageJ
> 1.x is 100% consistent with previous versions of ImageJ 1.x. And no
> software of this magnitude is bug-free, either.

Yes. I may have overstated that goal. It would be a more realistic goal 
to have it bug-free enough that it is not super-annoying to the casual user.

>  > (2) have good end-user documentation so they know how to do things the
>  > new way,
>
> Indeed, we had a whole milestone dedicated to documentation in our
> original release plan:
> http://trac.imagej.net/milestone/imagej2-b11-docs
>

OK.

>  > and (3) have provided users with at least one "killer" feature that
>  > they have longed for.
>
> Many such "killer" feature ideas were discussed on the ImageJX list when
> ImageJ2 was first launched:
> * https://groups.google.com/d/msg/imagejx/gz7cgytSRuA/emlJLp8o7XYJ
> * https://groups.google.com/d/msg/imagejx/_yaczl4UWK4/_w6dCnGcJ1QJ
> * https://groups.google.com/d/msg/imagejx/lD4s32M5als/HZiEA02LhXsJ
> * https://groups.google.com/d/msg/imagejx/ox2ooizORA4/scMd4P0cRZAJ
> * https://groups.google.com/d/msg/imagejx/F3gWc_Ndz_U/UTKiut-HuQMJ
> * https://groups.google.com/d/msg/imagejx/79rryiWqFno/Ne--gMjkSX8J
> * https://groups.google.com/d/msg/imagejx/pL6ipxHkAk8/26u5MF41YGsJ
>
> There are many others in the issue tracker:
> * Coherent I/O (complete): http://trac.imagej.net/ticket/9
> * Separation of concerns (complete): http://trac.imagej.net/ticket/10
> * Better plugin framework (complete): http://trac.imagej.net/ticket/11
> * Better scripting (complete): http://trac.imagej.net/ticket/12
> * Better event handling (complete): http://trac.imagej.net/ticket/14
> * N-dimensional images (complete): http://trac.imagej.net/ticket/17
> * Very large image data (complete): http://trac.imagej.net/ticket/20
> * CellProfiler interoperability (complete):
> http://trac.imagej.net/ticket/1002
> * KNIME interoperability (complete): http://trac.imagej.net/ticket/1004
> * OMERO interoperability: http://trac.imagej.net/ticket/1003
> * Very large image planes: http://trac.imagej.net/ticket/19
> * Better undo/redo: http://trac.imagej.net/ticket/13

Absolutely a killer feature, but I am guessing difficult to implement in 
a plugin-based framework.

> * Coordinate systems: http://trac.imagej.net/ticket/40
> * Metadata: http://trac.imagej.net/ticket/8
>
> I know a lot of those are in some sense architectural, but many of them
> have huge impact for users, too. Happy to elaborate on any specific
> aspects of these.
>
>  > I think there is one thing that can be done in terms of point (3) that
>  > will make many users happy is a "pin" button in each image
>  > window/dialog. If the "pin" is activated then the window/dialog will
>  > be brought to the foreground every time the user brings any other
>  > "pinned" window or the main imagej bar to the foreground. This solves
>  > the perrenial usability problem of ImageJ1 where if you have multiple
>  > images open, you have to hunt for the right image, then hunt for the
>  > brightness/contrast dialog, then hunt for the channels dialog in the
>  > taskbar/dock.
>
> Note that there are shortcuts for many of ImageJ's windows, which reduce
> the need to hunt through the taskbar. E.g.: Shift+C for the B&C window,
> Shift+Z for channels, Enter for the main ImageJ window.

Yes, I've been using those shortcuts, but it is still annoying to have 
to find the image, and then press shift-Z and shift-C every time you 
switch back and forth between applications. Most annoyingly, the ImageJ 
toolbar disappears (is there a shortcut to bring it to foreground???) 
unless you set it always on top, which in turn makes it get in the way 
of other applications. What many users do is switch back and forth 
between ImageJ and other apps that allow them to put figures together 
(Illustrator/Photoshop/PowerPoint/Word) or analyze the data 
(Excel/R/Statistica). Right now I spend half my time fishing for the 
right image/dialog/button.

>
>  > I don't think this should be a difficult feature to implement and I
>  > can try to do that, but I will need time to plow through the codebase
>  > and take it all in.
>
> This feature could also be implemented for the ImageJ 1.x UI, which
> would get it into the hands of users more immediately. And you could
> easily distribute it via an ImageJ update site; see
> http://wiki.imagej.net/Update_Sites.

Sounds good. I'll give it a stab.

>
>  > I hope that my comments will help with the development. I am hoping to
>  > contribute to the actual work soon.
>
> Development of the core ImageJ system is a substantially different
> endeavor from feature ideas like better window management, analysis
> plugins, etc. The question is: which sort of project are you more
> interested in working on?

I think I will be interested in features development more than the core, 
but that may change as I get more familiar with the core.

>
>  > Please let me know your thoughts. Also, I thought that I might want to
>  > send these comments to you personally rather than to the ImageJ-devel
>  > list, since I don't want to step on anyones toes. I imagine there is
>  > more to your decision to ship on June 1st than just software
>  > excellence - things like funding, publications, etc. Please feel free
>  > to forward my letter to the imagej-devel list if you think this will
>  > be constructive.
>
> Thanks. As I said before, the imagej-devel list is the best place to
> discuss these matters. ImageJ is an open source project, and as such is
> best discussed in public to keep the community informed of the current
> development directions, invite feedback and constructive criticism from
> interested parties, etc.

Got it.

>
> Regards,
> Curtis
>

Regards,
Pawel

-- 
Pawe? Niewiadomski
e-mail: pawelthebiologist at gmail.com
website: www.pawelthebiologist.com


From ctrueden at wisc.edu  Tue May 13 15:16:03 2014
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Tue, 13 May 2014 15:16:03 -0500
Subject: [ImageJ-devel] ImageJ2 development
In-Reply-To: <5371CCB3.1050301@gmail.com>
References: <536134A3.2010605@gmail.com>
	<CADN69yn1L2QQtFB=v8jdQQ6AG3nWapec3HCrpAJJxxwmBL9CrQ@mail.gmail.com>
	<536947A2.7090808@gmail.com>
	<CADN69y=omDP3Ay=HWU6RW7sDYiMdrr=stgsOAFMBV2gjC=jTyw@mail.gmail.com>
	<537135BF.90509@gmail.com>
	<CADN69y=PZaCmj6siFrd1JOFC=nooqA5iK00Kj6qaujcnNE0FHQ@mail.gmail.com>
	<5371CCB3.1050301@gmail.com>
Message-ID: <CADN69ynUBA0HnDWua=NQpezjysZ6ONtafQKxyS+Cdh0r27JcaA@mail.gmail.com>

Hi Pawel,

> I was actually under the impression that ImageJ2 IS the modern
> interface and that it would be the default for the 2.0.0 release.

The vision of the ImageJ2 project has substantially evolved since its 2009
inception.

The main takeaway is that "ImageJ2" is actually several different
components. Documenting these components clearly but succinctly is
certainly a challenge.

> The imagej-win32.exe doesn't work in the build from about a week ago
> on my machine (Just the basic command that launches the GUI). I'll
> submit a bug report.

OK, thanks. I suggest these resources for how to write a good bug report:
* http://stackoverflow.com/help/how-to-ask
* http://whathaveyoutried.com/

> I am guessing it's the same as the FiJi script editor? In that case
> the legacy UI should have a menu option File->New->Script, like FiJi
> does. In addition, the plugins->new->plugin throws some sort of
> exception on first use, again I'll submit a bug report.

The Fiji Script Editor came first. Then it was ported to the ImageJ2 Script
Editor, which at the moment is a separate codebase. We are on the cusp of
updating Fiji to use the IJ2 Script Editor, and retiring the old Fiji
codebase. But we cannot do it until the IJ2 Script Editor has all the
features that the current Fiji Script Editor has. It is a goal for the June
release.

> > * Will support parameterized ImageJ modules
>
> Sounds good - I need to look into it more closely.

https://github.com/imagej/imagej-tutorials/tree/master/simple-commands/src/main/java

> I've been using FiJi for quite some time now, so I didn't see the
> "newness" of the features.

Fiji (small J, BTW) incubated several of the features now being slated for
ImageJ 2.0.0:
* http://developer.imagej.net/2012/11/19/road-fiji-2
* http://developer.imagej.net/2014/03/27/imagej2-and-fiji-recent-milestones

> It does work, but not with File->Open. It doesn't present the right
> dialog for file import. You can go to File->Import->Bio-Formats. When
> you go to file-open (even in modern mode in FiJi), it just imports the
> first image of the bundle with each channel on a separate plane
> instead of creating a composite. It doesn't offer you the choices the
> way Bio-Formats does.

The "big honkin' dialog" of Bio-Formats is indeed specific to Bio-Formats.
File > Open in ImageJ2 will not use the Bio-Formats dialogs. After all,
that dialog was built using an IJ1 GenericDialog, which ImageJ2 eschews.
Eventually we will have some "advanced options" which will be very similar
to (some of) those options of the BF dialog, but we have not implemented
that yet.

> These are not large images (1kx1k/48-bit/10 z-planes), but mind you, I
> am not using the latest hardware. However, I think many of ImageJ
> users will not be on modern hardware, and my computer can run
> Photoshop CS4 with ease, which is an indication that it is not a piece
> of junk, either.

Browsing images of that size is supposed to be smooth. Maybe it is a CPU
issue as you say. In the long term, we are planning to overhaul IJ2's
display mechanism which should substantially help improve performance.

> OK. It would be nice if the toolbar were easily customizable by the
> user the way the old style custom toolbars were.

Customization of toolbars is planned but will come later.

> Also, having custom floating/docking toolbars would be nice. I am
> thinking photoshop/illustrator here, or at least Office <2003. I don't
> think you necessarily need to implement an RCP-style interface to have
> those.

The IJ2 toolbar is already dockable, so can be made to float. Try grabbing
the grippers on the left and dragging.

And we will definitely not need to use an RCP framework for the
customization.

> I think that and the fact that FiJi already has many of these features
> is why I was convinced that ImageJ2 is the modern interface. The data
> model limitation is a serious one, because people cannot just migrate
> their plugins in one fell swoop. Rather, they have to first play with
> the new APIs, then start working on the data model conversion, etc.

The new data model will be available in ImageJ 2.0.0, but still in beta --
meaning anyone who converts their plugins at this point might need to tweak
their code again in the future as the API continues to evolve before final
release.

But the parameterized module framework is out of beta and we will do our
best to ensure backwards compatibility. So the recommended next step for
migration of plugins would be to first switch the plugin to an ImageJ2
command using parameterized inputs and outputs, but with ImageJ1 data
structures (e.g., ImagePlus). Then switch to ImageJ2 data structures
later... unless the plugin really needs an IJ2-only feature immediately.

> Yes. I may have overstated that goal. It would be a more realistic
> goal to have it bug-free enough that it is not super-annoying to the
> casual user.

Sure. That is a gray area though, since it is subjective depending on the
user. But I agree with the sentiment.

> > * Better undo/redo: http://trac.imagej.net/ticket/13
>
> Absolutely a killer feature, but I am guessing difficult to implement
> in a plugin-based framework.

Difficult but doable. We just never quite had time to work on it
intensively, yet. The ticket explains what needs to be done.

> Most annoyingly, the ImageJ toolbar disappears (is there a shortcut to
> bring it to foreground???)

Yes, like I said: Enter.

> > This feature could also be implemented for the ImageJ 1.x UI,
>
> Sounds good. I'll give it a stab.

Awesome, definitely keep us posted on your progress!

> I think I will be interested in features development more than the
> core, but that may change as I get more familiar with the core.

That is understandable, and certainly very reasonable given ImageJ's
extensible plugin mechanism. The core is "good enough" for a great variety
of things. I think it takes a certain architectural obsession to want to
work on ImageJ2 itself, which is one reason there are so few external
contributors.

Then, the best way for you to improve ImageJ, and give back to the ImageJ
community, will be to create your own personal update site and start adding
useful plugins to it, which work in the ImageJ 1.x UI. That said, you could
still be an early adopter of the parameterized ImageJ2 command mechanism
and other ImageJ2-only features, which would be really nice for a number of
reasons.

Regards,
Curtis


On Tue, May 13, 2014 at 2:41 AM, Pawel Niewiadomski <
pawelthebiologist at gmail.com> wrote:

> Hi Curtis,
>
> Thanks for your comprehensive reply.
>
>
>  Hi Pawel,
>>
>>  > I decided to start work on the project by playing around with the
>>  > ImageJ2 interface in some routine tasks I usually do in ImageJ. After
>>  > having done some extensive testing, I just wanted to give you some,
>>  > hopefully constructive, input. I don't want to sound too negative, but
>>  > I really think that June 1st is a bit early to be releasing a
>>  > production version of ImageJ2.
>>
>> With respect to the ImageJ2 Swing user interface and commands, you are
>> absolutely right. However, the initial 2.0.0 release of ImageJ2 is going
>> to continue using the classic ImageJ 1.x user interface by default. The
>> new UI will still be included (Help > Switch to Modern Mode) but will
>> still be very much in beta.
>>
>>
> I was actually under the impression that ImageJ2 IS the modern interface
> and that it would be the default for the 2.0.0 release. I must have not
> found the relevant blog/discussion posts. My bad.
>
>
>  See this blog post for details:
>> http://developer.imagej.net/2014/04/01/imagej-200-stable-
>> release-coming-spring
>>
>> ImageJ 2.0.0 will be fundamentally the same as ImageJ1, but:
>>
>> * Will be bundled with the Updater component which supports ImageJ
>> update sites and automatic update checking.
>>
>>
> OK
>
>
>  * Will be bundled with the native ImageJ Launcher with quite a few nice
>> command line features.
>>
>
> The imagej-win32.exe doesn't work in the build from about a week ago on my
> machine (Just the basic command that launches the GUI). I'll submit a bug
> report.
>
>
>
>> * Will be bundled with the ImageJ Script Editor including support for
>> several scripting languages.
>>
>>
> I am guessing it's the same as the FiJi script editor? In that case the
> legacy UI should have a menu option File->New->Script, like FiJi does. In
> addition, the plugins->new->plugin throws some sort of exception on first
> use, again I'll submit a bug report.
>
>
>  * Will support parameterized ImageJ modules, including commands and
>> scripts, so that existing plugins can begin incremental migration toward
>> this new approach, which is more headless friendly and more
>> interoperable with tools such as CellProfiler, KNIME and OMERO.
>>
>>
> Sounds good - I need to look into it more closely.
>
>
>  * Will come with an option to use the SCIFIO library when opening image
>> files (e.g., using File > Open). This will fix ImageJ's TIFF support to
>> be more robust, and add extensible support for additional file formats
>> without needing to hack the HandleExtraFileTypes source.
>>
>>
> OK.
>
>
>  * Will ship with all the new ImageJ2 APIs, but all these components will
>> still be in beta. We will bring each component out of beta after it has
>> been thoroughly vetted over time. These components include:
>>    - imagej-common: The ImgLib2-based image data model and core
>>    - imagej-ops: A framework for reusable algorithms; see
>> http://developer.imagej.net/2014/04/04/announcing-imagej-ops
>>    - imagej-ui-swing: The "pure ImageJ2" Swing user interface
>>    - imagej-plugins-*, scijava-plugins-*: Core plugins for ImageJ2
>> including many commands
>>
>>
> OK
>
>
>  Note that the Fiji distribution of ImageJ has been shipping of all of
>> these components, and operating in this way, for years now, and is a
>> well vetted system. But it is time for these components to be officially
>> available as part of ImageJ's core, rather than only from a specific
>> life-sciences-focused ImageJ distribution.
>>
>
> Sounds good. I've been using FiJi for quite some time now, so I didn't see
> the "newness" of the features.
>
>
>
>>  > Please don't take it the wrong way - I am in the process of analysing
>>  > the codebase and I think it is a real software engineering feat.
>>
>> No offense taken at all; again, it is absolutely true that the ImageJ2
>> UI needs more time in the oven. But meanwhile, it has already been over
>> four years since we launched the ImageJ2 project, and there are several
>> very mature components that need to get into the hands of users: the
>> Updater, the Launcher, the Script Editor, parameterized modules, and
>> everything else that is now part of the "SciJava Common" component
>> (https://github.com/scijava/scijava-common).
>>
>> Because ImageJ2 consists of several pieces at various stages of
>> development, it needs to migrate out of beta piece by piece.
>>
>>  > It shows that there has been really serious thought put into
>>  > architerctural design. However, at this point, and I am saying that as
>>  > a daily ImageJ user, the architectural brilliance is not showing on
>>  > the surface.
>>
>> I am glad you like the design. And I agree that much more needs to be
>> done in terms of leveraging that design for the benefit of end users.
>> This is an area where your contributions could be really beneficial.
>>
>>  > I am going to submit some bug reports in a few days, but basically the
>>  > interface is highly unpredictable and in many ways incompatible with
>>  > ImageJ1.
>>
>> Indeed. Please note that there are many bugs about such problems already
>> logged in the ImageJ Trac: http://trac.imagej.net/. We are actively in
>> the process of migrating away from the Trac system though, with
>> individual tickets being moved to GitHub Issues of the most relevant
>> repository. Unfortunately, since we are in the middle of that migration,
>> it may be difficult to verify whether an issue has already been filed
>> for any particular concern. When in doubt, file away and we can close
>> any duplicate issues accordingly.
>>
>>  > Let me just point to a few basic things before I submit detailed bug
>>  > reports:
>>  >
>>  > 1. The brightness/contrast dialog sometimes sticks around when you
>>  > open a new image and close the old one - you end up with multiple
>>  > brightness/contrast dialogs and a single image. Moreover, I've had the
>>  > dialog stay open even after I closed the application.
>>
>> The IJ2 version of B&C has been the subject of frequent debate. In
>> short, it needs a lot more work. See http://trac.imagej.net/ticket/1100
>> and all its blocking tickets (those listed in "Blocked by").
>>
>>
> OK
>
>
>   > 2. The color picker behavior is hectic and I couldn't figure out how
>>  > and why it randomly changes color. Especially in 16-bit per channel
>>  > images it is totally unpredictable.
>>  >
>>  > 3. With 48-bit 16-bit per channel composite images the drawing command
>>  > with the white color selected basically draws random grey colors.
>>
>> IJ2's current approach to foreground and background "colors" differs
>> from IJ1. And there are likely bugs, too.
>> * http://trac.imagej.net/ticket/965
>> * http://trac.imagej.net/ticket/1292
>>
>>
> OK
>
>
>   > 4. The interface is extremely slow to the point of being unusable for
>>  > things like looking through time-course stacks or stacks of
>>  > medium-sized multicolor images.
>>
>> That is not a problem we have noticed, unless image planes become very
>> large. How large are your image planes? >2Kx2K?
>>
>>
> These are not large images (1kx1k/48-bit/10 z-planes), but mind you, I am
> not using the latest hardware. However, I think many of ImageJ users will
> not be on modern hardware, and my computer can run Photoshop CS4 with ease,
> which is an indication that it is not a piece of junk, either.
>
>
>   > 5. Shape selection keeps old selections after you make a new one,
>>  > which is inconsistent with ImageJ1 behavior and quite maddening for
>>  > someone who is used to it.
>>
>> Yes. We will probably need an option for it, because for many new users,
>> it is maddening to have one ROI disappear when creating another. But the
>> main reason IJ2's UI works that way right now is technical: it currently
>> uses the JHotDraw library which works that way by default.
>>
>>
> OK
>
>
>   > 6. Missing magic wand and text tool functionality.
>>
>> https://github.com/imagej/imagej-plugins-tools/issues/8
>> https://github.com/imagej/imagej-plugins-tools/issues/9
>>
>>
> OK
>
>
>   > 7. Missing custom toolbars.
>>
>> Known, but no explicit issue for it yet. Low priority, given all the
>> other things the Swing UI needs first. Note that IJ2 is not
>> intrinsically limited to 8 tools like ImageJ1 is, so it is less urgent
>> to support customization. All available tools will be present in the bar
>> by default.
>>
>>
> OK. It would be nice if the toolbar were easily customizable by the user
> the way the old style custom toolbars were. Also, having custom
> floating/docking toolbars would be nice. I am thinking
> photoshop/illustrator here, or at least Office <2003. I don't think you
> necessarily need to implement an RCP-style interface to have those.
>
>
>   > 8. In multicolor images there seems to be no way of adjusting
>>  > brightness/contrast of each channel individually.
>>
>> Hmm, you're right. This might be a relatively new bug.
>>
>>
> That's an absolutely essential feature for any microscopy work. I'll
> submit the bug report.
>
>
>   > 9. LIF format import doesn't work - it doesn't present the usual
>>  > BioFormats dialog and instead just imports the first image in the
>>  > series with some random channel separation.
>>
>> LIF format does not work with vanilla ImageJ1 either. It is handled by
>> the Bio-Formats plugin. We do not ship Bio-Formats with ImageJ2 because:
>> A) ImageJ2 is BSD-2 licensed, and the Bio-Formats proprietary file
>> format readers have an incompatible GPL license; and B) ImageJ2 is
>> supposed to be a "discipline-agnostic" piece of software, while
>> Bio-Formats is focused on life sciences file formats.
>>
>>
> OK. Understood.
>
>
>  However, LIF should work if you download Fiji, choose Help > Switch to
>> Modern Mode, and then File > Open your LIF file. This is thanks to the
>> SCIFIO Bio-Formats compatibility component
>> (https://github.com/scifio/scifio-bf-compat) which is bundled with Fiji.
>>
>>
> It does work, but not with File->Open. It doesn't present the right dialog
> for file import. You can go to File->Import->Bio-Formats. When you go to
> file-open (even in modern mode in FiJi), it just imports the first image of
> the bundle with each channel on a separate plane instead of creating a
> composite. It doesn't offer you the choices the way Bio-Formats does.
>
>
>  Alternately, you can install Bio-Formats by turning on the Fiji and/or
>> Bio-Formats update sites shown in ImageJ2's Help > Update "Manage Update
>> Sites" dialog.
>>
>>  > This is just a sample, but there is a bunch more. My prediction is
>>  > that the users will not migrate to the new version if you ship it as
>>  > is. They frankly need a reason to migrate and ImageJ2 is not offering
>>  > them any.
>>
>> Agreed; "regular users" should not be switching to the new interface
>> yet. There are too many bugs and not enough advantages.
>>
>> That is why decided to keep the ImageJ2 releases using the 1.x
>> interface, for the time being. This keeps 100% backwards compatibility
>> while also providing many advantages:
>>    * the ImageJ Updater
>>    * the Script Editor
>>    * user-facing improvements made possible by our ImageJ 1.x patching
>> mechanism, such as File > Open using the SCIFIO library to read TIFFs
>> and other formats more robustly
>>    * new developer-facing APIs (esp.,parameterized modules)
>>
>
> Sounds good.
>
>
>
>> There are downsides though:
>>    * IJ1 UI is limited to XYZCT (though we may later patch in support
>> for additional dimensions)
>>    * IJ1 UI cannot handle tiled huge image planes (a feature planned for
>> the IJ2 UI)
>>    * Lack of separation of concerns; IJ1 UI is fundamentally tied to the
>> IJ1 data model
>>
>
> I think that and the fact that FiJi already has many of these features is
> why I was convinced that ImageJ2 is the modern interface. The data model
> limitation is a serious one, because people cannot just migrate their
> plugins in one fell swoop. Rather, they have to first play with the new
> APIs, then start working on the data model conversion, etc.
>
>
>     * Further reading: http://dev.imagej.net/rationale,
>> http://dev.imagej.net/proposal
>>
>>  > Right now ImageJ1 is a mature platform with few bugs and a plethora of
>>  > mostly seamlessly working plugins.
>>
>> In many ways. But due to ImageJ1's protracted incremental development,
>> its API how grown organically far beyond its original design goals, so
>> it now contains a plethora of limitations and edge cases.
>>
>>  > The biggest gripe most users have with ImageJ1 is its antiquated UI
>>
>> With that insight in mind, we recently decided to allow the ImageJ2
>> Swing UI to begin diverging much more from the ImageJ 1.x design. It
>> will be nice to take more liberties and create something that behaves in
>> way more standardized with other modern applications. See Icy for
>> inspiration (http://icy.bioimageanalysis.org/).
>>
>
> I agree
>
>
>
>>  > and I would wait with the release of the final version until you (we?)
>>  > (1) have ironed out all the bugs and inconsistencies,
>>
>>  From experience, that goal will never occur. The ImageJ2 design
>> fundamentally cannot be 100% consistent with ImageJ 1.x. Not even ImageJ
>> 1.x is 100% consistent with previous versions of ImageJ 1.x. And no
>> software of this magnitude is bug-free, either.
>>
>
> Yes. I may have overstated that goal. It would be a more realistic goal to
> have it bug-free enough that it is not super-annoying to the casual user.
>
>
>   > (2) have good end-user documentation so they know how to do things the
>>  > new way,
>>
>> Indeed, we had a whole milestone dedicated to documentation in our
>> original release plan:
>> http://trac.imagej.net/milestone/imagej2-b11-docs
>>
>>
> OK.
>
>
>   > and (3) have provided users with at least one "killer" feature that
>>  > they have longed for.
>>
>> Many such "killer" feature ideas were discussed on the ImageJX list when
>> ImageJ2 was first launched:
>> * https://groups.google.com/d/msg/imagejx/gz7cgytSRuA/emlJLp8o7XYJ
>> * https://groups.google.com/d/msg/imagejx/_yaczl4UWK4/_w6dCnGcJ1QJ
>> * https://groups.google.com/d/msg/imagejx/lD4s32M5als/HZiEA02LhXsJ
>> * https://groups.google.com/d/msg/imagejx/ox2ooizORA4/scMd4P0cRZAJ
>> * https://groups.google.com/d/msg/imagejx/F3gWc_Ndz_U/UTKiut-HuQMJ
>> * https://groups.google.com/d/msg/imagejx/79rryiWqFno/Ne--gMjkSX8J
>> * https://groups.google.com/d/msg/imagejx/pL6ipxHkAk8/26u5MF41YGsJ
>>
>> There are many others in the issue tracker:
>> * Coherent I/O (complete): http://trac.imagej.net/ticket/9
>> * Separation of concerns (complete): http://trac.imagej.net/ticket/10
>> * Better plugin framework (complete): http://trac.imagej.net/ticket/11
>> * Better scripting (complete): http://trac.imagej.net/ticket/12
>> * Better event handling (complete): http://trac.imagej.net/ticket/14
>> * N-dimensional images (complete): http://trac.imagej.net/ticket/17
>> * Very large image data (complete): http://trac.imagej.net/ticket/20
>> * CellProfiler interoperability (complete):
>> http://trac.imagej.net/ticket/1002
>> * KNIME interoperability (complete): http://trac.imagej.net/ticket/1004
>> * OMERO interoperability: http://trac.imagej.net/ticket/1003
>> * Very large image planes: http://trac.imagej.net/ticket/19
>> * Better undo/redo: http://trac.imagej.net/ticket/13
>>
>
> Absolutely a killer feature, but I am guessing difficult to implement in a
> plugin-based framework.
>
>
>  * Coordinate systems: http://trac.imagej.net/ticket/40
>> * Metadata: http://trac.imagej.net/ticket/8
>>
>> I know a lot of those are in some sense architectural, but many of them
>> have huge impact for users, too. Happy to elaborate on any specific
>> aspects of these.
>>
>>  > I think there is one thing that can be done in terms of point (3) that
>>  > will make many users happy is a "pin" button in each image
>>  > window/dialog. If the "pin" is activated then the window/dialog will
>>  > be brought to the foreground every time the user brings any other
>>  > "pinned" window or the main imagej bar to the foreground. This solves
>>  > the perrenial usability problem of ImageJ1 where if you have multiple
>>  > images open, you have to hunt for the right image, then hunt for the
>>  > brightness/contrast dialog, then hunt for the channels dialog in the
>>  > taskbar/dock.
>>
>> Note that there are shortcuts for many of ImageJ's windows, which reduce
>> the need to hunt through the taskbar. E.g.: Shift+C for the B&C window,
>> Shift+Z for channels, Enter for the main ImageJ window.
>>
>
> Yes, I've been using those shortcuts, but it is still annoying to have to
> find the image, and then press shift-Z and shift-C every time you switch
> back and forth between applications. Most annoyingly, the ImageJ toolbar
> disappears (is there a shortcut to bring it to foreground???) unless you
> set it always on top, which in turn makes it get in the way of other
> applications. What many users do is switch back and forth between ImageJ
> and other apps that allow them to put figures together
> (Illustrator/Photoshop/PowerPoint/Word) or analyze the data
> (Excel/R/Statistica). Right now I spend half my time fishing for the right
> image/dialog/button.
>
>
>
>>  > I don't think this should be a difficult feature to implement and I
>>  > can try to do that, but I will need time to plow through the codebase
>>  > and take it all in.
>>
>> This feature could also be implemented for the ImageJ 1.x UI, which
>> would get it into the hands of users more immediately. And you could
>> easily distribute it via an ImageJ update site; see
>> http://wiki.imagej.net/Update_Sites.
>>
>
> Sounds good. I'll give it a stab.
>
>
>
>>  > I hope that my comments will help with the development. I am hoping to
>>  > contribute to the actual work soon.
>>
>> Development of the core ImageJ system is a substantially different
>> endeavor from feature ideas like better window management, analysis
>> plugins, etc. The question is: which sort of project are you more
>> interested in working on?
>>
>
> I think I will be interested in features development more than the core,
> but that may change as I get more familiar with the core.
>
>
>
>>  > Please let me know your thoughts. Also, I thought that I might want to
>>  > send these comments to you personally rather than to the ImageJ-devel
>>  > list, since I don't want to step on anyones toes. I imagine there is
>>  > more to your decision to ship on June 1st than just software
>>  > excellence - things like funding, publications, etc. Please feel free
>>  > to forward my letter to the imagej-devel list if you think this will
>>  > be constructive.
>>
>> Thanks. As I said before, the imagej-devel list is the best place to
>> discuss these matters. ImageJ is an open source project, and as such is
>> best discussed in public to keep the community informed of the current
>> development directions, invite feedback and constructive criticism from
>> interested parties, etc.
>>
>
> Got it.
>
>
>> Regards,
>> Curtis
>>
>>
> Regards,
>
> Pawel
>
> --
> Pawe? Niewiadomski
> e-mail: pawelthebiologist at gmail.com
> website: www.pawelthebiologist.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140513/e5f98f28/attachment-0001.html>

From pawelthebiologist at gmail.com  Tue May 13 15:38:54 2014
From: pawelthebiologist at gmail.com (Pawel Niewiadomski)
Date: Tue, 13 May 2014 22:38:54 +0200
Subject: [ImageJ-devel] ImageJ2 development
In-Reply-To: <CADN69ynUBA0HnDWua=NQpezjysZ6ONtafQKxyS+Cdh0r27JcaA@mail.gmail.com>
References: <536134A3.2010605@gmail.com>
	<CADN69yn1L2QQtFB=v8jdQQ6AG3nWapec3HCrpAJJxxwmBL9CrQ@mail.gmail.com>
	<536947A2.7090808@gmail.com>
	<CADN69y=omDP3Ay=HWU6RW7sDYiMdrr=stgsOAFMBV2gjC=jTyw@mail.gmail.com>
	<537135BF.90509@gmail.com>
	<CADN69y=PZaCmj6siFrd1JOFC=nooqA5iK00Kj6qaujcnNE0FHQ@mail.gmail.com>
	<5371CCB3.1050301@gmail.com>
	<CADN69ynUBA0HnDWua=NQpezjysZ6ONtafQKxyS+Cdh0r27JcaA@mail.gmail.com>
Message-ID: <537282DE.3010007@gmail.com>

Hi Curtis,

Thanks again for taking the time to comprehensively reply to my 
sometimes ill-informed concerns and questions. I hope I can start 
contributing to the project soon!

Regards,
Pawel

On 2014-05-13 10:16 PM, Curtis Rueden wrote:
> Hi Pawel,
>
>  > I was actually under the impression that ImageJ2 IS the modern
>  > interface and that it would be the default for the 2.0.0 release.
>
> The vision of the ImageJ2 project has substantially evolved since its
> 2009 inception.
>
> The main takeaway is that "ImageJ2" is actually several different
> components. Documenting these components clearly but succinctly is
> certainly a challenge.
>
>  > The imagej-win32.exe doesn't work in the build from about a week ago
>  > on my machine (Just the basic command that launches the GUI). I'll
>  > submit a bug report.
>
> OK, thanks. I suggest these resources for how to write a good bug report:
> * http://stackoverflow.com/help/how-to-ask
> * http://whathaveyoutried.com/
>
>  > I am guessing it's the same as the FiJi script editor? In that case
>  > the legacy UI should have a menu option File->New->Script, like FiJi
>  > does. In addition, the plugins->new->plugin throws some sort of
>  > exception on first use, again I'll submit a bug report.
>
> The Fiji Script Editor came first. Then it was ported to the ImageJ2
> Script Editor, which at the moment is a separate codebase. We are on the
> cusp of updating Fiji to use the IJ2 Script Editor, and retiring the old
> Fiji codebase. But we cannot do it until the IJ2 Script Editor has all
> the features that the current Fiji Script Editor has. It is a goal for
> the June release.
>
>  > > * Will support parameterized ImageJ modules
>  >
>  > Sounds good - I need to look into it more closely.
>
> https://github.com/imagej/imagej-tutorials/tree/master/simple-commands/src/main/java
>
>  > I've been using FiJi for quite some time now, so I didn't see the
>  > "newness" of the features.
>
> Fiji (small J, BTW) incubated several of the features now being slated
> for ImageJ 2.0.0:
> * http://developer.imagej.net/2012/11/19/road-fiji-2
> * http://developer.imagej.net/2014/03/27/imagej2-and-fiji-recent-milestones
>
>  > It does work, but not with File->Open. It doesn't present the right
>  > dialog for file import. You can go to File->Import->Bio-Formats. When
>  > you go to file-open (even in modern mode in FiJi), it just imports the
>  > first image of the bundle with each channel on a separate plane
>  > instead of creating a composite. It doesn't offer you the choices the
>  > way Bio-Formats does.
>
> The "big honkin' dialog" of Bio-Formats is indeed specific to
> Bio-Formats. File > Open in ImageJ2 will not use the Bio-Formats
> dialogs. After all, that dialog was built using an IJ1 GenericDialog,
> which ImageJ2 eschews. Eventually we will have some "advanced options"
> which will be very similar to (some of) those options of the BF dialog,
> but we have not implemented that yet.
>
>  > These are not large images (1kx1k/48-bit/10 z-planes), but mind you, I
>  > am not using the latest hardware. However, I think many of ImageJ
>  > users will not be on modern hardware, and my computer can run
>  > Photoshop CS4 with ease, which is an indication that it is not a piece
>  > of junk, either.
>
> Browsing images of that size is supposed to be smooth. Maybe it is a CPU
> issue as you say. In the long term, we are planning to overhaul IJ2's
> display mechanism which should substantially help improve performance.
>
>  > OK. It would be nice if the toolbar were easily customizable by the
>  > user the way the old style custom toolbars were.
>
> Customization of toolbars is planned but will come later.
>
>  > Also, having custom floating/docking toolbars would be nice. I am
>  > thinking photoshop/illustrator here, or at least Office <2003. I don't
>  > think you necessarily need to implement an RCP-style interface to have
>  > those.
>
> The IJ2 toolbar is already dockable, so can be made to float. Try
> grabbing the grippers on the left and dragging.
>
> And we will definitely not need to use an RCP framework for the
> customization.
>
>  > I think that and the fact that FiJi already has many of these features
>  > is why I was convinced that ImageJ2 is the modern interface. The data
>  > model limitation is a serious one, because people cannot just migrate
>  > their plugins in one fell swoop. Rather, they have to first play with
>  > the new APIs, then start working on the data model conversion, etc.
>
> The new data model will be available in ImageJ 2.0.0, but still in beta
> -- meaning anyone who converts their plugins at this point might need to
> tweak their code again in the future as the API continues to evolve
> before final release.
>
> But the parameterized module framework is out of beta and we will do our
> best to ensure backwards compatibility. So the recommended next step for
> migration of plugins would be to first switch the plugin to an ImageJ2
> command using parameterized inputs and outputs, but with ImageJ1 data
> structures (e.g., ImagePlus). Then switch to ImageJ2 data structures
> later... unless the plugin really needs an IJ2-only feature immediately.
>
>  > Yes. I may have overstated that goal. It would be a more realistic
>  > goal to have it bug-free enough that it is not super-annoying to the
>  > casual user.
>
> Sure. That is a gray area though, since it is subjective depending on
> the user. But I agree with the sentiment.
>
>  > > * Better undo/redo: http://trac.imagej.net/ticket/13
>  >
>  > Absolutely a killer feature, but I am guessing difficult to implement
>  > in a plugin-based framework.
>
> Difficult but doable. We just never quite had time to work on it
> intensively, yet. The ticket explains what needs to be done.
>
>  > Most annoyingly, the ImageJ toolbar disappears (is there a shortcut to
>  > bring it to foreground???)
>
> Yes, like I said: Enter.
>
>  > > This feature could also be implemented for the ImageJ 1.x UI,
>  >
>  > Sounds good. I'll give it a stab.
>
> Awesome, definitely keep us posted on your progress!
>
>  > I think I will be interested in features development more than the
>  > core, but that may change as I get more familiar with the core.
>
> That is understandable, and certainly very reasonable given ImageJ's
> extensible plugin mechanism. The core is "good enough" for a great
> variety of things. I think it takes a certain architectural obsession to
> want to work on ImageJ2 itself, which is one reason there are so few
> external contributors.
>
> Then, the best way for you to improve ImageJ, and give back to the
> ImageJ community, will be to create your own personal update site and
> start adding useful plugins to it, which work in the ImageJ 1.x UI. That
> said, you could still be an early adopter of the parameterized ImageJ2
> command mechanism and other ImageJ2-only features, which would be really
> nice for a number of reasons.
>
> Regards,
> Curtis
>
>
> On Tue, May 13, 2014 at 2:41 AM, Pawel Niewiadomski
> <pawelthebiologist at gmail.com <mailto:pawelthebiologist at gmail.com>> wrote:
>
>     Hi Curtis,
>
>     Thanks for your comprehensive reply.
>
>
>         Hi Pawel,
>
>           > I decided to start work on the project by playing around
>         with the
>           > ImageJ2 interface in some routine tasks I usually do in
>         ImageJ. After
>           > having done some extensive testing, I just wanted to give
>         you some,
>           > hopefully constructive, input. I don't want to sound too
>         negative, but
>           > I really think that June 1st is a bit early to be releasing a
>           > production version of ImageJ2.
>
>         With respect to the ImageJ2 Swing user interface and commands,
>         you are
>         absolutely right. However, the initial 2.0.0 release of ImageJ2
>         is going
>         to continue using the classic ImageJ 1.x user interface by
>         default. The
>         new UI will still be included (Help > Switch to Modern Mode) but
>         will
>         still be very much in beta.
>
>
>     I was actually under the impression that ImageJ2 IS the modern
>     interface and that it would be the default for the 2.0.0 release. I
>     must have not found the relevant blog/discussion posts. My bad.
>
>
>         See this blog post for details:
>         http://developer.imagej.net/__2014/04/01/imagej-200-stable-__release-coming-spring
>         <http://developer.imagej.net/2014/04/01/imagej-200-stable-release-coming-spring>
>
>         ImageJ 2.0.0 will be fundamentally the same as ImageJ1, but:
>
>         * Will be bundled with the Updater component which supports ImageJ
>         update sites and automatic update checking.
>
>
>     OK
>
>
>         * Will be bundled with the native ImageJ Launcher with quite a
>         few nice
>         command line features.
>
>
>     The imagej-win32.exe doesn't work in the build from about a week ago
>     on my machine (Just the basic command that launches the GUI). I'll
>     submit a bug report.
>
>
>
>         * Will be bundled with the ImageJ Script Editor including
>         support for
>         several scripting languages.
>
>
>     I am guessing it's the same as the FiJi script editor? In that case
>     the legacy UI should have a menu option File->New->Script, like FiJi
>     does. In addition, the plugins->new->plugin throws some sort of
>     exception on first use, again I'll submit a bug report.
>
>
>         * Will support parameterized ImageJ modules, including commands and
>         scripts, so that existing plugins can begin incremental
>         migration toward
>         this new approach, which is more headless friendly and more
>         interoperable with tools such as CellProfiler, KNIME and OMERO.
>
>
>     Sounds good - I need to look into it more closely.
>
>
>         * Will come with an option to use the SCIFIO library when
>         opening image
>         files (e.g., using File > Open). This will fix ImageJ's TIFF
>         support to
>         be more robust, and add extensible support for additional file
>         formats
>         without needing to hack the HandleExtraFileTypes source.
>
>
>     OK.
>
>
>         * Will ship with all the new ImageJ2 APIs, but all these
>         components will
>         still be in beta. We will bring each component out of beta after
>         it has
>         been thoroughly vetted over time. These components include:
>             - imagej-common: The ImgLib2-based image data model and core
>             - imagej-ops: A framework for reusable algorithms; see
>         http://developer.imagej.net/__2014/04/04/announcing-imagej-__ops
>         <http://developer.imagej.net/2014/04/04/announcing-imagej-ops>
>             - imagej-ui-swing: The "pure ImageJ2" Swing user interface
>             - imagej-plugins-*, scijava-plugins-*: Core plugins for ImageJ2
>         including many commands
>
>
>     OK
>
>
>         Note that the Fiji distribution of ImageJ has been shipping of
>         all of
>         these components, and operating in this way, for years now, and is a
>         well vetted system. But it is time for these components to be
>         officially
>         available as part of ImageJ's core, rather than only from a specific
>         life-sciences-focused ImageJ distribution.
>
>
>     Sounds good. I've been using FiJi for quite some time now, so I
>     didn't see the "newness" of the features.
>
>
>
>           > Please don't take it the wrong way - I am in the process of
>         analysing
>           > the codebase and I think it is a real software engineering feat.
>
>         No offense taken at all; again, it is absolutely true that the
>         ImageJ2
>         UI needs more time in the oven. But meanwhile, it has already
>         been over
>         four years since we launched the ImageJ2 project, and there are
>         several
>         very mature components that need to get into the hands of users: the
>         Updater, the Launcher, the Script Editor, parameterized modules, and
>         everything else that is now part of the "SciJava Common" component
>         (https://github.com/scijava/__scijava-common
>         <https://github.com/scijava/scijava-common>).
>
>         Because ImageJ2 consists of several pieces at various stages of
>         development, it needs to migrate out of beta piece by piece.
>
>           > It shows that there has been really serious thought put into
>           > architerctural design. However, at this point, and I am
>         saying that as
>           > a daily ImageJ user, the architectural brilliance is not
>         showing on
>           > the surface.
>
>         I am glad you like the design. And I agree that much more needs
>         to be
>         done in terms of leveraging that design for the benefit of end
>         users.
>         This is an area where your contributions could be really beneficial.
>
>           > I am going to submit some bug reports in a few days, but
>         basically the
>           > interface is highly unpredictable and in many ways
>         incompatible with
>           > ImageJ1.
>
>         Indeed. Please note that there are many bugs about such problems
>         already
>         logged in the ImageJ Trac: http://trac.imagej.net/. We are
>         actively in
>         the process of migrating away from the Trac system though, with
>         individual tickets being moved to GitHub Issues of the most relevant
>         repository. Unfortunately, since we are in the middle of that
>         migration,
>         it may be difficult to verify whether an issue has already been
>         filed
>         for any particular concern. When in doubt, file away and we can
>         close
>         any duplicate issues accordingly.
>
>           > Let me just point to a few basic things before I submit
>         detailed bug
>           > reports:
>           >
>           > 1. The brightness/contrast dialog sometimes sticks around
>         when you
>           > open a new image and close the old one - you end up with
>         multiple
>           > brightness/contrast dialogs and a single image. Moreover,
>         I've had the
>           > dialog stay open even after I closed the application.
>
>         The IJ2 version of B&C has been the subject of frequent debate. In
>         short, it needs a lot more work. See
>         http://trac.imagej.net/ticket/__1100
>         <http://trac.imagej.net/ticket/1100>
>         and all its blocking tickets (those listed in "Blocked by").
>
>
>     OK
>
>
>           > 2. The color picker behavior is hectic and I couldn't figure
>         out how
>           > and why it randomly changes color. Especially in 16-bit per
>         channel
>           > images it is totally unpredictable.
>           >
>           > 3. With 48-bit 16-bit per channel composite images the
>         drawing command
>           > with the white color selected basically draws random grey
>         colors.
>
>         IJ2's current approach to foreground and background "colors" differs
>         from IJ1. And there are likely bugs, too.
>         * http://trac.imagej.net/ticket/__965
>         <http://trac.imagej.net/ticket/965>
>         * http://trac.imagej.net/ticket/__1292
>         <http://trac.imagej.net/ticket/1292>
>
>
>     OK
>
>
>           > 4. The interface is extremely slow to the point of being
>         unusable for
>           > things like looking through time-course stacks or stacks of
>           > medium-sized multicolor images.
>
>         That is not a problem we have noticed, unless image planes
>         become very
>         large. How large are your image planes? >2Kx2K?
>
>
>     These are not large images (1kx1k/48-bit/10 z-planes), but mind you,
>     I am not using the latest hardware. However, I think many of ImageJ
>     users will not be on modern hardware, and my computer can run
>     Photoshop CS4 with ease, which is an indication that it is not a
>     piece of junk, either.
>
>
>           > 5. Shape selection keeps old selections after you make a new
>         one,
>           > which is inconsistent with ImageJ1 behavior and quite
>         maddening for
>           > someone who is used to it.
>
>         Yes. We will probably need an option for it, because for many
>         new users,
>         it is maddening to have one ROI disappear when creating another.
>         But the
>         main reason IJ2's UI works that way right now is technical: it
>         currently
>         uses the JHotDraw library which works that way by default.
>
>
>     OK
>
>
>           > 6. Missing magic wand and text tool functionality.
>
>         https://github.com/imagej/__imagej-plugins-tools/issues/8
>         <https://github.com/imagej/imagej-plugins-tools/issues/8>
>         https://github.com/imagej/__imagej-plugins-tools/issues/9
>         <https://github.com/imagej/imagej-plugins-tools/issues/9>
>
>
>     OK
>
>
>           > 7. Missing custom toolbars.
>
>         Known, but no explicit issue for it yet. Low priority, given all the
>         other things the Swing UI needs first. Note that IJ2 is not
>         intrinsically limited to 8 tools like ImageJ1 is, so it is less
>         urgent
>         to support customization. All available tools will be present in
>         the bar
>         by default.
>
>
>     OK. It would be nice if the toolbar were easily customizable by the user
>     the way the old style custom toolbars were. Also, having custom
>     floating/docking toolbars would be nice. I am thinking
>     photoshop/illustrator here, or at least Office <2003. I don't think
>     you necessarily need to implement an RCP-style interface to have those.
>
>
>           > 8. In multicolor images there seems to be no way of adjusting
>           > brightness/contrast of each channel individually.
>
>         Hmm, you're right. This might be a relatively new bug.
>
>
>     That's an absolutely essential feature for any microscopy work. I'll
>     submit the bug report.
>
>
>           > 9. LIF format import doesn't work - it doesn't present the usual
>           > BioFormats dialog and instead just imports the first image
>         in the
>           > series with some random channel separation.
>
>         LIF format does not work with vanilla ImageJ1 either. It is
>         handled by
>         the Bio-Formats plugin. We do not ship Bio-Formats with ImageJ2
>         because:
>         A) ImageJ2 is BSD-2 licensed, and the Bio-Formats proprietary file
>         format readers have an incompatible GPL license; and B) ImageJ2 is
>         supposed to be a "discipline-agnostic" piece of software, while
>         Bio-Formats is focused on life sciences file formats.
>
>
>     OK. Understood.
>
>
>         However, LIF should work if you download Fiji, choose Help >
>         Switch to
>         Modern Mode, and then File > Open your LIF file. This is thanks
>         to the
>         SCIFIO Bio-Formats compatibility component
>         (https://github.com/scifio/__scifio-bf-compat
>         <https://github.com/scifio/scifio-bf-compat>) which is bundled
>         with Fiji.
>
>
>     It does work, but not with File->Open. It doesn't present the right
>     dialog for file import. You can go to File->Import->Bio-Formats.
>     When you go to file-open (even in modern mode in FiJi), it just
>     imports the first image of the bundle with each channel on a
>     separate plane instead of creating a composite. It doesn't offer you
>     the choices the way Bio-Formats does.
>
>
>         Alternately, you can install Bio-Formats by turning on the Fiji
>         and/or
>         Bio-Formats update sites shown in ImageJ2's Help > Update
>         "Manage Update
>         Sites" dialog.
>
>           > This is just a sample, but there is a bunch more. My
>         prediction is
>           > that the users will not migrate to the new version if you
>         ship it as
>           > is. They frankly need a reason to migrate and ImageJ2 is not
>         offering
>           > them any.
>
>         Agreed; "regular users" should not be switching to the new interface
>         yet. There are too many bugs and not enough advantages.
>
>         That is why decided to keep the ImageJ2 releases using the 1.x
>         interface, for the time being. This keeps 100% backwards
>         compatibility
>         while also providing many advantages:
>             * the ImageJ Updater
>             * the Script Editor
>             * user-facing improvements made possible by our ImageJ 1.x
>         patching
>         mechanism, such as File > Open using the SCIFIO library to read
>         TIFFs
>         and other formats more robustly
>             * new developer-facing APIs (esp.,parameterized modules)
>
>
>     Sounds good.
>
>
>
>         There are downsides though:
>             * IJ1 UI is limited to XYZCT (though we may later patch in
>         support
>         for additional dimensions)
>             * IJ1 UI cannot handle tiled huge image planes (a feature
>         planned for
>         the IJ2 UI)
>             * Lack of separation of concerns; IJ1 UI is fundamentally
>         tied to the
>         IJ1 data model
>
>
>     I think that and the fact that FiJi already has many of these
>     features is why I was convinced that ImageJ2 is the modern
>     interface. The data model limitation is a serious one, because
>     people cannot just migrate their plugins in one fell swoop. Rather,
>     they have to first play with the new APIs, then start working on the
>     data model conversion, etc.
>
>
>             * Further reading: http://dev.imagej.net/__rationale
>         <http://dev.imagej.net/rationale>,
>         http://dev.imagej.net/proposal
>
>           > Right now ImageJ1 is a mature platform with few bugs and a
>         plethora of
>           > mostly seamlessly working plugins.
>
>         In many ways. But due to ImageJ1's protracted incremental
>         development,
>         its API how grown organically far beyond its original design
>         goals, so
>         it now contains a plethora of limitations and edge cases.
>
>           > The biggest gripe most users have with ImageJ1 is its
>         antiquated UI
>
>         With that insight in mind, we recently decided to allow the ImageJ2
>         Swing UI to begin diverging much more from the ImageJ 1.x design. It
>         will be nice to take more liberties and create something that
>         behaves in
>         way more standardized with other modern applications. See Icy for
>         inspiration (http://icy.bioimageanalysis.__org/
>         <http://icy.bioimageanalysis.org/>).
>
>
>     I agree
>
>
>
>           > and I would wait with the release of the final version until
>         you (we?)
>           > (1) have ironed out all the bugs and inconsistencies,
>
>           From experience, that goal will never occur. The ImageJ2 design
>         fundamentally cannot be 100% consistent with ImageJ 1.x. Not
>         even ImageJ
>         1.x is 100% consistent with previous versions of ImageJ 1.x. And no
>         software of this magnitude is bug-free, either.
>
>
>     Yes. I may have overstated that goal. It would be a more realistic
>     goal to have it bug-free enough that it is not super-annoying to the
>     casual user.
>
>
>           > (2) have good end-user documentation so they know how to do
>         things the
>           > new way,
>
>         Indeed, we had a whole milestone dedicated to documentation in our
>         original release plan:
>         http://trac.imagej.net/__milestone/imagej2-b11-docs
>         <http://trac.imagej.net/milestone/imagej2-b11-docs>
>
>
>     OK.
>
>
>           > and (3) have provided users with at least one "killer"
>         feature that
>           > they have longed for.
>
>         Many such "killer" feature ideas were discussed on the ImageJX
>         list when
>         ImageJ2 was first launched:
>         *
>         https://groups.google.com/d/__msg/imagejx/gz7cgytSRuA/__emlJLp8o7XYJ
>         <https://groups.google.com/d/msg/imagejx/gz7cgytSRuA/emlJLp8o7XYJ>
>         *
>         https://groups.google.com/d/__msg/imagejx/_yaczl4UWK4/___w6dCnGcJ1QJ
>         <https://groups.google.com/d/msg/imagejx/_yaczl4UWK4/_w6dCnGcJ1QJ>
>         *
>         https://groups.google.com/d/__msg/imagejx/lD4s32M5als/__HZiEA02LhXsJ
>         <https://groups.google.com/d/msg/imagejx/lD4s32M5als/HZiEA02LhXsJ>
>         *
>         https://groups.google.com/d/__msg/imagejx/ox2ooizORA4/__scMd4P0cRZAJ
>         <https://groups.google.com/d/msg/imagejx/ox2ooizORA4/scMd4P0cRZAJ>
>         *
>         https://groups.google.com/d/__msg/imagejx/F3gWc_Ndz_U/__UTKiut-HuQMJ
>         <https://groups.google.com/d/msg/imagejx/F3gWc_Ndz_U/UTKiut-HuQMJ>
>         *
>         https://groups.google.com/d/__msg/imagejx/79rryiWqFno/Ne--__gMjkSX8J
>         <https://groups.google.com/d/msg/imagejx/79rryiWqFno/Ne--gMjkSX8J>
>         *
>         https://groups.google.com/d/__msg/imagejx/pL6ipxHkAk8/__26u5MF41YGsJ
>         <https://groups.google.com/d/msg/imagejx/pL6ipxHkAk8/26u5MF41YGsJ>
>
>         There are many others in the issue tracker:
>         * Coherent I/O (complete): http://trac.imagej.net/ticket/__9
>         <http://trac.imagej.net/ticket/9>
>         * Separation of concerns (complete):
>         http://trac.imagej.net/ticket/__10
>         <http://trac.imagej.net/ticket/10>
>         * Better plugin framework (complete):
>         http://trac.imagej.net/ticket/__11
>         <http://trac.imagej.net/ticket/11>
>         * Better scripting (complete):
>         http://trac.imagej.net/ticket/__12
>         <http://trac.imagej.net/ticket/12>
>         * Better event handling (complete):
>         http://trac.imagej.net/ticket/__14
>         <http://trac.imagej.net/ticket/14>
>         * N-dimensional images (complete):
>         http://trac.imagej.net/ticket/__17
>         <http://trac.imagej.net/ticket/17>
>         * Very large image data (complete):
>         http://trac.imagej.net/ticket/__20
>         <http://trac.imagej.net/ticket/20>
>         * CellProfiler interoperability (complete):
>         http://trac.imagej.net/ticket/__1002
>         <http://trac.imagej.net/ticket/1002>
>         * KNIME interoperability (complete):
>         http://trac.imagej.net/ticket/__1004
>         <http://trac.imagej.net/ticket/1004>
>         * OMERO interoperability: http://trac.imagej.net/ticket/__1003
>         <http://trac.imagej.net/ticket/1003>
>         * Very large image planes: http://trac.imagej.net/ticket/__19
>         <http://trac.imagej.net/ticket/19>
>         * Better undo/redo: http://trac.imagej.net/ticket/__13
>         <http://trac.imagej.net/ticket/13>
>
>
>     Absolutely a killer feature, but I am guessing difficult to
>     implement in a plugin-based framework.
>
>
>         * Coordinate systems: http://trac.imagej.net/ticket/__40
>         <http://trac.imagej.net/ticket/40>
>         * Metadata: http://trac.imagej.net/ticket/__8
>         <http://trac.imagej.net/ticket/8>
>
>         I know a lot of those are in some sense architectural, but many
>         of them
>         have huge impact for users, too. Happy to elaborate on any specific
>         aspects of these.
>
>           > I think there is one thing that can be done in terms of
>         point (3) that
>           > will make many users happy is a "pin" button in each image
>           > window/dialog. If the "pin" is activated then the
>         window/dialog will
>           > be brought to the foreground every time the user brings any
>         other
>           > "pinned" window or the main imagej bar to the foreground.
>         This solves
>           > the perrenial usability problem of ImageJ1 where if you have
>         multiple
>           > images open, you have to hunt for the right image, then hunt
>         for the
>           > brightness/contrast dialog, then hunt for the channels
>         dialog in the
>           > taskbar/dock.
>
>         Note that there are shortcuts for many of ImageJ's windows,
>         which reduce
>         the need to hunt through the taskbar. E.g.: Shift+C for the B&C
>         window,
>         Shift+Z for channels, Enter for the main ImageJ window.
>
>
>     Yes, I've been using those shortcuts, but it is still annoying to
>     have to find the image, and then press shift-Z and shift-C every
>     time you switch back and forth between applications. Most
>     annoyingly, the ImageJ toolbar disappears (is there a shortcut to
>     bring it to foreground???) unless you set it always on top, which in
>     turn makes it get in the way of other applications. What many users
>     do is switch back and forth between ImageJ and other apps that allow
>     them to put figures together
>     (Illustrator/Photoshop/__PowerPoint/Word) or analyze the data
>     (Excel/R/Statistica). Right now I spend half my time fishing for the
>     right image/dialog/button.
>
>
>
>           > I don't think this should be a difficult feature to
>         implement and I
>           > can try to do that, but I will need time to plow through the
>         codebase
>           > and take it all in.
>
>         This feature could also be implemented for the ImageJ 1.x UI, which
>         would get it into the hands of users more immediately. And you could
>         easily distribute it via an ImageJ update site; see
>         http://wiki.imagej.net/Update___Sites
>         <http://wiki.imagej.net/Update_Sites>.
>
>
>     Sounds good. I'll give it a stab.
>
>
>
>           > I hope that my comments will help with the development. I am
>         hoping to
>           > contribute to the actual work soon.
>
>         Development of the core ImageJ system is a substantially different
>         endeavor from feature ideas like better window management, analysis
>         plugins, etc. The question is: which sort of project are you more
>         interested in working on?
>
>
>     I think I will be interested in features development more than the
>     core, but that may change as I get more familiar with the core.
>
>
>
>           > Please let me know your thoughts. Also, I thought that I
>         might want to
>           > send these comments to you personally rather than to the
>         ImageJ-devel
>           > list, since I don't want to step on anyones toes. I imagine
>         there is
>           > more to your decision to ship on June 1st than just software
>           > excellence - things like funding, publications, etc. Please
>         feel free
>           > to forward my letter to the imagej-devel list if you think
>         this will
>           > be constructive.
>
>         Thanks. As I said before, the imagej-devel list is the best place to
>         discuss these matters. ImageJ is an open source project, and as
>         such is
>         best discussed in public to keep the community informed of the
>         current
>         development directions, invite feedback and constructive
>         criticism from
>         interested parties, etc.
>
>
>     Got it.
>
>
>         Regards,
>         Curtis
>
>
>     Regards,
>
>     Pawel
>
>     --
>     Pawe? Niewiadomski
>     e-mail: pawelthebiologist at gmail.com <mailto:pawelthebiologist at gmail.com>
>     website: www.pawelthebiologist.com <http://www.pawelthebiologist.com>
>
>

-- 
Pawe? Niewiadomski
e-mail: pawelthebiologist at gmail.com
website: www.pawelthebiologist.com


From bnorthan at gmail.com  Tue May 13 16:24:55 2014
From: bnorthan at gmail.com (Brian Northan)
Date: Tue, 13 May 2014 17:24:55 -0400
Subject: [ImageJ-devel] ImageJ2 development
In-Reply-To: <5371CCB3.1050301@gmail.com>
References: <536134A3.2010605@gmail.com>
	<CADN69yn1L2QQtFB=v8jdQQ6AG3nWapec3HCrpAJJxxwmBL9CrQ@mail.gmail.com>
	<536947A2.7090808@gmail.com>
	<CADN69y=omDP3Ay=HWU6RW7sDYiMdrr=stgsOAFMBV2gjC=jTyw@mail.gmail.com>
	<537135BF.90509@gmail.com>
	<CADN69y=PZaCmj6siFrd1JOFC=nooqA5iK00Kj6qaujcnNE0FHQ@mail.gmail.com>
	<5371CCB3.1050301@gmail.com>
Message-ID: <CAMWa8i1i0h0NBdNge4TGXHRY9WQY+L6n5hwOi0qi4aGCWZEWHQ@mail.gmail.com>

Hi List

After seeing Pawel's e-mails, I also wanted to introduce myself and perhaps
become more involved with ImageJ2.

Like Pawel I've been exploring the ImageJ2 ecosystem recently (well for
over a year actually).  I'm coming at it from a developer's point of view.
I used to work in the commercial realm until 2011 (Media Cybernetics,
mostly on Autoquant).  After leaving that I did some unrelated things for a
couple of years.  I did have a non-compete agreement, but that is long
expired so I am thinking about getting back into microscopy.

I'm interested mainly in high performance applications.  A good example of
the type of project I'm interested in is GPU Deconvolution.  I've seen buzz
about a few GPU deconvolution apps recently (I've been able to explore
Stephan Preibisch's and Bob Pepin's work on Github).

When evaluating a GPU implementation, one would want to understand
state-of-the-art CPU implementations.  But how does one even determine what
is state-of-the-art??  How do you get the algorithms and test them in a
consistent fashion?  (I recently attended the ISBI Deconvolution Grand
Challenge addressing some aspects of this issue).   Further, it may not be
possible to produce the same results as CPU on a GPU implementation (memory
limitations, limited math libraries, etc.).  It becomes necessary to run
many tests and comparisons.  So to evaluate the benefits and trade-offs of
GPU deconvolution (or newish algorithms like wavelet approaches) it really
becomes important to have access to the older implementations.

For any new algorithm development, 90% of the problem (in my experience) is
understanding and evaluating what has been done before.  With open source
the great thing is that understanding the past is no longer just a
literature search;  it also involves getting the algorithms and running
them.

So I see "uber-wrapper" projects (a means to run and test multiple existing
implementations under the same framework) being very useful, and I've been
developing one for deconvolution with ImageJ2 (
https://github.com/bnorthan/projects).  Right now it wraps YacuDecu GPU
deconvolution [1], PSF generation in COSMOS [2] and an algorithm from ITK
deconvolution.  I've also ported a Total Variation implementation from
IOCBIOS [3] and non periodic boundary handling from EPFL [4] to imglib2
based implementations (similar design to imglib2 FFTConvolution [5]).
These few algorithms barely scratch the surface of what is out there.

As I've gotten multiple algorithms and components wrapped or ported as
ImageJ2 commands (or more recently a few ops) it has become simple to run
test scripts and to combine components in interesting and useful ways.

I'm not entirely sure how far I will be able to develop this.  Since I am
using some native components, it could become difficult to maintain and
distribute for multiple operating systems.  But at the very least I hope to
polish it and get it on a personal update site.  (Maybe isolating the java
only components, possibly snagging the PSF code from Icy[6]).

The Github link will be out of date soon as I need to clean and refactor
things a bit.  As I do this there may be an opportunity to contribute to
the Imagej-ops project or Imglib2.  One thing I need to do is take
inventory of all the little math functions I've written.  Where I've
re-invented the wheel I need to re-use the proper imagej-ops or imglib2
function instead.   If some math functions I have written are not in
imagej-ops/imgib I could take a look at implementing them.

Regards,

Brian

[1] https://github.com/bobpepin/YacuDecu
[2] http://cirl.memphis.edu/cosmos.php
[3] http://code.google.com/p/iocbio/wiki/IOCBioMicroscope
[4]
http://bigwww.epfl.ch/deconvolution/challenge/index.html?p=documentation/theory/richardsonlucy
[5]
https://github.com/imglib/imglib/blob/master/algorithms/gpl/src/main/java/net/imglib2/algorithm/fft2/FFTConvolution.java
[6]
http://icy.bioimageanalysis.org/plugin/Widefield_Fluorescence_Microscope_PSF




On Tue, May 13, 2014 at 3:41 AM, Pawel Niewiadomski <
pawelthebiologist at gmail.com> wrote:

> Hi Curtis,
>
> Thanks for your comprehensive reply.
>
>
>  Hi Pawel,
>>
>>  > I decided to start work on the project by playing around with the
>>  > ImageJ2 interface in some routine tasks I usually do in ImageJ. After
>>  > having done some extensive testing, I just wanted to give you some,
>>  > hopefully constructive, input. I don't want to sound too negative, but
>>  > I really think that June 1st is a bit early to be releasing a
>>  > production version of ImageJ2.
>>
>> With respect to the ImageJ2 Swing user interface and commands, you are
>> absolutely right. However, the initial 2.0.0 release of ImageJ2 is going
>> to continue using the classic ImageJ 1.x user interface by default. The
>> new UI will still be included (Help > Switch to Modern Mode) but will
>> still be very much in beta.
>>
>>
> I was actually under the impression that ImageJ2 IS the modern interface
> and that it would be the default for the 2.0.0 release. I must have not
> found the relevant blog/discussion posts. My bad.
>
>
>  See this blog post for details:
>> http://developer.imagej.net/2014/04/01/imagej-200-stable-
>> release-coming-spring
>>
>> ImageJ 2.0.0 will be fundamentally the same as ImageJ1, but:
>>
>> * Will be bundled with the Updater component which supports ImageJ
>> update sites and automatic update checking.
>>
>>
> OK
>
>
>  * Will be bundled with the native ImageJ Launcher with quite a few nice
>> command line features.
>>
>
> The imagej-win32.exe doesn't work in the build from about a week ago on my
> machine (Just the basic command that launches the GUI). I'll submit a bug
> report.
>
>
>
>> * Will be bundled with the ImageJ Script Editor including support for
>> several scripting languages.
>>
>>
> I am guessing it's the same as the FiJi script editor? In that case the
> legacy UI should have a menu option File->New->Script, like FiJi does. In
> addition, the plugins->new->plugin throws some sort of exception on first
> use, again I'll submit a bug report.
>
>
>  * Will support parameterized ImageJ modules, including commands and
>> scripts, so that existing plugins can begin incremental migration toward
>> this new approach, which is more headless friendly and more
>> interoperable with tools such as CellProfiler, KNIME and OMERO.
>>
>>
> Sounds good - I need to look into it more closely.
>
>
>  * Will come with an option to use the SCIFIO library when opening image
>> files (e.g., using File > Open). This will fix ImageJ's TIFF support to
>> be more robust, and add extensible support for additional file formats
>> without needing to hack the HandleExtraFileTypes source.
>>
>>
> OK.
>
>
>  * Will ship with all the new ImageJ2 APIs, but all these components will
>> still be in beta. We will bring each component out of beta after it has
>> been thoroughly vetted over time. These components include:
>>    - imagej-common: The ImgLib2-based image data model and core
>>    - imagej-ops: A framework for reusable algorithms; see
>> http://developer.imagej.net/2014/04/04/announcing-imagej-ops
>>    - imagej-ui-swing: The "pure ImageJ2" Swing user interface
>>    - imagej-plugins-*, scijava-plugins-*: Core plugins for ImageJ2
>> including many commands
>>
>>
> OK
>
>
>  Note that the Fiji distribution of ImageJ has been shipping of all of
>> these components, and operating in this way, for years now, and is a
>> well vetted system. But it is time for these components to be officially
>> available as part of ImageJ's core, rather than only from a specific
>> life-sciences-focused ImageJ distribution.
>>
>
> Sounds good. I've been using FiJi for quite some time now, so I didn't see
> the "newness" of the features.
>
>
>
>>  > Please don't take it the wrong way - I am in the process of analysing
>>  > the codebase and I think it is a real software engineering feat.
>>
>> No offense taken at all; again, it is absolutely true that the ImageJ2
>> UI needs more time in the oven. But meanwhile, it has already been over
>> four years since we launched the ImageJ2 project, and there are several
>> very mature components that need to get into the hands of users: the
>> Updater, the Launcher, the Script Editor, parameterized modules, and
>> everything else that is now part of the "SciJava Common" component
>> (https://github.com/scijava/scijava-common).
>>
>> Because ImageJ2 consists of several pieces at various stages of
>> development, it needs to migrate out of beta piece by piece.
>>
>>  > It shows that there has been really serious thought put into
>>  > architerctural design. However, at this point, and I am saying that as
>>  > a daily ImageJ user, the architectural brilliance is not showing on
>>  > the surface.
>>
>> I am glad you like the design. And I agree that much more needs to be
>> done in terms of leveraging that design for the benefit of end users.
>> This is an area where your contributions could be really beneficial.
>>
>>  > I am going to submit some bug reports in a few days, but basically the
>>  > interface is highly unpredictable and in many ways incompatible with
>>  > ImageJ1.
>>
>> Indeed. Please note that there are many bugs about such problems already
>> logged in the ImageJ Trac: http://trac.imagej.net/. We are actively in
>> the process of migrating away from the Trac system though, with
>> individual tickets being moved to GitHub Issues of the most relevant
>> repository. Unfortunately, since we are in the middle of that migration,
>> it may be difficult to verify whether an issue has already been filed
>> for any particular concern. When in doubt, file away and we can close
>> any duplicate issues accordingly.
>>
>>  > Let me just point to a few basic things before I submit detailed bug
>>  > reports:
>>  >
>>  > 1. The brightness/contrast dialog sometimes sticks around when you
>>  > open a new image and close the old one - you end up with multiple
>>  > brightness/contrast dialogs and a single image. Moreover, I've had the
>>  > dialog stay open even after I closed the application.
>>
>> The IJ2 version of B&C has been the subject of frequent debate. In
>> short, it needs a lot more work. See http://trac.imagej.net/ticket/1100
>> and all its blocking tickets (those listed in "Blocked by").
>>
>>
> OK
>
>
>   > 2. The color picker behavior is hectic and I couldn't figure out how
>>  > and why it randomly changes color. Especially in 16-bit per channel
>>  > images it is totally unpredictable.
>>  >
>>  > 3. With 48-bit 16-bit per channel composite images the drawing command
>>  > with the white color selected basically draws random grey colors.
>>
>> IJ2's current approach to foreground and background "colors" differs
>> from IJ1. And there are likely bugs, too.
>> * http://trac.imagej.net/ticket/965
>> * http://trac.imagej.net/ticket/1292
>>
>>
> OK
>
>
>   > 4. The interface is extremely slow to the point of being unusable for
>>  > things like looking through time-course stacks or stacks of
>>  > medium-sized multicolor images.
>>
>> That is not a problem we have noticed, unless image planes become very
>> large. How large are your image planes? >2Kx2K?
>>
>>
> These are not large images (1kx1k/48-bit/10 z-planes), but mind you, I am
> not using the latest hardware. However, I think many of ImageJ users will
> not be on modern hardware, and my computer can run Photoshop CS4 with ease,
> which is an indication that it is not a piece of junk, either.
>
>
>   > 5. Shape selection keeps old selections after you make a new one,
>>  > which is inconsistent with ImageJ1 behavior and quite maddening for
>>  > someone who is used to it.
>>
>> Yes. We will probably need an option for it, because for many new users,
>> it is maddening to have one ROI disappear when creating another. But the
>> main reason IJ2's UI works that way right now is technical: it currently
>> uses the JHotDraw library which works that way by default.
>>
>>
> OK
>
>
>   > 6. Missing magic wand and text tool functionality.
>>
>> https://github.com/imagej/imagej-plugins-tools/issues/8
>> https://github.com/imagej/imagej-plugins-tools/issues/9
>>
>>
> OK
>
>
>   > 7. Missing custom toolbars.
>>
>> Known, but no explicit issue for it yet. Low priority, given all the
>> other things the Swing UI needs first. Note that IJ2 is not
>> intrinsically limited to 8 tools like ImageJ1 is, so it is less urgent
>> to support customization. All available tools will be present in the bar
>> by default.
>>
>>
> OK. It would be nice if the toolbar were easily customizable by the user
> the way the old style custom toolbars were. Also, having custom
> floating/docking toolbars would be nice. I am thinking
> photoshop/illustrator here, or at least Office <2003. I don't think you
> necessarily need to implement an RCP-style interface to have those.
>
>
>   > 8. In multicolor images there seems to be no way of adjusting
>>  > brightness/contrast of each channel individually.
>>
>> Hmm, you're right. This might be a relatively new bug.
>>
>>
> That's an absolutely essential feature for any microscopy work. I'll
> submit the bug report.
>
>
>   > 9. LIF format import doesn't work - it doesn't present the usual
>>  > BioFormats dialog and instead just imports the first image in the
>>  > series with some random channel separation.
>>
>> LIF format does not work with vanilla ImageJ1 either. It is handled by
>> the Bio-Formats plugin. We do not ship Bio-Formats with ImageJ2 because:
>> A) ImageJ2 is BSD-2 licensed, and the Bio-Formats proprietary file
>> format readers have an incompatible GPL license; and B) ImageJ2 is
>> supposed to be a "discipline-agnostic" piece of software, while
>> Bio-Formats is focused on life sciences file formats.
>>
>>
> OK. Understood.
>
>
>  However, LIF should work if you download Fiji, choose Help > Switch to
>> Modern Mode, and then File > Open your LIF file. This is thanks to the
>> SCIFIO Bio-Formats compatibility component
>> (https://github.com/scifio/scifio-bf-compat) which is bundled with Fiji.
>>
>>
> It does work, but not with File->Open. It doesn't present the right dialog
> for file import. You can go to File->Import->Bio-Formats. When you go to
> file-open (even in modern mode in FiJi), it just imports the first image of
> the bundle with each channel on a separate plane instead of creating a
> composite. It doesn't offer you the choices the way Bio-Formats does.
>
>
>  Alternately, you can install Bio-Formats by turning on the Fiji and/or
>> Bio-Formats update sites shown in ImageJ2's Help > Update "Manage Update
>> Sites" dialog.
>>
>>  > This is just a sample, but there is a bunch more. My prediction is
>>  > that the users will not migrate to the new version if you ship it as
>>  > is. They frankly need a reason to migrate and ImageJ2 is not offering
>>  > them any.
>>
>> Agreed; "regular users" should not be switching to the new interface
>> yet. There are too many bugs and not enough advantages.
>>
>> That is why decided to keep the ImageJ2 releases using the 1.x
>> interface, for the time being. This keeps 100% backwards compatibility
>> while also providing many advantages:
>>    * the ImageJ Updater
>>    * the Script Editor
>>    * user-facing improvements made possible by our ImageJ 1.x patching
>> mechanism, such as File > Open using the SCIFIO library to read TIFFs
>> and other formats more robustly
>>    * new developer-facing APIs (esp.,parameterized modules)
>>
>
> Sounds good.
>
>
>
>> There are downsides though:
>>    * IJ1 UI is limited to XYZCT (though we may later patch in support
>> for additional dimensions)
>>    * IJ1 UI cannot handle tiled huge image planes (a feature planned for
>> the IJ2 UI)
>>    * Lack of separation of concerns; IJ1 UI is fundamentally tied to the
>> IJ1 data model
>>
>
> I think that and the fact that FiJi already has many of these features is
> why I was convinced that ImageJ2 is the modern interface. The data model
> limitation is a serious one, because people cannot just migrate their
> plugins in one fell swoop. Rather, they have to first play with the new
> APIs, then start working on the data model conversion, etc.
>
>
>     * Further reading: http://dev.imagej.net/rationale,
>> http://dev.imagej.net/proposal
>>
>>  > Right now ImageJ1 is a mature platform with few bugs and a plethora of
>>  > mostly seamlessly working plugins.
>>
>> In many ways. But due to ImageJ1's protracted incremental development,
>> its API how grown organically far beyond its original design goals, so
>> it now contains a plethora of limitations and edge cases.
>>
>>  > The biggest gripe most users have with ImageJ1 is its antiquated UI
>>
>> With that insight in mind, we recently decided to allow the ImageJ2
>> Swing UI to begin diverging much more from the ImageJ 1.x design. It
>> will be nice to take more liberties and create something that behaves in
>> way more standardized with other modern applications. See Icy for
>> inspiration (http://icy.bioimageanalysis.org/).
>>
>
> I agree
>
>
>
>>  > and I would wait with the release of the final version until you (we?)
>>  > (1) have ironed out all the bugs and inconsistencies,
>>
>>  From experience, that goal will never occur. The ImageJ2 design
>> fundamentally cannot be 100% consistent with ImageJ 1.x. Not even ImageJ
>> 1.x is 100% consistent with previous versions of ImageJ 1.x. And no
>> software of this magnitude is bug-free, either.
>>
>
> Yes. I may have overstated that goal. It would be a more realistic goal to
> have it bug-free enough that it is not super-annoying to the casual user.
>
>
>   > (2) have good end-user documentation so they know how to do things the
>>  > new way,
>>
>> Indeed, we had a whole milestone dedicated to documentation in our
>> original release plan:
>> http://trac.imagej.net/milestone/imagej2-b11-docs
>>
>>
> OK.
>
>
>   > and (3) have provided users with at least one "killer" feature that
>>  > they have longed for.
>>
>> Many such "killer" feature ideas were discussed on the ImageJX list when
>> ImageJ2 was first launched:
>> * https://groups.google.com/d/msg/imagejx/gz7cgytSRuA/emlJLp8o7XYJ
>> * https://groups.google.com/d/msg/imagejx/_yaczl4UWK4/_w6dCnGcJ1QJ
>> * https://groups.google.com/d/msg/imagejx/lD4s32M5als/HZiEA02LhXsJ
>> * https://groups.google.com/d/msg/imagejx/ox2ooizORA4/scMd4P0cRZAJ
>> * https://groups.google.com/d/msg/imagejx/F3gWc_Ndz_U/UTKiut-HuQMJ
>> * https://groups.google.com/d/msg/imagejx/79rryiWqFno/Ne--gMjkSX8J
>> * https://groups.google.com/d/msg/imagejx/pL6ipxHkAk8/26u5MF41YGsJ
>>
>> There are many others in the issue tracker:
>> * Coherent I/O (complete): http://trac.imagej.net/ticket/9
>> * Separation of concerns (complete): http://trac.imagej.net/ticket/10
>> * Better plugin framework (complete): http://trac.imagej.net/ticket/11
>> * Better scripting (complete): http://trac.imagej.net/ticket/12
>> * Better event handling (complete): http://trac.imagej.net/ticket/14
>> * N-dimensional images (complete): http://trac.imagej.net/ticket/17
>> * Very large image data (complete): http://trac.imagej.net/ticket/20
>> * CellProfiler interoperability (complete):
>> http://trac.imagej.net/ticket/1002
>> * KNIME interoperability (complete): http://trac.imagej.net/ticket/1004
>> * OMERO interoperability: http://trac.imagej.net/ticket/1003
>> * Very large image planes: http://trac.imagej.net/ticket/19
>> * Better undo/redo: http://trac.imagej.net/ticket/13
>>
>
> Absolutely a killer feature, but I am guessing difficult to implement in a
> plugin-based framework.
>
>
>  * Coordinate systems: http://trac.imagej.net/ticket/40
>> * Metadata: http://trac.imagej.net/ticket/8
>>
>> I know a lot of those are in some sense architectural, but many of them
>> have huge impact for users, too. Happy to elaborate on any specific
>> aspects of these.
>>
>>  > I think there is one thing that can be done in terms of point (3) that
>>  > will make many users happy is a "pin" button in each image
>>  > window/dialog. If the "pin" is activated then the window/dialog will
>>  > be brought to the foreground every time the user brings any other
>>  > "pinned" window or the main imagej bar to the foreground. This solves
>>  > the perrenial usability problem of ImageJ1 where if you have multiple
>>  > images open, you have to hunt for the right image, then hunt for the
>>  > brightness/contrast dialog, then hunt for the channels dialog in the
>>  > taskbar/dock.
>>
>> Note that there are shortcuts for many of ImageJ's windows, which reduce
>> the need to hunt through the taskbar. E.g.: Shift+C for the B&C window,
>> Shift+Z for channels, Enter for the main ImageJ window.
>>
>
> Yes, I've been using those shortcuts, but it is still annoying to have to
> find the image, and then press shift-Z and shift-C every time you switch
> back and forth between applications. Most annoyingly, the ImageJ toolbar
> disappears (is there a shortcut to bring it to foreground???) unless you
> set it always on top, which in turn makes it get in the way of other
> applications. What many users do is switch back and forth between ImageJ
> and other apps that allow them to put figures together
> (Illustrator/Photoshop/PowerPoint/Word) or analyze the data
> (Excel/R/Statistica). Right now I spend half my time fishing for the right
> image/dialog/button.
>
>
>
>>  > I don't think this should be a difficult feature to implement and I
>>  > can try to do that, but I will need time to plow through the codebase
>>  > and take it all in.
>>
>> This feature could also be implemented for the ImageJ 1.x UI, which
>> would get it into the hands of users more immediately. And you could
>> easily distribute it via an ImageJ update site; see
>> http://wiki.imagej.net/Update_Sites.
>>
>
> Sounds good. I'll give it a stab.
>
>
>
>>  > I hope that my comments will help with the development. I am hoping to
>>  > contribute to the actual work soon.
>>
>> Development of the core ImageJ system is a substantially different
>> endeavor from feature ideas like better window management, analysis
>> plugins, etc. The question is: which sort of project are you more
>> interested in working on?
>>
>
> I think I will be interested in features development more than the core,
> but that may change as I get more familiar with the core.
>
>
>
>>  > Please let me know your thoughts. Also, I thought that I might want to
>>  > send these comments to you personally rather than to the ImageJ-devel
>>  > list, since I don't want to step on anyones toes. I imagine there is
>>  > more to your decision to ship on June 1st than just software
>>  > excellence - things like funding, publications, etc. Please feel free
>>  > to forward my letter to the imagej-devel list if you think this will
>>  > be constructive.
>>
>> Thanks. As I said before, the imagej-devel list is the best place to
>> discuss these matters. ImageJ is an open source project, and as such is
>> best discussed in public to keep the community informed of the current
>> development directions, invite feedback and constructive criticism from
>> interested parties, etc.
>>
>
> Got it.
>
>
>> Regards,
>> Curtis
>>
>>
> Regards,
>
> Pawel
>
> --
> Pawe? Niewiadomski
> e-mail: pawelthebiologist at gmail.com
> website: www.pawelthebiologist.com
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140513/8d68bd9b/attachment-0001.html>

From ctrueden at wisc.edu  Mon May 19 11:43:26 2014
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Mon, 19 May 2014 11:43:26 -0500
Subject: [ImageJ-devel] ImageJ-OMERO status update
Message-ID: <CADN69yktbti6SKTCFAXa9v101RvCdbsWLGzMM_WmVyKqeUp2_g@mail.gmail.com>

Hi everyone,

Here is a quick status update on the ImageJ-OMERO project, which seeks to
provide access to ImageJ algorithms from the OMERO server side -- as well
as to allow access to an OMERO database from the ImageJ application.

I have overhauled the ImageJ-OMERO installation procedure (for "installing"
ImageJ into an OMERO server). The installation is now much simpler and more
stable. It downloads the latest Fiji and enables the OMERO-5.0 update site,
which always ships known-working JARs. All updates will be pushed via that
OMERO-5.0 update site, which is consistent with how everything else in the
ImageJ/Fiji world works.

Jython is also no longer necessary. The integration works via Python like
other OMERO scripts.

For full installation instructions, see:
https://github.com/imagej/imagej-omero

Today I will be hammering on some of the more egregious bugs, in the hope
of closing out the 0.1.0 milestone and doing the first stable release. I
will also be ensuring that it is possible to execute ImageJ scripts and
ImageJ 1.x plugins, in addition to only ImageJ2 commands. After that, I'll
work on completing integration of ImageJ results tables with OMERO.tables.

Further details on priorities at:
https://github.com/imagej/imagej-omero/issues/milestones

Adventurous developers are welcome to give it a try -- ImageJ2 commands
worked from OMERO.web in my tests over the weekend, although there is also
a user report of image-related commands not working [1].

I'll send another mail when 0.1.0 has been released.

Regards,
Curtis

[1] https://github.com/imagej/imagej-omero/issues/36#issuecomment-43472610
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140519/d63103ac/attachment.html>

From schindelin at wisc.edu  Mon May 19 19:06:57 2014
From: schindelin at wisc.edu (Johannes Schindelin)
Date: Tue, 20 May 2014 02:06:57 +0200 (CEST)
Subject: [ImageJ-devel] Uploading new scijava-common,
	ij1-patcher and imagej-updater
Message-ID: <alpine.DEB.1.00.1405200201060.14982@s15462909.onlinehome-server.info>

Hi all (in particular Curtis and Mark),

I would like to release new versions at least of scijava-common (for the
XML bug fix), for ij1-patcher (for the .jar file order fix) and
imagej-updater (for the NPE with --upload-complete-site fix) tomorrow. Do
you have anything in those components that need a little "seasoning"
still?

Ciao,
Dscho

P.S.: in the next few days, I hope to finalize the work on the script
editor, which will require new releases of at least minimaven,
scripting-java, legacy and ui-swing, and perhaps scijava-common and
ij1-patcher...


From ctrueden at wisc.edu  Mon May 19 19:17:41 2014
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Mon, 19 May 2014 19:17:41 -0500
Subject: [ImageJ-devel] Uploading new scijava-common,
	ij1-patcher and imagej-updater
In-Reply-To: <alpine.DEB.1.00.1405200201060.14982@s15462909.onlinehome-server.info>
References: <alpine.DEB.1.00.1405200201060.14982@s15462909.onlinehome-server.info>
Message-ID: <CADN69yknwuhCBmE5WoPMTUP_QGg1XsHdfUujPv3_s8z3expjkw@mail.gmail.com>

Hi Dscho,

Sounds good. I pushed a bug-fix to SJC master that I'd like to see released
too.

Probably more bug-fixes to SJC later this week but no need to hold our
breath for those.

Thanks,
Curtis

On May 19, 2014 7:07 PM, "Johannes Schindelin" <schindelin at wisc.edu> wrote:

> Hi all (in particular Curtis and Mark),
>
> I would like to release new versions at least of scijava-common (for the
> XML bug fix), for ij1-patcher (for the .jar file order fix) and
> imagej-updater (for the NPE with --upload-complete-site fix) tomorrow. Do
> you have anything in those components that need a little "seasoning"
> still?
>
> Ciao,
> Dscho
>
> P.S.: in the next few days, I hope to finalize the work on the script
> editor, which will require new releases of at least minimaven,
> scripting-java, legacy and ui-swing, and perhaps scijava-common and
> ij1-patcher...
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140519/1de6b662/attachment.html>

From hinerm at gmail.com  Tue May 20 06:30:28 2014
From: hinerm at gmail.com (Mark Hiner)
Date: Tue, 20 May 2014 06:30:28 -0500
Subject: [ImageJ-devel] Uploading new scijava-common,
	ij1-patcher and imagej-updater
In-Reply-To: <CADN69yknwuhCBmE5WoPMTUP_QGg1XsHdfUujPv3_s8z3expjkw@mail.gmail.com>
References: <alpine.DEB.1.00.1405200201060.14982@s15462909.onlinehome-server.info>
	<CADN69yknwuhCBmE5WoPMTUP_QGg1XsHdfUujPv3_s8z3expjkw@mail.gmail.com>
Message-ID: <CA+B=mGrffOHtRiB7a2A7wEJ8OpkvAcCK2W19XgUPXG5-d-jSDg@mail.gmail.com>

Hi dscho,

 Fine with me. I pushed the StatusService changes we made yesterday, so I
don't have anything else pending.

Thanks
- Mark


On Mon, May 19, 2014 at 7:17 PM, Curtis Rueden <ctrueden at wisc.edu> wrote:

> Hi Dscho,
>
> Sounds good. I pushed a bug-fix to SJC master that I'd like to see
> released too.
>
> Probably more bug-fixes to SJC later this week but no need to hold our
> breath for those.
>
> Thanks,
> Curtis
>
> On May 19, 2014 7:07 PM, "Johannes Schindelin" <schindelin at wisc.edu>
> wrote:
>
>> Hi all (in particular Curtis and Mark),
>>
>> I would like to release new versions at least of scijava-common (for the
>> XML bug fix), for ij1-patcher (for the .jar file order fix) and
>> imagej-updater (for the NPE with --upload-complete-site fix) tomorrow. Do
>> you have anything in those components that need a little "seasoning"
>> still?
>>
>> Ciao,
>> Dscho
>>
>> P.S.: in the next few days, I hope to finalize the work on the script
>> editor, which will require new releases of at least minimaven,
>> scripting-java, legacy and ui-swing, and perhaps scijava-common and
>> ij1-patcher...
>>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140520/148bfed9/attachment.html>

From schindelin at wisc.edu  Tue May 20 12:53:06 2014
From: schindelin at wisc.edu (Johannes Schindelin)
Date: Tue, 20 May 2014 19:53:06 +0200 (CEST)
Subject: [ImageJ-devel] Uploading new scijava-common,
 ij1-patcher and imagej-updater
In-Reply-To: <CA+B=mGrffOHtRiB7a2A7wEJ8OpkvAcCK2W19XgUPXG5-d-jSDg@mail.gmail.com>
References: <alpine.DEB.1.00.1405200201060.14982@s15462909.onlinehome-server.info>
	<CADN69yknwuhCBmE5WoPMTUP_QGg1XsHdfUujPv3_s8z3expjkw@mail.gmail.com>
	<CA+B=mGrffOHtRiB7a2A7wEJ8OpkvAcCK2W19XgUPXG5-d-jSDg@mail.gmail.com>
Message-ID: <alpine.DEB.1.00.1405201951340.14982@s15462909.onlinehome-server.info>

Hi,

On Tue, 20 May 2014, Mark Hiner wrote:

> On Mon, May 19, 2014 at 7:17 PM, Curtis Rueden <ctrueden at wisc.edu> wrote:
> 
> > On May 19, 2014 7:07 PM, "Johannes Schindelin" <schindelin at wisc.edu>
> > wrote:
> >
> >> I would like to release new versions at least of scijava-common (for
> >> the XML bug fix), for ij1-patcher (for the .jar file order fix) and
> >> imagej-updater (for the NPE with --upload-complete-site fix)
> >> tomorrow. Do you have anything in those components that need a little
> >> "seasoning" still?
> >
> > Sounds good. I pushed a bug-fix to SJC master that I'd like to see
> > released too.
> >
> > Probably more bug-fixes to SJC later this week but no need to hold our
> > breath for those.
>
>  Fine with me. I pushed the StatusService changes we made yesterday, so I
> don't have anything else pending.

Done:

	scijava-common	2.19.2
	ij1-patcher	0.4.4
	imagej-updater	0.3.2

deployed and uploaded to the update site.

Ciao,
Dscho


From hinerm at gmail.com  Tue May 20 12:54:44 2014
From: hinerm at gmail.com (Mark Hiner)
Date: Tue, 20 May 2014 12:54:44 -0500
Subject: [ImageJ-devel] Uploading new scijava-common,
	ij1-patcher and imagej-updater
In-Reply-To: <alpine.DEB.1.00.1405201951340.14982@s15462909.onlinehome-server.info>
References: <alpine.DEB.1.00.1405200201060.14982@s15462909.onlinehome-server.info>
	<CADN69yknwuhCBmE5WoPMTUP_QGg1XsHdfUujPv3_s8z3expjkw@mail.gmail.com>
	<CA+B=mGrffOHtRiB7a2A7wEJ8OpkvAcCK2W19XgUPXG5-d-jSDg@mail.gmail.com>
	<alpine.DEB.1.00.1405201951340.14982@s15462909.onlinehome-server.info>
Message-ID: <CA+B=mGrjOEz_JEG1VVdzLYKKOUDYv9UA7PhNFhFTiECm8YisMA@mail.gmail.com>

Thanks!


On Tue, May 20, 2014 at 12:53 PM, Johannes Schindelin
<schindelin at wisc.edu>wrote:

> Hi,
>
> On Tue, 20 May 2014, Mark Hiner wrote:
>
> > On Mon, May 19, 2014 at 7:17 PM, Curtis Rueden <ctrueden at wisc.edu>
> wrote:
> >
> > > On May 19, 2014 7:07 PM, "Johannes Schindelin" <schindelin at wisc.edu>
> > > wrote:
> > >
> > >> I would like to release new versions at least of scijava-common (for
> > >> the XML bug fix), for ij1-patcher (for the .jar file order fix) and
> > >> imagej-updater (for the NPE with --upload-complete-site fix)
> > >> tomorrow. Do you have anything in those components that need a little
> > >> "seasoning" still?
> > >
> > > Sounds good. I pushed a bug-fix to SJC master that I'd like to see
> > > released too.
> > >
> > > Probably more bug-fixes to SJC later this week but no need to hold our
> > > breath for those.
> >
> >  Fine with me. I pushed the StatusService changes we made yesterday, so I
> > don't have anything else pending.
>
> Done:
>
>         scijava-common  2.19.2
>         ij1-patcher     0.4.4
>         imagej-updater  0.3.2
>
> deployed and uploaded to the update site.
>
> Ciao,
> Dscho
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140520/005bc508/attachment.html>

From warrick at wisc.edu  Wed May 21 17:35:23 2014
From: warrick at wisc.edu (Jay Warrick)
Date: Wed, 21 May 2014 17:35:23 -0500
Subject: [ImageJ-devel] IJ2 Plugin Service
In-Reply-To: <1666B842-8E03-4B30-86F3-ED68490FDE12@gmail.com>
References: <1666B842-8E03-4B30-86F3-ED68490FDE12@gmail.com>
Message-ID: <2906C8D8-1E47-46E3-82F2-9B2E6341CE90@wisc.edu>

Sorry this email just made it the list now. This has already been followed up on using the image device mailing list. Don't know why it got sent weeks after I tried to send it out. I apologize.

Cheers,

Jay

> On Apr 26, 2014, at 3:13 AM, Jay Warrick <jay.w.warrick at gmail.com> wrote:
> 
> Hi All,
> 
> I use Eclipse and use the eclipse function to export my program as a runnable jar with referenced jars packaged in the application jar. I use the IJ plugin service to discover both IJ plugins of type Command.class as well as my own type called JEXPlugin.class. When I run the application from eclipse, the JEXPlugins are discovered by the ij.plugin() service. However, when I export the application as a runnable jar, ij.plugin()service returns all the Command.class plugins but 0 plugins of type JEXPlugin.class using the call "ij.plugin().getPluginsOfType(JEXPlugin.class);"
> 
> Any idea why or how to fix it?
> 
> Thanks,
> 
> Jay
> 
> 
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel


From j.r.swedlow at dundee.ac.uk  Thu May 22 05:45:53 2014
From: j.r.swedlow at dundee.ac.uk (Jason Swedlow)
Date: Thu, 22 May 2014 10:45:53 +0000
Subject: [ImageJ-devel] [ome-devel] ImageJ-OMERO status update
In-Reply-To: <CADN69yktbti6SKTCFAXa9v101RvCdbsWLGzMM_WmVyKqeUp2_g@mail.gmail.com>
References: <CADN69yktbti6SKTCFAXa9v101RvCdbsWLGzMM_WmVyKqeUp2_g@mail.gmail.com>
Message-ID: <649e2ddb1e054f2088543a804a009e47@AMSPR04MB129.eurprd04.prod.outlook.com>

Hi Curtis-

Thanks for this update. This is very exciting, and will be hugely useful for the community.

Look forward to seeing you in Paris!!!

Cheers,

Jason

--------------------
Centre for Gene Regulation & Expression | Open Microscopy Environment | University of Dundee

Phone:  +44 (0) 1382 385819
email: j.swedlow at dundee.ac.uk<mailto:j.swedlow at dundee.ac.uk>

Web: http://www.lifesci.dundee.ac.uk/gre/staff/jason-swedlow
Open Microscopy Environment: http://openmicroscopy.org<http://openmicroscopy.org/>

From: ome-devel-bounces at lists.openmicroscopy.org.uk [mailto:ome-devel-bounces at lists.openmicroscopy.org.uk] On Behalf Of Curtis Rueden
Sent: Monday, May 19, 2014 5:43 PM
To: OME-devel mailing list; ImageJ Developers
Cc: Johannes Schindelin; William Moore
Subject: [ome-devel] ImageJ-OMERO status update

Hi everyone,

Here is a quick status update on the ImageJ-OMERO project, which seeks to provide access to ImageJ algorithms from the OMERO server side -- as well as to allow access to an OMERO database from the ImageJ application.

I have overhauled the ImageJ-OMERO installation procedure (for "installing" ImageJ into an OMERO server). The installation is now much simpler and more stable. It downloads the latest Fiji and enables the OMERO-5.0 update site, which always ships known-working JARs. All updates will be pushed via that OMERO-5.0 update site, which is consistent with how everything else in the ImageJ/Fiji world works.

Jython is also no longer necessary. The integration works via Python like other OMERO scripts.

For full installation instructions, see:
https://github.com/imagej/imagej-omero

Today I will be hammering on some of the more egregious bugs, in the hope of closing out the 0.1.0 milestone and doing the first stable release. I will also be ensuring that it is possible to execute ImageJ scripts and ImageJ 1.x plugins, in addition to only ImageJ2 commands. After that, I'll work on completing integration of ImageJ results tables with OMERO.tables.

Further details on priorities at:
https://github.com/imagej/imagej-omero/issues/milestones

Adventurous developers are welcome to give it a try -- ImageJ2 commands worked from OMERO.web in my tests over the weekend, although there is also a user report of image-related commands not working [1].

I'll send another mail when 0.1.0 has been released.

Regards,
Curtis

[1] https://github.com/imagej/imagej-omero/issues/36#issuecomment-43472610

The University of Dundee is a registered Scottish Charity, No: SC015096
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140522/158e95b8/attachment.html>

From bugzilla at fiji.sc  Fri May 23 00:15:09 2014
From: bugzilla at fiji.sc (bugzilla at fiji.sc)
Date: Fri, 23 May 2014 05:15:09 +0000
Subject: [ImageJ-devel] [Bug 752] New: "Profile Plot Options..." exception
 via macro/batch mode
Message-ID: <bug-752-194@http.fiji.sc/bugzilla/>

http://fiji.sc/bugzilla/show_bug.cgi?id=752

            Bug ID: 752
           Summary: "Profile Plot Options..." exception via macro/batch
                    mode
           Product: Fiji
           Version: unspecified
          Hardware: PC
                OS: Mac OS
            Status: NEW
          Severity: major
          Priority: P3
         Component: ImageJ2
          Assignee: imagej-devel at imagej.net
          Reporter: bryancallahan at gmail.com

Created attachment 151
  --> http://fiji.sc/bugzilla/attachment.cgi?id=151&action=edit
Macro Log

When running "Profile Plot Options" via macro...

run("Profile Plot Options...", "width=450 height=200 minimum=0 maximum=0
interpolate");

...the following exception appears consistently across all platforms/builds in
headless mode. Any input or help would be /greatly/ appreciated.

java.lang.IllegalArgumentException: Width (-62) and height (-245) must be > 0
    at java.awt.image.SampleModel.<init>(SampleModel.java:108)
    at
java.awt.image.ComponentSampleModel.<init>(ComponentSampleModel.java:128)
    at
java.awt.image.PixelInterleavedSampleModel.<init>(PixelInterleavedSampleModel.java:69)
    at java.awt.image.Raster.createInterleavedRaster(Raster.java:638)
    at java.awt.image.Raster.createInterleavedRaster(Raster.java:265)
    at java.awt.image.Raster.createInterleavedRaster(Raster.java:194)
    at
java.awt.image.ComponentColorModel.createCompatibleWritableRaster(ComponentColorModel.java:2808)
    at java.awt.image.BufferedImage.<init>(BufferedImage.java:409)
    at ij.plugin.JpegWriter.saveAsJpeg(JpegWriter.java:40)
    at ij.plugin.JpegWriter.save(JpegWriter.java:28)
    at ij.io.FileSaver.saveAsJpeg(FileSaver.java:355)
    at ij.io.FileSaver.saveAsJpeg(FileSaver.java:347)
    at ij.plugin.filter.Writer.run(Writer.java:24)
    at
ij.plugin.filter.PlugInFilterRunner.processOneImage(PlugInFilterRunner.java:262)
    at ij.plugin.filter.PlugInFilterRunner.<init>(PlugInFilterRunner.java:111)
    at ij.IJ.runPlugIn(IJ.java:171)
    at ij.Executer.runCommand(Executer.java:131)
    at ij.Executer.run(Executer.java:64)
    at ij.IJ.run(IJ.java:269)
    at ij.IJ.run(IJ.java:323)
    at ij.IJ.saveAs(IJ.java:1722)
    at ij.IJ.saveAs(IJ.java:1654)
    at ij.macro.Functions.saveAs(Functions.java:2846)
    at ij.macro.Functions.doFunction(Functions.java:155)
    at ij.macro.Interpreter.doStatement(Interpreter.java:226)
    at ij.macro.Interpreter.doStatements(Interpreter.java:214)
    at ij.macro.Interpreter.run(Interpreter.java:111)
    at ij.macro.Interpreter.run(Interpreter.java:81)
    at ij.macro.Interpreter.run(Interpreter.java:92)
    at ij.plugin.Macro_Runner.runMacro(Macro_Runner.java:153)
    at ij.plugin.Macro_Runner.runMacroFile(Macro_Runner.java:137)
    at ij.IJ.runMacroFile(IJ.java:130)
    at ij.ImageJ.main(ImageJ.java:678)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
    at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
    at java.lang.reflect.Method.invoke(Method.java:597)
    at imagej.patcher.LegacyEnvironment.main(LegacyEnvironment.java:374)
    at fiji.Main.main(Main.java:155)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
    at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
    at java.lang.reflect.Method.invoke(Method.java:597)
    at imagej.ClassLauncher.launch(ClassLauncher.java:222)
    at imagej.ClassLauncher.run(ClassLauncher.java:159)
    at imagej.ClassLauncher.main(ClassLauncher.java:72)

-- 
You are receiving this mail because:
You are the assignee for the bug.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140523/e59e56ee/attachment.html>

From bugzilla at fiji.sc  Fri May 23 00:18:33 2014
From: bugzilla at fiji.sc (bugzilla at fiji.sc)
Date: Fri, 23 May 2014 05:18:33 +0000
Subject: [ImageJ-devel] [Bug 752] "Profile Plot Options..." exception via
	macro/batch mode
In-Reply-To: <bug-752-194@http.fiji.sc/bugzilla/>
References: <bug-752-194@http.fiji.sc/bugzilla/>
Message-ID: <bug-752-194-kwEgkLRCk6@http.fiji.sc/bugzilla/>

http://fiji.sc/bugzilla/show_bug.cgi?id=752

--- Comment #1 from bryancallahan at gmail.com ---
Just to clarify, the full macro I'm running is:

run("Profile Plot Options...", "width=450 height=200 minimum=0 maximum=0
interpolate");
open("data.jpg");
run("Plot Profile");
saveAs("Jpeg", "profile.jpg");

...and it works fine on Fiji and ImageJ2 (as a macro) when not in headless
mode. My only goal is to disable the grey grid generated in the line profile
but ran into this snag. Thanks again! Please let me know how I can help! :)

-- 
You are receiving this mail because:
You are the assignee for the bug.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20140523/5082296d/attachment.html>

