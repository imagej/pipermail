From ctrueden at wisc.edu  Tue Nov  6 13:35:52 2012
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Tue, 6 Nov 2012 13:35:52 -0600
Subject: [ImageJ-devel] Fwd: [visad-developer] Moving VisAD repository to
	github
In-Reply-To: <CADN69ymQrpU5FswWX06EWZ37zTVa6aOzFh4_uuTW-=QDpwL=WQ@mail.gmail.com>
References: <CAA6nkJDEP=xTO7jaJR61+-R8HdE-RvSXxUi-S8_=FS1yuij8jw@mail.gmail.com>
	<509820E4.5010501@ucar.edu> <50983827.4050202@unidata.ucar.edu>
	<CA+rQCF6N6MYDkAVYj=Xrtjgi_EsVnqCdFMj8cH2_=05Si7fwOw@mail.gmail.com>
	<5098516E.2040304@unidata.ucar.edu>
	<CA+rQCF6QBdubfFeL1jcOJsxq5o+fgGnHduURG61txTTsfAyApA@mail.gmail.com>
	<5099370D.1080302@unidata.ucar.edu>
	<CADN69ymQrpU5FswWX06EWZ37zTVa6aOzFh4_uuTW-=QDpwL=WQ@mail.gmail.com>
Message-ID: <CADN69ynHLxH4YYRAT+oysfBjgP8dU0PbcqM89_TcjPG5pUJCYw@mail.gmail.com>

Hi everyone,

FYI, the VisAD developers are currently discussing migrating VisAD to
GitHub and/or a Maven-based build system.

I have mentioned VisAD a few times in the past; it is a really nice
general-purpose scientific visualization library for numerical data, which
could complement ImgLib, ImageJ2, Fiji, 3D Viewer, etc., well. It was the
driving library behind VisBio [1] and I definitely plan to develop some
VisAD-based plugins for ImageJ2 in the future! (And actually there is one
already [2].)

I didn't forward the whole thread because people did not top post, and some
replies deleted parts of the thread, so it was too fragmented. And
unfortunately the visad-developer archives are not public. But nonetheless
I figured some of you might be interested.

Regards,
Curtis

[1] http://loci.wisc.edu/software/visbio
[2] http://loci.wisc.edu/software/visbio-fiji-plugins


---------- Forwarded message ----------
From: Tom Whittaker <whittaker at wisc.edu>
Date: Mon, Nov 5, 2012 at 12:33 PM
Subject: [visad-developer] Moving VisAD repository to github
To: visad-developer at unidata.ucar.edu


We are exploring moving the VisAD source code repository to GitHub.
Presently, we at SSEC are having to (try to) cope with 3 different
SMS's and really want to move to just one.  The IDV has already moved
to GitHug, McIDAS-V will be moving soon...so I thought I'd send this
note around to solicit input from ya'll who are still active
developers.  The idea would be that although it would be at GitHub, we
would still review any community-submitted changes before merging them
into the core...just like now.

Please let me know if you have any comments...

Thanks.

tom

--
Tom Whittaker
University of Wisconsin-Madison
Space Science & Engineering Center (SSEC)
Cooperative Institute for Meteorological Satellite Studies (CIMSS)
1225 W. Dayton Street
Madison, WI  53706  USA
ph: +1 608 262 2759

_______________________________________________
visad-developer mailing list
visad-developer at unidata.ucar.edu
For list information, to unsubscribe, visit:
http://www.unidata.ucar.edu/mailing_lists/


---------- Forwarded message ----------
From: Curtis Rueden <ctrueden at wisc.edu>
Date: Tue, Nov 6, 2012 at 1:23 PM
Subject: Re: [visad-developer] Moving VisAD repository to github
To: VisAD Developers <visad-developer at unidata.ucar.edu>


Hi everyone,

Tom Whittaker wrote:
> Please let me know if you have any comments.

I think moving VisAD to GitHub would be fantastic!

> The idea would be that although it would be at GitHub, we would still
> review any community-submitted changes before merging them into the
> core...just like now.

GitHub makes it much easier for the community to submit such changes, and
for the VisAD core developers to review them, via the Pull Request (PR)
mechanism. I actually just gave a talk where I highlighted this fact [1].
In the talk, I walked people through how a PR works, and even went so far
as to say: "GitHub is so good, that any project which seriously wants to
enable contributions from the community should be using it." I usually try
to avoid making such sweeping statements, but GitHub really is that good.

Julien Chastang wrote:
> We could also take this opportunity to explore transitioning VisAD to
> Maven. I word this comment cautiously because I am not a 100%
 > convinced this would be a good idea.

Personally I *am* convinced it is a good idea. I know there are many
developers who disagree, but I find Maven to be vastly superior to Ant for
most Java projects. I have used Ant for more than 6 years, and Maven for ~2
1/2, and designed numerous build systems from the ground up in both, and
will say that Maven makes everything much better.

Steve Emmerson wrote:
> Gradle is better than Maven in that it does what Maven does, is easier
> to understand, and is more concise.

I agree that Gradle conciseness is nice. Gradle is also much more
flexible?but in ways that can sometimes be detrimental. For projects that
need it, this flexibility can be important, but the fact is that most
projects don't need it (and I definitely don't think VisAD does). With
Maven there is generally one standard way to go about doing something. The
advantage is that you get a build system that others can understand much
more immediately.

To be fair, I have not used Gradle extensively, and have heard many good
things. There was a recent discussion about Gradle vs. Maven on the Maven
users list [2], with some people coming out in favor of Gradle. But here is
one message which I think summarizes the dangers well:

> Gradle allows to hack something much quicker. In Maven you would need
> to write a plugin.
>
> Otoh I've seen a Gradle project which went from great to barely
> maintainable in almost under a year. Just let a few juniors touch the
> build and you are doomed pretty quickly.
>
> The approach of gradle is not new. Check buildr which does almost the
> same but in ruby instead of groovy. And I think it even predates
> gradle. That was great too in the beginning, but after 3 years the
> projects were insanely broken and we moved them back to maven again.
>
> "With great power comes great responsibility"

Jeff McWhirter wrote:
> I'm just curious why someone would use Maven in the first place. What
> does it do (or do better) than the current VisAD or IDV Ant based
> builds?

The list is extensive:

- Transitive dependency management. VisAD currently has a "deps" folder
with source code of dependent packages. This would no longer be necessary.

- Automatic support for any IDE with Maven integration. You could develop
VisAD in Eclipse, NetBeans, IntelliJ IDEA, and likely others. Development
on the command line (mvn, vim, etc.) is still just as feasible too.

- Standard build system. Every Ant-based build system is hacked together,
reinventing the wheel. Maven provides a standard framework, which you fill
in with your project's details. Other Maven-aware developers can
immediately understand and build your project.

- The benefits of the standard build system are really paramount, and
deserve a second bullet point. One of many advantages: many people have
extended Maven with plugins that you can immediately plug in to your build.
For example, the Maven graph plugin lets you generate a Graphviz plot of
your project dependencies. This plugin can be easily hooked into any
Maven-based project. Yes, Ant has plugins too, but they are more complex to
hook into your project build, and require management of third-party JARs.
Conversely, Maven plugins are easy to leverage from the Maven Central
repository, just like dependencies.

- VisAD has lots of dependencies (Java3D, JAMA, Bio-Formats, NetCDF,
DODS...), but is currently still pretending it doesn't. But practically
speaking, the current structure with the deps folder causes some problems.
It is difficult to keep VisAD up to date with the latest netCDF Java work,
or the latest Bio-Formats work, because it simply ships an ancient fork of
those codebases. And anyone who wants to use VisAD with newer versions of
those libraries will run into trouble, since VisAD's versions of those
codebases do not rename any packages. Using Maven to manage the
dependencies properly would render most of these issues moot.

- Publishing VisAD as one or more Maven artifacts would make it much more
usable as a dependency of other projects. Right now, I have a "visad-lite"
artifact that I published to the ImageJ Maven repository, which we use for
some things, but it is woefully out of date. It would be much better if
VisAD were formally Mavenized, so that downstream projects could maintain
an easier coupling (to either a snapshot version or to a specific release
version which can be easily upgraded later).

- If VisAD were a Maven project it would also make development in IDEs such
as Eclipse much easier. You can link to dependent projects' source code,
debug into it, even change the code, all transparently. With Eclipse's M2E
plugin there is no more juggling of "project dependencies" versus
"library/JAR dependencies" because M2E automatically does the right thing
based on which projects you currently have open in the IDE.

- Publishing VisAD in Maven Central would also make it more visible. I
think it is a tragedy that more people do not know about VisAD and its
amazing feature set and power. Migrating to GitHub and Maven would be a
major step toward publicizing the library as a real contender for use with
other tools. (The web site also needs a major overhaul, but that is a
separate issue. The main point is that right now, from both the web site
and choice of development tools, VisAD simply does not appear to be
actively maintained.)

OK, I am getting short on time now, so if you guys still need more
convincing, let me know and I can spout off ten more bullet points. ;-)

Julien Chastang wrote:
> But my effort is missing proper handling of dependencies.

I would be more than happy to help complete it, especially if most others
are on board with trying out a Maven-based build.

Regards,
Curtis

[1]
http://developer.imagej.net/2012/10/30/imagej2-presentation-imagejconf-2012(slides
44-53)
[2]
http://maven.40175.n5.nabble.com/Arguments-for-Maven-vs-Gradle-td5720939.html

P.S. GitHub and Maven are awesome!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20121106/33d849f6/attachment.html>

From michael.ellis at dsuk.biz  Wed Nov  7 16:57:49 2012
From: michael.ellis at dsuk.biz (Michael Ellis)
Date: Wed, 7 Nov 2012 22:57:49 +0000
Subject: [ImageJ-devel] Problems prting plugIn to ImageJ2
In-Reply-To: <CADN69ynHLxH4YYRAT+oysfBjgP8dU0PbcqM89_TcjPG5pUJCYw@mail.gmail.com>
References: <CAA6nkJDEP=xTO7jaJR61+-R8HdE-RvSXxUi-S8_=FS1yuij8jw@mail.gmail.com>
	<509820E4.5010501@ucar.edu> <50983827.4050202@unidata.ucar.edu>
	<CA+rQCF6N6MYDkAVYj=Xrtjgi_EsVnqCdFMj8cH2_=05Si7fwOw@mail.gmail.com>
	<5098516E.2040304@unidata.ucar.edu>
	<CA+rQCF6QBdubfFeL1jcOJsxq5o+fgGnHduURG61txTTsfAyApA@mail.gmail.com>
	<5099370D.1080302@unidata.ucar.edu>
	<CADN69ymQrpU5FswWX06EWZ37zTVa6aOzFh4_uuTW-=QDpwL=WQ@mail.gmail.com>
	<CADN69ynHLxH4YYRAT+oysfBjgP8dU0PbcqM89_TcjPG5pUJCYw@mail.gmail.com>
Message-ID: <03CDCE96-71A1-434C-BEBA-3FB5787B040C@dsuk.biz>

I've just started looking into to porting my existing ImageJ plugins to ImageJ2. I have hit a problem in that calls to functions like setDisplayRange seem not to take effect until my plugin returns.		

The following plugin lets me interactively adjust the image display range when run with ImageJ1 but with ImageJ2 there is no effect to the image until I close the plugIn dialog.

I also note that the ImageJ2 Adjust->Brightness/Contrast (appears new) can update the image interactively, whereas the Adjust->WindowLevel (looks like existing ImageJ1 UI) does not work.

Any help greatly appreciated!

Example code below

//===========================================================================


package SmartCapture;

import java.awt.AWTEvent;
import ij.IJ;
import ij.ImagePlus;
import ij.gui.DialogListener;
import ij.gui.GenericDialog;
import ij.plugin.filter.ExtendedPlugInFilter;
import ij.plugin.filter.PlugInFilterRunner;
import ij.process.ImageProcessor;

public class Test_IJ2 implements ExtendedPlugInFilter, DialogListener {

	private final static String PLUGIN_NAME = Test_IJ2.class.getSimpleName();

	private static int FLAGS = // bitwise or of the following flags:
	DOES_8G | KEEP_PREVIEW; // When using preview, the preview image can be kept as a result

	ImagePlus imp;
	private double low;
	private double high;

	public int setup(String arg, ImagePlus imp) {

		if (imp == null) {
			IJ.error(PLUGIN_NAME, "No image.\nOpen or create an image first then run "
					+ PLUGIN_NAME);
			return DONE;
		}

		this.imp = imp;

		return FLAGS;
	}

	public int showDialog(ImagePlus imp, String command, PlugInFilterRunner pfr) {

		assert (imp != null);
		if (imp == null)
			return DONE;

		GenericDialog gd = new GenericDialog(PLUGIN_NAME + "...");
		gd.addMessage(imp.getTitle());
		gd.addSlider("low", 0, 255, 0);
		gd.addSlider("high", 0, 255, 255);
		gd.addPreviewCheckbox(pfr, " Preview");
		gd.addDialogListener(this);
		gd.showDialog(); // user input (or reading from macro) happens here
		if (gd.wasCanceled()) // dialog cancelled?
			return DONE;
		return IJ.setupDialog(imp, FLAGS);
	}

	public boolean dialogItemChanged(GenericDialog gd, AWTEvent e) {

		low = gd.getNextNumber();
		high = gd.getNextNumber();
		IJ.log(String.format("low=%g high=%g\n", low, high));

		return true;
	}

	public void run(ImageProcessor ip) {
		IJ.log("run called\n");
		imp.setDisplayRange(low, high);
	}

	public void setNPasses(int nPasses) {
		IJ.log(String.format("setNPasses(%d)\n", nPasses));
	}

}

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20121107/9275374d/attachment.html>

From ctrueden at wisc.edu  Fri Nov  9 13:32:13 2012
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Fri, 9 Nov 2012 13:32:13 -0600
Subject: [ImageJ-devel] Problems prting plugIn to ImageJ2
In-Reply-To: <03CDCE96-71A1-434C-BEBA-3FB5787B040C@dsuk.biz>
References: <CAA6nkJDEP=xTO7jaJR61+-R8HdE-RvSXxUi-S8_=FS1yuij8jw@mail.gmail.com>
	<509820E4.5010501@ucar.edu> <50983827.4050202@unidata.ucar.edu>
	<CA+rQCF6N6MYDkAVYj=Xrtjgi_EsVnqCdFMj8cH2_=05Si7fwOw@mail.gmail.com>
	<5098516E.2040304@unidata.ucar.edu>
	<CA+rQCF6QBdubfFeL1jcOJsxq5o+fgGnHduURG61txTTsfAyApA@mail.gmail.com>
	<5099370D.1080302@unidata.ucar.edu>
	<CADN69ymQrpU5FswWX06EWZ37zTVa6aOzFh4_uuTW-=QDpwL=WQ@mail.gmail.com>
	<CADN69ynHLxH4YYRAT+oysfBjgP8dU0PbcqM89_TcjPG5pUJCYw@mail.gmail.com>
	<03CDCE96-71A1-434C-BEBA-3FB5787B040C@dsuk.biz>
Message-ID: <CADN69y=nJVpN40LdfPsyXJUBrMpCO9jQS4T9_12SKJRkd1jKuA@mail.gmail.com>

Hi Michael,

> I've just started looking into to porting my existing ImageJ plugins
> to ImageJ2. I have hit a problem in that calls to functions like
> setDisplayRange seem not to take effect until my plugin returns.

Yes, that is expected behavior, and a consequence of how ImageJ2's legacy
layer works.

> The following plugin lets me interactively adjust the image display
> range when run with ImageJ1 but with ImageJ2 there is no effect to the
> image until I close the plugIn dialog.

Right. The rule of thumb is that IJ1 plugins which interactively alter an
image will not do so in ImageJ2, due to the way the legacy layer works.

> I also note that the ImageJ2 Adjust->Brightness/Contrast (appears new)
> can update the image interactively, whereas the Adjust->WindowLevel
> (looks like existing ImageJ1 UI) does not work.

We rewrote the Brightness/Contrast command specifically due to this issue.
The goal is to port all of ImageJ1's interactive plugins to ImageJ2, to
avoid this limitation in the legacy layer.

There is an ImageJ2 design page about backwards compatibility and the
legacy layer online at:
    http://developer.imagej.net/compatibility

We may be able to overcome the limitation with interactive plugins to an
extent, but it is difficult in general.

Another solution which is coming soon is that we are working on a toggle in
the Help menu to fully switch back and forth between ImageJ1 and ImageJ2
modes. The legacy layer will translate all data structures upon switch, so
you can run your interactive legacy plugins in ImageJ1 mode, then switch
back to ImageJ2 when finished.

When you say you want to port your existing ImageJ plugins, do you mean use
them in ImageJ2 via the legacy layer? (Which is what you have tried so
far.) Or fully update the code to use ImageJ2 data structures? For the
latter, the migration will be complete when no more ImageJ1 classes (ij.*)
are used, but only ImageJ2 classes (imagej.*). If you decide to go that
route, we would be very happy to help with the conversion process. The plan
is to write a plugin porting guide, but we do not have one yet.

Regards,
Curtis


On Wed, Nov 7, 2012 at 4:57 PM, Michael Ellis <michael.ellis at dsuk.biz>wrote:

> I've just started looking into to porting my existing ImageJ plugins to
> ImageJ2. I have hit a problem in that calls to functions like
> setDisplayRange seem not to take effect until my plugin returns.
>
> The following plugin lets me interactively adjust the image display range
> when run with ImageJ1 but with ImageJ2 there is no effect to the image
> until I close the plugIn dialog.
>
> I also note that the ImageJ2 Adjust->Brightness/Contrast (appears new) can
> update the image interactively, whereas the Adjust->WindowLevel (looks like
> existing ImageJ1 UI) does not work.
>
> Any help greatly appreciated!
>
>  Example code below
>
>
> //===========================================================================
>
>
> package SmartCapture;
>
> import java.awt.AWTEvent;
> import ij.IJ;
> import ij.ImagePlus;
> import ij.gui.DialogListener;
> import ij.gui.GenericDialog;
> import ij.plugin.filter.ExtendedPlugInFilter;
> import ij.plugin.filter.PlugInFilterRunner;
> import ij.process.ImageProcessor;
>
> public class Test_IJ2 implements ExtendedPlugInFilter, DialogListener {
>
>  private final static String PLUGIN_NAME = Test_IJ2.class.getSimpleName();
>
>  private static int FLAGS = // bitwise or of the following flags:
>  DOES_8G | KEEP_PREVIEW; // When using preview, the preview image can be
> kept as a result
>
>  ImagePlus imp;
>  private double low;
>  private double high;
>
>  public int setup(String arg, ImagePlus imp) {
>
> if (imp == null) {
>  IJ.error(PLUGIN_NAME, "No image.\nOpen or create an image first then run
> "
>  + PLUGIN_NAME);
>  return DONE;
>  }
>
> this.imp = imp;
>
>  return FLAGS;
>  }
>
>  public int showDialog(ImagePlus imp, String command, PlugInFilterRunner
> pfr) {
>
> assert (imp != null);
>  if (imp == null)
>  return DONE;
>
>  GenericDialog gd = new GenericDialog(PLUGIN_NAME + "...");
>  gd.addMessage(imp.getTitle());
>  gd.addSlider("low", 0, 255, 0);
>  gd.addSlider("high", 0, 255, 255);
>  gd.addPreviewCheckbox(pfr, " Preview");
>  gd.addDialogListener(this);
>  gd.showDialog(); // user input (or reading from macro) happens here
>  if (gd.wasCanceled()) // dialog cancelled?
>  return DONE;
>  return IJ.setupDialog(imp, FLAGS);
>  }
>
> public boolean dialogItemChanged(GenericDialog gd, AWTEvent e) {
>
>  low = gd.getNextNumber();
>  high = gd.getNextNumber();
>  IJ.log(String.format("low=%g high=%g\n", low, high));
>
>  return true;
>  }
>
>  public void run(ImageProcessor ip) {
>  IJ.log("run called\n");
>  imp.setDisplayRange(low, high);
>  }
>
>  public void setNPasses(int nPasses) {
>  IJ.log(String.format("setNPasses(%d)\n", nPasses));
>  }
>
> }
>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20121109/e2bb49c5/attachment-0001.html>

From ctrueden at wisc.edu  Tue Nov 13 16:54:23 2012
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Tue, 13 Nov 2012 16:54:23 -0600
Subject: [ImageJ-devel] Nice to get connected!
In-Reply-To: <OF190B3EC0.8C10227F-ONC1257AA3.002DDA3C-C1257AA3.00305A32@LocalDomain>
References: <OF190B3EC0.8C10227F-ONC1257AA3.002DDA3C-C1257AA3.00305A32@LocalDomain>
Message-ID: <CADN69y=pg4o2cKL9qADrkRNpov9cL5tor2f-dRy_AR0HX4woAg@mail.gmail.com>

Hi Vito,

Good seeing you at the ImageJ conference, and my sincere apologies for
taking so long to reply to your questions. To give you an idea of how busy
things have been, I have had a total of 10 minutes coding time on ImageJ2
since returning from the conference!

> The idea is to copycat the ImageJ (or fiji or any ImageJexecutable as
> we call it) folder in the analysis tab in ZEN

Great, I think this integration will be very nice for ZEN users.

> Question 1: while the majority of executable functions are macros
> (*.txt, *.ijm etc), I have included also jar and class files. I guess,
> however, it is much safer to allow only macros, i.e. request the users
> package the desired functions into macros. A jar may be missing a run
> entry of something similar, so who needs jars anyhow in this list. Can
> you comment on that?

Since Fiji has a "--run" flag for launching a particular plugin, why not
use that? I think it makes sense to allow any ImageJ code to be run, as
long as supporting it is not overly burdensome.

If you have any users asking for this functionality, perhaps you could ask
them directly what they need?

> Question 2: we scan the "usual suspects" in the system (program files,
> desktop etc) for possible ImageJexecutables. I would not mind at all
> to limit it to ImageJ20 . but I guess this would be too assuming and
> aggressive. What do you suggest?

IMO it is too early to limit support to only ImageJ2. I think it makes
sense to support at least Fiji with ImageJ1 (the Fiji launcher has more
features than the vanilla ImageJ one), if not also vanilla ImageJ
installations.

As for scanning the system, that is fine, but you could also require the
user to configure the desired path in an options dialog somewhere. Most
users will be very happy to do this once, if it means a working ImageJ
integration as a reward. It gives the user more control over which ImageJ
gets used, and makes your job easier since there is less harm done if your
detection algorithm fails.

> Question 3: in ImageJ (1.46r) we check explicitely if LOCI has been
> installed - because without it , multidimensional image shuttling is
> not possible. Do we need to check in ImageJ2.0 (and, if you can answer
> this question) and in Fiji. If we need to check, any descrete way to
> do it? Fiji keeps track of versions... May looking for *LOCI*.jar?

Fiji ships with Bio-Formats. ImageJ2 currently ships with only SCIFIO (the
core of Bio-Formats) for licensing reasons. Zeiss file formats (LSM, ZVI,
etc.) are not supported in SCIFIO core, only in Bio-Formats.

For the time being, one easy way to check is to look for
plugins/loci_tools.jar or plugins/loci_plugins.jar in the installation. You
can tell which version by looking in the JAR manifest, if that matters to
you.

> Question 4: how to assure syncronicity of commands? The macros that do
> something useful, have a form send image from ZEN to ImageJ process it
> send the resulting image from ImageJ to ZEN

My initial thought would be to instruct ImageJ to run not just the
requested macro, but an appended version of it that invokes some sort of
callback mechanism upon conclusion. I haven't experimented in detail, but
perhaps emitting something to stdout when the macro/script/plugin concludes
would be sufficient. Then ZEN could block until it receives that callback.
At worst, you could poll a temporary file (or use the OS's notification
API), though there is likely a cleaner option.

> Question 5: I would very much appreciate your help. i.e. hints, as
> regards getting the communication run the other direction as well i.e.
> from ImageJ to ZEN), I remember the original TCP/IP layer - the code
> looked so simple and elegant. ZEN can communicate on TCP/IP and
> letting macros both side of the river communicate with each other via
> socket comm layer would be the simplest for the user. I understand it
> was security concerns that caused the abrupt change. I would like to
> hear about them (after all, my PayPal account runs on TCPIP as well)

I am likely to blame for this debacle, since I believe Wayne got the idea
of the socket listener from me and my VisBio application (which suffers
from the same security problems). The issue is not with TCP/IP itself of
course, but rather how it was being used.

When ImageJ opened its socket listener, there was no security to limit
incoming connections to only other instances of ImageJ, or only processes
of the same user, or even only processes from localhost! So someone (even
remotely) could control another user's already-running ImageJ instance by
launching macros & scripts which would then run with the permissions of
that user.

Conversely, the RMI-based OtherInstance intentionally only allows
connections from another ImageJ running as the same user.

For further details, see Johannes's original commit [1].

Regarding how to get two-way communication working, I think pipes and files
are simple and proven ways to go. To use pipes, you might need to initially
launch ImageJ from ZEN (not sure how to get a handle on its stdout if the
user launched it externally). But to use files there is no such
restriction. Just make sure every piece of code (macro, plugin, whatever)
you ask ImageJ to execute ends by appending some information to a temporary
file, which ZEN either polls or receives notifications about (via e.g. the
FindFirstChangeNotification function [2]).

Perhaps ImageJ could be improved in the future to make this sort of two-way
communication easier. If you have any suggestions along those lines, feel
free to suggest on the ImageJ mailing list [3].

HTH,
Curtis

[1]
https://github.com/fiji/ImageJA/commit/06848874d990aeea2a0ad1df75311e9ca51b00dc
[2]
http://msdn.microsoft.com/en-us/library/windows/desktop/aa364417(v=vs.85).aspx
[3] http://imagej.nih.gov/ij/list.html


On Fri, Oct 26, 2012 at 3:50 AM, Vito Smolej <vito.smolej at zeiss.com> wrote:

>
> Hi Curtis:
>
>  Thank you first for your cooperative attitude! Much appreciated.
>
> So right away I'll bombard you with a few simple questions, regarding the
> ImageJ plugin for ZEN. The idea is to copycat the ImageJ (or fiji or any
> ImageJexecutable as we call it) folder in the analysis tab in ZEN like this
>
>
>
> the leave nodes are always something that gets executed in ImageJ,
> possibly requiring activeImage input and/or producing activeImage output
> (input and output properties of the local function nodes tree).
>
> *Question 1: *while the majority of executable functions are macros
> (*.txt, *.ijm etc), I have included also jar and class files. I guess,
> however, it is much safer to allow only macros, i.e. request the users
> package the desired functions into macros. A jar may be missing a run entry
> of something similar, so who needs jars anyhow in this list. Can you
> comment on that?
>
> *Question 2: *we scan the "usual suspects" in the system (program files,
> desktop etc) for possible ImageJexecutables. I would not mind at all to
> limit it to ImageJ20 . but I guess this would be too assuming and
> aggressive. What do you suggest?
>
> *Question 3: *in ImageJ (1.46r) we check explicitely if LOCI has been
> installed - because without it , multidimensional image shuttling is not
> possible. Do we need to check in ImageJ2.0 (and, if you can answer this
> question) and in Fiji. If we need to check, any descrete way to do it? Fiji
> keeps track of versions... May looking for *LOCI*.jar?
>
> *Question 4:* how to assure syncronicity of commands? The macros that do
> something useful, have a form
>
>    - send image from ZEN to ImageJ
>    - process it
>    - send the resulting image from ImageJ to ZEN
>
>
> We got again and again  tons of "save as" dialogs before realizing that
> saveAs in the third line may occur before the "process it" in the second
> creates its output. he Identical problem with "unique instance" listener -
> if the exe file has not yet started all the threads, the new call  for
> ImageJexecutable will just spawn another instance into the system.
>
> *Question 5: *I would very much appreciate your help. i.e. hints, as
> regards getting the communication run the other direction as well i.e. from
> ImageJ to ZEN), I remember the original TCP/IP layer - the code  looked so
> simple and elegant. ZEN can communicate on TCP/IP and letting macros both
> side of the river communicate with each other via socket comm layer would
> be the simplest for the user. I understand it was security concerns that
> caused the abrupt change. I would like to hear about them (after all, my
> PayPal account runs on TCPIP as well)
>
> Now, maybe you yourself would have a question or two (g). Please feel free
> to ask. And thank you in advance.
>
> Regards
>
> Vito.
>
>
> _________________________________________________
> Carl Zeiss Microscopy GmbH
> Gesch?ftsbereich BioSciences / BioSciences Division
> Imaging Software M?nchen
> Vorentwicklung / Advanced Development
>
> P r o f . D r . V i t o S m o l e j
>
> Kistlerhofstrasse 75, 81379 M?nchen
> Telefon/ Phone: +49 89 90 9000-306
> Fax: +49 89 90 9000-555
> mailto:smolej at zeiss.de
> www.zeiss.com/microscopy
>
> _________________________________________________
>
> Carl Zeiss Microscopy GmbH
> Vorsitzender des Aufsichtsrates: Dr. Michael Kaschke
> Gesch?ftsf?hrung: Dr. Ulrich Simon, Wilhelm N?rthemann, Dr. Bernhard
> Ohnesorge, Dr. Frank Stietz
> Sitz der Gesellschaft: 07740 Jena, Deutschland
> Amtsgericht Jena, HRB 210.536, USt-IdNr: DE 814 503 774
>
> ----------------------------------------
> This message is intended for a particular addressee only and may contain
> business or company secrets. If you have received this email in error,
> please contact the sender and delete the message immediately. Any use of
> this email, including saving, publishing, copying, replication or
> forwarding of the message or the contents is not permitted.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20121113/dbd1bf42/attachment.html>

From pietzsch at mpi-cbg.de  Fri Nov 16 06:57:50 2012
From: pietzsch at mpi-cbg.de (Tobias Pietzsch)
Date: Fri, 16 Nov 2012 13:57:50 +0100
Subject: [ImageJ-devel] Eclipse / Maven: Download Sources
Message-ID: <50A6384E.3000906@mpi-cbg.de>

Hello maven gurus,

In Eclipse, I just tried to download the sources for the 
scifio-4.4-SNAPSHOT.jar which is referenced in the imglib2-io project
(by right-clicking on the scifio jar in "Maven Dependencies" and
selecting Maven > Download Sources)

Didn't work.

Does anyone know
1.) Is this supposed to work or can I stop looking?
2.) What could I be doing wrong...

Thanks for any advice...

best regards,
Tobias


From ctrueden at wisc.edu  Fri Nov 16 11:25:58 2012
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Fri, 16 Nov 2012 11:25:58 -0600
Subject: [ImageJ-devel] Eclipse / Maven: Download Sources
In-Reply-To: <50A6384E.3000906@mpi-cbg.de>
References: <50A6384E.3000906@mpi-cbg.de>
Message-ID: <CADN69ymR=UQMLJHfi-SU0rhKQ5vJF7hQV0ocHy3uV9HNNuzs+Q@mail.gmail.com>

Hi Tobias,

> I just tried to download the sources for the scifio-4.4-SNAPSHOT.jar
*snip*
> 1.) Is this supposed to work or can I stop looking?
> 2.) What could I be doing wrong...

Thanks for reporting this issue!

What you did is correct, and is supposed to work, as long as a "-sources"
JAR was deployed to the Maven repository. Unfortunately, the Bio-Formats
Maven build was not building or deploying those.

I have now fixed that for the 4.5-SNAPSHOT version of Bio-Formats, and
deployed the sources to the Maven repository. I also changed ImgLib master
to depend on 4.5-SNAPSHOT instead of 4.4-SNAPSHOT. Lastly, I filed a PR [1]
so that the deployed sources will continue to be available for the latest
development.

So to get the sources in your Eclipse, perform the following steps:

1) Pull the latest from imglib.git.

2) Refresh your Eclipse if necessary (select projects, right-click, Maven >
Update Project...; but newer versions of Eclipse generally do this
automatically).

3) Verify that under the project's Maven dependencies, the JAR has changed
to scifio-4.5-SNAPSHOT.jar (instead of the old 4.4-SNAPSHOT version).

4) Try again to right-click it, Maven > Download Sources. It should work
this time.

In the future, if you have this problem again, you can check yourself
whether the sources are available by inspecting the Maven repository
directly. For example, I took a look at:


http://maven.imagej.net/content/repositories/snapshots/loci/scifio/4.4-SNAPSHOT/

And saw that there were no "scifio-4.4-XYZ-sources.jar" files, which told
me that the sources were not getting deployed.

Regards,
Curtis

[1] https://github.com/openmicroscopy/bioformats/pull/225

P.S. Alternately, you can of course clone the bioformats.git repository and
"Import > Existing Maven Projects" into Eclipse to create a project
dependency linkage instead of a JAR linkage. Then none of this "Downlaod
Sources" stuff is necessary, and you can even hack on the Bio-Formats code
if you want to test changes, etc.


On Fri, Nov 16, 2012 at 6:57 AM, Tobias Pietzsch <pietzsch at mpi-cbg.de>wrote:

> Hello maven gurus,
>
> In Eclipse, I just tried to download the sources for the
> scifio-4.4-SNAPSHOT.jar which is referenced in the imglib2-io project
> (by right-clicking on the scifio jar in "Maven Dependencies" and
> selecting Maven > Download Sources)
>
> Didn't work.
>
> Does anyone know
> 1.) Is this supposed to work or can I stop looking?
> 2.) What could I be doing wrong...
>
> Thanks for any advice...
>
> best regards,
> Tobias
>
> ______________________________**_________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/**listinfo/imagej-devel<http://imagej.net/mailman/listinfo/imagej-devel>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20121116/6383b33f/attachment.html>

From Johannes.Schindelin at gmx.de  Fri Nov 16 11:45:57 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Fri, 16 Nov 2012 18:45:57 +0100 (CET)
Subject: [ImageJ-devel] Eclipse / Maven: Download Sources
In-Reply-To: <50A6384E.3000906@mpi-cbg.de>
References: <50A6384E.3000906@mpi-cbg.de>
Message-ID: <alpine.DEB.1.00.1211161844140.7256@s15462909.onlinehome-server.info>

Hi Tobias,

On Fri, 16 Nov 2012, Tobias Pietzsch wrote:

> In Eclipse, I just tried to download the sources for the
> scifio-4.4-SNAPSHOT.jar which is referenced in the imglib2-io project
> (by right-clicking on the scifio jar in "Maven Dependencies" and
> selecting Maven > Download Sources)
> 
> Didn't work.

Did it give you an error message? If not, it could be that it actually
downloaded the sources (I just checked, Jenkins uploaded
http://maven.imagej.net/content/repositories/snapshots/net/imglib2/imglib2-io/2.0.0-SNAPSHOT/imglib2-io-2.0.0-20121116.171412-889-sources.jar
alright, as can be seen by looking at
http://jenkins.imagej.net/job/ImgLib/1340/consoleFull). However, my
Eclipse did not tell me that it managed to download the sources, it just
managed to open the source code for ImgOpener.class including all
comments.

Ciao,
Dscho


From pietzsch at mpi-cbg.de  Mon Nov 19 06:21:29 2012
From: pietzsch at mpi-cbg.de (Tobias Pietzsch)
Date: Mon, 19 Nov 2012 13:21:29 +0100
Subject: [ImageJ-devel] Eclipse / Maven: Download Sources
In-Reply-To: <CADN69ymR=UQMLJHfi-SU0rhKQ5vJF7hQV0ocHy3uV9HNNuzs+Q@mail.gmail.com>
References: <50A6384E.3000906@mpi-cbg.de>
	<CADN69ymR=UQMLJHfi-SU0rhKQ5vJF7hQV0ocHy3uV9HNNuzs+Q@mail.gmail.com>
Message-ID: <50AA2449.5080104@mpi-cbg.de>

Hi Curtis,

It works now! Thanks a lot for investigating and the detailed
explanation.

bets regards,
Tobias


On 11/16/2012 06:25 PM, Curtis Rueden wrote:
> Hi Tobias,
>
>  > I just tried to download the sources for the scifio-4.4-SNAPSHOT.jar
> *snip*
>> 1.) Is this supposed to work or can I stop looking?
>> 2.) What could I be doing wrong...
>
> Thanks for reporting this issue!
>
> What you did is correct, and is supposed to work, as long as a
> "-sources" JAR was deployed to the Maven repository. Unfortunately, the
> Bio-Formats Maven build was not building or deploying those.
>
> I have now fixed that for the 4.5-SNAPSHOT version of Bio-Formats, and
> deployed the sources to the Maven repository. I also changed ImgLib
> master to depend on 4.5-SNAPSHOT instead of 4.4-SNAPSHOT. Lastly, I
> filed a PR [1] so that the deployed sources will continue to be
> available for the latest development.
>
> So to get the sources in your Eclipse, perform the following steps:
>
> 1) Pull the latest from imglib.git.
>
> 2) Refresh your Eclipse if necessary (select projects, right-click,
> Maven > Update Project...; but newer versions of Eclipse generally do
> this automatically).
>
> 3) Verify that under the project's Maven dependencies, the JAR has
> changed to scifio-4.5-SNAPSHOT.jar (instead of the old 4.4-SNAPSHOT
> version).
>
> 4) Try again to right-click it, Maven > Download Sources. It should work
> this time.
>
> In the future, if you have this problem again, you can check yourself
> whether the sources are available by inspecting the Maven repository
> directly. For example, I took a look at:
>
> http://maven.imagej.net/content/repositories/snapshots/loci/scifio/4.4-SNAPSHOT/
>
> And saw that there were no "scifio-4.4-XYZ-sources.jar" files, which
> told me that the sources were not getting deployed.
>
> Regards,
> Curtis
>
> [1] https://github.com/openmicroscopy/bioformats/pull/225
>
> P.S. Alternately, you can of course clone the bioformats.git repository
> and "Import > Existing Maven Projects" into Eclipse to create a project
> dependency linkage instead of a JAR linkage. Then none of this "Downlaod
> Sources" stuff is necessary, and you can even hack on the Bio-Formats
> code if you want to test changes, etc.
>
>
> On Fri, Nov 16, 2012 at 6:57 AM, Tobias Pietzsch <pietzsch at mpi-cbg.de
> <mailto:pietzsch at mpi-cbg.de>> wrote:
>
>     Hello maven gurus,
>
>     In Eclipse, I just tried to download the sources for the
>     scifio-4.4-SNAPSHOT.jar which is referenced in the imglib2-io project
>     (by right-clicking on the scifio jar in "Maven Dependencies" and
>     selecting Maven > Download Sources)
>
>     Didn't work.
>
>     Does anyone know
>     1.) Is this supposed to work or can I stop looking?
>     2.) What could I be doing wrong...
>
>     Thanks for any advice...
>
>     best regards,
>     Tobias
>
>     _________________________________________________
>     ImageJ-devel mailing list
>     ImageJ-devel at imagej.net <mailto:ImageJ-devel at imagej.net>
>     http://imagej.net/mailman/__listinfo/imagej-devel
>     <http://imagej.net/mailman/listinfo/imagej-devel>
>
>



From Johannes.Schindelin at gmx.de  Mon Nov 26 14:56:01 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Mon, 26 Nov 2012 21:56:01 +0100 (CET)
Subject: [ImageJ-devel] How does the JVM/JIT work?
Message-ID: <alpine.DEB.1.00.1211262131560.7256@s15462909.onlinehome-server.info>

Hi,

in a recent discussion revolving around the performance of ImgLib2, the
question came up where to find a good documentation about the Just In Time
("JIT") compiler of Oracle/Sun's Java Virtual Machine ("JVM"). As it
happens, I just stumbled over this:

http://www.cubrid.org/blog/dev-platform/understanding-jvm-internals

It explains more than the JIT, and is a bit short on the details about the
Just In Time compiler, so let me add a bit more information from the top
of my head:

Sun's own implementation of a Just-In-Time compiler (called "Hotspot") was
introduced after the Kaffe project showed how much more performant Java
can be when methods are compiled to native code.

A major boost in Hotspot technology came with Java 5. This came most
likely in response to IBM's Jikes RVM, an experimental Java Virtual
Machine invented to do research on virtual machines.

Again a major improvement in Hotspot technology came with Java 6.

The principle is easy: very simple statistics are recorded whenever the
virtual machine interprets the bytecode. Whenever a certain threshold is
reached (in Oracle/Sun's Java 6, you can configure this with the
-XX:CompileThreshold command-line option), the method is compiled to
native code before being executed.

Since the statistics are crucial in determining how much to inline code
(which was so far the major benefit of Java over C++: it can inline code
after the fact, something C++ learnt with the advent of the Clang module
to LLVM: http://clang.llvm.org/cxx_status.html), that seems to be where
the improvements in Java 6 came from.

Of course, you do not want to acquire too many statistics, otherwise the
statistics themselves will provide an undesired performance bottleneck.

The major improvement in Java 7 is that the statistics continue to be
acquired after compiling methods into native code so that subsequent
further optimization is possible.

It is a major shame that we cannot require Java 7 in Fiji due to the Apple
issue: only the latest and greatest MacOSX versions (which do not even
support the PowerPC computers sold by Apple a scant 6 years ago!) can run
Java 7, and reports state that it is not as stable as Java 6 used to be
(except for that AWT issue http://fiji.sc/bugzilla/show_bug.cgi?id=197).

Ciao,
Dscho


From ctrueden at wisc.edu  Wed Nov 28 14:10:51 2012
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Wed, 28 Nov 2012 14:10:51 -0600
Subject: [ImageJ-devel] [ome-devel] strategy and 6D data
In-Reply-To: <EFF8C8F4BFF2D448A46F7979A5022F6E17451B98@icexch-m3.ic.ac.uk>
References: <EFF8C8F4BFF2D448A46F7979A5022F6E17451B98@icexch-m3.ic.ac.uk>
Message-ID: <CADN69ymFn-TLR2Q5bGGtfu9CGHHgBSz+8wkbRfy2pc8PNENSDQ@mail.gmail.com>

Hi Ian,

Thanks for this update; very informative. It looks like you have done a lot
to bring FLIM processing into OMERO, which is great.

I want to draw your attention to some very similar work we are doing within
ImageJ:
    http://loci.wisc.edu/software/slim-plugin

The SLIM Plugin is an ImageJ plugin (written in Java, of course), which
uses the SLIM-curve library (written in cross-platform C) to perform the
curve fitting (of TCSPC data).

> The Imperial/Photonics Group?s main FLIM analysis software is
> internally named ?GlobalProcessing?. It is written in MATLAB and
> provides state of the art fitting of time domain data for both
> laser-scanning time-correlated single photon (TCSPC) and wide-field
> time-gated FLIM images.

Perhaps GlobalProcessing and SLIM-curve could join forces? It is much
easier to access C code from Java than MATLAB code, but there are clearly
features in GlobalProcessing missing from SLIM-curve (e.g., wide-field),
and vice versa.

> 1) We intend to standardise on encoding FLIM data using ModuloAlongT.

Personally, I dislike ModuloAlongT, especially as a long-term solution.
There are certain dimension orders that are simply impossible using it
(e.g., XYbCZT, where "b" is lifetime bins, and T is actual time points). I
would much favor us developing a true N-dimensional OME data model, and
using that, moving forward.

> 2) Where should the functionality currently in IC-importer fit into
> the OMERO eco-system?

I agree that this functionality would work well as a Bio-Formats reader.

Regards,
Curtis


On Wed, Nov 28, 2012 at 5:11 AM, Munro, Ian <i.munro at imperial.ac.uk> wrote:

>  Hello all
>
> Please find attached a document describing where the work of the Imperial
> satellite currently stands.
> We've reached a point where our group is making decisions, regarding the
> handling of data with a 6th dimension,
> that may well have future  implications for  the OMERO clients or for
> other groups working with 5+ dimensions.
>
> As  a result we're looking for any feedback/improvements that anyone can
> offer on our current approach
> In particular the 3 areas  highlighted on the second page of the document.
>
> Thanks in advance for your time.
>
> Ian
>
>
>
> Ian
>
>
>
>
> _______________________________________________
> ome-devel mailing list
> ome-devel at lists.openmicroscopy.org.uk
> http://lists.openmicroscopy.org.uk/mailman/listinfo/ome-devel
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20121128/876f6712/attachment.html>

From ctrueden at wisc.edu  Thu Nov 29 11:20:08 2012
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Thu, 29 Nov 2012 11:20:08 -0600
Subject: [ImageJ-devel] Java-based graphics package
In-Reply-To: <64E5BBB9C3092D4D9C51716088BAD1B104CA0B@AM2PRD0311MB411.eurprd03.prod.outlook.com>
References: <64E5BBB9C3092D4D9C51716088BAD1B104CA0B@AM2PRD0311MB411.eurprd03.prod.outlook.com>
Message-ID: <CADN69ymoEjKeatsTRzKdQDt03du7Bc4n0850eGPmKcMHJkUGYw@mail.gmail.com>

Hi Malcolm,

> I have recently release a Java-based scientific graphics package -
> tested using Java, Groovy, Scala, MATLAB, R and SciLab to-date.
> Could this be of interest for ImageJ developers/users?

Thank you for letting me know!

Looking at the Waterloo web site, I could not find any source code, though
the site lists the license as LGPLv3. How can I access the source? Also,
have you considered developing the project on GitHub? It would make
community collaboration much more feasible.

Regarding the functionality, what led you to develop this project rather
than use an existing library, most notably JFreeChart? We are currently
using JFreeChart for our charting needs and it works very well. What can
Waterloo do that JFreeChart can't? And would it make sense to consider any
sort of interoperability layer between them?

Thanks,
Curtis


On Thu, Nov 29, 2012 at 3:51 AM, Lidierth, Malcolm <
malcolm.lidierth at kcl.ac.uk> wrote:

>  Dear Dr Rueden
>
>  I have recently release a Java-based scientific graphics package -
> tested using Java, Groovy, Scala, MATLAB, R and SciLab to-date.
>
>  Could this be of interest for ImageJ developers/users? It is very much a
> work-in-progress so could provide an ImageJ-customised API if needed.
>
>  Website:
> http://waterloo.sourceforge.net/
>
>  Regards
> Malcolm Lidierth
>
>
>
>  Dr Malcolm Lidierth
> Senior Lecturer in Physiology
>
> Wolfson Centre for Age-Related Diseases
> Guy's Hospital Campus
> King's College London
> London SE1 1UL
>
> Ph: +44 (0) 20 7848 6175
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20121129/1eb8ab04/attachment.html>

From leek at broadinstitute.org  Thu Nov 29 11:23:36 2012
From: leek at broadinstitute.org (Lee Kamentsky)
Date: Thu, 29 Nov 2012 12:23:36 -0500
Subject: [ImageJ-devel] Java-based graphics package
In-Reply-To: <CADN69ymoEjKeatsTRzKdQDt03du7Bc4n0850eGPmKcMHJkUGYw@mail.gmail.com>
References: <64E5BBB9C3092D4D9C51716088BAD1B104CA0B@AM2PRD0311MB411.eurprd03.prod.outlook.com>
	<CADN69ymoEjKeatsTRzKdQDt03du7Bc4n0850eGPmKcMHJkUGYw@mail.gmail.com>
Message-ID: <50b79a19.012f650a.4a5a.7c11@mx.google.com>

On 11/29/2012 12:20 PM, Curtis Rueden wrote:
>
> Looking at the Waterloo web site, I could not find any source code, 
> though the site lists the license as LGPLv3. How can I access the 
> source? Also, have you considered developing the project on GitHub? It 
> would make community collaboration much more feasible.
Curtis, is this it?
svn checkout svn://svn.code.sf.net/p/waterloo/code/trunk waterloo-code
>
> Regarding the functionality, what led you to develop this project 
> rather than use an existing library, most notably JFreeChart? We are 
> currently using JFreeChart for our charting needs and it works very 
> well. What can Waterloo do that JFreeChart can't? And would it make 
> sense to consider any sort of interoperability layer between them?
>
> Thanks,
> Curtis
>
>
> On Thu, Nov 29, 2012 at 3:51 AM, Lidierth, Malcolm 
> <malcolm.lidierth at kcl.ac.uk <mailto:malcolm.lidierth at kcl.ac.uk>> wrote:
>
>     Dear Dr Rueden
>
>     I have recently release a Java-based scientific graphics package -
>     tested using Java, Groovy, Scala, MATLAB, R and SciLab to-date.
>
>     Could this be of interest for ImageJ developers/users? It is very
>     much a work-in-progress so could provide an ImageJ-customised API
>     if needed.
>
>     Website:
>     http://waterloo.sourceforge.net/
>
>     Regards
>     Malcolm Lidierth
>
>
>
>     Dr Malcolm Lidierth
>     Senior Lecturer in Physiology
>
>     Wolfson Centre for Age-Related Diseases
>     Guy's Hospital Campus
>     King's College London
>     London SE1 1UL
>
>     Ph: +44 (0) 20 7848 6175 <tel:%2B44%20%280%29%2020%207848%206175>
>
>
>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20121129/4ab5e264/attachment.html>

From ctrueden at wisc.edu  Thu Nov 29 11:28:07 2012
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Thu, 29 Nov 2012 11:28:07 -0600
Subject: [ImageJ-devel] Java-based graphics package
In-Reply-To: <50b79a19.012f650a.4a5a.7c11@mx.google.com>
References: <64E5BBB9C3092D4D9C51716088BAD1B104CA0B@AM2PRD0311MB411.eurprd03.prod.outlook.com>
	<CADN69ymoEjKeatsTRzKdQDt03du7Bc4n0850eGPmKcMHJkUGYw@mail.gmail.com>
	<50b79a19.012f650a.4a5a.7c11@mx.google.com>
Message-ID: <CADN69yk2Xn=pVwyp-6QbZ=XfuGutU05DrdQwknf2Zbr=Viu9vA@mail.gmail.com>

Hi Lee,

> Curtis, is this it?
> svn checkout svn://svn.code.sf.net/p/waterloo/code/trunk waterloo-code

Thanks Lee, I did try that but received:

$ svn checkout svn://svn.code.sf.net/p/waterloo/code/trunk waterloo
svn: E170000: URL 'svn://svn.code.sf.net/p/waterloo/code/trunk' doesn't
exist
$ svn checkout http://svn.code.sf.net/p/waterloo/code/trunk waterloo
svn: E170000: URL 'http://svn.code.sf.net/p/waterloo/code/trunk' doesn't
exist

And the SVN commit browser shows no commits either, so I thought perhaps
there was no actual repository set up?

Regards,
Curtis


On Thu, Nov 29, 2012 at 11:23 AM, Lee Kamentsky <leek at broadinstitute.org>wrote:

>  On 11/29/2012 12:20 PM, Curtis Rueden wrote:
>
>
> Looking at the Waterloo web site, I could not find any source code, though
> the site lists the license as LGPLv3. How can I access the source? Also,
> have you considered developing the project on GitHub? It would make
> community collaboration much more feasible.
>
> Curtis, is this it?
> svn checkout svn://svn.code.sf.net/p/waterloo/code/trunk waterloo-code
>
>
>  Regarding the functionality, what led you to develop this project rather
> than use an existing library, most notably JFreeChart? We are currently
> using JFreeChart for our charting needs and it works very well. What can
> Waterloo do that JFreeChart can't? And would it make sense to consider any
> sort of interoperability layer between them?
>
>  Thanks,
> Curtis
>
>
> On Thu, Nov 29, 2012 at 3:51 AM, Lidierth, Malcolm <
> malcolm.lidierth at kcl.ac.uk> wrote:
>
>>  Dear Dr Rueden
>>
>>  I have recently release a Java-based scientific graphics package -
>> tested using Java, Groovy, Scala, MATLAB, R and SciLab to-date.
>>
>>  Could this be of interest for ImageJ developers/users? It is very much
>> a work-in-progress so could provide an ImageJ-customised API if needed.
>>
>>  Website:
>> http://waterloo.sourceforge.net/
>>
>>  Regards
>> Malcolm Lidierth
>>
>>
>>
>>  Dr Malcolm Lidierth
>> Senior Lecturer in Physiology
>>
>> Wolfson Centre for Age-Related Diseases
>> Guy's Hospital Campus
>> King's College London
>> London SE1 1UL
>>
>> Ph: +44 (0) 20 7848 6175 <%2B44%20%280%29%2020%207848%206175>
>>
>
>
>
> _______________________________________________
> ImageJ-devel mailing listImageJ-devel at imagej.nethttp://imagej.net/mailman/listinfo/imagej-devel
>
>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20121129/e78f1cc9/attachment-0001.html>

From Johannes.Schindelin at gmx.de  Thu Nov 29 15:50:07 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Thu, 29 Nov 2012 22:50:07 +0100 (CET)
Subject: [ImageJ-devel] GitHub mirror of KNIME's image-processing repository?
Message-ID: <alpine.DEB.1.00.1211292246110.31987@s15462909.onlinehome-server.info>

Hi KNIME people,

I was working on moving all of our Git mirroring stuff from pacific to a
Jenkins node for the past two days. So it would be really easy for me to
add another job that would mirror your Subversion repositories to GitHub.

Interested?

If so, I would need details how to access your Subversion repository (can
be sent by private mail if it contains sensitive data) and I would like to
ask you to add this public key as a deploy key to the respective
repository on GitHub (which you probably would create in a new
organization):

ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDKAcstfnoePKTEqKPvoak+eyNz6d0cFzRkLKZd/iQ6jqvV+MLGQdTcnrlXup9z3DITi27RxDm7lUiJ3JJCtJRFSNZxh3QXJLJ5875dC8HlhEkoHXuiiNBe/9NZvJG/d0y99UzdIelld7RLh8Q3qQg5eE5wKzpqxkNbAnBt9y2h4B/VxwH/Z7TqTuoRPEXxX6+bVvGhCnFF5mrDU2UtOqWK5YbPz+1wiJ17RG2yNfldPHVH/FdrxykdZspCXaDVrAk/t/viLJHODH7t+6KMRPz1UhUlGn/3zqf0hrchlSuANsVbrJHE8pMLOcFIBluTHStpRymZF9zr4BlX9KXa63GZ jenkins-node at imagej.net

Thanks,
Dscho


From i.munro at imperial.ac.uk  Fri Nov 30 11:44:19 2012
From: i.munro at imperial.ac.uk (Munro, Ian)
Date: Fri, 30 Nov 2012 17:44:19 +0000
Subject: [ImageJ-devel] [ome-devel] strategy and 6D data
In-Reply-To: <CADN69ymFn-TLR2Q5bGGtfu9CGHHgBSz+8wkbRfy2pc8PNENSDQ@mail.gmail.com>
References: <EFF8C8F4BFF2D448A46F7979A5022F6E17451B98@icexch-m3.ic.ac.uk>
	<CADN69ymFn-TLR2Q5bGGtfu9CGHHgBSz+8wkbRfy2pc8PNENSDQ@mail.gmail.com>
Message-ID: <EFF8C8F4BFF2D448A46F7979A5022F6E17452742@icexch-m3.ic.ac.uk>

Hi Curtis

Thans for the feedback. It's much appreciated.

Actually I oversimplified as our code is a Matlab GUI wrapping cross-platform c++ fitting code so bringing this together with slim may be relatively easy as the 2 GUIs seem to have a lot of common features.

In the shorter term I think we need to use the same strategy to store data in OMERO.

Clearly you have a better feel for the downsides of the ModuloAlong? solution than we do so can I ask how you intend to store your data in OMERO?


Regards

Ian





On 28 Nov 2012, at 20:10, Curtis Rueden wrote:

Hi Ian,

Thanks for this update; very informative. It looks like you have done a lot to bring FLIM processing into OMERO, which is great.

I want to draw your attention to some very similar work we are doing within ImageJ:
    http://loci.wisc.edu/software/slim-plugin

The SLIM Plugin is an ImageJ plugin (written in Java, of course), which uses the SLIM-curve library (written in cross-platform C) to perform the curve fitting (of TCSPC data).

> The Imperial/Photonics Group?s main FLIM analysis software is
> internally named ?GlobalProcessing?. It is written in MATLAB and
> provides state of the art fitting of time domain data for both
> laser-scanning time-correlated single photon (TCSPC) and wide-field
> time-gated FLIM images.

Perhaps GlobalProcessing and SLIM-curve could join forces? It is much easier to access C code from Java than MATLAB code, but there are clearly features in GlobalProcessing missing from SLIM-curve (e.g., wide-field), and vice versa.

> 1) We intend to standardise on encoding FLIM data using ModuloAlongT.

Personally, I dislike ModuloAlongT, especially as a long-term solution. There are certain dimension orders that are simply impossible using it (e.g., XYbCZT, where "b" is lifetime bins, and T is actual time points). I would much favor us developing a true N-dimensional OME data model, and using that, moving forward.

> 2) Where should the functionality currently in IC-importer fit into
> the OMERO eco-system?

I agree that this functionality would work well as a Bio-Formats reader.

Regards,
Curtis


On Wed, Nov 28, 2012 at 5:11 AM, Munro, Ian <i.munro at imperial.ac.uk<mailto:i.munro at imperial.ac.uk>> wrote:
Hello all

Please find attached a document describing where the work of the Imperial satellite currently stands.
We've reached a point where our group is making decisions, regarding the handling of data with a 6th dimension,
that may well have future  implications for  the OMERO clients or for other groups working with 5+ dimensions.

As  a result we're looking for any feedback/improvements that anyone can offer on our current approach
In particular the 3 areas  highlighted on the second page of the document.

Thanks in advance for your time.

Ian



Ian




_______________________________________________
ome-devel mailing list
ome-devel at lists.openmicroscopy.org.uk<mailto:ome-devel at lists.openmicroscopy.org.uk>
http://lists.openmicroscopy.org.uk/mailman/listinfo/ome-devel



-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20121130/0d35b98b/attachment.html>

From Johannes.Schindelin at gmx.de  Fri Nov 30 13:12:50 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Fri, 30 Nov 2012 20:12:50 +0100 (CET)
Subject: [ImageJ-devel] GitHub mirror of KNIME's image-processing
	repository?
In-Reply-To: <50B867A5.7030706@uni-konstanz.de>
References: <alpine.DEB.1.00.1211292246110.31987@s15462909.onlinehome-server.info>
	<50B867A5.7030706@uni-konstanz.de>
Message-ID: <alpine.DEB.1.00.1211302006250.31987@s15462909.onlinehome-server.info>

Hi Martin,

On Fri, 30 Nov 2012, Martin Horn wrote:

> danke f?r das Angebot! Da die KNIME-Leute ja ebenfalls
> einen Jenkins-Server laufen haben, ist nur logisch bzw. sinnvoller, den
> mirror-job von diesem auch erledigen zu lassen. Wenn ich mich recht
> erinnere, hast du mir das Skript zum "mirrorn" ja bereits gegeben. Den
> public key k?nnen wir ja dann trotzdem f?r das Github-repo nutzen.

For the benefit of the English speakers on this list, I translate it:

	thank you for your offer! Since the KNIME people have a Jenkins
	server, too, it makes more sense to let the mirror job run there.
	IIRC you gave me the mirror script already. We can use the public
	key in any case.

The mirror script has evolved, please have a look at:

	https://github.com/scijava/scijava-common/commits/master/bin/git-svn-synchronizer.sh

You are welcome to set it up, but keep in mind that you will need to add a
private SSH key to the Jenkins job, which requires shell access.

Likewise, it is not enough to install the public key, you need a private
key, too, otherwise the job will be denied write access.

Lastly, your Jenkins node needs to have git-svn installed and the first
run is prone to fail since git-svn denies server certificates by default;
you need to run that script manually the first time to record the
certificate fingerprint manually.

If you still want to do it yourself, be my guest! Otherwise, our offer is
still open ;-)

Ciao,
Dscho

From Johannes.Schindelin at gmx.de  Fri Nov 30 14:04:47 2012
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Fri, 30 Nov 2012 21:04:47 +0100 (CET)
Subject: [ImageJ-devel] Snakes and ImageJ2
Message-ID: <alpine.DEB.1.00.1211302059220.31987@s15462909.onlinehome-server.info>

Hi Ricard,

I'd like to ask for the GitHub repository of the stuff we worked on in
Dundee; this could be the basis for our IJ2 tool framework, as well as a
good framework to work with snakes.

Thanks!
Johannes


