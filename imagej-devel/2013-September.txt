From bugzilla at fiji.sc  Wed Sep  4 16:36:39 2013
From: bugzilla at fiji.sc (bugzilla at fiji.sc)
Date: Wed, 04 Sep 2013 21:36:39 +0000
Subject: [ImageJ-devel] [Bug 639] ImageJ2 with QuickPalm plugin
In-Reply-To: <bug-639-194@http.fiji.sc/bugzilla/>
References: <bug-639-194@http.fiji.sc/bugzilla/>
Message-ID: <bug-639-194-ia6W3dFMKr@http.fiji.sc/bugzilla/>

http://fiji.sc/bugzilla/show_bug.cgi?id=639

Johannes Schindelin <johannes.schindelin at gmx.de> changed:

           What    |Removed                     |Added
----------------------------------------------------------------------------
             Status|NEW                         |RESOLVED
                 CC|                            |johannes.schindelin at gmx.de
         Resolution|---                         |LATER

-- 
You are receiving this mail because:
You are the assignee for the bug.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20130904/48e1ff99/attachment.html>

From Johannes.Schindelin at gmx.de  Thu Sep  5 11:13:09 2013
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Thu, 5 Sep 2013 18:13:09 +0200 (CEST)
Subject: [ImageJ-devel] Wanting to make an application that runs ImageJ
 macros...
In-Reply-To: <1457487.IPNN4tf3Nu@localhost.localdomain>
References: <1457487.IPNN4tf3Nu@localhost.localdomain>
Message-ID: <alpine.DEB.1.00.1309051811280.1191@s15462909.onlinehome-server.info>

Hi Mark,

On Wed, 21 Aug 2013, Mark Hammons wrote:

> So, I'm wanting to make a simple application that takes an imagej macro
> and a path to an image, and runs the macro on the image, just using the
> imagej2 libs. Is this doable? Is it doable without an xserver being
> available? Thanks :)

For the moment, your best bet to do that is Fiji with the --headless
option: http://fiji.sc/Headless

ImageJ2 does not yet support the ImageJ1 macro language (that is, the
support is only partial and limited and likely broken; we had a very good
plan to support macros better but that plan had to be adjusted because of
upstream changes).

Ciao,
Johannes


From Johannes.Schindelin at gmx.de  Thu Sep  5 12:08:47 2013
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Thu, 5 Sep 2013 19:08:47 +0200 (CEST)
Subject: [ImageJ-devel] Launcher for another program
In-Reply-To: <5217F457.3050904@mbl.edu>
References: <5217F457.3050904@mbl.edu>
Message-ID: <alpine.DEB.1.00.1309051905140.1191@s15462909.onlinehome-server.info>

Hi Grant,

I Cc:ed the imagej-devel list which would have possibly responded to your
mail during my absence.

On Fri, 23 Aug 2013, Grant B. Harris wrote:

> I need a launcher for a java program and thought I might use the
> ImageJ-Launcher.

Certainly, I do that quite often myself.

> I managed to get ImageJ-win64.exe to run another main class in another
> jar, but then I have a batch file which flashes the command window and
> all that.? Does the launcher have a config file like the old ImageJ
> launcher had? ? (I looked thru the source and see that there is a
> 'modern' (shouldn't it really be postmodern ? ;-) config of some sort,
> but I couldn't parse the specifics.)

It does interpret the ImageJ.cfg files but ignores the main class because
we need to override that for Fiji (ImageJ 1.x has the main class
ij.ImageJ, Fiji needs to override a couple of things and therefore calls
that class from fiji.Main).

But you should be able to run .cmd scripts without opening a console
window... you're the Windows expert, so you do not need me to tell you how
;-)

Ciao,
Johannes

From trac at imagej.net  Thu Sep  5 11:16:46 2013
From: trac at imagej.net (ImageJ)
Date: Thu, 05 Sep 2013 16:16:46 +0000
Subject: [ImageJ-devel] [ImageJ] #1553: Make it easier for non-core-IJ2
 developers to respond to tickets
In-Reply-To: <017.2879b6b5a3c5468e1ab729fe3fc3863b@imagej.net>
References: <017.2879b6b5a3c5468e1ab729fe3fc3863b@imagej.net>
Message-ID: <032.caaaf0efa428a031ca9951fe3cb58c7f@imagej.net>

#1553: Make it easier for non-core-IJ2 developers to respond to tickets
--------------------------+----------------------------------
 Reporter:  dscho         |       Owner:  dscho
     Type:  defect        |      Status:  reviewing
 Priority:  major         |   Milestone:  imagej2-b8-analysis
Component:  Server Admin  |     Version:
 Severity:  serious       |  Resolution:
 Keywords:                |  Blocked By:
 Blocking:  1915          |
--------------------------+----------------------------------

Comment (by dscho):

 We should seriously consider a custom solution based on procmail and the
 Python API. Hopefully I will have time to look into that soon; we need the
 same for Fiji's BugZilla because people find it too hard to follow the
 link to respond to tickets, and simply reply.

-- 
Ticket URL: <http://trac.imagej.net/ticket/1553#comment:10>
ImageJ <http://trac.imagej.net>
ImageJ core development


From trac at imagej.net  Thu Sep  5 12:23:58 2013
From: trac at imagej.net (ImageJ)
Date: Thu, 05 Sep 2013 17:23:58 +0000
Subject: [ImageJ-devel] [ImageJ] #1553: Make it easier for non-core-IJ2
 developers to respond to tickets
In-Reply-To: <017.2879b6b5a3c5468e1ab729fe3fc3863b@imagej.net>
References: <017.2879b6b5a3c5468e1ab729fe3fc3863b@imagej.net>
Message-ID: <032.95bc344200198bf145df87d857cb48c5@imagej.net>

#1553: Make it easier for non-core-IJ2 developers to respond to tickets
--------------------------+----------------------------------
 Reporter:  dscho         |       Owner:  dscho
     Type:  defect        |      Status:  reviewing
 Priority:  major         |   Milestone:  imagej2-b8-analysis
Component:  Server Admin  |     Version:
 Severity:  serious       |  Resolution:
 Keywords:                |  Blocked By:
 Blocking:  1915          |
--------------------------+----------------------------------

Comment (by curtis):

 More and more, I want to migrate everything to GitHub Issues. Yes, it
 sucks when GitHub is down. Yes, we need to back up the tickets from there.
 But it would be ''far'' less time than maintaining a custom solution in an
 ever-hackier Trac installation, which is relatively less and less popular
 over time. Using GitHub Issues integrates with our other GitHub usage, is
 familiar to more and more developers, integrates with an increasingly
 large number of dev tools (such as Eclipse's Mylyn). Lastly, creating a
 new GitHub issue is a snap. Super fast, super easy. Better for core
 developers, better for the extended community.

 We are already using GitHub Issues with both ImgLib2 and SCIFIO now and it
 works well. The only thing I really miss from our Trac setup is
 hierarchical issues, but I am confident we can find an acceptable solution
 or substitute.

-- 
Ticket URL: <http://trac.imagej.net/ticket/1553#comment:11>
ImageJ <http://trac.imagej.net>
ImageJ core development


From trac at imagej.net  Thu Sep  5 14:23:56 2013
From: trac at imagej.net (ImageJ)
Date: Thu, 05 Sep 2013 19:23:56 +0000
Subject: [ImageJ-devel] [ImageJ] #1553: Make it easier for non-core-IJ2
 developers to respond to tickets
In-Reply-To: <017.2879b6b5a3c5468e1ab729fe3fc3863b@imagej.net>
References: <017.2879b6b5a3c5468e1ab729fe3fc3863b@imagej.net>
Message-ID: <032.e0814bfb31ef206c5490654cf5a6b4ed@imagej.net>

#1553: Make it easier for non-core-IJ2 developers to respond to tickets
--------------------------+----------------------------------
 Reporter:  dscho         |       Owner:  dscho
     Type:  defect        |      Status:  reviewing
 Priority:  major         |   Milestone:  imagej2-b8-analysis
Component:  Server Admin  |     Version:
 Severity:  serious       |  Resolution:
 Keywords:                |  Blocked By:
 Blocking:  1915          |
--------------------------+----------------------------------

Comment (by dscho):

 The only problem with GitHub issues we cannot really solve is that they
 require a user to be logged in to comment. And not everybody and her dog
 want to have a GitHub account...

-- 
Ticket URL: <http://trac.imagej.net/ticket/1553#comment:12>
ImageJ <http://trac.imagej.net>
ImageJ core development


From trac at imagej.net  Thu Sep  5 14:50:11 2013
From: trac at imagej.net (ImageJ)
Date: Thu, 05 Sep 2013 19:50:11 +0000
Subject: [ImageJ-devel] [ImageJ] #1553: Make it easier for non-core-IJ2
 developers to respond to tickets
In-Reply-To: <017.2879b6b5a3c5468e1ab729fe3fc3863b@imagej.net>
References: <017.2879b6b5a3c5468e1ab729fe3fc3863b@imagej.net>
Message-ID: <032.c9ff2ccbd7abce753ebe746737427085@imagej.net>

#1553: Make it easier for non-core-IJ2 developers to respond to tickets
--------------------------+----------------------------------
 Reporter:  dscho         |       Owner:  dscho
     Type:  defect        |      Status:  reviewing
 Priority:  major         |   Milestone:  imagej2-b8-analysis
Component:  Server Admin  |     Version:
 Severity:  serious       |  Resolution:
 Keywords:                |  Blocked By:
 Blocking:  1915          |
--------------------------+----------------------------------

Comment (by curtis):

 Well, the Fiji wiki already requires people to create an account. Is that
 something you want to move away from? I.e., do you want to support
 anonymous bug reports? I don't know of any projects that support that,
 regardless of the bug tracker used.

 Of course, people can send a mail to the mailing list, and one of the
 developers can file the bug. I think that's what works best for nearly
 every project.

 Or are you saying you will miss the "CC" functionality of Trac and
 BugZilla where you can put an email address of someone who doesn't have an
 account? If we decide we really want that, we could support it via a
 custom script on one of our servers which reacts to GitHub Issue changes.
 And I believe it would still be less complicated than a "custom solution
 based on procmail and the Python API."

-- 
Ticket URL: <http://trac.imagej.net/ticket/1553#comment:13>
ImageJ <http://trac.imagej.net>
ImageJ core development


From trac at imagej.net  Thu Sep  5 14:54:05 2013
From: trac at imagej.net (ImageJ)
Date: Thu, 05 Sep 2013 19:54:05 +0000
Subject: [ImageJ-devel] [ImageJ] #1553: Make it easier for non-core-IJ2
 developers to respond to tickets
In-Reply-To: <017.2879b6b5a3c5468e1ab729fe3fc3863b@imagej.net>
References: <017.2879b6b5a3c5468e1ab729fe3fc3863b@imagej.net>
Message-ID: <032.186b944041eeedbc6f04354be018a407@imagej.net>

#1553: Make it easier for non-core-IJ2 developers to respond to tickets
--------------------------+----------------------------------
 Reporter:  dscho         |       Owner:  dscho
     Type:  defect        |      Status:  reviewing
 Priority:  major         |   Milestone:  imagej2-b8-analysis
Component:  Server Admin  |     Version:
 Severity:  serious       |  Resolution:
 Keywords:                |  Blocked By:
 Blocking:  1915          |
--------------------------+----------------------------------

Comment (by curtis):

 Also, I don't see the "require a user to be logged in to comment" issue as
 unique to GitHub Issues. The same problem exists for the IJ2 Trac and the
 Fiji BugZilla currently. You must have an account to comment. I am OK with
 that compromise, given the many other sacrifices we would need to make to
 pursue any alternative.

-- 
Ticket URL: <http://trac.imagej.net/ticket/1553#comment:14>
ImageJ <http://trac.imagej.net>
ImageJ core development


From trac at imagej.net  Thu Sep  5 15:18:37 2013
From: trac at imagej.net (ImageJ)
Date: Thu, 05 Sep 2013 20:18:37 +0000
Subject: [ImageJ-devel] [ImageJ] #1553: Make it easier for non-core-IJ2
 developers to respond to tickets
In-Reply-To: <017.2879b6b5a3c5468e1ab729fe3fc3863b@imagej.net>
References: <017.2879b6b5a3c5468e1ab729fe3fc3863b@imagej.net>
Message-ID: <032.3aa8dad1952643516258027d8e3e8f7d@imagej.net>

#1553: Make it easier for non-core-IJ2 developers to respond to tickets
--------------------------+----------------------------------
 Reporter:  dscho         |       Owner:  dscho
     Type:  defect        |      Status:  reviewing
 Priority:  major         |   Milestone:  imagej2-b8-analysis
Component:  Server Admin  |     Version:
 Severity:  serious       |  Resolution:
 Keywords:                |  Blocked By:
 Blocking:  1915          |
--------------------------+----------------------------------

Comment (by dscho):

 My idea was to auto-register BugZilla 'accounts' (which are really the
 email addresses, and hence automatically unique, in contrast to GitHub's)
 upon receiving a mail.

 I see that dramatically more difficult with GitHub where you really have
 to go through their website to register an account, including the
 intimidation about source code control for non-programmers ;-)

-- 
Ticket URL: <http://trac.imagej.net/ticket/1553#comment:15>
ImageJ <http://trac.imagej.net>
ImageJ core development


From trac at imagej.net  Thu Sep  5 15:38:58 2013
From: trac at imagej.net (ImageJ)
Date: Thu, 05 Sep 2013 20:38:58 +0000
Subject: [ImageJ-devel] [ImageJ] #1553: Make it easier for non-core-IJ2
 developers to respond to tickets
In-Reply-To: <017.2879b6b5a3c5468e1ab729fe3fc3863b@imagej.net>
References: <017.2879b6b5a3c5468e1ab729fe3fc3863b@imagej.net>
Message-ID: <032.e29cd26c2e2a55aeb0c5d896567e63f3@imagej.net>

#1553: Make it easier for non-core-IJ2 developers to respond to tickets
--------------------------+----------------------------------
 Reporter:  dscho         |       Owner:  dscho
     Type:  defect        |      Status:  reviewing
 Priority:  major         |   Milestone:  imagej2-b8-analysis
Component:  Server Admin  |     Version:
 Severity:  serious       |  Resolution:
 Keywords:                |  Blocked By:
 Blocking:  1915          |
--------------------------+----------------------------------

Comment (by curtis):

 I understand the concern, but it sounds like too much work/time for us to
 accommodate. One option would be to simply register a single account like
 "ImageJ community" with GitHub and then pipe all emails we receive through
 that. Implementing a feature like that would make me uncomfortable though,
 since it would be a hacky workaround to the limitations of GitHub Issues.
 Unfortunately I don't have a better idea, but I am very reluctant to
 abandon GitHub Issues since it has myriad other benefits for those willing
 to register an account.

-- 
Ticket URL: <http://trac.imagej.net/ticket/1553#comment:16>
ImageJ <http://trac.imagej.net>
ImageJ core development


From trac at imagej.net  Mon Sep  9 09:54:58 2013
From: trac at imagej.net (ImageJ)
Date: Mon, 09 Sep 2013 14:54:58 +0000
Subject: [ImageJ-devel] [ImageJ] #1553: Make it easier for non-core-IJ2
 developers to respond to tickets
In-Reply-To: <017.2879b6b5a3c5468e1ab729fe3fc3863b@imagej.net>
References: <017.2879b6b5a3c5468e1ab729fe3fc3863b@imagej.net>
Message-ID: <032.4902f60a4830ada740a7f108512c36f4@imagej.net>

#1553: Make it easier for non-core-IJ2 developers to respond to tickets
--------------------------+----------------------------------
 Reporter:  dscho         |       Owner:  dscho
     Type:  defect        |      Status:  reviewing
 Priority:  major         |   Milestone:  imagej2-b8-analysis
Component:  Server Admin  |     Version:
 Severity:  serious       |  Resolution:
 Keywords:                |  Blocked By:
 Blocking:  1915          |
--------------------------+----------------------------------

Comment (by dscho):

 I think that the hacky workaround would also have one very nasty side
 effect: it would not notify the reporters of bugs whenever there was an
 update to their ticket.

 As to how much work it would take: I think I need to do this for
 http://fiji.sc/bugzilla/ anyway, so let's assess how much additional work
 it would be for Trac after that. Or just decide that Fiji's BugZilla is
 supposed to serve the user-visible side of ImageJ2, too. Something to mull
 over in the back of our minds for now, I guess.

-- 
Ticket URL: <http://trac.imagej.net/ticket/1553#comment:17>
ImageJ <http://trac.imagej.net>
ImageJ core development


From trac at imagej.net  Mon Sep  9 10:00:07 2013
From: trac at imagej.net (ImageJ)
Date: Mon, 09 Sep 2013 15:00:07 +0000
Subject: [ImageJ-devel] [ImageJ] #1553: Make it easier for non-core-IJ2
 developers to respond to tickets
In-Reply-To: <017.2879b6b5a3c5468e1ab729fe3fc3863b@imagej.net>
References: <017.2879b6b5a3c5468e1ab729fe3fc3863b@imagej.net>
Message-ID: <032.6c021f1207103ded05cd834abf70f9bd@imagej.net>

#1553: Make it easier for non-core-IJ2 developers to respond to tickets
--------------------------+----------------------------------
 Reporter:  dscho         |       Owner:  dscho
     Type:  defect        |      Status:  reviewing
 Priority:  major         |   Milestone:  imagej2-b8-analysis
Component:  Server Admin  |     Version:
 Severity:  serious       |  Resolution:
 Keywords:                |  Blocked By:
 Blocking:  1915          |
--------------------------+----------------------------------

Comment (by curtis):

 I agree that solving the issue tracker is not our top priority right now.
 However, I would like to address it by year's end. ImageJ2 has gone
 several years with a bug tracker that is not really usable for the
 community at large. That must end before we come out of beta.

 Fiji's bug tracker is indeed much more usable. The idea of making the Fiji
 BugZilla also be the user-facing ImageJ2 bug tracker is intriguing. But we
 should first answer the question: "Do we need separate user-facing and
 developer-facing issue trackers?" My answer leans toward "no" right now --
 most projects do not have such a separation, and the line between them
 becomes extremely blurry in many cases, making duplication (and hence
 disorganization) prevalent.

-- 
Ticket URL: <http://trac.imagej.net/ticket/1553#comment:18>
ImageJ <http://trac.imagej.net>
ImageJ core development


From pietzsch at mpi-cbg.de  Tue Sep 10 03:44:51 2013
From: pietzsch at mpi-cbg.de (Tobias Pietzsch)
Date: Tue, 10 Sep 2013 10:44:51 +0200
Subject: [ImageJ-devel] [ImgLib2] revised imglib2-ui package
Message-ID: <403B0A0E-6FE6-4908-8F5B-6B9A4055F3C7@mpi-cbg.de>

Hi all

I just merge the "imglib-ui-revised" branch to master.
This is a basically a rewrite of the imglib2-ui package, incorporating lessons learned from the BigDataViewer (https://github.com/tpietzsch/spimviewer).
imglib2-ui now supports adaptive multi-resolution, multi-threaded rendering which makes everything much much more interactive.
I put a lot of effort in documenting everything. A (slightly simplified) UML class diagram can be found in /ui/doc/

If you used imglib2-ui before, your code should continue working or require only minimal changes. For examples of how to use, have a look at the interactive examples (interactive.MandelbrotRealViewer2DExample etc). They all have been updated to use the new imglib2-ui. If you run into trouble updating your code, please let me know!

More advanced examples using imglib2-ui are BigDataViewer https://github.com/tpietzsch/spimviewer (although there is still too much code duplication there?) and Stephan Saalfelds imglib2-remote-viewer https://github.com/axtimwalde/imglib2-remote-viewer

best regards,
Tobias
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20130910/7aaa6ec1/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20130910/7aaa6ec1/attachment.pgp>

From pietzsch at mpi-cbg.de  Thu Sep 19 08:33:59 2013
From: pietzsch at mpi-cbg.de (Tobias Pietzsch)
Date: Thu, 19 Sep 2013 15:33:59 +0200
Subject: [ImageJ-devel] [ImgLib2] moved revised DoG detection to
	algorithms-core.
Message-ID: <D124FD5C-303D-4497-8131-7575A285C165@mpi-cbg.de>

Hi all,

I would like to put a revised version of the DoG detection implementation into imglib2-algorithms core.
I pushed it in a branch "dog" https://github.com/imagej/imglib/commits/dog.

I would have merged to master, but I'm having slight reservations because this requires the addition of two dependencies.
First a dependency on imglib2-meta, this is for convenience to use calibration of ImgPlus and could be possibly removed.
Second is a dependency on JAMA.

What is your opinion? Is it okay to add these dependencies? Or should I rather move this stuff to some other place? If so, where?

best regards,
Tobias

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20130919/a8af5e7f/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20130919/a8af5e7f/attachment.pgp>

From bdezonia at gmail.com  Thu Sep 19 09:52:06 2013
From: bdezonia at gmail.com (Barry DeZonia)
Date: Thu, 19 Sep 2013 09:52:06 -0500
Subject: [ImageJ-devel] [fiji-devel] [ImgLib2] moved revised DoG
	detection to algorithms-core.
In-Reply-To: <D124FD5C-303D-4497-8131-7575A285C165@mpi-cbg.de>
References: <D124FD5C-303D-4497-8131-7575A285C165@mpi-cbg.de>
Message-ID: <CAKcvfuQFzCNaAjy=KW33R0T8qqZd8-PUvJ-fs6iHKejSZFb+FA@mail.gmail.com>

Hi Tobi,

Just so you're aware I was modifying the calibration code in imglib2-meta
on the nonlinear-goodies branch which I was going to merge today but will
postpone to next week to allow Curtis time for review. Maybe you can merge
the branch into the working copy of your project and see how it will affect
your code. This might help you decide about the imglib2-meta dependency.


On Thu, Sep 19, 2013 at 8:33 AM, Tobias Pietzsch <pietzsch at mpi-cbg.de>wrote:

> Hi all,
>
> I would like to put a revised version of the DoG detection implementation
> into imglib2-algorithms core.
> I pushed it in a branch "dog" https://github.com/imagej/imglib/commits/dog
> .
>
> I would have merged to master, but I'm having slight reservations because
> this requires the addition of two dependencies.
> First a dependency on imglib2-meta, this is for convenience to use
> calibration of ImgPlus and could be possibly removed.
> Second is a dependency on JAMA.
>
> What is your opinion? Is it okay to add these dependencies? Or should I
> rather move this stuff to some other place? If so, where?
>
> best regards,
> Tobias
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20130919/944fe451/attachment.html>

From Johannes.Schindelin at gmx.de  Thu Sep 19 10:01:30 2013
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Thu, 19 Sep 2013 17:01:30 +0200 (CEST)
Subject: [ImageJ-devel] [ImgLib2] moved revised DoG detection to
 algorithms-core.
In-Reply-To: <D124FD5C-303D-4497-8131-7575A285C165@mpi-cbg.de>
References: <D124FD5C-303D-4497-8131-7575A285C165@mpi-cbg.de>
Message-ID: <alpine.DEB.1.00.1309191655320.1191@s15462909.onlinehome-server.info>

Hi Tobias,

On Thu, 19 Sep 2013, Tobias Pietzsch wrote:

> I would like to put a revised version of the DoG detection
> implementation into imglib2-algorithms core.
>
> I pushed it in a branch "dog" https://github.com/imagej/imglib/commits/dog.

IMHO https://github.com/imagej/imglib/compare/dog shows it better ;-)

> I would have merged to master, but I'm having slight reservations
> because this requires the addition of two dependencies.

Actually, I am happy to see that the reluctance to add dependencies has
waned a bit ;-)

> First a dependency on imglib2-meta, this is for convenience to use
> calibration of ImgPlus and could be possibly removed.

Note that imglib2-meta *will* depend on scijava-common soon, to avoid
wheel reinvention. That is not a big problem IMO because scijava-common is
developed very carefully, avoiding at high maintenance cost to introduce
backwards-incompatibilities or other possibly breaking changes. So I'm all
for it.

> Second is a dependency on JAMA.

Steffi identified a hard crash (IIRC) with some JVMs that we fixed in
Fiji. We used to call that "version 1.0.2" but that is wrong, of course.
We should probably call it "1.0.3-fiji1" or some such; question is whether
we want to care about those JVM crashes at all? After all, those JVMs have
been superseded by later JVMs that apparently do not expose those crashes.

> What is your opinion? Is it okay to add these dependencies? Or should I
> rather move this stuff to some other place? If so, where?

As I said, I like to avoid reinventing the wheel and add dependencies
instead. The whole point of using Maven is to manage dependencies, after
all.

So: thumbs up from my side!

Ciao,
Dscho


From john.chandler2011 at hotmail.com  Sat Sep 21 18:07:27 2013
From: john.chandler2011 at hotmail.com (John Chandler)
Date: Sat, 21 Sep 2013 16:07:27 -0700
Subject: [ImageJ-devel] Return "Save XY coordinates" in a script
Message-ID: <BLU170-W119E4494720FFE1D083B808FB230@phx.gbl>

Hi, I am analyzing an image using the Analyze>Gels and then doing Analyze>Tools>Save XY Coordinates. Running it from the GUI is fine. I am interested in writing a macro - when I record the macro, it records it as 
  run("Save XY   Coordinates...", "background=255
  save=");

Is there any way to return these values (x,y,pixel) into variables so that they can be processed from within the macro? 

Thanks, 
John.   		 	   		  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20130921/c16ecd55/attachment.html>

From joseph.falconer at lincolnuni.ac.nz  Sun Sep 22 00:30:44 2013
From: joseph.falconer at lincolnuni.ac.nz (Joe Falconer)
Date: Sun, 22 Sep 2013 17:30:44 +1200
Subject: [ImageJ-devel] ImageJ2 Headless Question
Message-ID: <BLU0-SMTP13364002A89657404B7DA42C02C0@phx.gbl>

Hi,

Hope I'm posting to the correct location.

I'm trying to do something that appears quite simple using ImageJ2 - read in a pgm file in headless mode and iterate over and analyse the pixel data in the image.

I've looked at the tutorials for ImageJ2 and I've tried the dataset example but I'm having some issues. I'm having Maven connector issues in Eclipse Kepler so I'm using the complete snapshot all jar and maybe this is the cause? This is my trace when running the dataset example :

WARN: Ignoring non-Maven build directory: C:\Documents and Settings\Joe\ImagingWorkspace\IJ2Test\bin
Exception in thread "main" java.lang.IllegalArgumentException: Invalid service: imagej.console.DefaultConsoleService

I've also tried the ImgLib2 examples on the fiji site referred to from the tutorials page but I've had trouble getting them to run without raising "No compatible service: io.scif.SCIFIOService" exception.

I'm guessing I have some build/dependency issues - any suggestions?

thanks for any help

Joe
 		 	   		  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20130922/c5b71d21/attachment.html>

From bdezonia at gmail.com  Sun Sep 22 08:54:55 2013
From: bdezonia at gmail.com (Barry DeZonia)
Date: Sun, 22 Sep 2013 08:54:55 -0500
Subject: [ImageJ-devel] ImageJ2 Headless Question
In-Reply-To: <BLU0-SMTP13364002A89657404B7DA42C02C0@phx.gbl>
References: <BLU0-SMTP13364002A89657404B7DA42C02C0@phx.gbl>
Message-ID: <CAKcvfuSOpvZMdsQs_BCLR9O1JtsZZXxVX-xmanHwKRHwHiPwyQ@mail.gmail.com>

Hi Joe,

It would be helpful to me if I had more information. How are you organizing
the files for the dataset example? What subdirectories are present in the
IJ2Test directory? In what directory did you place the jar?


On Sun, Sep 22, 2013 at 12:30 AM, Joe Falconer <
joseph.falconer at lincolnuni.ac.nz> wrote:

> Hi,
>
> Hope I'm posting to the correct location.
>
> I'm trying to do something that appears quite simple using ImageJ2 - read
> in a pgm file in headless mode and iterate over and analyse the pixel data
> in the image.
>
> I've looked at the tutorials for ImageJ2 and I've tried the dataset
> example but I'm having some issues. I'm having Maven connector issues in
> Eclipse Kepler so I'm using the complete snapshot all jar and maybe this is
> the cause? This is my trace when running the dataset example :
>
> WARN: Ignoring non-Maven build directory: C:\Documents and
> Settings\Joe\ImagingWorkspace\IJ2Test\bin
> Exception in thread "main" java.lang.IllegalArgumentException: Invalid
> service: imagej.console.DefaultConsoleService
>
> I've also tried the ImgLib2 examples on the fiji site referred to from the
> tutorials page but I've had trouble getting them to run without raising "No
> compatible service: io.scif.SCIFIOService" exception.
>
> I'm guessing I have some build/dependency issues - any suggestions?
>
> thanks for any help
>
> Joe
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20130922/0d13dc9f/attachment.html>

From Johannes.Schindelin at gmx.de  Sun Sep 22 09:00:58 2013
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Sun, 22 Sep 2013 16:00:58 +0200 (CEST)
Subject: [ImageJ-devel] ImageJ2 Headless Question
In-Reply-To: <BLU0-SMTP13364002A89657404B7DA42C02C0@phx.gbl>
References: <BLU0-SMTP13364002A89657404B7DA42C02C0@phx.gbl>
Message-ID: <alpine.DEB.1.00.1309221552380.1191@s15462909.onlinehome-server.info>

Hi Joe,

On Sun, 22 Sep 2013, Joe Falconer wrote:

> I'm having Maven connector issues in Eclipse Kepler so I'm using the
> complete snapshot all jar

I would like to encourage you to resolve the Maven connector issues with
Eclipse. It is known that Eclipse faces quite a couple of challenges with
dependency management, and the best solution *is* to use Maven.

> and maybe this is the cause?

Almost certainly:

> Exception in thread "main" java.lang.IllegalArgumentException: Invalid service: imagej.console.DefaultConsoleService

This is something we fixed recently, so at least in beta 7.3, it should be
gone.

> I've also tried the ImgLib2 examples on the fiji site referred to from
> the tutorials page but I've had trouble getting them to run without
> raising "No compatible service: io.scif.SCIFIOService" exception.

That suggests a version problem. SCIFIO is still developed heavily, so it
is essential to stay with then newest version of it (or at least with a
version that is compatible with the ImageJ2 version you are using).

Again, something that should be much easier with Maven because we maintain
a parent project consisting solely of the definition of the current
versions:

	https://github.com/scijava/scijava-common/blob/master/pom-scijava/pom.xml

By using an explicit version of this project (1.79 at the time of
writing), and by using the properties defined therein instead of explicit
versions of the dependencies known to pom-scijava, you make it very easy
to upgrade to the newest set of matching dependenciy versions: just
increase the version of the parent POM.

Ciao,
Johannes


From leek at broadinstitute.org  Thu Sep 26 15:57:05 2013
From: leek at broadinstitute.org (Lee Kamentsky)
Date: Thu, 26 Sep 2013 16:57:05 -0400
Subject: [ImageJ-devel] Deadlock: DefaultStatusService.showStatus calls
 EventService.publish / AbstractColorTool.drawIcon gets active dataset view
Message-ID: <CAHLFyjemO+EB+kP-G4XqU15FQTJ7jyzBgVLYJE=QnstGCzo7Yg@mail.gmail.com>

Hi all, I'm getting a deadly embrace that happens when the AWT event queue
thread tries to get a lock within DefaultDatasetView.getColor and when
DefaultStatusService.showStatus on a worker thread tries to publish a
synchronous request for status display after taking the
DefaultDatasetView's lock in DefaultDatasetView.rebuild. It happens
periodically, but it's timing-dependent, so not so reproducible.

The bug is somewhat debatable. Possible candidates: It's a little drastic
for DefaultDatasetView.getColor to synchronize on the view itself. Maybe
some proxy for the color system could have a synchronizing object. The
other candidate is DefaultEventService.showStatus which could use
EventService.publishLater - I don't think there's much need for status
publishers to wait around for the status to show on the screen.

The two stack traces:
Thread [AWT-EventQueue-0] (Suspended)
DefaultDatasetView.getColor(ChannelCollection) line: 261 Synchronized
method on DefaultDatasetView
FgColorTool(AbstractColorTool).drawIcon() line: 175
FgColorTool(AbstractColorTool).onEvent(DisplayActivatedEvent) line: 184
NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not
available [native method]
NativeMethodAccessorImpl.invoke(Object, Object[]) line: 39
DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25
Method.invoke(Object, Object...) line: 597
DefaultEventService$ProxySubscriber<E>.onEvent(E) line: 282
DefaultEventService$ProxySubscriber<E>.onEvent(Object) line: 1
DefaultEventBus(ThreadSafeEventService).publish(Object, String, Object,
List, List, StackTraceElement[]) line: 971
DefaultEventBus.access$1(DefaultEventBus, Object, String, Object, List,
List, StackTraceElement[]) line: 1
DefaultEventBus$1.run() line: 201
DefaultThreadService.invoke(Runnable) line: 91
DefaultEventBus.publishNow(Object, String, Object, List, List,
StackTraceElement[]) line: 195
DefaultEventBus.publishNow(Object) line: 86
DefaultEventService.publish(E) line: 95
DefaultDisplayService.setActiveDisplay(Display<?>) line: 129
DefaultDisplayService.onEvent(WinActivatedEvent) line: 247
NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not
available [native method]
NativeMethodAccessorImpl.invoke(Object, Object[]) line: 39
DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25
Method.invoke(Object, Object...) line: 597
DefaultEventService$ProxySubscriber<E>.onEvent(E) line: 282
DefaultEventService$ProxySubscriber<E>.onEvent(Object) line: 1
DefaultEventBus(ThreadSafeEventService).publish(Object, String, Object,
List, List, StackTraceElement[]) line: 971
DefaultEventBus.access$1(DefaultEventBus, Object, String, Object, List,
List, StackTraceElement[]) line: 1
DefaultEventBus$1.run() line: 201
DefaultThreadService.invoke(Runnable) line: 91
DefaultEventBus.publishNow(Object, String, Object, List, List,
StackTraceElement[]) line: 195
DefaultEventBus.publishNow(Object) line: 86
DefaultEventService.publish(E) line: 95
AWTWindowEventDispatcher.windowActivated(WindowEvent) line: 94
SwingDisplayWindow(Window).processWindowEvent(WindowEvent) line: 1877
SwingDisplayWindow(JFrame).processWindowEvent(WindowEvent) line: 274
SwingDisplayWindow(Window).processEvent(AWTEvent) line: 1823
SwingDisplayWindow(Component).dispatchEventImpl(AWTEvent) line: 4630
SwingDisplayWindow(Container).dispatchEventImpl(AWTEvent) line: 2099
SwingDisplayWindow(Window).dispatchEventImpl(AWTEvent) line: 2478
SwingDisplayWindow(Component).dispatchEvent(AWTEvent) line: 4460
DefaultKeyboardFocusManager(KeyboardFocusManager).redispatchEvent(Component,
AWTEvent) line: 1850
DefaultKeyboardFocusManager.typeAheadAssertions(Component, AWTEvent) line:
910
DefaultKeyboardFocusManager.dispatchEvent(AWTEvent) line: 409
SwingDisplayWindow(Component).dispatchEventImpl(AWTEvent) line: 4502
SwingDisplayWindow(Container).dispatchEventImpl(AWTEvent) line: 2099
SwingDisplayWindow(Window).dispatchEventImpl(AWTEvent) line: 2478
SwingDisplayWindow(Component).dispatchEvent(AWTEvent) line: 4460
EventQueue.dispatchEvent(AWTEvent) line: 599
DefaultKeyboardFocusManager$DefaultKeyboardFocusManagerSentEvent(SentEvent).dispatch()
line: 55
DefaultKeyboardFocusManager$DefaultKeyboardFocusManagerSentEvent.dispatch()
line: 183
DefaultKeyboardFocusManager.sendMessage(Component, AWTEvent) line: 210
DefaultKeyboardFocusManager.dispatchEvent(AWTEvent) line: 286
SwingDisplayWindow(Component).dispatchEventImpl(AWTEvent) line: 4502
SwingDisplayWindow(Container).dispatchEventImpl(AWTEvent) line: 2099
SwingDisplayWindow(Window).dispatchEventImpl(AWTEvent) line: 2478
SwingDisplayWindow(Component).dispatchEvent(AWTEvent) line: 4460
EventQueue.dispatchEvent(AWTEvent) line: 599
SequencedEvent.dispatch() line: 101
EventQueue.dispatchEvent(AWTEvent) line: 597
EventDispatchThread.pumpOneEventForFilters(int) line: 269
EventDispatchThread.pumpEventsForFilter(int, Conditional, EventFilter)
line: 184
EventDispatchThread.pumpEventsForHierarchy(int, Conditional, Component)
line: 174
EventDispatchThread.pumpEvents(int, Conditional) line: 169
EventDispatchThread.pumpEvents(Conditional) line: 161
EventDispatchThread.run() line: 122

Thread [SciJava-4b2922f6-Thread-27] (Suspended)
Object.wait(long) line: not available [native method]
EventQueue$1AWTInvocationLock(Object).wait() line: 485 Waiting for AWT
event thread to read invocation request.
EventQueue.invokeAndWait(Runnable) line: 993
DefaultThreadService.invoke(Runnable) line: 95
DefaultEventBus.publishNow(Object, String, Object, List, List,
StackTraceElement[]) line: 195
DefaultEventBus.publishNow(Object) line: 86
DefaultEventService.publish(E) line: 95
DefaultStatusService.showStatus(int, int, String) line: 77
DefaultMinMaxMethod<T>.report() line: 296
DefaultMinMaxMethod<T>.process() line: 155
DefaultAutoscaleMethod<T>.getRange(IterableInterval<T>) line: 70
DefaultAutoscaleService.getDefaultIntervalRange(IterableInterval<RealType<?>>)
line: 97
DefaultAutoscaleService.getDefaultRandomAccessRange(RandomAccessibleInterval<RealType<?>>)
line: 105
DefaultDatasetView.autoscale(int) line: 176
DefaultDatasetView.initializeView(boolean) line: 499
DefaultDatasetView.rebuild() line: 383 Takes the DefaultDatasetView lock.
DefaultImageDisplay.rebuild() line: 140
DefaultImageDisplay.display(Object) line: 273
DefaultOverlayService.addOverlays(ImageDisplay, List<Overlay>) line: 148
TurboRegRegister.run() line: 144
CommandModule.run() line: 196
ModuleRunner.run() line: 168
ModuleRunner.call() line: 129
ModuleRunner.call() line: 1
FutureTask$Sync.innerRun() line: 303
FutureTask<V>.run() line: 138
ThreadPoolExecutor$Worker.runTask(Runnable) line: 886
ThreadPoolExecutor$Worker.run() line: 908
Thread.run() line: 662
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20130926/6078a645/attachment.html>

From bdezonia at gmail.com  Thu Sep 26 18:53:12 2013
From: bdezonia at gmail.com (Barry DeZonia)
Date: Thu, 26 Sep 2013 18:53:12 -0500
Subject: [ImageJ-devel] Deadlock: DefaultStatusService.showStatus calls
 EventService.publish / AbstractColorTool.drawIcon gets active dataset view
In-Reply-To: <CAHLFyjemO+EB+kP-G4XqU15FQTJ7jyzBgVLYJE=QnstGCzo7Yg@mail.gmail.com>
References: <CAHLFyjemO+EB+kP-G4XqU15FQTJ7jyzBgVLYJE=QnstGCzo7Yg@mail.gmail.com>
Message-ID: <CAKcvfuQXKTCZc+rJbDVKfKMS+MC2TRN7fOQNYHRpYSpUQYh_Ng@mail.gmail.com>

Hi Lee,

I added the synchronized keyword yesterday to fix a bug. We can undo that
change. I can work around the problem in another fashion if necessary.


On Thu, Sep 26, 2013 at 3:57 PM, Lee Kamentsky <leek at broadinstitute.org>wrote:

> Hi all, I'm getting a deadly embrace that happens when the AWT event queue
> thread tries to get a lock within DefaultDatasetView.getColor and when
> DefaultStatusService.showStatus on a worker thread tries to publish a
> synchronous request for status display after taking the
> DefaultDatasetView's lock in DefaultDatasetView.rebuild. It happens
> periodically, but it's timing-dependent, so not so reproducible.
>
> The bug is somewhat debatable. Possible candidates: It's a little drastic
> for DefaultDatasetView.getColor to synchronize on the view itself. Maybe
> some proxy for the color system could have a synchronizing object. The
> other candidate is DefaultEventService.showStatus which could use
> EventService.publishLater - I don't think there's much need for status
> publishers to wait around for the status to show on the screen.
>
> The two stack traces:
> Thread [AWT-EventQueue-0] (Suspended)
> DefaultDatasetView.getColor(ChannelCollection) line: 261 Synchronized
> method on DefaultDatasetView
>  FgColorTool(AbstractColorTool).drawIcon() line: 175
> FgColorTool(AbstractColorTool).onEvent(DisplayActivatedEvent) line: 184
>  NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not
> available [native method]
> NativeMethodAccessorImpl.invoke(Object, Object[]) line: 39
>  DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25
> Method.invoke(Object, Object...) line: 597
>  DefaultEventService$ProxySubscriber<E>.onEvent(E) line: 282
> DefaultEventService$ProxySubscriber<E>.onEvent(Object) line: 1
>  DefaultEventBus(ThreadSafeEventService).publish(Object, String, Object,
> List, List, StackTraceElement[]) line: 971
>  DefaultEventBus.access$1(DefaultEventBus, Object, String, Object, List,
> List, StackTraceElement[]) line: 1
> DefaultEventBus$1.run() line: 201
>  DefaultThreadService.invoke(Runnable) line: 91
> DefaultEventBus.publishNow(Object, String, Object, List, List,
> StackTraceElement[]) line: 195
>  DefaultEventBus.publishNow(Object) line: 86
> DefaultEventService.publish(E) line: 95
>  DefaultDisplayService.setActiveDisplay(Display<?>) line: 129
> DefaultDisplayService.onEvent(WinActivatedEvent) line: 247
>  NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not
> available [native method]
> NativeMethodAccessorImpl.invoke(Object, Object[]) line: 39
>  DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25
> Method.invoke(Object, Object...) line: 597
>  DefaultEventService$ProxySubscriber<E>.onEvent(E) line: 282
> DefaultEventService$ProxySubscriber<E>.onEvent(Object) line: 1
>  DefaultEventBus(ThreadSafeEventService).publish(Object, String, Object,
> List, List, StackTraceElement[]) line: 971
>  DefaultEventBus.access$1(DefaultEventBus, Object, String, Object, List,
> List, StackTraceElement[]) line: 1
> DefaultEventBus$1.run() line: 201
>  DefaultThreadService.invoke(Runnable) line: 91
> DefaultEventBus.publishNow(Object, String, Object, List, List,
> StackTraceElement[]) line: 195
>  DefaultEventBus.publishNow(Object) line: 86
> DefaultEventService.publish(E) line: 95
>  AWTWindowEventDispatcher.windowActivated(WindowEvent) line: 94
> SwingDisplayWindow(Window).processWindowEvent(WindowEvent) line: 1877
>  SwingDisplayWindow(JFrame).processWindowEvent(WindowEvent) line: 274
> SwingDisplayWindow(Window).processEvent(AWTEvent) line: 1823
>  SwingDisplayWindow(Component).dispatchEventImpl(AWTEvent) line: 4630
> SwingDisplayWindow(Container).dispatchEventImpl(AWTEvent) line: 2099
>  SwingDisplayWindow(Window).dispatchEventImpl(AWTEvent) line: 2478
> SwingDisplayWindow(Component).dispatchEvent(AWTEvent) line: 4460
>  DefaultKeyboardFocusManager(KeyboardFocusManager).redispatchEvent(Component,
> AWTEvent) line: 1850
> DefaultKeyboardFocusManager.typeAheadAssertions(Component, AWTEvent) line:
> 910
>  DefaultKeyboardFocusManager.dispatchEvent(AWTEvent) line: 409
> SwingDisplayWindow(Component).dispatchEventImpl(AWTEvent) line: 4502
>  SwingDisplayWindow(Container).dispatchEventImpl(AWTEvent) line: 2099
> SwingDisplayWindow(Window).dispatchEventImpl(AWTEvent) line: 2478
>  SwingDisplayWindow(Component).dispatchEvent(AWTEvent) line: 4460
> EventQueue.dispatchEvent(AWTEvent) line: 599
>  DefaultKeyboardFocusManager$DefaultKeyboardFocusManagerSentEvent(SentEvent).dispatch()
> line: 55
> DefaultKeyboardFocusManager$DefaultKeyboardFocusManagerSentEvent.dispatch()
> line: 183
>  DefaultKeyboardFocusManager.sendMessage(Component, AWTEvent) line: 210
> DefaultKeyboardFocusManager.dispatchEvent(AWTEvent) line: 286
>  SwingDisplayWindow(Component).dispatchEventImpl(AWTEvent) line: 4502
> SwingDisplayWindow(Container).dispatchEventImpl(AWTEvent) line: 2099
>  SwingDisplayWindow(Window).dispatchEventImpl(AWTEvent) line: 2478
> SwingDisplayWindow(Component).dispatchEvent(AWTEvent) line: 4460
>  EventQueue.dispatchEvent(AWTEvent) line: 599
> SequencedEvent.dispatch() line: 101
>  EventQueue.dispatchEvent(AWTEvent) line: 597
> EventDispatchThread.pumpOneEventForFilters(int) line: 269
>  EventDispatchThread.pumpEventsForFilter(int, Conditional, EventFilter)
> line: 184
> EventDispatchThread.pumpEventsForHierarchy(int, Conditional, Component)
> line: 174
>  EventDispatchThread.pumpEvents(int, Conditional) line: 169
> EventDispatchThread.pumpEvents(Conditional) line: 161
>  EventDispatchThread.run() line: 122
>
> Thread [SciJava-4b2922f6-Thread-27] (Suspended)
>  Object.wait(long) line: not available [native method]
> EventQueue$1AWTInvocationLock(Object).wait() line: 485 Waiting for AWT
> event thread to read invocation request.
>  EventQueue.invokeAndWait(Runnable) line: 993
> DefaultThreadService.invoke(Runnable) line: 95
>  DefaultEventBus.publishNow(Object, String, Object, List, List,
> StackTraceElement[]) line: 195
> DefaultEventBus.publishNow(Object) line: 86
>  DefaultEventService.publish(E) line: 95
> DefaultStatusService.showStatus(int, int, String) line: 77
>  DefaultMinMaxMethod<T>.report() line: 296
> DefaultMinMaxMethod<T>.process() line: 155
>  DefaultAutoscaleMethod<T>.getRange(IterableInterval<T>) line: 70
> DefaultAutoscaleService.getDefaultIntervalRange(IterableInterval<RealType<?>>)
> line: 97
>  DefaultAutoscaleService.getDefaultRandomAccessRange(RandomAccessibleInterval<RealType<?>>)
> line: 105
>  DefaultDatasetView.autoscale(int) line: 176
> DefaultDatasetView.initializeView(boolean) line: 499
>  DefaultDatasetView.rebuild() line: 383 Takes the DefaultDatasetView lock.
> DefaultImageDisplay.rebuild() line: 140
>  DefaultImageDisplay.display(Object) line: 273
> DefaultOverlayService.addOverlays(ImageDisplay, List<Overlay>) line: 148
>  TurboRegRegister.run() line: 144
> CommandModule.run() line: 196
>  ModuleRunner.run() line: 168
> ModuleRunner.call() line: 129
>  ModuleRunner.call() line: 1
> FutureTask$Sync.innerRun() line: 303
>  FutureTask<V>.run() line: 138
> ThreadPoolExecutor$Worker.runTask(Runnable) line: 886
>  ThreadPoolExecutor$Worker.run() line: 908
> Thread.run() line: 662
>
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20130926/5eec5cac/attachment-0001.html>

From leek at broadinstitute.org  Fri Sep 27 06:54:00 2013
From: leek at broadinstitute.org (Lee Kamentsky)
Date: Fri, 27 Sep 2013 07:54:00 -0400
Subject: [ImageJ-devel] Deadlock: DefaultStatusService.showStatus calls
 EventService.publish / AbstractColorTool.drawIcon gets active dataset view
In-Reply-To: <CAKcvfuQXKTCZc+rJbDVKfKMS+MC2TRN7fOQNYHRpYSpUQYh_Ng@mail.gmail.com>
References: <CAHLFyjemO+EB+kP-G4XqU15FQTJ7jyzBgVLYJE=QnstGCzo7Yg@mail.gmail.com>
	<CAKcvfuQXKTCZc+rJbDVKfKMS+MC2TRN7fOQNYHRpYSpUQYh_Ng@mail.gmail.com>
Message-ID: <CAHLFyjf9P4zviAD8A0zbEk2DJPVVExG+HU4m12x0w07dTb2DQg@mail.gmail.com>

Thanks Barry, the email was a little rushed - finished it while going out
the door. What do you think about sending the status messages
asynchronously? It looks to me like the AWT event processing will display
them in the order received, so that makes sure that a "Finished" message
will be seen after a "% complete" message. Status reporting is such a
common thing - it'd be a shame for all the worker threads to stall because
a user was using ImageJ to watch a movie of a cat falling off a TV while
their batch job was running.

I think I'll submit a patch to DefaultStatusService for asynch reporting
and maybe Curtis or you could look it over and accept it. If you reject, NP.

--Lee


On Thu, Sep 26, 2013 at 7:53 PM, Barry DeZonia <bdezonia at gmail.com> wrote:

> Hi Lee,
>
> I added the synchronized keyword yesterday to fix a bug. We can undo that
> change. I can work around the problem in another fashion if necessary.
>
>
> On Thu, Sep 26, 2013 at 3:57 PM, Lee Kamentsky <leek at broadinstitute.org>wrote:
>
>> Hi all, I'm getting a deadly embrace that happens when the AWT event
>> queue thread tries to get a lock within DefaultDatasetView.getColor and
>> when DefaultStatusService.showStatus on a worker thread tries to publish a
>> synchronous request for status display after taking the
>> DefaultDatasetView's lock in DefaultDatasetView.rebuild. It happens
>> periodically, but it's timing-dependent, so not so reproducible.
>>
>> The bug is somewhat debatable. Possible candidates: It's a little drastic
>> for DefaultDatasetView.getColor to synchronize on the view itself. Maybe
>> some proxy for the color system could have a synchronizing object. The
>> other candidate is DefaultEventService.showStatus which could use
>> EventService.publishLater - I don't think there's much need for status
>> publishers to wait around for the status to show on the screen.
>>
>> The two stack traces:
>> Thread [AWT-EventQueue-0] (Suspended)
>> DefaultDatasetView.getColor(ChannelCollection) line: 261 Synchronized
>> method on DefaultDatasetView
>>  FgColorTool(AbstractColorTool).drawIcon() line: 175
>> FgColorTool(AbstractColorTool).onEvent(DisplayActivatedEvent) line: 184
>>  NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not
>> available [native method]
>> NativeMethodAccessorImpl.invoke(Object, Object[]) line: 39
>>  DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25
>> Method.invoke(Object, Object...) line: 597
>>  DefaultEventService$ProxySubscriber<E>.onEvent(E) line: 282
>> DefaultEventService$ProxySubscriber<E>.onEvent(Object) line: 1
>>  DefaultEventBus(ThreadSafeEventService).publish(Object, String, Object,
>> List, List, StackTraceElement[]) line: 971
>>  DefaultEventBus.access$1(DefaultEventBus, Object, String, Object, List,
>> List, StackTraceElement[]) line: 1
>> DefaultEventBus$1.run() line: 201
>>  DefaultThreadService.invoke(Runnable) line: 91
>> DefaultEventBus.publishNow(Object, String, Object, List, List,
>> StackTraceElement[]) line: 195
>>  DefaultEventBus.publishNow(Object) line: 86
>> DefaultEventService.publish(E) line: 95
>>  DefaultDisplayService.setActiveDisplay(Display<?>) line: 129
>> DefaultDisplayService.onEvent(WinActivatedEvent) line: 247
>>  NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not
>> available [native method]
>> NativeMethodAccessorImpl.invoke(Object, Object[]) line: 39
>>  DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25
>> Method.invoke(Object, Object...) line: 597
>>  DefaultEventService$ProxySubscriber<E>.onEvent(E) line: 282
>> DefaultEventService$ProxySubscriber<E>.onEvent(Object) line: 1
>>  DefaultEventBus(ThreadSafeEventService).publish(Object, String, Object,
>> List, List, StackTraceElement[]) line: 971
>>  DefaultEventBus.access$1(DefaultEventBus, Object, String, Object, List,
>> List, StackTraceElement[]) line: 1
>> DefaultEventBus$1.run() line: 201
>>  DefaultThreadService.invoke(Runnable) line: 91
>> DefaultEventBus.publishNow(Object, String, Object, List, List,
>> StackTraceElement[]) line: 195
>>  DefaultEventBus.publishNow(Object) line: 86
>> DefaultEventService.publish(E) line: 95
>>  AWTWindowEventDispatcher.windowActivated(WindowEvent) line: 94
>> SwingDisplayWindow(Window).processWindowEvent(WindowEvent) line: 1877
>>  SwingDisplayWindow(JFrame).processWindowEvent(WindowEvent) line: 274
>> SwingDisplayWindow(Window).processEvent(AWTEvent) line: 1823
>>  SwingDisplayWindow(Component).dispatchEventImpl(AWTEvent) line: 4630
>> SwingDisplayWindow(Container).dispatchEventImpl(AWTEvent) line: 2099
>>  SwingDisplayWindow(Window).dispatchEventImpl(AWTEvent) line: 2478
>> SwingDisplayWindow(Component).dispatchEvent(AWTEvent) line: 4460
>>  DefaultKeyboardFocusManager(KeyboardFocusManager).redispatchEvent(Component,
>> AWTEvent) line: 1850
>> DefaultKeyboardFocusManager.typeAheadAssertions(Component, AWTEvent)
>> line: 910
>>  DefaultKeyboardFocusManager.dispatchEvent(AWTEvent) line: 409
>> SwingDisplayWindow(Component).dispatchEventImpl(AWTEvent) line: 4502
>>  SwingDisplayWindow(Container).dispatchEventImpl(AWTEvent) line: 2099
>> SwingDisplayWindow(Window).dispatchEventImpl(AWTEvent) line: 2478
>>  SwingDisplayWindow(Component).dispatchEvent(AWTEvent) line: 4460
>> EventQueue.dispatchEvent(AWTEvent) line: 599
>>  DefaultKeyboardFocusManager$DefaultKeyboardFocusManagerSentEvent(SentEvent).dispatch()
>> line: 55
>> DefaultKeyboardFocusManager$DefaultKeyboardFocusManagerSentEvent.dispatch()
>> line: 183
>>  DefaultKeyboardFocusManager.sendMessage(Component, AWTEvent) line: 210
>> DefaultKeyboardFocusManager.dispatchEvent(AWTEvent) line: 286
>>  SwingDisplayWindow(Component).dispatchEventImpl(AWTEvent) line: 4502
>> SwingDisplayWindow(Container).dispatchEventImpl(AWTEvent) line: 2099
>>  SwingDisplayWindow(Window).dispatchEventImpl(AWTEvent) line: 2478
>> SwingDisplayWindow(Component).dispatchEvent(AWTEvent) line: 4460
>>  EventQueue.dispatchEvent(AWTEvent) line: 599
>> SequencedEvent.dispatch() line: 101
>>  EventQueue.dispatchEvent(AWTEvent) line: 597
>> EventDispatchThread.pumpOneEventForFilters(int) line: 269
>>  EventDispatchThread.pumpEventsForFilter(int, Conditional, EventFilter)
>> line: 184
>> EventDispatchThread.pumpEventsForHierarchy(int, Conditional, Component)
>> line: 174
>>  EventDispatchThread.pumpEvents(int, Conditional) line: 169
>> EventDispatchThread.pumpEvents(Conditional) line: 161
>>  EventDispatchThread.run() line: 122
>>
>> Thread [SciJava-4b2922f6-Thread-27] (Suspended)
>>  Object.wait(long) line: not available [native method]
>> EventQueue$1AWTInvocationLock(Object).wait() line: 485 Waiting for AWT
>> event thread to read invocation request.
>>  EventQueue.invokeAndWait(Runnable) line: 993
>> DefaultThreadService.invoke(Runnable) line: 95
>>  DefaultEventBus.publishNow(Object, String, Object, List, List,
>> StackTraceElement[]) line: 195
>> DefaultEventBus.publishNow(Object) line: 86
>>  DefaultEventService.publish(E) line: 95
>> DefaultStatusService.showStatus(int, int, String) line: 77
>>  DefaultMinMaxMethod<T>.report() line: 296
>> DefaultMinMaxMethod<T>.process() line: 155
>>  DefaultAutoscaleMethod<T>.getRange(IterableInterval<T>) line: 70
>> DefaultAutoscaleService.getDefaultIntervalRange(IterableInterval<RealType<?>>)
>> line: 97
>>  DefaultAutoscaleService.getDefaultRandomAccessRange(RandomAccessibleInterval<RealType<?>>)
>> line: 105
>>  DefaultDatasetView.autoscale(int) line: 176
>> DefaultDatasetView.initializeView(boolean) line: 499
>>  DefaultDatasetView.rebuild() line: 383 Takes the DefaultDatasetView
>> lock.
>> DefaultImageDisplay.rebuild() line: 140
>>  DefaultImageDisplay.display(Object) line: 273
>> DefaultOverlayService.addOverlays(ImageDisplay, List<Overlay>) line: 148
>>  TurboRegRegister.run() line: 144
>> CommandModule.run() line: 196
>>  ModuleRunner.run() line: 168
>> ModuleRunner.call() line: 129
>>  ModuleRunner.call() line: 1
>> FutureTask$Sync.innerRun() line: 303
>>  FutureTask<V>.run() line: 138
>> ThreadPoolExecutor$Worker.runTask(Runnable) line: 886
>>  ThreadPoolExecutor$Worker.run() line: 908
>> Thread.run() line: 662
>>
>>
>> _______________________________________________
>> ImageJ-devel mailing list
>> ImageJ-devel at imagej.net
>> http://imagej.net/mailman/listinfo/imagej-devel
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20130927/70c6f92e/attachment.html>

From bdezonia at gmail.com  Mon Sep 30 14:32:37 2013
From: bdezonia at gmail.com (Barry DeZonia)
Date: Mon, 30 Sep 2013 14:32:37 -0500
Subject: [ImageJ-devel] Deadlock: DefaultStatusService.showStatus calls
 EventService.publish / AbstractColorTool.drawIcon gets active dataset view
In-Reply-To: <CAHLFyjf9P4zviAD8A0zbEk2DJPVVExG+HU4m12x0w07dTb2DQg@mail.gmail.com>
References: <CAHLFyjemO+EB+kP-G4XqU15FQTJ7jyzBgVLYJE=QnstGCzo7Yg@mail.gmail.com>
	<CAKcvfuQXKTCZc+rJbDVKfKMS+MC2TRN7fOQNYHRpYSpUQYh_Ng@mail.gmail.com>
	<CAHLFyjf9P4zviAD8A0zbEk2DJPVVExG+HU4m12x0w07dTb2DQg@mail.gmail.com>
Message-ID: <CAKcvfuS7XPs3=SbqerF7oqdyx_eC125M3wv9RQQ-Vg-dsvoNDw@mail.gmail.com>

A proposed fix would be good Lee. I'd like to test the async status update
code for responsiveness (i.e. when opening a large image let's say). Let me
know when your fix is in place. Thanks.


On Fri, Sep 27, 2013 at 6:54 AM, Lee Kamentsky <leek at broadinstitute.org>wrote:

> Thanks Barry, the email was a little rushed - finished it while going out
> the door. What do you think about sending the status messages
> asynchronously? It looks to me like the AWT event processing will display
> them in the order received, so that makes sure that a "Finished" message
> will be seen after a "% complete" message. Status reporting is such a
> common thing - it'd be a shame for all the worker threads to stall because
> a user was using ImageJ to watch a movie of a cat falling off a TV while
> their batch job was running.
>
> I think I'll submit a patch to DefaultStatusService for asynch reporting
> and maybe Curtis or you could look it over and accept it. If you reject, NP.
>
> --Lee
>
>
> On Thu, Sep 26, 2013 at 7:53 PM, Barry DeZonia <bdezonia at gmail.com> wrote:
>
>> Hi Lee,
>>
>> I added the synchronized keyword yesterday to fix a bug. We can undo that
>> change. I can work around the problem in another fashion if necessary.
>>
>>
>> On Thu, Sep 26, 2013 at 3:57 PM, Lee Kamentsky <leek at broadinstitute.org>wrote:
>>
>>> Hi all, I'm getting a deadly embrace that happens when the AWT event
>>> queue thread tries to get a lock within DefaultDatasetView.getColor and
>>> when DefaultStatusService.showStatus on a worker thread tries to publish a
>>> synchronous request for status display after taking the
>>> DefaultDatasetView's lock in DefaultDatasetView.rebuild. It happens
>>> periodically, but it's timing-dependent, so not so reproducible.
>>>
>>> The bug is somewhat debatable. Possible candidates: It's a little
>>> drastic for DefaultDatasetView.getColor to synchronize on the view itself.
>>> Maybe some proxy for the color system could have a synchronizing object.
>>> The other candidate is DefaultEventService.showStatus which could use
>>> EventService.publishLater - I don't think there's much need for status
>>> publishers to wait around for the status to show on the screen.
>>>
>>> The two stack traces:
>>> Thread [AWT-EventQueue-0] (Suspended)
>>> DefaultDatasetView.getColor(ChannelCollection) line: 261 Synchronized
>>> method on DefaultDatasetView
>>>  FgColorTool(AbstractColorTool).drawIcon() line: 175
>>> FgColorTool(AbstractColorTool).onEvent(DisplayActivatedEvent) line: 184
>>>  NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not
>>> available [native method]
>>> NativeMethodAccessorImpl.invoke(Object, Object[]) line: 39
>>>  DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25
>>> Method.invoke(Object, Object...) line: 597
>>>  DefaultEventService$ProxySubscriber<E>.onEvent(E) line: 282
>>> DefaultEventService$ProxySubscriber<E>.onEvent(Object) line: 1
>>>  DefaultEventBus(ThreadSafeEventService).publish(Object, String,
>>> Object, List, List, StackTraceElement[]) line: 971
>>>  DefaultEventBus.access$1(DefaultEventBus, Object, String, Object,
>>> List, List, StackTraceElement[]) line: 1
>>> DefaultEventBus$1.run() line: 201
>>>  DefaultThreadService.invoke(Runnable) line: 91
>>> DefaultEventBus.publishNow(Object, String, Object, List, List,
>>> StackTraceElement[]) line: 195
>>>  DefaultEventBus.publishNow(Object) line: 86
>>> DefaultEventService.publish(E) line: 95
>>>  DefaultDisplayService.setActiveDisplay(Display<?>) line: 129
>>> DefaultDisplayService.onEvent(WinActivatedEvent) line: 247
>>>  NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not
>>> available [native method]
>>> NativeMethodAccessorImpl.invoke(Object, Object[]) line: 39
>>>  DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25
>>> Method.invoke(Object, Object...) line: 597
>>>  DefaultEventService$ProxySubscriber<E>.onEvent(E) line: 282
>>> DefaultEventService$ProxySubscriber<E>.onEvent(Object) line: 1
>>>  DefaultEventBus(ThreadSafeEventService).publish(Object, String,
>>> Object, List, List, StackTraceElement[]) line: 971
>>>  DefaultEventBus.access$1(DefaultEventBus, Object, String, Object,
>>> List, List, StackTraceElement[]) line: 1
>>> DefaultEventBus$1.run() line: 201
>>>  DefaultThreadService.invoke(Runnable) line: 91
>>> DefaultEventBus.publishNow(Object, String, Object, List, List,
>>> StackTraceElement[]) line: 195
>>>  DefaultEventBus.publishNow(Object) line: 86
>>> DefaultEventService.publish(E) line: 95
>>>  AWTWindowEventDispatcher.windowActivated(WindowEvent) line: 94
>>> SwingDisplayWindow(Window).processWindowEvent(WindowEvent) line: 1877
>>>  SwingDisplayWindow(JFrame).processWindowEvent(WindowEvent) line: 274
>>> SwingDisplayWindow(Window).processEvent(AWTEvent) line: 1823
>>>  SwingDisplayWindow(Component).dispatchEventImpl(AWTEvent) line: 4630
>>> SwingDisplayWindow(Container).dispatchEventImpl(AWTEvent) line: 2099
>>>  SwingDisplayWindow(Window).dispatchEventImpl(AWTEvent) line: 2478
>>> SwingDisplayWindow(Component).dispatchEvent(AWTEvent) line: 4460
>>>  DefaultKeyboardFocusManager(KeyboardFocusManager).redispatchEvent(Component,
>>> AWTEvent) line: 1850
>>> DefaultKeyboardFocusManager.typeAheadAssertions(Component, AWTEvent)
>>> line: 910
>>>  DefaultKeyboardFocusManager.dispatchEvent(AWTEvent) line: 409
>>> SwingDisplayWindow(Component).dispatchEventImpl(AWTEvent) line: 4502
>>>  SwingDisplayWindow(Container).dispatchEventImpl(AWTEvent) line: 2099
>>> SwingDisplayWindow(Window).dispatchEventImpl(AWTEvent) line: 2478
>>>  SwingDisplayWindow(Component).dispatchEvent(AWTEvent) line: 4460
>>> EventQueue.dispatchEvent(AWTEvent) line: 599
>>>  DefaultKeyboardFocusManager$DefaultKeyboardFocusManagerSentEvent(SentEvent).dispatch()
>>> line: 55
>>> DefaultKeyboardFocusManager$DefaultKeyboardFocusManagerSentEvent.dispatch()
>>> line: 183
>>>  DefaultKeyboardFocusManager.sendMessage(Component, AWTEvent) line: 210
>>> DefaultKeyboardFocusManager.dispatchEvent(AWTEvent) line: 286
>>>  SwingDisplayWindow(Component).dispatchEventImpl(AWTEvent) line: 4502
>>> SwingDisplayWindow(Container).dispatchEventImpl(AWTEvent) line: 2099
>>>  SwingDisplayWindow(Window).dispatchEventImpl(AWTEvent) line: 2478
>>> SwingDisplayWindow(Component).dispatchEvent(AWTEvent) line: 4460
>>>  EventQueue.dispatchEvent(AWTEvent) line: 599
>>> SequencedEvent.dispatch() line: 101
>>>  EventQueue.dispatchEvent(AWTEvent) line: 597
>>> EventDispatchThread.pumpOneEventForFilters(int) line: 269
>>>  EventDispatchThread.pumpEventsForFilter(int, Conditional, EventFilter)
>>> line: 184
>>> EventDispatchThread.pumpEventsForHierarchy(int, Conditional, Component)
>>> line: 174
>>>  EventDispatchThread.pumpEvents(int, Conditional) line: 169
>>> EventDispatchThread.pumpEvents(Conditional) line: 161
>>>  EventDispatchThread.run() line: 122
>>>
>>> Thread [SciJava-4b2922f6-Thread-27] (Suspended)
>>>  Object.wait(long) line: not available [native method]
>>> EventQueue$1AWTInvocationLock(Object).wait() line: 485 Waiting for AWT
>>> event thread to read invocation request.
>>>  EventQueue.invokeAndWait(Runnable) line: 993
>>> DefaultThreadService.invoke(Runnable) line: 95
>>>  DefaultEventBus.publishNow(Object, String, Object, List, List,
>>> StackTraceElement[]) line: 195
>>> DefaultEventBus.publishNow(Object) line: 86
>>>  DefaultEventService.publish(E) line: 95
>>> DefaultStatusService.showStatus(int, int, String) line: 77
>>>  DefaultMinMaxMethod<T>.report() line: 296
>>> DefaultMinMaxMethod<T>.process() line: 155
>>>  DefaultAutoscaleMethod<T>.getRange(IterableInterval<T>) line: 70
>>> DefaultAutoscaleService.getDefaultIntervalRange(IterableInterval<RealType<?>>)
>>> line: 97
>>>  DefaultAutoscaleService.getDefaultRandomAccessRange(RandomAccessibleInterval<RealType<?>>)
>>> line: 105
>>>  DefaultDatasetView.autoscale(int) line: 176
>>> DefaultDatasetView.initializeView(boolean) line: 499
>>>  DefaultDatasetView.rebuild() line: 383 Takes the DefaultDatasetView
>>> lock.
>>> DefaultImageDisplay.rebuild() line: 140
>>>  DefaultImageDisplay.display(Object) line: 273
>>> DefaultOverlayService.addOverlays(ImageDisplay, List<Overlay>) line: 148
>>>  TurboRegRegister.run() line: 144
>>> CommandModule.run() line: 196
>>>  ModuleRunner.run() line: 168
>>> ModuleRunner.call() line: 129
>>>  ModuleRunner.call() line: 1
>>> FutureTask$Sync.innerRun() line: 303
>>>  FutureTask<V>.run() line: 138
>>> ThreadPoolExecutor$Worker.runTask(Runnable) line: 886
>>>  ThreadPoolExecutor$Worker.run() line: 908
>>> Thread.run() line: 662
>>>
>>>
>>> _______________________________________________
>>> ImageJ-devel mailing list
>>> ImageJ-devel at imagej.net
>>> http://imagej.net/mailman/listinfo/imagej-devel
>>>
>>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20130930/0ed40c42/attachment-0001.html>

From leek at broadinstitute.org  Mon Sep 30 14:34:52 2013
From: leek at broadinstitute.org (Lee Kamentsky)
Date: Mon, 30 Sep 2013 15:34:52 -0400
Subject: [ImageJ-devel] Deadlock: DefaultStatusService.showStatus calls
 EventService.publish / AbstractColorTool.drawIcon gets active dataset view
In-Reply-To: <CAKcvfuS7XPs3=SbqerF7oqdyx_eC125M3wv9RQQ-Vg-dsvoNDw@mail.gmail.com>
References: <CAHLFyjemO+EB+kP-G4XqU15FQTJ7jyzBgVLYJE=QnstGCzo7Yg@mail.gmail.com>
	<CAKcvfuQXKTCZc+rJbDVKfKMS+MC2TRN7fOQNYHRpYSpUQYh_Ng@mail.gmail.com>
	<CAHLFyjf9P4zviAD8A0zbEk2DJPVVExG+HU4m12x0w07dTb2DQg@mail.gmail.com>
	<CAKcvfuS7XPs3=SbqerF7oqdyx_eC125M3wv9RQQ-Vg-dsvoNDw@mail.gmail.com>
Message-ID: <CAHLFyjdWd4oaBvT8R81g3a-x11_o=BUvQKfks8YiQDnL14TTqg@mail.gmail.com>

I submitted a patch to scijava-common with the changes.

https://github.com/scijava/scijava-common/pull/13




On Mon, Sep 30, 2013 at 3:32 PM, Barry DeZonia <bdezonia at gmail.com> wrote:

> A proposed fix would be good Lee. I'd like to test the async status update
> code for responsiveness (i.e. when opening a large image let's say). Let me
> know when your fix is in place. Thanks.
>
>
> On Fri, Sep 27, 2013 at 6:54 AM, Lee Kamentsky <leek at broadinstitute.org>wrote:
>
>> Thanks Barry, the email was a little rushed - finished it while going out
>> the door. What do you think about sending the status messages
>> asynchronously? It looks to me like the AWT event processing will display
>> them in the order received, so that makes sure that a "Finished" message
>> will be seen after a "% complete" message. Status reporting is such a
>> common thing - it'd be a shame for all the worker threads to stall because
>> a user was using ImageJ to watch a movie of a cat falling off a TV while
>> their batch job was running.
>>
>> I think I'll submit a patch to DefaultStatusService for asynch reporting
>> and maybe Curtis or you could look it over and accept it. If you reject, NP.
>>
>> --Lee
>>
>>
>> On Thu, Sep 26, 2013 at 7:53 PM, Barry DeZonia <bdezonia at gmail.com>wrote:
>>
>>> Hi Lee,
>>>
>>> I added the synchronized keyword yesterday to fix a bug. We can undo
>>> that change. I can work around the problem in another fashion if necessary.
>>>
>>>
>>> On Thu, Sep 26, 2013 at 3:57 PM, Lee Kamentsky <leek at broadinstitute.org>wrote:
>>>
>>>> Hi all, I'm getting a deadly embrace that happens when the AWT event
>>>> queue thread tries to get a lock within DefaultDatasetView.getColor and
>>>> when DefaultStatusService.showStatus on a worker thread tries to publish a
>>>> synchronous request for status display after taking the
>>>> DefaultDatasetView's lock in DefaultDatasetView.rebuild. It happens
>>>> periodically, but it's timing-dependent, so not so reproducible.
>>>>
>>>> The bug is somewhat debatable. Possible candidates: It's a little
>>>> drastic for DefaultDatasetView.getColor to synchronize on the view itself.
>>>> Maybe some proxy for the color system could have a synchronizing object.
>>>> The other candidate is DefaultEventService.showStatus which could use
>>>> EventService.publishLater - I don't think there's much need for status
>>>> publishers to wait around for the status to show on the screen.
>>>>
>>>> The two stack traces:
>>>> Thread [AWT-EventQueue-0] (Suspended)
>>>> DefaultDatasetView.getColor(ChannelCollection) line: 261 Synchronized
>>>> method on DefaultDatasetView
>>>>  FgColorTool(AbstractColorTool).drawIcon() line: 175
>>>> FgColorTool(AbstractColorTool).onEvent(DisplayActivatedEvent) line: 184
>>>>  NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not
>>>> available [native method]
>>>> NativeMethodAccessorImpl.invoke(Object, Object[]) line: 39
>>>>  DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25
>>>> Method.invoke(Object, Object...) line: 597
>>>>  DefaultEventService$ProxySubscriber<E>.onEvent(E) line: 282
>>>> DefaultEventService$ProxySubscriber<E>.onEvent(Object) line: 1
>>>>  DefaultEventBus(ThreadSafeEventService).publish(Object, String,
>>>> Object, List, List, StackTraceElement[]) line: 971
>>>>  DefaultEventBus.access$1(DefaultEventBus, Object, String, Object,
>>>> List, List, StackTraceElement[]) line: 1
>>>> DefaultEventBus$1.run() line: 201
>>>>  DefaultThreadService.invoke(Runnable) line: 91
>>>> DefaultEventBus.publishNow(Object, String, Object, List, List,
>>>> StackTraceElement[]) line: 195
>>>>  DefaultEventBus.publishNow(Object) line: 86
>>>> DefaultEventService.publish(E) line: 95
>>>>  DefaultDisplayService.setActiveDisplay(Display<?>) line: 129
>>>> DefaultDisplayService.onEvent(WinActivatedEvent) line: 247
>>>>  NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not
>>>> available [native method]
>>>> NativeMethodAccessorImpl.invoke(Object, Object[]) line: 39
>>>>  DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25
>>>> Method.invoke(Object, Object...) line: 597
>>>>  DefaultEventService$ProxySubscriber<E>.onEvent(E) line: 282
>>>> DefaultEventService$ProxySubscriber<E>.onEvent(Object) line: 1
>>>>  DefaultEventBus(ThreadSafeEventService).publish(Object, String,
>>>> Object, List, List, StackTraceElement[]) line: 971
>>>>  DefaultEventBus.access$1(DefaultEventBus, Object, String, Object,
>>>> List, List, StackTraceElement[]) line: 1
>>>> DefaultEventBus$1.run() line: 201
>>>>  DefaultThreadService.invoke(Runnable) line: 91
>>>> DefaultEventBus.publishNow(Object, String, Object, List, List,
>>>> StackTraceElement[]) line: 195
>>>>  DefaultEventBus.publishNow(Object) line: 86
>>>> DefaultEventService.publish(E) line: 95
>>>>  AWTWindowEventDispatcher.windowActivated(WindowEvent) line: 94
>>>> SwingDisplayWindow(Window).processWindowEvent(WindowEvent) line: 1877
>>>>  SwingDisplayWindow(JFrame).processWindowEvent(WindowEvent) line: 274
>>>> SwingDisplayWindow(Window).processEvent(AWTEvent) line: 1823
>>>>  SwingDisplayWindow(Component).dispatchEventImpl(AWTEvent) line: 4630
>>>> SwingDisplayWindow(Container).dispatchEventImpl(AWTEvent) line: 2099
>>>>  SwingDisplayWindow(Window).dispatchEventImpl(AWTEvent) line: 2478
>>>> SwingDisplayWindow(Component).dispatchEvent(AWTEvent) line: 4460
>>>>  DefaultKeyboardFocusManager(KeyboardFocusManager).redispatchEvent(Component,
>>>> AWTEvent) line: 1850
>>>> DefaultKeyboardFocusManager.typeAheadAssertions(Component, AWTEvent)
>>>> line: 910
>>>>  DefaultKeyboardFocusManager.dispatchEvent(AWTEvent) line: 409
>>>> SwingDisplayWindow(Component).dispatchEventImpl(AWTEvent) line: 4502
>>>>  SwingDisplayWindow(Container).dispatchEventImpl(AWTEvent) line: 2099
>>>> SwingDisplayWindow(Window).dispatchEventImpl(AWTEvent) line: 2478
>>>>  SwingDisplayWindow(Component).dispatchEvent(AWTEvent) line: 4460
>>>> EventQueue.dispatchEvent(AWTEvent) line: 599
>>>>  DefaultKeyboardFocusManager$DefaultKeyboardFocusManagerSentEvent(SentEvent).dispatch()
>>>> line: 55
>>>> DefaultKeyboardFocusManager$DefaultKeyboardFocusManagerSentEvent.dispatch()
>>>> line: 183
>>>>  DefaultKeyboardFocusManager.sendMessage(Component, AWTEvent) line: 210
>>>> DefaultKeyboardFocusManager.dispatchEvent(AWTEvent) line: 286
>>>>  SwingDisplayWindow(Component).dispatchEventImpl(AWTEvent) line: 4502
>>>> SwingDisplayWindow(Container).dispatchEventImpl(AWTEvent) line: 2099
>>>>  SwingDisplayWindow(Window).dispatchEventImpl(AWTEvent) line: 2478
>>>> SwingDisplayWindow(Component).dispatchEvent(AWTEvent) line: 4460
>>>>  EventQueue.dispatchEvent(AWTEvent) line: 599
>>>> SequencedEvent.dispatch() line: 101
>>>>  EventQueue.dispatchEvent(AWTEvent) line: 597
>>>> EventDispatchThread.pumpOneEventForFilters(int) line: 269
>>>>  EventDispatchThread.pumpEventsForFilter(int, Conditional,
>>>> EventFilter) line: 184
>>>> EventDispatchThread.pumpEventsForHierarchy(int, Conditional, Component)
>>>> line: 174
>>>>  EventDispatchThread.pumpEvents(int, Conditional) line: 169
>>>> EventDispatchThread.pumpEvents(Conditional) line: 161
>>>>  EventDispatchThread.run() line: 122
>>>>
>>>> Thread [SciJava-4b2922f6-Thread-27] (Suspended)
>>>>  Object.wait(long) line: not available [native method]
>>>> EventQueue$1AWTInvocationLock(Object).wait() line: 485 Waiting for AWT
>>>> event thread to read invocation request.
>>>>  EventQueue.invokeAndWait(Runnable) line: 993
>>>> DefaultThreadService.invoke(Runnable) line: 95
>>>>  DefaultEventBus.publishNow(Object, String, Object, List, List,
>>>> StackTraceElement[]) line: 195
>>>> DefaultEventBus.publishNow(Object) line: 86
>>>>  DefaultEventService.publish(E) line: 95
>>>> DefaultStatusService.showStatus(int, int, String) line: 77
>>>>  DefaultMinMaxMethod<T>.report() line: 296
>>>> DefaultMinMaxMethod<T>.process() line: 155
>>>>  DefaultAutoscaleMethod<T>.getRange(IterableInterval<T>) line: 70
>>>> DefaultAutoscaleService.getDefaultIntervalRange(IterableInterval<RealType<?>>)
>>>> line: 97
>>>>  DefaultAutoscaleService.getDefaultRandomAccessRange(RandomAccessibleInterval<RealType<?>>)
>>>> line: 105
>>>>  DefaultDatasetView.autoscale(int) line: 176
>>>> DefaultDatasetView.initializeView(boolean) line: 499
>>>>  DefaultDatasetView.rebuild() line: 383 Takes the DefaultDatasetView
>>>> lock.
>>>> DefaultImageDisplay.rebuild() line: 140
>>>>  DefaultImageDisplay.display(Object) line: 273
>>>> DefaultOverlayService.addOverlays(ImageDisplay, List<Overlay>) line: 148
>>>>  TurboRegRegister.run() line: 144
>>>> CommandModule.run() line: 196
>>>>  ModuleRunner.run() line: 168
>>>> ModuleRunner.call() line: 129
>>>>  ModuleRunner.call() line: 1
>>>> FutureTask$Sync.innerRun() line: 303
>>>>  FutureTask<V>.run() line: 138
>>>> ThreadPoolExecutor$Worker.runTask(Runnable) line: 886
>>>>  ThreadPoolExecutor$Worker.run() line: 908
>>>> Thread.run() line: 662
>>>>
>>>>
>>>> _______________________________________________
>>>> ImageJ-devel mailing list
>>>> ImageJ-devel at imagej.net
>>>> http://imagej.net/mailman/listinfo/imagej-devel
>>>>
>>>>
>>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20130930/b193afe5/attachment-0001.html>

