From bugzilla at fiji.sc  Thu Aug  1 13:43:22 2013
From: bugzilla at fiji.sc (bugzilla at fiji.sc)
Date: Thu, 01 Aug 2013 18:43:22 +0000
Subject: [ImageJ-devel] [Bug 647] New: [ERROR] Cannot create plugin
Message-ID: <bug-647-194@http.fiji.sc/bugzilla/>

http://fiji.sc/bugzilla/show_bug.cgi?id=647

            Bug ID: 647
           Summary: [ERROR] Cannot create plugin
    Classification: Unclassified
           Product: Fiji
           Version: unspecified
          Hardware: Other
                OS: Linux
            Status: NEW
          Severity: enhancement
          Priority: P5
         Component: ImageJ2
          Assignee: imagej-devel at imagej.net
          Reporter: oo370 at nyu.edu
          Deadline: 2013-08-03

I get error message (see below) when I try to run "Analyse Particles" plugin. 

[ERROR] Cannot create plugin: label='Default Overlay Settings', menu='Image >
Overlay > Overlay Options...', priority=0.0, enabled=true, pluginType=Command
java.lang.NoClassDefFoundError: Could not initialize class
java.util.prefs.FileSystemPreferences
        at
java.util.prefs.FileSystemPreferencesFactory.userRoot(FileSystemPreferencesFactory.java:41)
        at java.util.prefs.Preferences.userRoot(Preferences.java:451)
        at java.util.prefs.Preferences.userNodeForPackage(Preferences.java:365)
        at imagej.util.Prefs.prefs(Prefs.java:366)
        at imagej.util.Prefs.get(Prefs.java:131)
        at imagej.util.Prefs.get(Prefs.java:125)
        at
imagej.module.AbstractModuleItem.loadValue(AbstractModuleItem.java:144)
        at imagej.options.OptionsPlugin.loadInput(OptionsPlugin.java:119)
        at imagej.options.OptionsPlugin.load(OptionsPlugin.java:89)
        at imagej.options.OptionsPlugin.setContext(OptionsPlugin.java:113)
        at org.scijava.Context.inject(Context.java:209)
        at
org.scijava.plugin.DefaultPluginService.createInstance(DefaultPluginService.java:241)
        at
imagej.options.DefaultOptionsService.createInstance(DefaultOptionsService.java:183)
        at
imagej.options.DefaultOptionsService.getOptions(DefaultOptionsService.java:97)
        at
imagej.data.display.DefaultOverlayService.initialize(DefaultOverlayService.java:332)
        at
org.scijava.service.ServiceHelper.createService(ServiceHelper.java:224)
        at
org.scijava.service.ServiceHelper.createExactService(ServiceHelper.java:176)
        at
org.scijava.service.ServiceHelper.loadService(ServiceHelper.java:155)
        at
org.scijava.service.ServiceHelper.createService(ServiceHelper.java:219)
        at
org.scijava.service.ServiceHelper.createExactService(ServiceHelper.java:176)
        at
org.scijava.service.ServiceHelper.loadService(ServiceHelper.java:155)
        at
org.scijava.service.ServiceHelper.loadServices(ServiceHelper.java:126)
        at org.scijava.Context.<init>(Context.java:162)
        at org.scijava.Context.<init>(Context.java:120)
        at org.scijava.Context.<init>(Context.java:81)
        at org.scijava.Context.<init>(Context.java:71)
        at imagej.ImageJ.<init>(ImageJ.java:97)
        at fiji.Main$1.run(Main.java:115)

-- 
You are receiving this mail because:
You are the assignee for the bug.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20130801/26cff483/attachment.html>

From bugzilla at fiji.sc  Thu Aug  1 14:00:00 2013
From: bugzilla at fiji.sc (bugzilla at fiji.sc)
Date: Thu, 01 Aug 2013 19:00:00 +0000
Subject: [ImageJ-devel] [Bug 647] [ERROR] Cannot create plugin
In-Reply-To: <bug-647-194@http.fiji.sc/bugzilla/>
References: <bug-647-194@http.fiji.sc/bugzilla/>
Message-ID: <bug-647-194-mx65dnZ9cr@http.fiji.sc/bugzilla/>

http://fiji.sc/bugzilla/show_bug.cgi?id=647

--- Comment #1 from Olex <oo370 at nyu.edu> ---
Created attachment 113
  --> http://fiji.sc/bugzilla/attachment.cgi?id=113&action=edit
macros used to produce an error above

-- 
You are receiving this mail because:
You are the assignee for the bug.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20130801/36891955/attachment.html>

From bugzilla at fiji.sc  Thu Aug  1 16:45:47 2013
From: bugzilla at fiji.sc (bugzilla at fiji.sc)
Date: Thu, 01 Aug 2013 21:45:47 +0000
Subject: [ImageJ-devel] [Bug 647] [ERROR] Cannot create plugin
In-Reply-To: <bug-647-194@http.fiji.sc/bugzilla/>
References: <bug-647-194@http.fiji.sc/bugzilla/>
Message-ID: <bug-647-194-XfqiCpykYT@http.fiji.sc/bugzilla/>

http://fiji.sc/bugzilla/show_bug.cgi?id=647

Curtis Rueden <ctrueden at wisc.edu> changed:

           What    |Removed                     |Added
----------------------------------------------------------------------------
                 CC|                            |ctrueden at wisc.edu

--- Comment #2 from Curtis Rueden <ctrueden at wisc.edu> ---
Thanks for the report. It looks like a bug in Java. What version of Java are
you running ("java -version"), and on which operating system?

-- 
You are receiving this mail because:
You are the assignee for the bug.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20130801/5cd7c4d6/attachment.html>

From bugzilla at fiji.sc  Thu Aug  1 17:56:16 2013
From: bugzilla at fiji.sc (bugzilla at fiji.sc)
Date: Thu, 01 Aug 2013 22:56:16 +0000
Subject: [ImageJ-devel] [Bug 647] [ERROR] Cannot create plugin
In-Reply-To: <bug-647-194@http.fiji.sc/bugzilla/>
References: <bug-647-194@http.fiji.sc/bugzilla/>
Message-ID: <bug-647-194-K2XJjiGjBd@http.fiji.sc/bugzilla/>

http://fiji.sc/bugzilla/show_bug.cgi?id=647

--- Comment #3 from Olex <oo370 at nyu.edu> ---
Thank you for your prompt response. I am using
 java version "1.6.0_24"
OpenJDK Runtime Environment (IcedTea6 1.11.9) (rhel-1.57.1.11.9.el6_4-x86_64)
OpenJDK 64-Bit Server VM (build 20.0-b12, mixed mode)

I tried to test macros on a cluster (linux 64-bit) in a headless mode.

-- 
You are receiving this mail because:
You are the assignee for the bug.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20130801/9211522c/attachment.html>

From pietzsch at mpi-cbg.de  Mon Aug  5 11:01:03 2013
From: pietzsch at mpi-cbg.de (Tobias Pietzsch)
Date: Mon, 5 Aug 2013 18:01:03 +0200
Subject: [ImageJ-devel] [fiji-devel] Status reporting in ImgLib
	Algorithms
In-Reply-To: <CA+B=mGpgd0UWZBt3FPayB7gSNZNuNZrCvsiywZ-ySBywmz=9=g@mail.gmail.com>
References: <CA+B=mGpgd0UWZBt3FPayB7gSNZNuNZrCvsiywZ-ySBywmz=9=g@mail.gmail.com>
Message-ID: <A9CDB051-0226-4D57-B06B-5200AC4572CC@mpi-cbg.de>

Hi all,

First of all, I am very reluctant to add any dependency to imglib2-algorithms core.

I admit that I did not really look into scijava-common so far, so I cannot really comment on how severe I think this would be.
I had a quick look and saw that scijava-common is itself not without dependencies. I found it depends on org.bushe.eventbus. On the eventbus website I found the notice:
Update 3/2013: The EventBus has gone stale and is unlikely to be extended to other platforms. Suitable, though more primitive, replacements can be found for GWT (GWT EventBus), Javascript (TIBCO PageBus - an OpenAjax Hub implementation) and Flex (Parsley's Messaging)
So would that mean dragging in a dead project as a transitive dependency?

As far as I can tell, the net.imglib2.multithreading stuff is a leftover from imglib1 times and I think I have mentioned several times that I would like to get rid of it? :-)
I guess that scijava-common ThreadService is more thought-through than the SimpleMultiThreading class. So replacing that I would see as an advantage.
In general, I think ExecutorServices are a good fit for multithreading pixel processing algorithms, along the lines of submitting a runnable for every line/plane/.

I see that you have a need for status reporting in ImageJ2 but I'm not sure that it should be in imglib-algorithms.
I would favour a way where we could keep the imglib2 code focused on processing pixels, not caring about framework issues.
In principle, status reporting can be performed before entering and after leaving a imglib2 "work-unit".
If fine grained reporting is required, then this would mean splitting up the work into smaller units and reporting in between.

In any case, even if we add scijava-common as a dependency, I strongly suggest to also keep non-reporting versions of the algorithms.
If noone is listening to the status reports thats just wasted computation time. I think the overhead will be quite high in some cases.
For instance in your forked ComputeMinMax algorithm you do some work on updating status for every single pixel, which I think is definitely overdoing it.

As a compromise I could image putting an empty protected method report() that is called periodically by the core algorithm implementation.
The JIT would hopefully just optimize that away if you use the core algorithm. Then for the reporting version you would have to extend the core algorithm and override report().

best regards,
Tobias




On Jul 26, 2013, at 5:09 PM, Mark Hiner <hinerm at gmail.com> wrote:

> Hi all (especially ImgLib2 developers)
> 
>   Up until now, when running ImgLib2 algorithms on large datasets in ImageJ2, the UI was basically frozen for the complete compute time (e.g. when computing Min/Max values in the Brightness/Contrast plugin).
> 
>   As of this commit UI-based refreshing and event callback methods are now handled on a separate thread, allowing them to send UI updates (e.g. via the StatusService).
> 
>   For the moment, to avoid adding a Scijava-common dependency to ImgLib2 algorithms, I forked the ComputeMinMax algorithm in IJ2 to use the StatusService to report computation progress.
> 
>   Going forward though, we should agree on a long term solution:
> 
>   A) imglib2 needs its own status reporting mechanism (Listeners and Events etc.)
>   B) it needs a SciJava context to use the StatusService 
>   C) we have to fork every core algorithm in ImgLib2 to add StatusService
> 
>   If possible I would like to avoid C, but if it becomes a necessity it would be helpful if the algorithms were refactored for extensibility (having protected field accessors, for example).
> 
>   I personally am in favor of B because it would limit code repetition and pave the way for further unification (Part of why I completely forked ComputeMinMax was to use the Scijava-common ThreadService, which has some - I think unnecessary - overlap with the SimpleMultiThreading utility class).
> 
>   But I understand that adding this dependency is not a minor request, and care would have to be taken to limit the impact on performance.
> 
>   So what do other people think?
> 
> Thanks,
> - Mark
> 
> -- 
> -- 
> Please avoid top-posting, and please make sure to reply-to-all!
>  
> Mailing list web interface: http://groups.google.com/group/fiji-devel
>  
> --- 
> You received this message because you are subscribed to the Google Groups "Fiji-devel" group.
> To unsubscribe from this group and stop receiving emails from it, send an email to fiji-devel+unsubscribe at googlegroups.com.
> For more options, visit https://groups.google.com/groups/opt_out.
>  
>  

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20130805/f65b2173/attachment.html>

From Johannes.Schindelin at gmx.de  Mon Aug  5 12:11:42 2013
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Mon, 5 Aug 2013 19:11:42 +0200 (CEST)
Subject: [ImageJ-devel] [fiji-devel] Status reporting in ImgLib
	Algorithms
In-Reply-To: <A9CDB051-0226-4D57-B06B-5200AC4572CC@mpi-cbg.de>
References: <CA+B=mGpgd0UWZBt3FPayB7gSNZNuNZrCvsiywZ-ySBywmz=9=g@mail.gmail.com>
	<A9CDB051-0226-4D57-B06B-5200AC4572CC@mpi-cbg.de>
Message-ID: <alpine.DEB.1.00.1308051847010.24252@s15462909.onlinehome-server.info>

Hi Tobias,

On Mon, 5 Aug 2013, Tobias Pietzsch wrote:

> First of all, I am very reluctant to add any dependency to
> imglib2-algorithms core.

Oh really? ;-)

> I admit that I did not really look into scijava-common so far, so I
> cannot really comment on how severe I think this would be.

I think it might make a lot of sense to look into scijava-common because
it addresses a lot of very general issues with Java programming.

For example, we do often have the problem of inversion of control (IoC):
you will want to let consumers of your code override certain aspects, but
still provide your own, default implementation.

The status service is actually an excellent example for this: lengthy
operations will need to be able to report their progress. For the ImgLib2
developers, stderr is probably not only sufficient, but even desirable.

For most users, stderr is completely inacceptable, especially on Windows
where Java's stderr is re-routed to NUL: by default. Gone. Never to be
seen.

The best way I can think of to address this issue is to have an interface
that describes progress updates, a default implementation writing that to
stderr, and a way to inject different implementations for those clicky
clicky user interfaces.

The way scijava-common addresses this issue is to offer the StatusService
interface:

https://github.com/scijava/scijava-common/blob/master/src/main/java/org/scijava/app/StatusService.java

along with a default implementation:

https://github.com/scijava/scijava-common/blob/master/src/main/java/org/scijava/app/DefaultStatusService.java

And if you want to override it, you can easily do so by implementing the
StatusService, annotating the implementing class with the

	@Plugin(type = StatusService.class)

annotation.

Of course, you are free to reinvent the wheel in ImgLib2 if you so desire,
but please do not ask me to be a fan of that idea.

> I had a quick look and saw that scijava-common is itself not without
> dependencies. I found it depends on org.bushe.eventbus. On the eventbus
> website I found the notice:
>
> Update 3/2013: The EventBus has gone stale and is unlikely to be
> extended to other platforms. Suitable, though more primitive,
> replacements can be found for GWT (GWT EventBus), Javascript (TIBCO
> PageBus - an OpenAjax Hub implementation) and Flex (Parsley's Messaging)
> So would that mean dragging in a dead project as a transitive dependency?

Two points about this:

1) EventBus is very stable and we can easily extend it should we ever need
that. We now even have a Git-SVN mirror for easier debugging, making it
safe to rely on said component:

	https://github.com/scijava/eventbus

2) EventBus is -- as you pointed out -- a *transitive* dependency. No user
of scijava-common needs to use it directly. Actually, no user of
scijava-common needs to use it *full stop*. The point of a
transitive dependency, after all, is that the dependency can switch to any
other way to provide the functionality and your project still runs fine.
And in the case of the eventbus dependency: as I laid out before, the
inversion-of-control principle does even allow you to exclude eventbus.jar
from the classpath completely, given a replacement implementation of the
EventService interface.

> As far as I can tell, the net.imglib2.multithreading stuff is a leftover
> from imglib1 times and I think I have mentioned several times that I
> would like to get rid of it? :-)
>
> I guess that scijava-common ThreadService is more thought-through than
> the SimpleMultiThreading class. So replacing that I would see as an
> advantage.

Indeed, also from the Open Source point of view where you do not only use
software libraries but also contribute improvements back, for a mutual
benefit.

> In general, I think ExecutorServices are a good fit for multithreading
> pixel processing algorithms, along the lines of submitting a runnable
> for every line/plane/.
> 
> I see that you have a need for status reporting in ImageJ2 but I'm not
> sure that it should be in imglib-algorithms.

As I said, if you want to implement the very same functionality in
imglib2-algorithms, go ahead. We need that functionality, as do virtually
all developers having any kind of graphical or web frontend.

I would strongly encourage you to save the time, though, and use and
improve what is there in scijava-common.

> I would favour a way where we could keep the imglib2 code focused on
> processing pixels, not caring about framework issues.

Too late. ImgLib2 *is* used, and the users *need* status updates. Any way
you turn it, we need that functionality.

> In principle, status reporting can be performed before entering and
> after leaving a imglib2 "work-unit".

Not without that "work-unit" knowing about the status reporting, because
it needs to report the numbers based on internal state.

> If fine grained reporting is required, then this would mean splitting up
> the work into smaller units and reporting in between.
> 
> In any case, even if we add scijava-common as a dependency, I strongly
> suggest to also keep non-reporting versions of the algorithms.

I thought the point of ImgLib2 was to prevent having to duplicate code.

> If noone is listening to the status reports thats just wasted
> computation time. I think the overhead will be quite high in some cases.

As your benchmarks pointed out: if the code path through an interface
always lands at the same implementation, the JIT is quite good at
inlining the code.

So if you override the StatusService with an implementation that has only
empty, final methods, I would be highly surprised if your earlier
benchmarks would be contradicted by the overhead you suspect.

> For instance in your forked ComputeMinMax algorithm you do some work on
> updating status for every single pixel, which I think is definitely
> overdoing it.

That is a problem of the ComputeMinMax algorithm, I agree. But nothing
that can serve as a counterargument against using scijava-common.

> As a compromise I could image putting an empty protected method report()
> that is called periodically by the core algorithm implementation.

But that will be insufficient, don't you think? How would the report()
function know 1) about internal state of the consumer, and 2) about the
percentage of the progress?

> The JIT would hopefully just optimize that away if you use the core
> algorithm. Then for the reporting version you would have to extend the
> core algorithm and override report().

As I pointed out above, the JIT has been consistent in your benchmarks in
inlining short, final methods. It would be more than just surprising if
that would not work for empty methods.

The point is that ImgLib2 should cater for the common case. And the common
case *is* a user interface with some sort of progress report.

If you have a better idea, let's hear it.

Ciao,
Dscho

From ctrueden at wisc.edu  Mon Aug  5 12:15:58 2013
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Mon, 5 Aug 2013 12:15:58 -0500
Subject: [ImageJ-devel] [fiji-devel] Status reporting in ImgLib
	Algorithms
In-Reply-To: <A9CDB051-0226-4D57-B06B-5200AC4572CC@mpi-cbg.de>
References: <CA+B=mGpgd0UWZBt3FPayB7gSNZNuNZrCvsiywZ-ySBywmz=9=g@mail.gmail.com>
	<A9CDB051-0226-4D57-B06B-5200AC4572CC@mpi-cbg.de>
Message-ID: <CADN69ykrBVkeYVk0tEUhh1SpZb+Qb7O2ztrReCO-po5nLFCasg@mail.gmail.com>

Hi Tobias,

> I had a quick look and saw that scijava-common is itself not without
> dependencies. I found it depends on org.bushe.eventbus.

Yes. SciJava Common also depends on SezPoz. However, both of these
dependencies are encapsulated, meaning that no downstream code is
"infected" with any direct references to classes from either SezPoz or
EventBus. All event logic goes through the SciJava Common EventService. And
all SezPoz logic is transparent to the developer, via APT.

> On the eventbus website I found the notice:
> Update 3/2013: The EventBus has gone stale

Thanks for the info; I hadn't seen that. Fortunately, the version of
EventBus we use does everything we need. We are unlikely to need upstream
support or new versions. At worst, we can fork the project and cut our own
new release (and/or integrate the EventBus code into SciJava Common itself)
in case a future critical bug is discovered.

> I would favour a way where we could keep the imglib2 code focused on
> processing pixels, not caring about framework issues.

What about Mark's option (A): "imglib2 needs its own status reporting
mechanism (Listeners and Events etc.)"?

> I think the overhead will be quite high in some cases. For instance in
> your forked ComputeMinMax algorithm you do some work on updating
> status for every single pixel, which I think is definitely overdoing
> it.

Yes, there is always a tradeoff, and a balance, for this problem. I agree
that status-per-pixel is overkill.

What about polling? Another option might be for ImgLib2 algorithms to
update some (standardized) internal state, but not inform anyone about such
changes. Then downstream code could poll that state every X milliseconds.

Regards,
Curtis


On Mon, Aug 5, 2013 at 11:01 AM, Tobias Pietzsch <pietzsch at mpi-cbg.de>wrote:

> Hi all,
>
> First of all, I am very reluctant to add any dependency to
> imglib2-algorithms core.
>
> I admit that I did not really look into scijava-common so far, so I cannot
> really comment on how severe I think this would be.
> I had a quick look and saw that scijava-common is itself not without
> dependencies. I found it depends on org.bushe.eventbus. On the eventbus
> website I found the notice:
> Update 3/2013: The EventBus has gone stale and is unlikely to be extended
> to other platforms. Suitable, though more primitive, replacements can be
> found for GWT (GWT EventBus<http://google-web-toolkit.googlecode.com/svn/javadoc/2.1/com/google/gwt/event/shared/EventBus.html>),
> Javascript (TIBCO PageBus - an OpenAjax Hub implementation<http://developer.tibco.com/pagebus/default.jsp>)
> and Flex (Parsley's Messaging<http://www.spicefactory.org/parsley/docs/3.0/manual/>
> )
> So would that mean dragging in a dead project as a transitive dependency?
>
> As far as I can tell, the net.imglib2.multithreading stuff is a leftover
> from imglib1 times and I think I have mentioned several times that I would
> like to get rid of it? :-)
> I guess that scijava-common ThreadService is more thought-through than the
> SimpleMultiThreading class. So replacing that I would see as an advantage.
> In general, I think ExecutorServices are a good fit for multithreading
> pixel processing algorithms, along the lines of submitting a runnable for
> every line/plane/.
>
> I see that you have a need for status reporting in ImageJ2 but I'm not
> sure that it should be in imglib-algorithms.
> I would favour a way where we could keep the imglib2 code focused on
> processing pixels, not caring about framework issues.
> In principle, status reporting can be performed before entering and after
> leaving a imglib2 "work-unit".
> If fine grained reporting is required, then this would mean splitting up
> the work into smaller units and reporting in between.
>
> In any case, even if we add scijava-common as a dependency, I strongly
> suggest to also keep non-reporting versions of the algorithms.
> If noone is listening to the status reports thats just wasted computation
> time. I think the overhead will be quite high in some cases.
> For instance in your forked ComputeMinMax algorithm you do some work on
> updating status for every single pixel, which I think is definitely
> overdoing it.
>
> As a compromise I could image putting an empty protected method report()
> that is called periodically by the core algorithm implementation.
> The JIT would hopefully just optimize that away if you use the core
> algorithm. Then for the reporting version you would have to extend the core
> algorithm and override report().
>
> best regards,
> Tobias
>
>
>
>
> On Jul 26, 2013, at 5:09 PM, Mark Hiner <hinerm at gmail.com> wrote:
>
> Hi all (especially ImgLib2 developers)
>
>   Up until now, when running ImgLib2 algorithms on large datasets in
> ImageJ2, the UI was basically frozen for the complete compute time (e.g.
> when computing Min/Max values in the Brightness/Contrast plugin).
>
>   As of this commit<https://github.com/imagej/imagej/commit/dde5c3529e4b5daf78eb899a781635d4730ecb85>UI-based refreshing and event callback methods are now handled on a
> separate thread, allowing them to send UI updates (e.g. via the
> StatusService).
>
>   For the moment, to avoid adding a Scijava-common dependency to ImgLib2
> algorithms, I forked the ComputeMinMax algorithm<https://github.com/imagej/imagej/blob/ffb3d651811089e582c0698701a1a1ea19151db9/core/data/src/main/java/imagej/data/minmax/DefaultMinMaxMethod.java>in IJ2 to use the StatusService to report computation progress.
>
>   Going forward though, we should agree on a long term solution:
>
>   A) imglib2 needs its own status reporting mechanism (Listeners and
> Events etc.)
>   B) it needs a SciJava context to use the StatusService
>   C) we have to fork every core algorithm in ImgLib2 to add StatusService
>
>   If possible I would like to avoid C, but if it becomes a necessity it
> would be helpful if the algorithms were refactored for extensibility
> (having protected field accessors, for example).
>
>   I personally am in favor of B because it would limit code repetition and
> pave the way for further unification (Part of why I completely forked
> ComputeMinMax was to use the Scijava-common ThreadService, which has some -
> I think unnecessary - overlap with the SimpleMultiThreading utility class).
>
>   But I understand that adding this dependency is not a minor request, and
> care would have to be taken to limit the impact on performance.
>
>   So what do other people think?
>
> Thanks,
> - Mark
>
> --
> --
> Please avoid top-posting, and please make sure to reply-to-all!
>
> Mailing list web interface: http://groups.google.com/group/fiji-devel
>
> ---
> You received this message because you are subscribed to the Google Groups
> "Fiji-devel" group.
> To unsubscribe from this group and stop receiving emails from it, send an
> email to fiji-devel+unsubscribe at googlegroups.com.
> For more options, visit https://groups.google.com/groups/opt_out.
>
>
>
>
>  --
> --
> Please avoid top-posting, and please make sure to reply-to-all!
>
> Mailing list web interface: http://groups.google.com/group/fiji-devel
>
> ---
> You received this message because you are subscribed to the Google Groups
> "Fiji-devel" group.
> To unsubscribe from this group and stop receiving emails from it, send an
> email to fiji-devel+unsubscribe at googlegroups.com.
> For more options, visit https://groups.google.com/groups/opt_out.
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20130805/7aeb26ce/attachment.html>

From Johannes.Schindelin at gmx.de  Mon Aug  5 12:28:57 2013
From: Johannes.Schindelin at gmx.de (Johannes Schindelin)
Date: Mon, 5 Aug 2013 19:28:57 +0200 (CEST)
Subject: [ImageJ-devel] [fiji-devel] Status reporting in ImgLib
 Algorithms
In-Reply-To: <CADN69ykrBVkeYVk0tEUhh1SpZb+Qb7O2ztrReCO-po5nLFCasg@mail.gmail.com>
References: <CA+B=mGpgd0UWZBt3FPayB7gSNZNuNZrCvsiywZ-ySBywmz=9=g@mail.gmail.com>
	<A9CDB051-0226-4D57-B06B-5200AC4572CC@mpi-cbg.de>
	<CADN69ykrBVkeYVk0tEUhh1SpZb+Qb7O2ztrReCO-po5nLFCasg@mail.gmail.com>
Message-ID: <alpine.DEB.1.00.1308051923130.24252@s15462909.onlinehome-server.info>

Hi Curtis,

On Mon, 5 Aug 2013, Curtis Rueden wrote:

> On Mon, Aug 5, 2013 at 11:01 AM, Tobias Pietzsch
> <pietzsch at mpi-cbg.de>wrote:
> 
> > I think the overhead will be quite high in some cases. For instance in
> > your forked ComputeMinMax algorithm you do some work on updating
> > status for every single pixel, which I think is definitely overdoing
> > it.
> 
> Yes, there is always a tradeoff, and a balance, for this problem. I
> agree that status-per-pixel is overkill.
> 
> What about polling? Another option might be for ImgLib2 algorithms to
> update some (standardized) internal state, but not inform anyone about
> such changes. Then downstream code could poll that state every X
> milliseconds.

I agree that there is a danger of overkill. Unfortunately, the same danger
applies to the core library trying to think for the consumers.

A concrete example how things can be decoupled can be found in ImageJ 1.x:
the algorithms typically update their prograss on a slice-by-slice basis,
or if the algorithm is known to be expensive, pixel line by pixel line. Of
course, for small images this still meant that the progress updates would
dominate the execution time (undesirable, of course).

ImageJ 1.x deals with it by having its own internal state in the progress
update that skips progress updates if they come in too fast.

Likewise, I would suggest that ImgLib2 does not try to think for the
status reporter. Instead, there should be a way to report the status. Full
stop. The status reporter consuming those calls would need to do something
IJ1-like if there is a performance problem.

Let's separate concerns properly,
Dscho


From ctrueden at wisc.edu  Mon Aug 12 12:39:35 2013
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Mon, 12 Aug 2013 12:39:35 -0500
Subject: [ImageJ-devel] [ImgLib2] The img-metadata branch
In-Reply-To: <CADN69ykbTxxsr6z6RcEqbb3hRpXgrOCZcw9700_zSFOCPNO_kg@mail.gmail.com>
References: <CADN69ykbTxxsr6z6RcEqbb3hRpXgrOCZcw9700_zSFOCPNO_kg@mail.gmail.com>
Message-ID: <CADN69ymwt_qLY2aYuGPonWEbS5sQxAmYHi==YdAvNe464yEV_w@mail.gmail.com>

Hi all,

> I will merge the img-metadata branch to master on Thursday.

Got a bit busy in the interim, but img-metadata is now merged to
imglib.git's master branch:

https://github.com/imagej/imglib/commit/e4e26aa05e0f42ff1a90e8c6d67235431471de44

The commit message gives a quick gist of the changes, including future
directions.

Please let me know of any questions or problems with it!

Regards,
Curtis


On Tue, Jul 30, 2013 at 10:28 AM, Curtis Rueden <ctrueden at wisc.edu> wrote:

> Hi all, and especially ImgLib2 developers,
>
> At the ImgLib2 hackathon this past May, I started work on a branch to make
> it easier to attach per-axis metadata to N-dimensional spaces. I think this
> branch is finally in a merge-worthy state.
>
> It introduces an AnnotatedSpace extension to EuclideanSpace which lets you
> attach on Axis per dimension. It defines TypedSpace, which declares an
> AxisType for each Axis, as well as a CalibratedSpace, which in addition
> adds a calibration value and optional unit name to the mix.
>
> This approach is much more flexible than the previous CalibratedSpace,
> which has been renamed to OldCalibratedSpace and deprecated until we can
> fully transition all the code away from it. In particular, having the axes
> attached to the space directly will allows Views to maintain the axis
> metadata without much additional work.
>
> Note that these new classes are defined in the net.imglib2.meta component,
> which was split into a separate module called imglib2-meta. The ImgPlus
> class moved there, too (it should have been there all along). So merging
> this branch will cause some code breakage, but all should be
> straightforward to fix: rename usages of CalibratedSpace to
> OldCalibratedSpace, and rename the ImgPlus package from net.imglib2.img to
> net.imglib2.meta.
>
> Going forward, we can also add a CalibratedViews class to the
> net.imglib2.meta package which has some additional features such as
> exposing resampled Imgs from a source CalibratedSpace into a target one
> based on the units used. We can lean on a units library for this, as we
> have discussed in the past.
>
> If interested, you can browse the branch at:
> https://github.com/imagej/imglib/compare/img-metadata
>
> If no one objects, I will merge the img-metadata branch to master on
> Thursday.
>
> Regards,
> Curtis
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20130812/6baf298c/attachment.html>

From bugzilla at fiji.sc  Wed Aug 14 15:05:36 2013
From: bugzilla at fiji.sc (bugzilla at fiji.sc)
Date: Wed, 14 Aug 2013 20:05:36 +0000
Subject: [ImageJ-devel] [Bug 639] ImageJ2 with QuickPalm plugin
In-Reply-To: <bug-639-194@http.fiji.sc/bugzilla/>
References: <bug-639-194@http.fiji.sc/bugzilla/>
Message-ID: <bug-639-194-rBE9IMzQ1f@http.fiji.sc/bugzilla/>

http://fiji.sc/bugzilla/show_bug.cgi?id=639

Curtis Rueden <ctrueden at wisc.edu> changed:

           What    |Removed                     |Added
----------------------------------------------------------------------------
                 CC|                            |ctrueden at wisc.edu

--- Comment #1 from Curtis Rueden <ctrueden at wisc.edu> ---
Thanks for the bug report. I would suggest sticking with ImageJ1 when using
ImageJ1 macros on the cluster. While we are making a best effort to support
IJ1-style macros from ImageJ2, doing so is quite complex and it is safest to
use the stable version of ImageJ for macros. It may be quite some time before
we can address this bug in ImageJ2.

-- 
You are receiving this mail because:
You are the assignee for the bug.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20130814/607c83b9/attachment.html>

From ctrueden at wisc.edu  Thu Aug 15 10:35:21 2013
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Thu, 15 Aug 2013 10:35:21 -0500
Subject: [ImageJ-devel] DefaultAutoscaleService - Concurrency Issue
In-Reply-To: <520CC8AA.9000101@gmx.de>
References: <520CC8AA.9000101@gmx.de>
Message-ID: <CADN69ykkpx82H3x9nCJaOAYowVPOzQduCLyQdBDmh-uRGQF8aA@mail.gmail.com>

Hi Michael,

> we have a race condition problem using the DefaultAutoscaleService. If
> the methods() method is called from several threads at the same time
> the first invocation will enter buildDataStructures and generate the
> methods object. However the 2nd... invocation can pass the "if
> condition" even if methods has not yet been filled by
> buildDataStructures.

Yes, many of the ImageJ2, SciJava Common and SCIFIO services have been
updated to initialize their data structures only as needed. This has
greatly sped up context creation, at the cost of potential threading issues
and unintuitive code execution order. Services patterned this way are known
to be *not* thread-safe, so your workaround is the short-term solution here.

> Our workaround synchronizes some of our code but it would be more
> efficient if the DefaultAutoscaleService could handle this.

We need to make a decision about whether services patterned this way should
be thread-safe or not. They probably should be, but it's tricky. What I
want to avoid is the negative performance impact of synchronizing when not
completely necessary.

I filed a ticket for this work:
http://trac.imagej.net/ticket/1980

Regards,
Curtis


On Thu, Aug 15, 2013 at 7:25 AM, Michael Zinsmaier <michael.zinsmaier at gmx.de
> wrote:

> Hi Curtis,
>
> we have a race condition problem using the DefaultAutoscaleService. If the
> methods() method is called from several threads at the same
> time the first invocation will enter buildDataStructures and generate the
> methods object. However the 2nd... invocation can pass the "if condition"
> even if methods has not yet been filled by buildDataStructures.
>
> This happens in KNIP if we execute several plugins that rely on this
> service at the same time (and for the first time).
> Our workaround synchronizes some of our code but it would be more
> efficient if the DefaultAutoscaleService could handle this.
>
> Best regards Michael
>
> ------------------------------**------------------------------**
> -----------------
>
> DefaultAutoscaleService
>
>     private void buildDataStructures() {
>         methods = new ConcurrentHashMap<String, AutoscaleMethod>();
>         methodNames = new ArrayList<String>();
>         for (final AutoscaleMethod method : getInstances()) {
>             final String name = method.getInfo().getName();
>             methods.put(name, method);
>             methodNames.add(name);
>         }
>     }
>
>     private Map<? extends String, ? extends AutoscaleMethod> methods() {
>         if (methods == null) buildDataStructures();
>         return methods;
>     }
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20130815/86586f71/attachment.html>

From michael at doube.net  Sat Aug 17 05:16:16 2013
From: michael at doube.net (Michael Doube)
Date: Sat, 17 Aug 2013 12:16:16 +0200
Subject: [ImageJ-devel] 'Freeze' button
Message-ID: <520F4D70.4020607@doube.net>

Hi everyone,

One of the things which has bugged me for a while about Fiji in
particular and which might affect IJ2 is that it is quite hard to define
the state of the program when you have to describe it in a scientific
paper, because there aren't atomic versions easily accessible to users,
which encapsulate the entire state of the IJ system.

You could, I suppose, go to Help > ImageJ and get the IJ and Java
versions, and then go to Help > About plugins and get some information.
But, that relies on plugin authors including a method containing that
info, which they often don't do.

Further, what happens when libraries are changing in the back end, which
don't relate to those version numbers, but which those plugins might
use? Or when they use methods from other classes unbeknown to the user?

In other words, if you want to repeat the experiment, how do you restore
the conditions and get the code configuration back? Is copying the whole
Fiji.app directory the only way?

I am imagining a Git-like hash which relates to a unique configuration
and which anyone can reproduce by entering the same hash - like checking
out a commit, you would check out a config.

Michael


From ctrueden at wisc.edu  Mon Aug 19 13:56:03 2013
From: ctrueden at wisc.edu (Curtis Rueden)
Date: Mon, 19 Aug 2013 13:56:03 -0500
Subject: [ImageJ-devel] 'Freeze' button
In-Reply-To: <520F4D70.4020607@doube.net>
References: <520F4D70.4020607@doube.net>
Message-ID: <CADN69ymxskvjF3J6Hnup9ngOSGN-9cPLf+ZyN0LOW-hCCuS1Hw@mail.gmail.com>

Hi Michael,

> It is quite hard to define the state of the program when you have to
> describe it in a scientific paper, because there aren't atomic
> versions easily accessible to users, which encapsulate the entire
> state of the IJ system.

I agree completely, and filed ticket #1987 to record the need for this:

    http://trac.imagej.net/ticket/1987

Regards,
Curtis


On Sat, Aug 17, 2013 at 5:16 AM, Michael Doube <michael at doube.net> wrote:

> Hi everyone,
>
> One of the things which has bugged me for a while about Fiji in
> particular and which might affect IJ2 is that it is quite hard to define
> the state of the program when you have to describe it in a scientific
> paper, because there aren't atomic versions easily accessible to users,
> which encapsulate the entire state of the IJ system.
>
> You could, I suppose, go to Help > ImageJ and get the IJ and Java
> versions, and then go to Help > About plugins and get some information.
> But, that relies on plugin authors including a method containing that
> info, which they often don't do.
>
> Further, what happens when libraries are changing in the back end, which
> don't relate to those version numbers, but which those plugins might
> use? Or when they use methods from other classes unbeknown to the user?
>
> In other words, if you want to repeat the experiment, how do you restore
> the conditions and get the code configuration back? Is copying the whole
> Fiji.app directory the only way?
>
> I am imagining a Git-like hash which relates to a unique configuration
> and which anyone can reproduce by entering the same hash - like checking
> out a commit, you would check out a config.
>
> Michael
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20130819/89091cf0/attachment.html>

From michael at doube.net  Tue Aug 20 14:13:58 2013
From: michael at doube.net (Michael Doube)
Date: Tue, 20 Aug 2013 20:13:58 +0100
Subject: [ImageJ-devel] 'Freeze' button
In-Reply-To: <CADN69ymxskvjF3J6Hnup9ngOSGN-9cPLf+ZyN0LOW-hCCuS1Hw@mail.gmail.com>
References: <520F4D70.4020607@doube.net>
	<CADN69ymxskvjF3J6Hnup9ngOSGN-9cPLf+ZyN0LOW-hCCuS1Hw@mail.gmail.com>
Message-ID: <5213BFF6.6010507@doube.net>

Hi Curtis,

>> It is quite hard to define the state of the program when you have to
>> describe it in a scientific paper, because there aren't atomic
>> versions easily accessible to users, which encapsulate the entire
>> state of the IJ system.
> 
> I agree completely, and filed ticket #1987 to record the need for this:

You could argue further that the JRE and maybe OS could have an
influence too, and these might need to be at least logged somewhere.

Glad to see the ticket, hopefully we will be able to contribute some
engineer power to it from London.

Michael




From michael at doube.net  Tue Aug 20 14:21:00 2013
From: michael at doube.net (Michael Doube)
Date: Tue, 20 Aug 2013 20:21:00 +0100
Subject: [ImageJ-devel] 'Freeze' button
In-Reply-To: <CAC6ppSZ+OV-gtSZM2bcHObM6f+8SHqK4nVv+NaBVHkOVP+tMFg@mail.gmail.com>
References: <e3b6c60ea70645129132c0bfdf9e7d60@HUB02.ad.oak.ox.ac.uk>
	<CAC6ppSZ+OV-gtSZM2bcHObM6f+8SHqK4nVv+NaBVHkOVP+tMFg@mail.gmail.com>
Message-ID: <5213C19C.9010109@doube.net>


> It would be nice to have numbered Fiji releases that can be referred
> back to (and even better, rolled back to) at a later date. i.e.
> something like:-
>   http://rsbweb.nih.gov/ij/download/src/
>   http://developer.imagej.net/downloads

Or...
https://github.com/mdoube/BoneJ/releases

> but via the updater, and with all dependencies frozen.
+1

> Not sure how painful that would be to implement, but so long as you
> don't need to cache too many versions and their dependencies I guess
> it shouldn't be unbearable.

What about using git tags and on request, checking out and building that
release ready for download? Would take some time to build, for sure -
popular builds could get cached and old ones deleted - fresh builds
would email with a notification when ready for download.

> I usually advise co-workers *not* to update Fiji / ImageJ when they
> are in the middle of some important analysis task because updates can
> be a double-edged sword.
+1

Michael


From markehammons at gmail.com  Wed Aug 21 10:10:41 2013
From: markehammons at gmail.com (Mark Hammons)
Date: Wed, 21 Aug 2013 17:10:41 +0200
Subject: [ImageJ-devel] Wanting to make an application that runs ImageJ
	macros...
Message-ID: <1457487.IPNN4tf3Nu@localhost.localdomain>

So, I'm wanting to make a simple application that takes an imagej macro and a 
path to an image, and runs the macro on the image, just using the imagej2 
libs. Is this doable? Is it doable without an xserver being available? Thanks 
:)


From graemeball at googlemail.com  Sat Aug 17 07:56:55 2013
From: graemeball at googlemail.com (Graeme Ball)
Date: Sat, 17 Aug 2013 13:56:55 +0100
Subject: [ImageJ-devel] 'Freeze' button
In-Reply-To: <e3b6c60ea70645129132c0bfdf9e7d60@HUB02.ad.oak.ox.ac.uk>
References: <e3b6c60ea70645129132c0bfdf9e7d60@HUB02.ad.oak.ox.ac.uk>
Message-ID: <CAC6ppSZ+OV-gtSZM2bcHObM6f+8SHqK4nVv+NaBVHkOVP+tMFg@mail.gmail.com>

I agree, reproducible analysis is extremely important.

It would be nice to have numbered Fiji releases that can be referred
back to (and even better, rolled back to) at a later date. i.e.
something like:-
  http://rsbweb.nih.gov/ij/download/src/
  http://developer.imagej.net/downloads
but via the updater, and with all dependencies frozen.

Not sure how painful that would be to implement, but so long as you
don't need to cache too many versions and their dependencies I guess
it shouldn't be unbearable.

A lot of people seem to get annoyed by the constant update requests,
so it would also be nice to have the option to update only to such
numbered releases as they come out (one a week / month / quarter?)

In the meantime, the obvious workaround to ensure some important
analysis can be reproduced at a later date is to turn off the updater
and archive the whole Fiji / ImageJ app. At ~200M zipped for Fiji
that's not ideal.

I usually advise co-workers *not* to update Fiji / ImageJ when they
are in the middle of some important analysis task because updates can
be a double-edged sword.

Regards,

Graeme

PS. I realise this is not a Fiji list, but since Fiji / IJ2 use the
same updater I figured it's not too far off-topic

On Sat, Aug 17, 2013 at 11:16 AM, Michael Doube <michael at doube.net> wrote:
> Hi everyone,
>
> One of the things which has bugged me for a while about Fiji in
> particular and which might affect IJ2 is that it is quite hard to define
> the state of the program when you have to describe it in a scientific
> paper, because there aren't atomic versions easily accessible to users,
> which encapsulate the entire state of the IJ system.
>
> You could, I suppose, go to Help > ImageJ and get the IJ and Java
> versions, and then go to Help > About plugins and get some information.
> But, that relies on plugin authors including a method containing that
> info, which they often don't do.
>
> Further, what happens when libraries are changing in the back end, which
> don't relate to those version numbers, but which those plugins might
> use? Or when they use methods from other classes unbeknown to the user?
>
> In other words, if you want to repeat the experiment, how do you restore
> the conditions and get the code configuration back? Is copying the whole
> Fiji.app directory the only way?
>
> I am imagining a Git-like hash which relates to a unique configuration
> and which anyone can reproduce by entering the same hash - like checking
> out a commit, you would check out a config.
>
> Michael
>
> _______________________________________________
> ImageJ-devel mailing list
> ImageJ-devel at imagej.net
> http://imagej.net/mailman/listinfo/imagej-devel


From bjoern.thiel at mpibpc.mpg.de  Thu Aug 29 02:11:03 2013
From: bjoern.thiel at mpibpc.mpg.de (Thiel, Bjoern)
Date: Thu, 29 Aug 2013 07:11:03 +0000
Subject: [ImageJ-devel] Serious Bug in 'Plot Profile' coordinates
Message-ID: <A95B35147B8F8C468FB0577B2270B4553FBDF765@UM-excdag-a02.um.gwdg.de>

Analyzing an image of 3.9 x 3.9 microns (130 x 130 pixels) with a profile plot 
I get false coordinates indicating only integer distances (of e.g. 2.0 microns) 
while the plots seem to range over fractional distances (of e.g. 2.4 microns). 

The reason for it is the rounding in line 184 of ProfilePlot.java
   double length = Math.round(Math.sqrt(dx*dx + dy*dy));
that gives xInc the wrong value.

I'm afraid but this seems to be a serious bug.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: Measurement1.tif
Type: image/tiff
Size: 71244 bytes
Desc: Measurement1.tif
URL: <http://imagej.net/pipermail/imagej-devel/attachments/20130829/a69dcc00/attachment-0001.tif>

From G.Landini at bham.ac.uk  Thu Aug 29 04:42:06 2013
From: G.Landini at bham.ac.uk (Gabriel Landini)
Date: Thu, 29 Aug 2013 10:42:06 +0100
Subject: [ImageJ-devel] Serious Bug in 'Plot Profile' coordinates
In-Reply-To: <A95B35147B8F8C468FB0577B2270B4553FBDF765@UM-excdag-a02.um.gwdg.de>
References: <A95B35147B8F8C468FB0577B2270B4553FBDF765@UM-excdag-a02.um.gwdg.de>
Message-ID: <2642601.loxuA8thEe@linux-pict>

On Thursday 29 Aug 2013 08:11:03 Thiel, Bjoern wrote:
> Analyzing an image of 3.9 x 3.9 microns (130 x 130 pixels) with a profile
> plot I get false coordinates indicating only integer distances (of e.g. 2.0
> microns) while the plots seem to range over fractional distances (of e.g.
> 2.4 microns).

Very odd. Pixel width is 0.0300000... and indeed the plot shows only an 
integer maximum values in live mode. This is not the case if you create a new 
image and assign a calibration to it.

Note that if I remove the scale from your image:

run("Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");

and then add it again:

run("Properties...", "channels=1 slices=1 frames=1 unit=pixel pixel_width=0.03 
pixel_height=0.03 voxel_depth=0.03 frame=[0 sec] origin=0,0");

the scale works as expected.

Also if I create an image, assign that scaling save it and load it again it 
still works fine. So far this seems to happen with that image only. I do not 
know what is exactly going on, for sure Wayne would nail this bug.

Cheers

Gabriel



